	.text
	.file	"rdopt.c"
	.globl	clear_rdopt             # -- Begin function clear_rdopt
	.p2align	4, 0x90
	.type	clear_rdopt,@function
clear_rdopt:                            # @clear_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cofDC, %rdi
	callq	free_mem_DCcoeff
	movq	cofAC, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC8x8, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC4x4intern, %rdi
	callq	free_mem_ACcoeff
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB0_2
# %bb.1:                                # %if.then
	movq	cofAC_8x8ts, %rdi
	callq	free_mem_ACcoeff
.LBB0_2:                                # %if.end
	movq	cs_mb, %rdi
	callq	delete_coding_state
	movq	cs_b8, %rdi
	callq	delete_coding_state
	movq	cs_cm, %rdi
	callq	delete_coding_state
	movq	cs_imb, %rdi
	callq	delete_coding_state
	movq	cs_ib8, %rdi
	callq	delete_coding_state
	movq	cs_ib4, %rdi
	callq	delete_coding_state
	movq	cs_pc, %rdi
	callq	delete_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	clear_rdopt, .Lfunc_end0-clear_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	init_rdopt              # -- Begin function init_rdopt
	.p2align	4, 0x90
	.type	init_rdopt,@function
init_rdopt:                             # @init_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, rdopt
	movabsq	$cofDC, %rdi
	callq	get_mem_DCcoeff
	movabsq	$cofAC, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC8x8, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC4x4intern, %rdi
	callq	get_mem_ACcoeff
	movq	cofAC4x4intern, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, cofAC4x4
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB1_2
# %bb.1:                                # %if.then
	movabsq	$cofAC_8x8ts, %rdi
	callq	get_mem_ACcoeff
.LBB1_2:                                # %if.end
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_mb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_b8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_cm
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_imb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib4
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_pc
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	init_rdopt, .Lfunc_end1-init_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap          # -- Begin function UpdatePixelMap
	.p2align	4, 0x90
	.type	UpdatePixelMap,@function
UpdatePixelMap:                         # @UpdatePixelMap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_UpdatePixelMap.49
	callq	UpdatePixelMap.49
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_UpdatePixelMap.59
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_UpdatePixelMap.61
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_UpdatePixelMap.84
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	UpdatePixelMap, .Lfunc_end2-UpdatePixelMap
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef   # -- Begin function CheckReliabilityOfRef
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef,@function
CheckReliabilityOfRef:                  # @CheckReliabilityOfRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_CheckReliabilityOfRef.4
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.4
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_CheckReliabilityOfRef.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.69
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_CheckReliabilityOfRef.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.79
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_CheckReliabilityOfRef.89
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.89
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	CheckReliabilityOfRef, .Lfunc_end3-CheckReliabilityOfRef
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks # -- Begin function RDCost_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks,@function
RDCost_for_4x4IntraBlocks:              # @RDCost_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	vmovsd	%xmm1, -56(%rbp)        # 8-byte Spill
	vmovsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_RDCost_for_4x4IntraBlocks.14
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.14
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_RDCost_for_4x4IntraBlocks.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.34
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_RDCost_for_4x4IntraBlocks.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.38
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_RDCost_for_4x4IntraBlocks.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.90
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	RDCost_for_4x4IntraBlocks, .Lfunc_end4-RDCost_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma # -- Begin function RDCost_for_4x4Blocks_Chroma
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma,@function
RDCost_for_4x4Blocks_Chroma:            # @RDCost_for_4x4Blocks_Chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_RDCost_for_4x4Blocks_Chroma.7
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_RDCost_for_4x4Blocks_Chroma.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_RDCost_for_4x4Blocks_Chroma.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_RDCost_for_4x4Blocks_Chroma.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.77
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	RDCost_for_4x4Blocks_Chroma, .Lfunc_end5-RDCost_for_4x4Blocks_Chroma
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_4x4IntraBlocks # -- Begin function Mode_Decision_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks,@function
Mode_Decision_for_4x4IntraBlocks:       # @Mode_Decision_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Mode_Decision_for_4x4IntraBlocks.23
	movl	%ebx, %edi
	movl	%r15d, %esi
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Mode_Decision_for_4x4IntraBlocks.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Mode_Decision_for_4x4IntraBlocks.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Mode_Decision_for_4x4IntraBlocks.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Mode_Decision_for_4x4IntraBlocks, .Lfunc_end6-Mode_Decision_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_8x8IntraBlocks # -- Begin function Mode_Decision_for_8x8IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks,@function
Mode_Decision_for_8x8IntraBlocks:       # @Mode_Decision_for_8x8IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_Mode_Decision_for_8x8IntraBlocks.2
	movl	%ebx, %edi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.2
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_Mode_Decision_for_8x8IntraBlocks.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.43
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_Mode_Decision_for_8x8IntraBlocks.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.70
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_Mode_Decision_for_8x8IntraBlocks.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.71
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	Mode_Decision_for_8x8IntraBlocks, .Lfunc_end7-Mode_Decision_for_8x8IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock # -- Begin function Mode_Decision_for_Intra4x4Macroblock
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock,@function
Mode_Decision_for_Intra4x4Macroblock:   # @Mode_Decision_for_Intra4x4Macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	vmovsd	%xmm0, -16(%rbp)        # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_Mode_Decision_for_Intra4x4Macroblock.5
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_Mode_Decision_for_Intra4x4Macroblock.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_Mode_Decision_for_Intra4x4Macroblock.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_Mode_Decision_for_Intra4x4Macroblock.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	Mode_Decision_for_Intra4x4Macroblock, .Lfunc_end8-Mode_Decision_for_Intra4x4Macroblock
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_8x8blocks    # -- Begin function RDCost_for_8x8blocks
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks,@function
RDCost_for_8x8blocks:                   # @RDCost_for_8x8blocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movq	%rsi, %r15
	movq	%rdi, %r14
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_RDCost_for_8x8blocks.31
	movq	%r14, %rdi
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.31
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_RDCost_for_8x8blocks.62
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.62
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_RDCost_for_8x8blocks.63
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.63
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_RDCost_for_8x8blocks.93
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.93
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r15d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	RDCost_for_8x8blocks, .Lfunc_end9-RDCost_for_8x8blocks
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset               # -- Begin function I16Offset
	.p2align	4, 0x90
	.type	I16Offset,@function
I16Offset:                              # @I16Offset
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_2
# %bb.1:                                # %func_I16Offset.30
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_I16Offset.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end10:
	.size	I16Offset, .Lfunc_end10-I16Offset
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks # -- Begin function SetModesAndRefframeForBlocks
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks,@function
SetModesAndRefframeForBlocks:           # @SetModesAndRefframeForBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SetModesAndRefframeForBlocks.50
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SetModesAndRefframeForBlocks.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SetModesAndRefframeForBlocks.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.86
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SetModesAndRefframeForBlocks.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SetModesAndRefframeForBlocks, .Lfunc_end11-SetModesAndRefframeForBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision # -- Begin function Intra16x16_Mode_Decision
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision,@function
Intra16x16_Mode_Decision:               # @Intra16x16_Mode_Decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_Intra16x16_Mode_Decision.24
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_Intra16x16_Mode_Decision.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_Intra16x16_Mode_Decision.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.58
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_Intra16x16_Mode_Decision.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	Intra16x16_Mode_Decision, .Lfunc_end12-Intra16x16_Mode_Decision
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8 # -- Begin function SetCoeffAndReconstruction8x8
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8,@function
SetCoeffAndReconstruction8x8:           # @SetCoeffAndReconstruction8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SetCoeffAndReconstruction8x8.1
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetCoeffAndReconstruction8x8.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetCoeffAndReconstruction8x8.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.87
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetCoeffAndReconstruction8x8.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.94
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SetCoeffAndReconstruction8x8, .Lfunc_end13-SetCoeffAndReconstruction8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8              # -- Begin function StoreMV8x8
	.p2align	4, 0x90
	.type	StoreMV8x8,@function
StoreMV8x8:                             # @StoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_StoreMV8x8.22
	movl	%ebx, %edi
	callq	StoreMV8x8.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_StoreMV8x8.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_StoreMV8x8.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.42
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_StoreMV8x8.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	StoreMV8x8, .Lfunc_end14-StoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8            # -- Begin function RestoreMV8x8
	.p2align	4, 0x90
	.type	RestoreMV8x8,@function
RestoreMV8x8:                           # @RestoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_RestoreMV8x8.6
	movl	%ebx, %edi
	callq	RestoreMV8x8.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_RestoreMV8x8.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_RestoreMV8x8.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_RestoreMV8x8.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	RestoreMV8x8, .Lfunc_end15-RestoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB      # -- Begin function SetMotionVectorsMB
	.p2align	4, 0x90
	.type	SetMotionVectorsMB,@function
SetMotionVectorsMB:                     # @SetMotionVectorsMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_SetMotionVectorsMB.15
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_SetMotionVectorsMB.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_SetMotionVectorsMB.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_SetMotionVectorsMB.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	SetMotionVectorsMB, .Lfunc_end16-SetMotionVectorsMB
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_macroblocks  # -- Begin function RDCost_for_macroblocks
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks,@function
RDCost_for_macroblocks:                 # @RDCost_for_macroblocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %r15
	movl	%edi, %ebx
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_RDCost_for_macroblocks.10
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_RDCost_for_macroblocks.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_RDCost_for_macroblocks.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_RDCost_for_macroblocks.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	RDCost_for_macroblocks, .Lfunc_end17-RDCost_for_macroblocks
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters # -- Begin function store_macroblock_parameters
	.p2align	4, 0x90
	.type	store_macroblock_parameters,@function
store_macroblock_parameters:            # @store_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_store_macroblock_parameters.46
	movl	%ebx, %edi
	callq	store_macroblock_parameters.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_store_macroblock_parameters.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_store_macroblock_parameters.68
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.68
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_store_macroblock_parameters.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.73
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	store_macroblock_parameters, .Lfunc_end18-store_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters # -- Begin function set_stored_macroblock_parameters
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters,@function
set_stored_macroblock_parameters:       # @set_stored_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_set_stored_macroblock_parameters.17
	callq	set_stored_macroblock_parameters.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_set_stored_macroblock_parameters.64
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_set_stored_macroblock_parameters.75
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_set_stored_macroblock_parameters.82
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	set_stored_macroblock_parameters, .Lfunc_end19-set_stored_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors  # -- Begin function SetRefAndMotionVectors
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors,@function
SetRefAndMotionVectors:                 # @SetRefAndMotionVectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_SetRefAndMotionVectors.3
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_SetRefAndMotionVectors.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_SetRefAndMotionVectors.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_SetRefAndMotionVectors.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	SetRefAndMotionVectors, .Lfunc_end20-SetRefAndMotionVectors
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference    # -- Begin function field_flag_inference
	.p2align	4, 0x90
	.type	field_flag_inference,@function
field_flag_inference:                   # @field_flag_inference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_2
# %bb.1:                                # %func_field_flag_inference.9
	callq	field_flag_inference.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_field_flag_inference.13
	.cfi_def_cfa %rbp, 16
	callq	field_flag_inference.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end21:
	.size	field_flag_inference, .Lfunc_end21-field_flag_inference
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8         # -- Begin function StoreMVBlock8x8
	.p2align	4, 0x90
	.type	StoreMVBlock8x8,@function
StoreMVBlock8x8:                        # @StoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_StoreMVBlock8x8.44
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.44
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_StoreMVBlock8x8.96
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreMVBlock8x8.96
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_StoreMVBlock8x8.99
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.99
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_StoreMVBlock8x8.100
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.100
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	StoreMVBlock8x8, .Lfunc_end22-StoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8       # -- Begin function RestoreMVBlock8x8
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8,@function
RestoreMVBlock8x8:                      # @RestoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_RestoreMVBlock8x8.27
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.27
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_RestoreMVBlock8x8.66
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	RestoreMVBlock8x8.66
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_RestoreMVBlock8x8.72
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.72
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_RestoreMVBlock8x8.85
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.85
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	RestoreMVBlock8x8, .Lfunc_end23-RestoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8 # -- Begin function StoreNewMotionVectorsBlock8x8
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8,@function
StoreNewMotionVectorsBlock8x8:          # @StoreNewMotionVectorsBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_StoreNewMotionVectorsBlock8x8.11
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.11
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_StoreNewMotionVectorsBlock8x8.65
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.65
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_StoreNewMotionVectorsBlock8x8.67
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.67
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_StoreNewMotionVectorsBlock8x8.74
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.74
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	StoreNewMotionVectorsBlock8x8, .Lfunc_end24-StoreNewMotionVectorsBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8    # -- Begin function GetBestTransformP8x8
	.p2align	4, 0x90
	.type	GetBestTransformP8x8,@function
GetBestTransformP8x8:                   # @GetBestTransformP8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_GetBestTransformP8x8.20
	callq	GetBestTransformP8x8.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_GetBestTransformP8x8.36
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_GetBestTransformP8x8.91
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.91
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_GetBestTransformP8x8.95
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.95
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	GetBestTransformP8x8, .Lfunc_end25-GetBestTransformP8x8
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_macroblock   # -- Begin function encode_one_macroblock
	.p2align	4, 0x90
	.type	encode_one_macroblock,@function
encode_one_macroblock:                  # @encode_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_encode_one_macroblock.28
	callq	encode_one_macroblock.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_encode_one_macroblock.32
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_encode_one_macroblock.56
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.56
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_encode_one_macroblock.57
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	encode_one_macroblock, .Lfunc_end26-encode_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters    # -- Begin function set_mbaff_parameters
	.p2align	4, 0x90
	.type	set_mbaff_parameters,@function
set_mbaff_parameters:                   # @set_mbaff_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB27_5
# %bb.1:                                # %func_set_mbaff_parameters.35
	callq	set_mbaff_parameters.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_set_mbaff_parameters.53
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.53
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_3:                               # %func_set_mbaff_parameters.97
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.97
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_4:                               # %func_set_mbaff_parameters.98
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.98
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB27_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB27_3
	jmp	.LBB27_4
.Lfunc_end27:
	.size	set_mbaff_parameters, .Lfunc_end27-set_mbaff_parameters
	.cfi_endproc
                                        # -- End function
	.globl	store_coding_state_cs_cm # -- Begin function store_coding_state_cs_cm
	.p2align	4, 0x90
	.type	store_coding_state_cs_cm,@function
store_coding_state_cs_cm:               # @store_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	store_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	store_coding_state_cs_cm, .Lfunc_end28-store_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	reset_coding_state_cs_cm # -- Begin function reset_coding_state_cs_cm
	.p2align	4, 0x90
	.type	reset_coding_state_cs_cm,@function
reset_coding_state_cs_cm:               # @reset_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	reset_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	reset_coding_state_cs_cm, .Lfunc_end29-reset_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.1 # -- Begin function SetCoeffAndReconstruction8x8.1
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.1,@function
SetCoeffAndReconstruction8x8.1:         # @SetCoeffAndReconstruction8x8.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$894857540, -40(%rbp)   # imm = 0x35567144
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB30_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB30_4
.LBB30_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB30_4
.LBB30_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB30_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB30_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB30_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB30_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB30_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_6
.LBB30_9:                               # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB30_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB30_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	$0, -4(%rbp)
.LBB30_13:                              # %for.cond20
                                        #   Parent Loop BB30_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB30_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB30_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_13
.LBB30_16:                              # %for.end52
                                        #   in Loop: Header=BB30_11 Depth=1
	jmp	.LBB30_17
.LBB30_17:                              # %for.inc53
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_11
.LBB30_18:                              # %for.end55
	jmp	.LBB30_28
.LBB30_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB30_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB30_20 Depth=1
	movl	$0, -4(%rbp)
.LBB30_22:                              # %for.cond60
                                        #   Parent Loop BB30_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_22
.LBB30_25:                              # %for.end86
                                        #   in Loop: Header=BB30_20 Depth=1
	jmp	.LBB30_26
.LBB30_26:                              # %for.inc87
                                        #   in Loop: Header=BB30_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_20
.LBB30_27:                              # %for.end89
	jmp	.LBB30_28
.LBB30_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB30_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB30_29 Depth=1
	movl	$0, -4(%rbp)
.LBB30_31:                              # %for.cond94
                                        #   Parent Loop BB30_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB30_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB30_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB30_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB30_35
.LBB30_34:                              # %cond.false127
                                        #   in Loop: Header=BB30_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB30_35
.LBB30_35:                              # %cond.end128
                                        #   in Loop: Header=BB30_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB30_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_31
.LBB30_37:                              # %for.end141
                                        #   in Loop: Header=BB30_29 Depth=1
	jmp	.LBB30_38
.LBB30_38:                              # %for.inc142
                                        #   in Loop: Header=BB30_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_29
.LBB30_39:                              # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB30_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB30_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	$0, -4(%rbp)
.LBB30_43:                              # %for.cond151
                                        #   Parent Loop BB30_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB30_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB30_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB30_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB30_47
.LBB30_46:                              # %cond.false185
                                        #   in Loop: Header=BB30_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB30_47
.LBB30_47:                              # %cond.end186
                                        #   in Loop: Header=BB30_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB30_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_43
.LBB30_49:                              # %for.end200
                                        #   in Loop: Header=BB30_41 Depth=1
	jmp	.LBB30_50
.LBB30_50:                              # %for.inc201
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_41
.LBB30_51:                              # %for.end203
	jmp	.LBB30_52
.LBB30_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB30_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_55 Depth 2
                                        #       Child Loop BB30_57 Depth 3
                                        #         Child Loop BB30_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB30_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB30_53 Depth=1
	movl	$0, -12(%rbp)
.LBB30_55:                              # %for.cond209
                                        #   Parent Loop BB30_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_57 Depth 3
                                        #         Child Loop BB30_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB30_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB30_55 Depth=2
	movl	$0, -8(%rbp)
.LBB30_57:                              # %for.cond213
                                        #   Parent Loop BB30_53 Depth=1
                                        #     Parent Loop BB30_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB30_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB30_57 Depth=3
	movl	$0, -4(%rbp)
.LBB30_59:                              # %for.cond217
                                        #   Parent Loop BB30_53 Depth=1
                                        #     Parent Loop BB30_55 Depth=2
                                        #       Parent Loop BB30_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB30_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB30_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB30_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_59
.LBB30_62:                              # %for.end239
                                        #   in Loop: Header=BB30_57 Depth=3
	jmp	.LBB30_63
.LBB30_63:                              # %for.inc240
                                        #   in Loop: Header=BB30_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_57
.LBB30_64:                              # %for.end242
                                        #   in Loop: Header=BB30_55 Depth=2
	jmp	.LBB30_65
.LBB30_65:                              # %for.inc243
                                        #   in Loop: Header=BB30_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_55
.LBB30_66:                              # %for.end245
                                        #   in Loop: Header=BB30_53 Depth=1
	jmp	.LBB30_67
.LBB30_67:                              # %for.inc246
                                        #   in Loop: Header=BB30_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_53
.LBB30_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB30_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB30_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB30_83
.LBB30_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB30_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB30_72 Depth=1
	movl	$0, -4(%rbp)
.LBB30_74:                              # %for.cond262
                                        #   Parent Loop BB30_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB30_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB30_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB30_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB30_78
.LBB30_77:                              # %if.else278
                                        #   in Loop: Header=BB30_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB30_78:                              # %if.end283
                                        #   in Loop: Header=BB30_74 Depth=2
	jmp	.LBB30_79
.LBB30_79:                              # %for.inc284
                                        #   in Loop: Header=BB30_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_74
.LBB30_80:                              # %for.end286
                                        #   in Loop: Header=BB30_72 Depth=1
	jmp	.LBB30_81
.LBB30_81:                              # %for.inc287
                                        #   in Loop: Header=BB30_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_72
.LBB30_82:                              # %for.end289
	jmp	.LBB30_95
.LBB30_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB30_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB30_84 Depth=1
	movl	$0, -4(%rbp)
.LBB30_86:                              # %for.cond297
                                        #   Parent Loop BB30_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB30_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB30_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB30_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB30_90
.LBB30_89:                              # %if.else317
                                        #   in Loop: Header=BB30_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB30_90:                              # %if.end326
                                        #   in Loop: Header=BB30_86 Depth=2
	jmp	.LBB30_91
.LBB30_91:                              # %for.inc327
                                        #   in Loop: Header=BB30_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_86
.LBB30_92:                              # %for.end329
                                        #   in Loop: Header=BB30_84 Depth=1
	jmp	.LBB30_93
.LBB30_93:                              # %for.inc330
                                        #   in Loop: Header=BB30_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_84
.LBB30_94:                              # %for.end332
	jmp	.LBB30_95
.LBB30_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB30_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB30_96 Depth=1
	movl	$0, -4(%rbp)
.LBB30_98:                              # %for.cond338
                                        #   Parent Loop BB30_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB30_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB30_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_98
.LBB30_101:                             # %for.end384
                                        #   in Loop: Header=BB30_96 Depth=1
	jmp	.LBB30_102
.LBB30_102:                             # %for.inc385
                                        #   in Loop: Header=BB30_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_96
.LBB30_103:                             # %for.end387
	jmp	.LBB30_157
.LBB30_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB30_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_107 Depth 2
                                        #       Child Loop BB30_109 Depth 3
                                        #         Child Loop BB30_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB30_105 Depth=1
	movl	$0, -12(%rbp)
.LBB30_107:                             # %for.cond394
                                        #   Parent Loop BB30_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_109 Depth 3
                                        #         Child Loop BB30_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB30_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB30_107 Depth=2
	movl	$0, -8(%rbp)
.LBB30_109:                             # %for.cond398
                                        #   Parent Loop BB30_105 Depth=1
                                        #     Parent Loop BB30_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB30_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB30_109 Depth=3
	movl	$0, -4(%rbp)
.LBB30_111:                             # %for.cond402
                                        #   Parent Loop BB30_105 Depth=1
                                        #     Parent Loop BB30_107 Depth=2
                                        #       Parent Loop BB30_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB30_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB30_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB30_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_111
.LBB30_114:                             # %for.end425
                                        #   in Loop: Header=BB30_109 Depth=3
	jmp	.LBB30_115
.LBB30_115:                             # %for.inc426
                                        #   in Loop: Header=BB30_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_109
.LBB30_116:                             # %for.end428
                                        #   in Loop: Header=BB30_107 Depth=2
	jmp	.LBB30_117
.LBB30_117:                             # %for.inc429
                                        #   in Loop: Header=BB30_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_107
.LBB30_118:                             # %for.end431
                                        #   in Loop: Header=BB30_105 Depth=1
	jmp	.LBB30_119
.LBB30_119:                             # %for.inc432
                                        #   in Loop: Header=BB30_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_105
.LBB30_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB30_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB30_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB30_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB30_136
.LBB30_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB30_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB30_125 Depth=1
	movl	$0, -4(%rbp)
.LBB30_127:                             # %for.cond458
                                        #   Parent Loop BB30_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB30_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB30_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB30_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB30_131
.LBB30_130:                             # %if.else478
                                        #   in Loop: Header=BB30_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB30_131:                             # %if.end483
                                        #   in Loop: Header=BB30_127 Depth=2
	jmp	.LBB30_132
.LBB30_132:                             # %for.inc484
                                        #   in Loop: Header=BB30_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_127
.LBB30_133:                             # %for.end486
                                        #   in Loop: Header=BB30_125 Depth=1
	jmp	.LBB30_134
.LBB30_134:                             # %for.inc487
                                        #   in Loop: Header=BB30_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_125
.LBB30_135:                             # %for.end489
	jmp	.LBB30_148
.LBB30_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB30_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB30_137 Depth=1
	movl	$0, -4(%rbp)
.LBB30_139:                             # %for.cond498
                                        #   Parent Loop BB30_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB30_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB30_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB30_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB30_143
.LBB30_142:                             # %if.else518
                                        #   in Loop: Header=BB30_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB30_143:                             # %if.end527
                                        #   in Loop: Header=BB30_139 Depth=2
	jmp	.LBB30_144
.LBB30_144:                             # %for.inc528
                                        #   in Loop: Header=BB30_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_139
.LBB30_145:                             # %for.end530
                                        #   in Loop: Header=BB30_137 Depth=1
	jmp	.LBB30_146
.LBB30_146:                             # %for.inc531
                                        #   in Loop: Header=BB30_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_137
.LBB30_147:                             # %for.end533
	jmp	.LBB30_148
.LBB30_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB30_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB30_149 Depth=1
	movl	$0, -4(%rbp)
.LBB30_151:                             # %for.cond539
                                        #   Parent Loop BB30_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB30_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB30_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_151
.LBB30_154:                             # %for.end585
                                        #   in Loop: Header=BB30_149 Depth=1
	jmp	.LBB30_155
.LBB30_155:                             # %for.inc586
                                        #   in Loop: Header=BB30_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_149
.LBB30_156:                             # %for.end588
	jmp	.LBB30_157
.LBB30_157:                             # %if.end589
	cmpl	$894857540, -40(%rbp)   # imm = 0x35567144
	jne	.LBB30_159
.LBB30_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_158
.Lfunc_end30:
	.size	SetCoeffAndReconstruction8x8.1, .Lfunc_end30-SetCoeffAndReconstruction8x8.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.2
.LCPI31_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI31_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.2
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.2,@function
Mode_Decision_for_8x8IntraBlocks.2:     # @Mode_Decision_for_8x8IntraBlocks.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI31_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI31_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$89494452, -24(%rbp)    # imm = 0x55593B4
	movl	%edi, -20(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB31_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-20(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB31_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$1, -16(%rbp)
.LBB31_4:                               # %if.end
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_1
.LBB31_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$89494452, -24(%rbp)    # imm = 0x55593B4
	jne	.LBB31_8
.LBB31_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_7
.Lfunc_end31:
	.size	Mode_Decision_for_8x8IntraBlocks.2, .Lfunc_end31-Mode_Decision_for_8x8IntraBlocks.2
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.3 # -- Begin function SetRefAndMotionVectors.3
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.3,@function
SetRefAndMotionVectors.3:               # @SetRefAndMotionVectors.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$2086777694, -72(%rbp)  # imm = 0x7C61B35E
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB32_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB32_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB32_4
.LBB32_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB32_5
.LBB32_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB32_5
.LBB32_5:                               # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB32_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB32_9
.LBB32_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB32_9
.LBB32_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB32_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_13:                              # %for.cond34
                                        #   Parent Loop BB32_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB32_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB32_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_13
.LBB32_16:                              # %for.end
                                        #   in Loop: Header=BB32_11 Depth=1
	jmp	.LBB32_17
.LBB32_17:                              # %for.inc117
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_11
.LBB32_18:                              # %for.end119
	jmp	.LBB32_64
.LBB32_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB32_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB32_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_23:                              # %for.cond126
                                        #   Parent Loop BB32_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB32_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB32_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_23
.LBB32_26:                              # %for.end211
                                        #   in Loop: Header=BB32_21 Depth=1
	jmp	.LBB32_27
.LBB32_27:                              # %for.inc212
                                        #   in Loop: Header=BB32_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_21
.LBB32_28:                              # %for.end214
	jmp	.LBB32_64
.LBB32_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB32_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_32:                              # %for.cond219
                                        #   Parent Loop BB32_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB32_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
.LBB32_35:                              # %if.end255
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB32_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB32_46
.LBB32_37:                              # %if.then261
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB32_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB32_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB32_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB32_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB32_43
.LBB32_42:                              # %cond.false274
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB32_43:                              # %cond.end275
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB32_45
.LBB32_44:                              # %if.else342
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB32_45:                              # %if.end424
                                        #   in Loop: Header=BB32_32 Depth=2
	jmp	.LBB32_47
.LBB32_46:                              # %if.else425
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB32_47:                              # %if.end468
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB32_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB32_58
.LBB32_49:                              # %if.then474
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB32_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB32_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB32_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB32_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB32_55
.LBB32_54:                              # %cond.false490
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB32_55:                              # %cond.end492
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB32_57
.LBB32_56:                              # %if.else559
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-36(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB32_57:                              # %if.end641
                                        #   in Loop: Header=BB32_32 Depth=2
	jmp	.LBB32_59
.LBB32_58:                              # %if.else642
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB32_59:                              # %if.end685
                                        #   in Loop: Header=BB32_32 Depth=2
	jmp	.LBB32_60
.LBB32_60:                              # %for.inc686
                                        #   in Loop: Header=BB32_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_32
.LBB32_61:                              # %for.end688
                                        #   in Loop: Header=BB32_30 Depth=1
	jmp	.LBB32_62
.LBB32_62:                              # %for.inc689
                                        #   in Loop: Header=BB32_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_30
.LBB32_63:                              # %for.end691
	jmp	.LBB32_64
.LBB32_64:                              # %if.end692
	cmpl	$2086777694, -72(%rbp)  # imm = 0x7C61B35E
	jne	.LBB32_66
.LBB32_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_65
.Lfunc_end32:
	.size	SetRefAndMotionVectors.3, .Lfunc_end32-SetRefAndMotionVectors.3
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.4 # -- Begin function CheckReliabilityOfRef.4
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.4,@function
CheckReliabilityOfRef.4:                # @CheckReliabilityOfRef.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2128614125, -108(%rbp) # imm = 0x7EE012ED
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB33_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB33_6
.LBB33_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB33_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB33_5
.LBB33_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB33_5
.LBB33_5:                               # %cond.end
.LBB33_6:                               # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB33_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB33_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB33_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB33_14
.LBB33_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB33_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB33_13
.LBB33_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB33_13
.LBB33_13:                              # %cond.end20
.LBB33_14:                              # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB33_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB33_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB33_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_19 Depth 2
                                        #       Child Loop BB33_23 Depth 3
                                        #         Child Loop BB33_25 Depth 4
                                        #       Child Loop BB33_53 Depth 3
                                        #         Child Loop BB33_55 Depth 4
                                        #           Child Loop BB33_66 Depth 5
                                        #       Child Loop BB33_87 Depth 3
                                        #         Child Loop BB33_89 Depth 4
                                        #           Child Loop BB33_100 Depth 5
                                        #       Child Loop BB33_121 Depth 3
                                        #         Child Loop BB33_123 Depth 4
                                        #           Child Loop BB33_125 Depth 5
                                        #             Child Loop BB33_136 Depth 6
                                        #       Child Loop BB33_159 Depth 3
                                        #         Child Loop BB33_161 Depth 4
                                        #           Child Loop BB33_163 Depth 5
                                        #             Child Loop BB33_174 Depth 6
                                        #       Child Loop BB33_196 Depth 3
                                        #         Child Loop BB33_198 Depth 4
                                        #           Child Loop BB33_212 Depth 5
                                        #           Child Loop BB33_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB33_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB33_19:                              # %for.cond31
                                        #   Parent Loop BB33_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_23 Depth 3
                                        #         Child Loop BB33_25 Depth 4
                                        #       Child Loop BB33_53 Depth 3
                                        #         Child Loop BB33_55 Depth 4
                                        #           Child Loop BB33_66 Depth 5
                                        #       Child Loop BB33_87 Depth 3
                                        #         Child Loop BB33_89 Depth 4
                                        #           Child Loop BB33_100 Depth 5
                                        #       Child Loop BB33_121 Depth 3
                                        #         Child Loop BB33_123 Depth 4
                                        #           Child Loop BB33_125 Depth 5
                                        #             Child Loop BB33_136 Depth 6
                                        #       Child Loop BB33_159 Depth 3
                                        #         Child Loop BB33_161 Depth 4
                                        #           Child Loop BB33_163 Depth 5
                                        #             Child Loop BB33_174 Depth 6
                                        #       Child Loop BB33_196 Depth 3
                                        #         Child Loop BB33_198 Depth 4
                                        #           Child Loop BB33_212 Depth 5
                                        #           Child Loop BB33_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB33_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB33_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB33_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB33_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB33_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	$0, -12(%rbp)
.LBB33_23:                              # %for.cond75
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB33_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB33_23 Depth=3
	movl	$0, -16(%rbp)
.LBB33_25:                              # %for.cond79
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB33_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB33_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB33_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB33_29
.LBB33_28:                              # %cond.false87
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB33_29:                              # %cond.end89
                                        #   in Loop: Header=BB33_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB33_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB33_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB33_35
.LBB33_31:                              # %cond.false94
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB33_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB33_34
.LBB33_33:                              # %cond.false99
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB33_34:                              # %cond.end101
                                        #   in Loop: Header=BB33_25 Depth=4
.LBB33_35:                              # %cond.end103
                                        #   in Loop: Header=BB33_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB33_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB33_38
.LBB33_37:                              # %cond.false111
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB33_38:                              # %cond.end113
                                        #   in Loop: Header=BB33_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB33_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB33_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB33_44
.LBB33_40:                              # %cond.false118
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB33_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB33_43
.LBB33_42:                              # %cond.false123
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB33_43:                              # %cond.end125
                                        #   in Loop: Header=BB33_25 Depth=4
.LBB33_44:                              # %cond.end127
                                        #   in Loop: Header=BB33_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB33_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB33_267
.LBB33_46:                              # %if.end
                                        #   in Loop: Header=BB33_25 Depth=4
	jmp	.LBB33_47
.LBB33_47:                              # %for.inc
                                        #   in Loop: Header=BB33_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_25
.LBB33_48:                              # %for.end
                                        #   in Loop: Header=BB33_23 Depth=3
	jmp	.LBB33_49
.LBB33_49:                              # %for.inc135
                                        #   in Loop: Header=BB33_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_23
.LBB33_50:                              # %for.end137
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_262
.LBB33_51:                              # %if.else
                                        #   in Loop: Header=BB33_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB33_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	$0, -12(%rbp)
.LBB33_53:                              # %for.cond141
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_55 Depth 4
                                        #           Child Loop BB33_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB33_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB33_53 Depth=3
	movl	$0, -16(%rbp)
.LBB33_55:                              # %for.cond145
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB33_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB33_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB33_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB33_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB33_59
.LBB33_58:                              # %cond.false153
                                        #   in Loop: Header=BB33_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_59:                              # %cond.end155
                                        #   in Loop: Header=BB33_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB33_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB33_65
.LBB33_61:                              # %cond.false160
                                        #   in Loop: Header=BB33_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB33_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB33_64
.LBB33_63:                              # %cond.false165
                                        #   in Loop: Header=BB33_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_64:                              # %cond.end167
                                        #   in Loop: Header=BB33_55 Depth=4
.LBB33_65:                              # %cond.end169
                                        #   in Loop: Header=BB33_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB33_66:                              # %for.cond171
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_53 Depth=3
                                        #         Parent Loop BB33_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB33_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB33_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB33_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB33_70
.LBB33_69:                              # %cond.false180
                                        #   in Loop: Header=BB33_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_70:                              # %cond.end183
                                        #   in Loop: Header=BB33_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB33_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB33_76
.LBB33_72:                              # %cond.false188
                                        #   in Loop: Header=BB33_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB33_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB33_75
.LBB33_74:                              # %cond.false194
                                        #   in Loop: Header=BB33_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB33_75:                              # %cond.end197
                                        #   in Loop: Header=BB33_66 Depth=5
.LBB33_76:                              # %cond.end199
                                        #   in Loop: Header=BB33_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB33_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB33_267
.LBB33_78:                              # %if.end209
                                        #   in Loop: Header=BB33_66 Depth=5
	jmp	.LBB33_79
.LBB33_79:                              # %for.inc210
                                        #   in Loop: Header=BB33_66 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_66
.LBB33_80:                              # %for.end212
                                        #   in Loop: Header=BB33_55 Depth=4
	jmp	.LBB33_81
.LBB33_81:                              # %for.inc213
                                        #   in Loop: Header=BB33_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_55
.LBB33_82:                              # %for.end215
                                        #   in Loop: Header=BB33_53 Depth=3
	jmp	.LBB33_83
.LBB33_83:                              # %for.inc216
                                        #   in Loop: Header=BB33_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_53
.LBB33_84:                              # %for.end218
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_261
.LBB33_85:                              # %if.else219
                                        #   in Loop: Header=BB33_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB33_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	$0, -12(%rbp)
.LBB33_87:                              # %for.cond223
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_89 Depth 4
                                        #           Child Loop BB33_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB33_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB33_87 Depth=3
	movl	$0, -16(%rbp)
.LBB33_89:                              # %for.cond227
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB33_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB33_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB33_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB33_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB33_93
.LBB33_92:                              # %cond.false235
                                        #   in Loop: Header=BB33_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_93:                              # %cond.end237
                                        #   in Loop: Header=BB33_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB33_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB33_99
.LBB33_95:                              # %cond.false242
                                        #   in Loop: Header=BB33_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB33_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB33_98
.LBB33_97:                              # %cond.false247
                                        #   in Loop: Header=BB33_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_98:                              # %cond.end249
                                        #   in Loop: Header=BB33_89 Depth=4
.LBB33_99:                              # %cond.end251
                                        #   in Loop: Header=BB33_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB33_100:                             # %for.cond253
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_87 Depth=3
                                        #         Parent Loop BB33_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB33_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB33_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB33_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB33_104
.LBB33_103:                             # %cond.false262
                                        #   in Loop: Header=BB33_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_104:                             # %cond.end265
                                        #   in Loop: Header=BB33_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB33_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB33_110
.LBB33_106:                             # %cond.false270
                                        #   in Loop: Header=BB33_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB33_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB33_109
.LBB33_108:                             # %cond.false276
                                        #   in Loop: Header=BB33_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_109:                             # %cond.end279
                                        #   in Loop: Header=BB33_100 Depth=5
.LBB33_110:                             # %cond.end281
                                        #   in Loop: Header=BB33_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB33_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB33_267
.LBB33_112:                             # %if.end291
                                        #   in Loop: Header=BB33_100 Depth=5
	jmp	.LBB33_113
.LBB33_113:                             # %for.inc292
                                        #   in Loop: Header=BB33_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_100
.LBB33_114:                             # %for.end294
                                        #   in Loop: Header=BB33_89 Depth=4
	jmp	.LBB33_115
.LBB33_115:                             # %for.inc295
                                        #   in Loop: Header=BB33_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_89
.LBB33_116:                             # %for.end297
                                        #   in Loop: Header=BB33_87 Depth=3
	jmp	.LBB33_117
.LBB33_117:                             # %for.inc298
                                        #   in Loop: Header=BB33_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_87
.LBB33_118:                             # %for.end300
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_260
.LBB33_119:                             # %if.else301
                                        #   in Loop: Header=BB33_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB33_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	$0, -12(%rbp)
.LBB33_121:                             # %for.cond305
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_123 Depth 4
                                        #           Child Loop BB33_125 Depth 5
                                        #             Child Loop BB33_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB33_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB33_121 Depth=3
	movl	$0, -16(%rbp)
.LBB33_123:                             # %for.cond309
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB33_125 Depth 5
                                        #             Child Loop BB33_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB33_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB33_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB33_125:                             # %for.cond313
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_121 Depth=3
                                        #         Parent Loop BB33_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB33_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB33_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB33_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB33_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB33_129
.LBB33_128:                             # %cond.false322
                                        #   in Loop: Header=BB33_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_129:                             # %cond.end325
                                        #   in Loop: Header=BB33_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB33_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB33_135
.LBB33_131:                             # %cond.false330
                                        #   in Loop: Header=BB33_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB33_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB33_134
.LBB33_133:                             # %cond.false336
                                        #   in Loop: Header=BB33_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_134:                             # %cond.end339
                                        #   in Loop: Header=BB33_125 Depth=5
.LBB33_135:                             # %cond.end341
                                        #   in Loop: Header=BB33_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB33_136:                             # %for.cond343
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_121 Depth=3
                                        #         Parent Loop BB33_123 Depth=4
                                        #           Parent Loop BB33_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB33_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB33_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB33_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB33_140
.LBB33_139:                             # %cond.false352
                                        #   in Loop: Header=BB33_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_140:                             # %cond.end355
                                        #   in Loop: Header=BB33_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB33_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB33_146
.LBB33_142:                             # %cond.false360
                                        #   in Loop: Header=BB33_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB33_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB33_145
.LBB33_144:                             # %cond.false366
                                        #   in Loop: Header=BB33_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_145:                             # %cond.end369
                                        #   in Loop: Header=BB33_136 Depth=6
.LBB33_146:                             # %cond.end371
                                        #   in Loop: Header=BB33_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB33_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB33_267
.LBB33_148:                             # %if.end381
                                        #   in Loop: Header=BB33_136 Depth=6
	jmp	.LBB33_149
.LBB33_149:                             # %for.inc382
                                        #   in Loop: Header=BB33_136 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_136
.LBB33_150:                             # %for.end384
                                        #   in Loop: Header=BB33_125 Depth=5
	jmp	.LBB33_151
.LBB33_151:                             # %for.inc385
                                        #   in Loop: Header=BB33_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_125
.LBB33_152:                             # %for.end387
                                        #   in Loop: Header=BB33_123 Depth=4
	jmp	.LBB33_153
.LBB33_153:                             # %for.inc388
                                        #   in Loop: Header=BB33_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_123
.LBB33_154:                             # %for.end390
                                        #   in Loop: Header=BB33_121 Depth=3
	jmp	.LBB33_155
.LBB33_155:                             # %for.inc391
                                        #   in Loop: Header=BB33_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_121
.LBB33_156:                             # %for.end393
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_259
.LBB33_157:                             # %if.else394
                                        #   in Loop: Header=BB33_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB33_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	$0, -12(%rbp)
.LBB33_159:                             # %for.cond398
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_161 Depth 4
                                        #           Child Loop BB33_163 Depth 5
                                        #             Child Loop BB33_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB33_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB33_159 Depth=3
	movl	$0, -16(%rbp)
.LBB33_161:                             # %for.cond402
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB33_163 Depth 5
                                        #             Child Loop BB33_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB33_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB33_161 Depth=4
	movl	$-2, -20(%rbp)
.LBB33_163:                             # %for.cond406
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_159 Depth=3
                                        #         Parent Loop BB33_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB33_174 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB33_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB33_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB33_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB33_167
.LBB33_166:                             # %cond.false415
                                        #   in Loop: Header=BB33_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_167:                             # %cond.end418
                                        #   in Loop: Header=BB33_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB33_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB33_173
.LBB33_169:                             # %cond.false423
                                        #   in Loop: Header=BB33_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB33_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB33_172
.LBB33_171:                             # %cond.false429
                                        #   in Loop: Header=BB33_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_172:                             # %cond.end432
                                        #   in Loop: Header=BB33_163 Depth=5
.LBB33_173:                             # %cond.end434
                                        #   in Loop: Header=BB33_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB33_174:                             # %for.cond436
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_159 Depth=3
                                        #         Parent Loop BB33_161 Depth=4
                                        #           Parent Loop BB33_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB33_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB33_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB33_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB33_178
.LBB33_177:                             # %cond.false445
                                        #   in Loop: Header=BB33_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_178:                             # %cond.end448
                                        #   in Loop: Header=BB33_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB33_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB33_184
.LBB33_180:                             # %cond.false453
                                        #   in Loop: Header=BB33_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB33_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB33_183
.LBB33_182:                             # %cond.false459
                                        #   in Loop: Header=BB33_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_183:                             # %cond.end462
                                        #   in Loop: Header=BB33_174 Depth=6
.LBB33_184:                             # %cond.end464
                                        #   in Loop: Header=BB33_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB33_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB33_267
.LBB33_186:                             # %if.end474
                                        #   in Loop: Header=BB33_174 Depth=6
	jmp	.LBB33_187
.LBB33_187:                             # %for.inc475
                                        #   in Loop: Header=BB33_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_174
.LBB33_188:                             # %for.end477
                                        #   in Loop: Header=BB33_163 Depth=5
	jmp	.LBB33_189
.LBB33_189:                             # %for.inc478
                                        #   in Loop: Header=BB33_163 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_163
.LBB33_190:                             # %for.end480
                                        #   in Loop: Header=BB33_161 Depth=4
	jmp	.LBB33_191
.LBB33_191:                             # %for.inc481
                                        #   in Loop: Header=BB33_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_161
.LBB33_192:                             # %for.end483
                                        #   in Loop: Header=BB33_159 Depth=3
	jmp	.LBB33_193
.LBB33_193:                             # %for.inc484
                                        #   in Loop: Header=BB33_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_159
.LBB33_194:                             # %for.end486
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_258
.LBB33_195:                             # %if.else487
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	$0, -12(%rbp)
.LBB33_196:                             # %for.cond488
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_198 Depth 4
                                        #           Child Loop BB33_212 Depth 5
                                        #           Child Loop BB33_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB33_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB33_196 Depth=3
	movl	$0, -16(%rbp)
.LBB33_198:                             # %for.cond492
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB33_212 Depth 5
                                        #           Child Loop BB33_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB33_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB33_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB33_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB33_202
.LBB33_201:                             # %cond.false500
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB33_202:                             # %cond.end503
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB33_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB33_205
.LBB33_204:                             # %cond.false508
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-48(%rbp), %eax
.LBB33_205:                             # %cond.end509
                                        #   in Loop: Header=BB33_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB33_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB33_211
.LBB33_207:                             # %cond.false514
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB33_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB33_210
.LBB33_209:                             # %cond.false518
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-48(%rbp), %eax
.LBB33_210:                             # %cond.end519
                                        #   in Loop: Header=BB33_198 Depth=4
.LBB33_211:                             # %cond.end521
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB33_212:                             # %for.cond523
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_196 Depth=3
                                        #         Parent Loop BB33_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB33_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB33_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB33_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB33_216
.LBB33_215:                             # %cond.false532
                                        #   in Loop: Header=BB33_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_216:                             # %cond.end535
                                        #   in Loop: Header=BB33_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB33_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB33_222
.LBB33_218:                             # %cond.false540
                                        #   in Loop: Header=BB33_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB33_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB33_221
.LBB33_220:                             # %cond.false546
                                        #   in Loop: Header=BB33_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB33_221:                             # %cond.end549
                                        #   in Loop: Header=BB33_212 Depth=5
.LBB33_222:                             # %cond.end551
                                        #   in Loop: Header=BB33_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB33_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB33_267
.LBB33_224:                             # %if.end561
                                        #   in Loop: Header=BB33_212 Depth=5
	jmp	.LBB33_225
.LBB33_225:                             # %for.inc562
                                        #   in Loop: Header=BB33_212 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_212
.LBB33_226:                             # %for.end564
                                        #   in Loop: Header=BB33_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB33_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB33_229
.LBB33_228:                             # %cond.false569
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB33_229:                             # %cond.end572
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB33_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB33_232
.LBB33_231:                             # %cond.false577
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-44(%rbp), %eax
.LBB33_232:                             # %cond.end578
                                        #   in Loop: Header=BB33_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB33_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB33_238
.LBB33_234:                             # %cond.false583
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB33_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB33_237
.LBB33_236:                             # %cond.false587
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-44(%rbp), %eax
.LBB33_237:                             # %cond.end588
                                        #   in Loop: Header=BB33_198 Depth=4
.LBB33_238:                             # %cond.end590
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB33_239:                             # %for.cond592
                                        #   Parent Loop BB33_17 Depth=1
                                        #     Parent Loop BB33_19 Depth=2
                                        #       Parent Loop BB33_196 Depth=3
                                        #         Parent Loop BB33_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB33_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB33_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB33_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB33_243
.LBB33_242:                             # %cond.false601
                                        #   in Loop: Header=BB33_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_243:                             # %cond.end604
                                        #   in Loop: Header=BB33_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB33_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB33_249
.LBB33_245:                             # %cond.false609
                                        #   in Loop: Header=BB33_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB33_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB33_248
.LBB33_247:                             # %cond.false615
                                        #   in Loop: Header=BB33_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB33_248:                             # %cond.end618
                                        #   in Loop: Header=BB33_239 Depth=5
.LBB33_249:                             # %cond.end620
                                        #   in Loop: Header=BB33_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB33_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB33_267
.LBB33_251:                             # %if.end630
                                        #   in Loop: Header=BB33_239 Depth=5
	jmp	.LBB33_252
.LBB33_252:                             # %for.inc631
                                        #   in Loop: Header=BB33_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_239
.LBB33_253:                             # %for.end633
                                        #   in Loop: Header=BB33_198 Depth=4
	jmp	.LBB33_254
.LBB33_254:                             # %for.inc634
                                        #   in Loop: Header=BB33_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_198
.LBB33_255:                             # %for.end636
                                        #   in Loop: Header=BB33_196 Depth=3
	jmp	.LBB33_256
.LBB33_256:                             # %for.inc637
                                        #   in Loop: Header=BB33_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_196
.LBB33_257:                             # %for.end639
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_258
.LBB33_258:                             # %if.end640
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_259
.LBB33_259:                             # %if.end641
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_260
.LBB33_260:                             # %if.end642
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_261
.LBB33_261:                             # %if.end643
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_262
.LBB33_262:                             # %if.end644
                                        #   in Loop: Header=BB33_19 Depth=2
	jmp	.LBB33_263
.LBB33_263:                             # %for.inc645
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB33_19
.LBB33_264:                             # %for.end647
                                        #   in Loop: Header=BB33_17 Depth=1
	jmp	.LBB33_265
.LBB33_265:                             # %for.inc648
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB33_17
.LBB33_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB33_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$2128614125, -108(%rbp) # imm = 0x7EE012ED
	jne	.LBB33_269
.LBB33_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_268
.Lfunc_end33:
	.size	CheckReliabilityOfRef.4, .Lfunc_end33-CheckReliabilityOfRef.4
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.5 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.5
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.5,@function
Mode_Decision_for_Intra4x4Macroblock.5: # @Mode_Decision_for_Intra4x4Macroblock.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2124742673, -20(%rbp)  # imm = 0x7EA50011
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB34_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB34_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_4:                               # %if.end
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_1
.LBB34_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$2124742673, -20(%rbp)  # imm = 0x7EA50011
	jne	.LBB34_8
.LBB34_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_7
.Lfunc_end34:
	.size	Mode_Decision_for_Intra4x4Macroblock.5, .Lfunc_end34-Mode_Decision_for_Intra4x4Macroblock.5
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.6          # -- Begin function RestoreMV8x8.6
	.p2align	4, 0x90
	.type	RestoreMV8x8.6,@function
RestoreMV8x8.6:                         # @RestoreMV8x8.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2065266300, -16(%rbp)  # imm = 0x7B19767C
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_4:                               # %for.end
	cmpl	$2065266300, -16(%rbp)  # imm = 0x7B19767C
	jne	.LBB35_6
.LBB35_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_5
.Lfunc_end35:
	.size	RestoreMV8x8.6, .Lfunc_end35-RestoreMV8x8.6
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.7 # -- Begin function RDCost_for_4x4Blocks_Chroma.7
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.7,@function
RDCost_for_4x4Blocks_Chroma.7:          # @RDCost_for_4x4Blocks_Chroma.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$324770182, -56(%rbp)   # imm = 0x135B9986
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB36_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB36_3
.LBB36_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB36_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB36_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB36_18
.LBB36_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB36_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB36_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB36_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB36_8:                               # %land.end
                                        #   in Loop: Header=BB36_6 Depth=1
	testb	$1, %al
	jne	.LBB36_9
	jmp	.LBB36_17
.LBB36_9:                               # %for.body
                                        #   in Loop: Header=BB36_6 Depth=1
	movq	-96(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-104(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB36_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB36_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB36_12
.LBB36_11:                              # %if.else54
                                        #   in Loop: Header=BB36_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB36_12:                              # %if.end55
                                        #   in Loop: Header=BB36_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB36_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB36_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB36_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB36_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB36_15:                              # %lor.end
                                        #   in Loop: Header=BB36_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB36_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_6
.LBB36_17:                              # %for.end
	jmp	.LBB36_18
.LBB36_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$324770182, -56(%rbp)   # imm = 0x135B9986
	jne	.LBB36_20
.LBB36_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_19
.Lfunc_end36:
	.size	RDCost_for_4x4Blocks_Chroma.7, .Lfunc_end36-RDCost_for_4x4Blocks_Chroma.7
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.8          # -- Begin function RestoreMV8x8.8
	.p2align	4, 0x90
	.type	RestoreMV8x8.8,@function
RestoreMV8x8.8:                         # @RestoreMV8x8.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$339712683, -12(%rbp)   # imm = 0x143F9AAB
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_1
.LBB37_4:                               # %for.end
	cmpl	$339712683, -12(%rbp)   # imm = 0x143F9AAB
	jne	.LBB37_6
.LBB37_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_5
.Lfunc_end37:
	.size	RestoreMV8x8.8, .Lfunc_end37-RestoreMV8x8.8
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.9  # -- Begin function field_flag_inference.9
	.p2align	4, 0x90
	.type	field_flag_inference.9,@function
field_flag_inference.9:                 # @field_flag_inference.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$807055961, -28(%rbp)   # imm = 0x301AB259
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB38_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_6
.LBB38_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB38_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_5
.LBB38_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB38_5:                               # %if.end
	jmp	.LBB38_6
.LBB38_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$807055961, -28(%rbp)   # imm = 0x301AB259
	jne	.LBB38_8
.LBB38_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_7
.Lfunc_end38:
	.size	field_flag_inference.9, .Lfunc_end38-field_flag_inference.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.10
.LCPI39_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.10
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.10,@function
RDCost_for_macroblocks.10:              # @RDCost_for_macroblocks.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1991784621, -92(%rbp)  # imm = 0x76B838AD
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB39_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB39_3
.LBB39_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB39_3
.LBB39_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB39_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB39_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB39_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB39_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
.LBB39_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	$0, -16(%rbp)
.LBB39_10:                              # %for.cond17
                                        #   Parent Loop BB39_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB39_10 Depth=2
	movq	direct_pdir, %rax
	movl	-96(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB39_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB39_177
.LBB39_13:                              # %if.end
                                        #   in Loop: Header=BB39_10 Depth=2
	jmp	.LBB39_14
.LBB39_14:                              # %for.inc
                                        #   in Loop: Header=BB39_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_10
.LBB39_15:                              # %for.end
                                        #   in Loop: Header=BB39_8 Depth=1
	jmp	.LBB39_16
.LBB39_16:                              # %for.inc30
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_8
.LBB39_17:                              # %for.end32
	jmp	.LBB39_18
.LBB39_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB39_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB39_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB39_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB39_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB39_177
.LBB39_23:                              # %if.end46
	jmp	.LBB39_76
.LBB39_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB39_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB39_75
.LBB39_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB39_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB39_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB39_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_31 Depth 2
                                        #       Child Loop BB39_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB39_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB39_29 Depth=1
	movl	$0, -16(%rbp)
.LBB39_31:                              # %for.cond61
                                        #   Parent Loop BB39_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB39_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB39_31 Depth=2
	movl	$0, -20(%rbp)
.LBB39_33:                              # %for.cond65
                                        #   Parent Loop BB39_29 Depth=1
                                        #     Parent Loop BB39_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB39_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB39_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB39_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB39_33 Depth=3
	movl	$2, -40(%rbp)
.LBB39_36:                              # %if.end77
                                        #   in Loop: Header=BB39_33 Depth=3
	jmp	.LBB39_37
.LBB39_37:                              # %for.inc78
                                        #   in Loop: Header=BB39_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_33
.LBB39_38:                              # %for.end80
                                        #   in Loop: Header=BB39_31 Depth=2
	jmp	.LBB39_39
.LBB39_39:                              # %for.inc81
                                        #   in Loop: Header=BB39_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_31
.LBB39_40:                              # %for.end83
                                        #   in Loop: Header=BB39_29 Depth=1
	jmp	.LBB39_41
.LBB39_41:                              # %for.inc84
                                        #   in Loop: Header=BB39_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_29
.LBB39_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB39_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB39_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB39_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB39_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB39_43
.LBB39_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB39_47:                              # %if.end97
	jmp	.LBB39_74
.LBB39_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB39_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB39_73
.LBB39_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB39_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB39_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB39_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_55 Depth 2
                                        #       Child Loop BB39_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB39_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB39_53 Depth=1
	movl	$0, -16(%rbp)
.LBB39_55:                              # %for.cond115
                                        #   Parent Loop BB39_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB39_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB39_55 Depth=2
	movl	$0, -20(%rbp)
.LBB39_57:                              # %for.cond119
                                        #   Parent Loop BB39_53 Depth=1
                                        #     Parent Loop BB39_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB39_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB39_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB39_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB39_57 Depth=3
	movl	$2, -40(%rbp)
.LBB39_60:                              # %if.end131
                                        #   in Loop: Header=BB39_57 Depth=3
	jmp	.LBB39_61
.LBB39_61:                              # %for.inc132
                                        #   in Loop: Header=BB39_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_57
.LBB39_62:                              # %for.end134
                                        #   in Loop: Header=BB39_55 Depth=2
	jmp	.LBB39_63
.LBB39_63:                              # %for.inc135
                                        #   in Loop: Header=BB39_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_55
.LBB39_64:                              # %for.end137
                                        #   in Loop: Header=BB39_53 Depth=1
	jmp	.LBB39_65
.LBB39_65:                              # %for.inc138
                                        #   in Loop: Header=BB39_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_53
.LBB39_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB39_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB39_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB39_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB39_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB39_67
.LBB39_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB39_71:                              # %if.end152
	jmp	.LBB39_72
.LBB39_72:                              # %if.end153
	jmp	.LBB39_73
.LBB39_73:                              # %if.end154
	jmp	.LBB39_74
.LBB39_74:                              # %if.end155
	jmp	.LBB39_75
.LBB39_75:                              # %if.end156
	jmp	.LBB39_76
.LBB39_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB39_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB39_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB39_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB39_81
.LBB39_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB39_81
.LBB39_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB39_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB39_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB39_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB39_84 Depth=1
	movl	$0, -16(%rbp)
.LBB39_86:                              # %for.cond179
                                        #   Parent Loop BB39_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB39_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB39_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_86
.LBB39_89:                              # %for.end196
                                        #   in Loop: Header=BB39_84 Depth=1
	jmp	.LBB39_90
.LBB39_90:                              # %for.inc197
                                        #   in Loop: Header=BB39_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_84
.LBB39_91:                              # %for.end199
	jmp	.LBB39_101
.LBB39_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB39_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	$0, -16(%rbp)
.LBB39_95:                              # %for.cond205
                                        #   Parent Loop BB39_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB39_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB39_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_95
.LBB39_98:                              # %for.end220
                                        #   in Loop: Header=BB39_93 Depth=1
	jmp	.LBB39_99
.LBB39_99:                              # %for.inc221
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_93
.LBB39_100:                             # %for.end223
	jmp	.LBB39_101
.LBB39_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB39_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB39_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB39_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB39_107
.LBB39_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB39_107
# %bb.106:                              # %if.then238
	leaq	-36(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB39_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB39_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB39_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB39_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB39_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB39_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_114 Depth 2
                                        #       Child Loop BB39_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB39_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB39_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB39_114:                             # %for.cond259
                                        #   Parent Loop BB39_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB39_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB39_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB39_116:                             # %for.cond263
                                        #   Parent Loop BB39_112 Depth=1
                                        #     Parent Loop BB39_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB39_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB39_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_116
.LBB39_119:                             # %for.end291
                                        #   in Loop: Header=BB39_114 Depth=2
	jmp	.LBB39_120
.LBB39_120:                             # %for.inc292
                                        #   in Loop: Header=BB39_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_114
.LBB39_121:                             # %for.end294
                                        #   in Loop: Header=BB39_112 Depth=1
	jmp	.LBB39_122
.LBB39_122:                             # %for.inc295
                                        #   in Loop: Header=BB39_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_112
.LBB39_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB39_133
.LBB39_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB39_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB39_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB39_127:                             # %for.cond306
                                        #   Parent Loop BB39_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB39_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB39_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_127
.LBB39_130:                             # %for.end334
                                        #   in Loop: Header=BB39_125 Depth=1
	jmp	.LBB39_131
.LBB39_131:                             # %for.inc335
                                        #   in Loop: Header=BB39_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_125
.LBB39_132:                             # %for.end337
	jmp	.LBB39_133
.LBB39_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB39_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB39_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB39_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB39_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB39_137:                             # %for.cond347
                                        #   Parent Loop BB39_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB39_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_137
.LBB39_140:                             # %for.end398
                                        #   in Loop: Header=BB39_135 Depth=1
	jmp	.LBB39_141
.LBB39_141:                             # %for.inc399
                                        #   in Loop: Header=BB39_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_135
.LBB39_142:                             # %for.end401
	jmp	.LBB39_143
.LBB39_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -104(%rbp)
	je	.LBB39_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB39_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB39_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB39_148
.LBB39_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
	movl	-72(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB39_149
.LBB39_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-36(%rbp), %esi
	leaq	-32(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
.LBB39_149:                             # %if.end422
	jmp	.LBB39_151
.LBB39_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
.LBB39_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI39_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB39_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI39_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB39_154
.LBB39_153:                             # %cond.false431
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm2
.LBB39_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB39_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB39_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB39_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB39_159
.LBB39_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB39_177
.LBB39_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB39_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB39_165
	jmp	.LBB39_176
.LBB39_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB39_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB39_176
	jmp	.LBB39_165
.LBB39_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB39_165
	jmp	.LBB39_176
.LBB39_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB39_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB39_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB39_171
	jmp	.LBB39_174
.LBB39_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB39_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB39_174
	jmp	.LBB39_171
.LBB39_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB39_171
	jmp	.LBB39_174
.LBB39_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB39_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB39_177
.LBB39_173:                             # %if.end482
	jmp	.LBB39_174
.LBB39_174:                             # %if.end483
	jmp	.LBB39_175
.LBB39_175:                             # %if.end484
	jmp	.LBB39_176
.LBB39_176:                             # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB39_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$1991784621, -92(%rbp)  # imm = 0x76B838AD
	jne	.LBB39_179
.LBB39_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_178
.Lfunc_end39:
	.size	RDCost_for_macroblocks.10, .Lfunc_end39-RDCost_for_macroblocks.10
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.11 # -- Begin function StoreNewMotionVectorsBlock8x8.11
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.11,@function
StoreNewMotionVectorsBlock8x8.11:       # @StoreNewMotionVectorsBlock8x8.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$665309884, -72(%rbp)   # imm = 0x27A7D2BC
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB40_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_4:                               # %for.cond6
                                        #   Parent Loop BB40_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB40_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB40_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_4
.LBB40_7:                               # %for.end
                                        #   in Loop: Header=BB40_2 Depth=1
	jmp	.LBB40_8
.LBB40_8:                               # %for.inc39
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_2
.LBB40_9:                               # %for.end41
	jmp	.LBB40_61
.LBB40_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB40_20
# %bb.11:                               # %if.then42
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB40_12 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_14:                              # %for.cond46
                                        #   Parent Loop BB40_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_14
.LBB40_17:                              # %for.end119
                                        #   in Loop: Header=BB40_12 Depth=1
	jmp	.LBB40_18
.LBB40_18:                              # %for.inc120
                                        #   in Loop: Header=BB40_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_12
.LBB40_19:                              # %for.end122
	jmp	.LBB40_61
.LBB40_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB40_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB40_31
.LBB40_22:                              # %if.then125
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB40_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_25:                              # %for.cond129
                                        #   Parent Loop BB40_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB40_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB40_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_25
.LBB40_28:                              # %for.end206
                                        #   in Loop: Header=BB40_23 Depth=1
	jmp	.LBB40_29
.LBB40_29:                              # %for.inc207
                                        #   in Loop: Header=BB40_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_23
.LBB40_30:                              # %for.end209
	jmp	.LBB40_40
.LBB40_31:                              # %if.else210
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_34:                              # %for.cond214
                                        #   Parent Loop BB40_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB40_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB40_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_34
.LBB40_37:                              # %for.end235
                                        #   in Loop: Header=BB40_32 Depth=1
	jmp	.LBB40_38
.LBB40_38:                              # %for.inc236
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_32
.LBB40_39:                              # %for.end238
	jmp	.LBB40_40
.LBB40_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB40_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB40_51
.LBB40_42:                              # %if.then243
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB40_43 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_45:                              # %for.cond247
                                        #   Parent Loop BB40_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB40_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB40_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_45
.LBB40_48:                              # %for.end324
                                        #   in Loop: Header=BB40_43 Depth=1
	jmp	.LBB40_49
.LBB40_49:                              # %for.inc325
                                        #   in Loop: Header=BB40_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_43
.LBB40_50:                              # %for.end327
	jmp	.LBB40_60
.LBB40_51:                              # %if.else328
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_54:                              # %for.cond332
                                        #   Parent Loop BB40_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB40_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_54
.LBB40_57:                              # %for.end353
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_58
.LBB40_58:                              # %for.inc354
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_52
.LBB40_59:                              # %for.end356
	jmp	.LBB40_60
.LBB40_60:                              # %if.end357
	jmp	.LBB40_61
.LBB40_61:                              # %if.end358
	cmpl	$665309884, -72(%rbp)   # imm = 0x27A7D2BC
	jne	.LBB40_63
.LBB40_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_62
.Lfunc_end40:
	.size	StoreNewMotionVectorsBlock8x8.11, .Lfunc_end40-StoreNewMotionVectorsBlock8x8.11
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.12 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.12
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.12,@function
Mode_Decision_for_Intra4x4Macroblock.12: # @Mode_Decision_for_Intra4x4Macroblock.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1338615995, -24(%rbp)  # imm = 0x4FC9A8BB
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB41_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB41_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB41_4:                               # %if.end
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_1
.LBB41_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1338615995, -24(%rbp)  # imm = 0x4FC9A8BB
	jne	.LBB41_8
.LBB41_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_7
.Lfunc_end41:
	.size	Mode_Decision_for_Intra4x4Macroblock.12, .Lfunc_end41-Mode_Decision_for_Intra4x4Macroblock.12
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.13 # -- Begin function field_flag_inference.13
	.p2align	4, 0x90
	.type	field_flag_inference.13,@function
field_flag_inference.13:                # @field_flag_inference.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$232374116, -28(%rbp)   # imm = 0xDD9BF64
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB42_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_6
.LBB42_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB42_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_5
.LBB42_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB42_5:                               # %if.end
	jmp	.LBB42_6
.LBB42_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$232374116, -28(%rbp)   # imm = 0xDD9BF64
	jne	.LBB42_8
.LBB42_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_7
.Lfunc_end42:
	.size	field_flag_inference.13, .Lfunc_end42-field_flag_inference.13
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.14 # -- Begin function RDCost_for_4x4IntraBlocks.14
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.14,@function
RDCost_for_4x4IntraBlocks.14:           # @RDCost_for_4x4IntraBlocks.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$36093768, -76(%rbp)    # imm = 0x226BF48
	movq	%rdi, -112(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -152(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -72(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-72(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB43_10
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB43_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_4 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB43_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB43_2 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_4:                               # %for.cond15
                                        #   Parent Loop BB43_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB43_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-136(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB43_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_4
.LBB43_7:                               # %for.end
                                        #   in Loop: Header=BB43_2 Depth=1
	jmp	.LBB43_8
.LBB43_8:                               # %for.inc33
                                        #   in Loop: Header=BB43_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_2
.LBB43_9:                               # %for.end35
	jmp	.LBB43_10
.LBB43_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-56(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB43_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB43_16
.LBB43_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB43_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB43_15
.LBB43_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB43_15:                              # %cond.end
.LBB43_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB43_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB43_18:                              # %if.end50
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB43_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB43_21
.LBB43_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB43_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB43_23
# %bb.22:                               # %if.then66
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_24
.LBB43_23:                              # %if.else69
	movl	-16(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-152(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB43_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -88(%rbp)
	jmp	.LBB43_27
.LBB43_26:                              # %if.else81
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -88(%rbp)
.LBB43_27:                              # %return
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$36093768, -76(%rbp)    # imm = 0x226BF48
	jne	.LBB43_29
.LBB43_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB43_28
.Lfunc_end43:
	.size	RDCost_for_4x4IntraBlocks.14, .Lfunc_end43-RDCost_for_4x4IntraBlocks.14
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.15   # -- Begin function SetMotionVectorsMB.15
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.15,@function
SetMotionVectorsMB.15:                  # @SetMotionVectorsMB.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1172180888, -72(%rbp)  # imm = 0x45DE0F98
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_3:                               # %for.cond3
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB44_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB44_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB44_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB44_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB44_10
.LBB44_9:                               # %cond.false
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB44_10:                              # %cond.end
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB44_11:                              # %if.end
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB44_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB44_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB44_15
.LBB44_14:                              # %if.else
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB44_15:                              # %if.end89
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_29
.LBB44_16:                              # %if.else90
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB44_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB44_28
.LBB44_18:                              # %if.else122
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB44_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB44_27
.LBB44_20:                              # %if.else174
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB44_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB44_26
.LBB44_22:                              # %if.else226
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB44_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB44_25
.LBB44_24:                              # %if.else298
                                        #   in Loop: Header=BB44_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB44_25:                              # %if.end299
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_26
.LBB44_26:                              # %if.end300
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_27
.LBB44_27:                              # %if.end301
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_28
.LBB44_28:                              # %if.end302
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_29
.LBB44_29:                              # %if.end303
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_30
.LBB44_30:                              # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_3
.LBB44_31:                              # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_32
.LBB44_32:                              # %for.inc304
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_1
.LBB44_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB44_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_37 Depth 2
                                        #       Child Loop BB44_39 Depth 3
                                        #         Child Loop BB44_41 Depth 4
                                        #           Child Loop BB44_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB44_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB44_35 Depth=1
	movl	$0, -8(%rbp)
.LBB44_37:                              # %for.cond313
                                        #   Parent Loop BB44_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_39 Depth 3
                                        #         Child Loop BB44_41 Depth 4
                                        #           Child Loop BB44_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB44_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB44_37 Depth=2
	movl	$0, -20(%rbp)
.LBB44_39:                              # %for.cond317
                                        #   Parent Loop BB44_35 Depth=1
                                        #     Parent Loop BB44_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_41 Depth 4
                                        #           Child Loop BB44_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB44_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB44_39 Depth=3
	movl	$0, -24(%rbp)
.LBB44_41:                              # %for.cond321
                                        #   Parent Loop BB44_35 Depth=1
                                        #     Parent Loop BB44_37 Depth=2
                                        #       Parent Loop BB44_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB44_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB44_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB44_41 Depth=4
	movl	$0, -28(%rbp)
.LBB44_43:                              # %for.cond325
                                        #   Parent Loop BB44_35 Depth=1
                                        #     Parent Loop BB44_37 Depth=2
                                        #       Parent Loop BB44_39 Depth=3
                                        #         Parent Loop BB44_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB44_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB44_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB44_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_43
.LBB44_46:                              # %for.end423
                                        #   in Loop: Header=BB44_41 Depth=4
	jmp	.LBB44_47
.LBB44_47:                              # %for.inc424
                                        #   in Loop: Header=BB44_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_41
.LBB44_48:                              # %for.end426
                                        #   in Loop: Header=BB44_39 Depth=3
	jmp	.LBB44_49
.LBB44_49:                              # %for.inc427
                                        #   in Loop: Header=BB44_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_39
.LBB44_50:                              # %for.end429
                                        #   in Loop: Header=BB44_37 Depth=2
	jmp	.LBB44_51
.LBB44_51:                              # %for.inc430
                                        #   in Loop: Header=BB44_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_37
.LBB44_52:                              # %for.end432
                                        #   in Loop: Header=BB44_35 Depth=1
	jmp	.LBB44_53
.LBB44_53:                              # %for.inc433
                                        #   in Loop: Header=BB44_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_35
.LBB44_54:                              # %for.end435
	jmp	.LBB44_55
.LBB44_55:                              # %if.end436
	cmpl	$1172180888, -72(%rbp)  # imm = 0x45DE0F98
	jne	.LBB44_57
.LBB44_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_56
.Lfunc_end44:
	.size	SetMotionVectorsMB.15, .Lfunc_end44-SetMotionVectorsMB.15
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.16 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.16
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.16,@function
Mode_Decision_for_Intra4x4Macroblock.16: # @Mode_Decision_for_Intra4x4Macroblock.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1066273553, -20(%rbp)  # imm = 0x3F8E0B11
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB45_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB45_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_4:                               # %if.end
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_1
.LBB45_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1066273553, -20(%rbp)  # imm = 0x3F8E0B11
	jne	.LBB45_8
.LBB45_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_7
.Lfunc_end45:
	.size	Mode_Decision_for_Intra4x4Macroblock.16, .Lfunc_end45-Mode_Decision_for_Intra4x4Macroblock.16
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.17 # -- Begin function set_stored_macroblock_parameters.17
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.17,@function
set_stored_macroblock_parameters.17:    # @set_stored_macroblock_parameters.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$918634017, -52(%rbp)   # imm = 0x36C13E21
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB46_4
.LBB46_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB46_4
.LBB46_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB46_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB46_5 Depth=1
	movl	$0, -4(%rbp)
.LBB46_7:                               # %for.cond9
                                        #   Parent Loop BB46_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB46_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-88(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB46_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB46_10:                              # %if.end
                                        #   in Loop: Header=BB46_7 Depth=2
	jmp	.LBB46_11
.LBB46_11:                              # %for.inc
                                        #   in Loop: Header=BB46_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_7
.LBB46_12:                              # %for.end
                                        #   in Loop: Header=BB46_5 Depth=1
	jmp	.LBB46_13
.LBB46_13:                              # %for.inc33
                                        #   in Loop: Header=BB46_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_5
.LBB46_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB46_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB46_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB46_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB46_16 Depth=1
	movl	$0, -4(%rbp)
.LBB46_18:                              # %for.cond43
                                        #   Parent Loop BB46_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB46_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB46_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB46_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB46_21:                              # %if.end92
                                        #   in Loop: Header=BB46_18 Depth=2
	jmp	.LBB46_22
.LBB46_22:                              # %for.inc93
                                        #   in Loop: Header=BB46_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_18
.LBB46_23:                              # %for.end95
                                        #   in Loop: Header=BB46_16 Depth=1
	jmp	.LBB46_24
.LBB46_24:                              # %for.inc96
                                        #   in Loop: Header=BB46_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_16
.LBB46_25:                              # %for.end98
	jmp	.LBB46_26
.LBB46_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB46_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_30 Depth 2
                                        #       Child Loop BB46_32 Depth 3
                                        #         Child Loop BB46_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB46_28 Depth=1
	movl	$0, -8(%rbp)
.LBB46_30:                              # %for.cond118
                                        #   Parent Loop BB46_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_32 Depth 3
                                        #         Child Loop BB46_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB46_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB46_30 Depth=2
	movl	$0, -12(%rbp)
.LBB46_32:                              # %for.cond122
                                        #   Parent Loop BB46_28 Depth=1
                                        #     Parent Loop BB46_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB46_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB46_32 Depth=3
	movl	$0, -28(%rbp)
.LBB46_34:                              # %for.cond126
                                        #   Parent Loop BB46_28 Depth=1
                                        #     Parent Loop BB46_30 Depth=2
                                        #       Parent Loop BB46_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB46_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB46_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB46_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB46_34
.LBB46_37:                              # %for.end150
                                        #   in Loop: Header=BB46_32 Depth=3
	jmp	.LBB46_38
.LBB46_38:                              # %for.inc151
                                        #   in Loop: Header=BB46_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_32
.LBB46_39:                              # %for.end153
                                        #   in Loop: Header=BB46_30 Depth=2
	jmp	.LBB46_40
.LBB46_40:                              # %for.inc154
                                        #   in Loop: Header=BB46_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_30
.LBB46_41:                              # %for.end156
                                        #   in Loop: Header=BB46_28 Depth=1
	jmp	.LBB46_42
.LBB46_42:                              # %for.inc157
                                        #   in Loop: Header=BB46_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_28
.LBB46_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB46_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_46 Depth 2
                                        #       Child Loop BB46_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB46_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB46_44 Depth=1
	movl	$0, -12(%rbp)
.LBB46_46:                              # %for.cond164
                                        #   Parent Loop BB46_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB46_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB46_46 Depth=2
	movl	$0, -28(%rbp)
.LBB46_48:                              # %for.cond168
                                        #   Parent Loop BB46_44 Depth=1
                                        #     Parent Loop BB46_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB46_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB46_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB46_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB46_48
.LBB46_51:                              # %for.end188
                                        #   in Loop: Header=BB46_46 Depth=2
	jmp	.LBB46_52
.LBB46_52:                              # %for.inc189
                                        #   in Loop: Header=BB46_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_46
.LBB46_53:                              # %for.end191
                                        #   in Loop: Header=BB46_44 Depth=1
	jmp	.LBB46_54
.LBB46_54:                              # %for.inc192
                                        #   in Loop: Header=BB46_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_44
.LBB46_55:                              # %for.end194
	jmp	.LBB46_56
.LBB46_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB46_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB46_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB46_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB46_60:                              # %if.end225
                                        #   in Loop: Header=BB46_57 Depth=1
	jmp	.LBB46_61
.LBB46_61:                              # %for.inc226
                                        #   in Loop: Header=BB46_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_57
.LBB46_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB46_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB46_65
.LBB46_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB46_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB46_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB46_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB46_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB46_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB46_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB46_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB46_74
.LBB46_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB46_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB46_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB46_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB46_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB46_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB46_78 Depth=1
	movl	$0, -4(%rbp)
.LBB46_80:                              # %for.cond276
                                        #   Parent Loop BB46_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB46_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_88
.LBB46_85:                              # %if.then299
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB46_87:                              # %if.end345
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_101
.LBB46_88:                              # %if.else346
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB46_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB46_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB46_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB46_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB46_94
.LBB46_93:                              # %cond.false368
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB46_94:                              # %cond.end369
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB46_96:                              # %if.end458
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_100
.LBB46_97:                              # %if.else459
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB46_99:                              # %if.end578
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_100
.LBB46_100:                             # %if.end579
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_101
.LBB46_101:                             # %if.end580
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB46_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_108
.LBB46_105:                             # %if.then602
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB46_107:                             # %if.end654
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_108
.LBB46_108:                             # %if.end655
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_109
.LBB46_109:                             # %for.inc656
                                        #   in Loop: Header=BB46_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_80
.LBB46_110:                             # %for.end658
                                        #   in Loop: Header=BB46_78 Depth=1
	jmp	.LBB46_111
.LBB46_111:                             # %for.inc659
                                        #   in Loop: Header=BB46_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_78
.LBB46_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB46_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB46_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB46_114 Depth=1
	movl	$0, -4(%rbp)
.LBB46_116:                             # %for.cond668
                                        #   Parent Loop BB46_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB46_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB46_124
.LBB46_121:                             # %if.then693
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB46_123:                             # %if.end745
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_137
.LBB46_124:                             # %if.else746
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB46_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB46_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB46_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB46_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB46_130
.LBB46_129:                             # %cond.false770
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB46_130:                             # %cond.end772
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB46_132:                             # %if.end862
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_136
.LBB46_133:                             # %if.else863
                                        #   in Loop: Header=BB46_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB46_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB46_135:                             # %if.end983
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_136
.LBB46_136:                             # %if.end984
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_137
.LBB46_137:                             # %if.end985
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_138
.LBB46_138:                             # %for.inc986
                                        #   in Loop: Header=BB46_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_116
.LBB46_139:                             # %for.end988
                                        #   in Loop: Header=BB46_114 Depth=1
	jmp	.LBB46_140
.LBB46_140:                             # %for.inc989
                                        #   in Loop: Header=BB46_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_114
.LBB46_141:                             # %for.end991
	jmp	.LBB46_142
.LBB46_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB46_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB46_144 Depth=1
	movl	$0, -8(%rbp)
.LBB46_146:                             # %for.cond1002
                                        #   Parent Loop BB46_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB46_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB46_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_146
.LBB46_149:                             # %for.end1030
                                        #   in Loop: Header=BB46_144 Depth=1
	jmp	.LBB46_150
.LBB46_150:                             # %for.inc1031
                                        #   in Loop: Header=BB46_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_144
.LBB46_151:                             # %for.end1033
	jmp	.LBB46_175
.LBB46_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB46_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB46_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB46_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_157:                             # %for.cond1049
                                        #   Parent Loop BB46_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB46_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB46_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_157
.LBB46_160:                             # %for.end1065
                                        #   in Loop: Header=BB46_155 Depth=1
	jmp	.LBB46_161
.LBB46_161:                             # %for.inc1066
                                        #   in Loop: Header=BB46_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_155
.LBB46_162:                             # %for.end1068
	jmp	.LBB46_174
.LBB46_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB46_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB46_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_167:                             # %for.cond1081
                                        #   Parent Loop BB46_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB46_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB46_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_167
.LBB46_170:                             # %for.end1101
                                        #   in Loop: Header=BB46_165 Depth=1
	jmp	.LBB46_171
.LBB46_171:                             # %for.inc1102
                                        #   in Loop: Header=BB46_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_165
.LBB46_172:                             # %for.end1104
	jmp	.LBB46_173
.LBB46_173:                             # %if.end1105
	jmp	.LBB46_174
.LBB46_174:                             # %if.end1106
	jmp	.LBB46_175
.LBB46_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB46_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB46_177 Depth=1
	movl	$0, -8(%rbp)
.LBB46_179:                             # %for.cond1116
                                        #   Parent Loop BB46_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB46_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB46_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_179
.LBB46_182:                             # %for.end1141
                                        #   in Loop: Header=BB46_177 Depth=1
	jmp	.LBB46_183
.LBB46_183:                             # %for.inc1142
                                        #   in Loop: Header=BB46_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_177
.LBB46_184:                             # %for.end1144
	jmp	.LBB46_185
.LBB46_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB46_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_189:                             # %for.cond1157
                                        #   Parent Loop BB46_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB46_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB46_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_189
.LBB46_192:                             # %for.end1181
                                        #   in Loop: Header=BB46_187 Depth=1
	jmp	.LBB46_193
.LBB46_193:                             # %for.inc1182
                                        #   in Loop: Header=BB46_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_187
.LBB46_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB46_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$918634017, -52(%rbp)   # imm = 0x36C13E21
	jne	.LBB46_197
.LBB46_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_196
.Lfunc_end46:
	.size	set_stored_macroblock_parameters.17, .Lfunc_end46-set_stored_macroblock_parameters.17
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.18 # -- Begin function SetCoeffAndReconstruction8x8.18
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.18,@function
SetCoeffAndReconstruction8x8.18:        # @SetCoeffAndReconstruction8x8.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1179018618, -40(%rbp)  # imm = 0x4646657A
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB47_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB47_4
.LBB47_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB47_4
.LBB47_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB47_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB47_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB47_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB47_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_6
.LBB47_9:                               # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB47_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB47_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB47_11 Depth=1
	movl	$0, -4(%rbp)
.LBB47_13:                              # %for.cond20
                                        #   Parent Loop BB47_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB47_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB47_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_13
.LBB47_16:                              # %for.end52
                                        #   in Loop: Header=BB47_11 Depth=1
	jmp	.LBB47_17
.LBB47_17:                              # %for.inc53
                                        #   in Loop: Header=BB47_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_11
.LBB47_18:                              # %for.end55
	jmp	.LBB47_28
.LBB47_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB47_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB47_20 Depth=1
	movl	$0, -4(%rbp)
.LBB47_22:                              # %for.cond60
                                        #   Parent Loop BB47_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_22
.LBB47_25:                              # %for.end86
                                        #   in Loop: Header=BB47_20 Depth=1
	jmp	.LBB47_26
.LBB47_26:                              # %for.inc87
                                        #   in Loop: Header=BB47_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_20
.LBB47_27:                              # %for.end89
	jmp	.LBB47_28
.LBB47_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB47_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB47_29 Depth=1
	movl	$0, -4(%rbp)
.LBB47_31:                              # %for.cond94
                                        #   Parent Loop BB47_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB47_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB47_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB47_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB47_35
.LBB47_34:                              # %cond.false127
                                        #   in Loop: Header=BB47_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB47_35
.LBB47_35:                              # %cond.end128
                                        #   in Loop: Header=BB47_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB47_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_31
.LBB47_37:                              # %for.end141
                                        #   in Loop: Header=BB47_29 Depth=1
	jmp	.LBB47_38
.LBB47_38:                              # %for.inc142
                                        #   in Loop: Header=BB47_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_29
.LBB47_39:                              # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB47_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB47_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB47_41 Depth=1
	movl	$0, -4(%rbp)
.LBB47_43:                              # %for.cond151
                                        #   Parent Loop BB47_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB47_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB47_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB47_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB47_47
.LBB47_46:                              # %cond.false185
                                        #   in Loop: Header=BB47_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB47_47
.LBB47_47:                              # %cond.end186
                                        #   in Loop: Header=BB47_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB47_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_43
.LBB47_49:                              # %for.end200
                                        #   in Loop: Header=BB47_41 Depth=1
	jmp	.LBB47_50
.LBB47_50:                              # %for.inc201
                                        #   in Loop: Header=BB47_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_41
.LBB47_51:                              # %for.end203
	jmp	.LBB47_52
.LBB47_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB47_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_55 Depth 2
                                        #       Child Loop BB47_57 Depth 3
                                        #         Child Loop BB47_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB47_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB47_53 Depth=1
	movl	$0, -12(%rbp)
.LBB47_55:                              # %for.cond209
                                        #   Parent Loop BB47_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_57 Depth 3
                                        #         Child Loop BB47_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB47_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB47_55 Depth=2
	movl	$0, -8(%rbp)
.LBB47_57:                              # %for.cond213
                                        #   Parent Loop BB47_53 Depth=1
                                        #     Parent Loop BB47_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB47_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB47_57 Depth=3
	movl	$0, -4(%rbp)
.LBB47_59:                              # %for.cond217
                                        #   Parent Loop BB47_53 Depth=1
                                        #     Parent Loop BB47_55 Depth=2
                                        #       Parent Loop BB47_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB47_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB47_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB47_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_59
.LBB47_62:                              # %for.end239
                                        #   in Loop: Header=BB47_57 Depth=3
	jmp	.LBB47_63
.LBB47_63:                              # %for.inc240
                                        #   in Loop: Header=BB47_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_57
.LBB47_64:                              # %for.end242
                                        #   in Loop: Header=BB47_55 Depth=2
	jmp	.LBB47_65
.LBB47_65:                              # %for.inc243
                                        #   in Loop: Header=BB47_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_55
.LBB47_66:                              # %for.end245
                                        #   in Loop: Header=BB47_53 Depth=1
	jmp	.LBB47_67
.LBB47_67:                              # %for.inc246
                                        #   in Loop: Header=BB47_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_53
.LBB47_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB47_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB47_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB47_83
.LBB47_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB47_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB47_72 Depth=1
	movl	$0, -4(%rbp)
.LBB47_74:                              # %for.cond262
                                        #   Parent Loop BB47_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB47_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB47_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB47_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB47_78
.LBB47_77:                              # %if.else278
                                        #   in Loop: Header=BB47_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB47_78:                              # %if.end283
                                        #   in Loop: Header=BB47_74 Depth=2
	jmp	.LBB47_79
.LBB47_79:                              # %for.inc284
                                        #   in Loop: Header=BB47_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_74
.LBB47_80:                              # %for.end286
                                        #   in Loop: Header=BB47_72 Depth=1
	jmp	.LBB47_81
.LBB47_81:                              # %for.inc287
                                        #   in Loop: Header=BB47_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_72
.LBB47_82:                              # %for.end289
	jmp	.LBB47_95
.LBB47_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB47_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB47_84 Depth=1
	movl	$0, -4(%rbp)
.LBB47_86:                              # %for.cond297
                                        #   Parent Loop BB47_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB47_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB47_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB47_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB47_90
.LBB47_89:                              # %if.else317
                                        #   in Loop: Header=BB47_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB47_90:                              # %if.end326
                                        #   in Loop: Header=BB47_86 Depth=2
	jmp	.LBB47_91
.LBB47_91:                              # %for.inc327
                                        #   in Loop: Header=BB47_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_86
.LBB47_92:                              # %for.end329
                                        #   in Loop: Header=BB47_84 Depth=1
	jmp	.LBB47_93
.LBB47_93:                              # %for.inc330
                                        #   in Loop: Header=BB47_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_84
.LBB47_94:                              # %for.end332
	jmp	.LBB47_95
.LBB47_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB47_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB47_96 Depth=1
	movl	$0, -4(%rbp)
.LBB47_98:                              # %for.cond338
                                        #   Parent Loop BB47_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB47_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB47_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_98
.LBB47_101:                             # %for.end384
                                        #   in Loop: Header=BB47_96 Depth=1
	jmp	.LBB47_102
.LBB47_102:                             # %for.inc385
                                        #   in Loop: Header=BB47_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_96
.LBB47_103:                             # %for.end387
	jmp	.LBB47_157
.LBB47_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB47_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_107 Depth 2
                                        #       Child Loop BB47_109 Depth 3
                                        #         Child Loop BB47_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB47_105 Depth=1
	movl	$0, -12(%rbp)
.LBB47_107:                             # %for.cond394
                                        #   Parent Loop BB47_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_109 Depth 3
                                        #         Child Loop BB47_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB47_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB47_107 Depth=2
	movl	$0, -8(%rbp)
.LBB47_109:                             # %for.cond398
                                        #   Parent Loop BB47_105 Depth=1
                                        #     Parent Loop BB47_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB47_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB47_109 Depth=3
	movl	$0, -4(%rbp)
.LBB47_111:                             # %for.cond402
                                        #   Parent Loop BB47_105 Depth=1
                                        #     Parent Loop BB47_107 Depth=2
                                        #       Parent Loop BB47_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB47_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB47_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB47_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_111
.LBB47_114:                             # %for.end425
                                        #   in Loop: Header=BB47_109 Depth=3
	jmp	.LBB47_115
.LBB47_115:                             # %for.inc426
                                        #   in Loop: Header=BB47_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_109
.LBB47_116:                             # %for.end428
                                        #   in Loop: Header=BB47_107 Depth=2
	jmp	.LBB47_117
.LBB47_117:                             # %for.inc429
                                        #   in Loop: Header=BB47_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_107
.LBB47_118:                             # %for.end431
                                        #   in Loop: Header=BB47_105 Depth=1
	jmp	.LBB47_119
.LBB47_119:                             # %for.inc432
                                        #   in Loop: Header=BB47_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_105
.LBB47_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB47_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB47_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB47_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB47_136
.LBB47_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB47_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB47_125 Depth=1
	movl	$0, -4(%rbp)
.LBB47_127:                             # %for.cond458
                                        #   Parent Loop BB47_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB47_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB47_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB47_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB47_131
.LBB47_130:                             # %if.else478
                                        #   in Loop: Header=BB47_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB47_131:                             # %if.end483
                                        #   in Loop: Header=BB47_127 Depth=2
	jmp	.LBB47_132
.LBB47_132:                             # %for.inc484
                                        #   in Loop: Header=BB47_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_127
.LBB47_133:                             # %for.end486
                                        #   in Loop: Header=BB47_125 Depth=1
	jmp	.LBB47_134
.LBB47_134:                             # %for.inc487
                                        #   in Loop: Header=BB47_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_125
.LBB47_135:                             # %for.end489
	jmp	.LBB47_148
.LBB47_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB47_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB47_137 Depth=1
	movl	$0, -4(%rbp)
.LBB47_139:                             # %for.cond498
                                        #   Parent Loop BB47_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB47_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB47_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB47_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB47_143
.LBB47_142:                             # %if.else518
                                        #   in Loop: Header=BB47_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB47_143:                             # %if.end527
                                        #   in Loop: Header=BB47_139 Depth=2
	jmp	.LBB47_144
.LBB47_144:                             # %for.inc528
                                        #   in Loop: Header=BB47_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_139
.LBB47_145:                             # %for.end530
                                        #   in Loop: Header=BB47_137 Depth=1
	jmp	.LBB47_146
.LBB47_146:                             # %for.inc531
                                        #   in Loop: Header=BB47_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_137
.LBB47_147:                             # %for.end533
	jmp	.LBB47_148
.LBB47_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB47_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB47_149 Depth=1
	movl	$0, -4(%rbp)
.LBB47_151:                             # %for.cond539
                                        #   Parent Loop BB47_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB47_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB47_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_151
.LBB47_154:                             # %for.end585
                                        #   in Loop: Header=BB47_149 Depth=1
	jmp	.LBB47_155
.LBB47_155:                             # %for.inc586
                                        #   in Loop: Header=BB47_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_149
.LBB47_156:                             # %for.end588
	jmp	.LBB47_157
.LBB47_157:                             # %if.end589
	cmpl	$1179018618, -40(%rbp)  # imm = 0x4646657A
	jne	.LBB47_159
.LBB47_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_158
.Lfunc_end47:
	.size	SetCoeffAndReconstruction8x8.18, .Lfunc_end47-SetCoeffAndReconstruction8x8.18
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.19 # -- Begin function SetRefAndMotionVectors.19
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.19,@function
SetRefAndMotionVectors.19:              # @SetRefAndMotionVectors.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$2066120527, -72(%rbp)  # imm = 0x7B267F4F
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB48_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB48_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB48_4
.LBB48_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB48_5
.LBB48_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB48_5
.LBB48_5:                               # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB48_9
.LBB48_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB48_9
.LBB48_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB48_19
# %bb.10:                               # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_13:                              # %for.cond34
                                        #   Parent Loop BB48_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB48_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_13
.LBB48_16:                              # %for.end
                                        #   in Loop: Header=BB48_11 Depth=1
	jmp	.LBB48_17
.LBB48_17:                              # %for.inc117
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_11
.LBB48_18:                              # %for.end119
	jmp	.LBB48_64
.LBB48_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB48_29
# %bb.20:                               # %if.then121
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_23:                              # %for.cond126
                                        #   Parent Loop BB48_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB48_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB48_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_23
.LBB48_26:                              # %for.end211
                                        #   in Loop: Header=BB48_21 Depth=1
	jmp	.LBB48_27
.LBB48_27:                              # %for.inc212
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_21
.LBB48_28:                              # %for.end214
	jmp	.LBB48_64
.LBB48_29:                              # %if.else
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB48_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_32:                              # %for.cond219
                                        #   Parent Loop BB48_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB48_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
.LBB48_35:                              # %if.end255
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB48_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_46
.LBB48_37:                              # %if.then261
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB48_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB48_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB48_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB48_43
.LBB48_42:                              # %cond.false274
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB48_43:                              # %cond.end275
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB48_45
.LBB48_44:                              # %if.else342
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB48_45:                              # %if.end424
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_47
.LBB48_46:                              # %if.else425
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB48_47:                              # %if.end468
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB48_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_58
.LBB48_49:                              # %if.then474
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB48_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB48_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB48_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB48_55
.LBB48_54:                              # %cond.false490
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB48_55:                              # %cond.end492
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB48_57
.LBB48_56:                              # %if.else559
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-28(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB48_57:                              # %if.end641
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_59
.LBB48_58:                              # %if.else642
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB48_59:                              # %if.end685
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_60
.LBB48_60:                              # %for.inc686
                                        #   in Loop: Header=BB48_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_32
.LBB48_61:                              # %for.end688
                                        #   in Loop: Header=BB48_30 Depth=1
	jmp	.LBB48_62
.LBB48_62:                              # %for.inc689
                                        #   in Loop: Header=BB48_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_30
.LBB48_63:                              # %for.end691
	jmp	.LBB48_64
.LBB48_64:                              # %if.end692
	cmpl	$2066120527, -72(%rbp)  # imm = 0x7B267F4F
	jne	.LBB48_66
.LBB48_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_65
.Lfunc_end48:
	.size	SetRefAndMotionVectors.19, .Lfunc_end48-SetRefAndMotionVectors.19
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.20 # -- Begin function GetBestTransformP8x8.20
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.20,@function
GetBestTransformP8x8.20:                # @GetBestTransformP8x8.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1944746673, -64(%rbp)  # imm = 0x73EA7AB1
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB49_2
# %bb.1:                                # %if.then
	movl	$1, -40(%rbp)
	jmp	.LBB49_25
.LBB49_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB49_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_5 Depth 2
                                        #       Child Loop BB49_7 Depth 3
                                        #         Child Loop BB49_9 Depth 4
                                        #           Child Loop BB49_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB49_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB49_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -32(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB49_5:                               # %for.cond3
                                        #   Parent Loop BB49_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_7 Depth 3
                                        #         Child Loop BB49_9 Depth 4
                                        #           Child Loop BB49_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB49_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB49_7:                               # %for.cond7
                                        #   Parent Loop BB49_3 Depth=1
                                        #     Parent Loop BB49_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_9 Depth 4
                                        #           Child Loop BB49_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB49_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB49_9:                               # %for.cond12
                                        #   Parent Loop BB49_3 Depth=1
                                        #     Parent Loop BB49_5 Depth=2
                                        #       Parent Loop BB49_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB49_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB49_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB49_9 Depth=4
	movl	$0, -12(%rbp)
.LBB49_11:                              # %for.cond15
                                        #   Parent Loop BB49_3 Depth=1
                                        #     Parent Loop BB49_5 Depth=2
                                        #       Parent Loop BB49_7 Depth=3
                                        #         Parent Loop BB49_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB49_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB49_11 Depth=5
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB49_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB49_11
.LBB49_14:                              # %for.end
                                        #   in Loop: Header=BB49_9 Depth=4
	jmp	.LBB49_15
.LBB49_15:                              # %for.inc51
                                        #   in Loop: Header=BB49_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_9
.LBB49_16:                              # %for.end53
                                        #   in Loop: Header=BB49_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB49_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_7
.LBB49_18:                              # %for.end57
                                        #   in Loop: Header=BB49_5 Depth=2
	jmp	.LBB49_19
.LBB49_19:                              # %for.inc58
                                        #   in Loop: Header=BB49_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_5
.LBB49_20:                              # %for.end60
                                        #   in Loop: Header=BB49_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB49_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_3
.LBB49_22:                              # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB49_24
# %bb.23:                               # %if.then69
	movl	$1, -40(%rbp)
	jmp	.LBB49_25
.LBB49_24:                              # %if.else
	movl	$0, -40(%rbp)
.LBB49_25:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$1944746673, -64(%rbp)  # imm = 0x73EA7AB1
	jne	.LBB49_27
.LBB49_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_26
.Lfunc_end49:
	.size	GetBestTransformP8x8.20, .Lfunc_end49-GetBestTransformP8x8.20
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.21         # -- Begin function RestoreMV8x8.21
	.p2align	4, 0x90
	.type	RestoreMV8x8.21,@function
RestoreMV8x8.21:                        # @RestoreMV8x8.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1882747771, -16(%rbp)  # imm = 0x7038737B
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB50_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_1
.LBB50_4:                               # %for.end
	cmpl	$1882747771, -16(%rbp)  # imm = 0x7038737B
	jne	.LBB50_6
.LBB50_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_5
.Lfunc_end50:
	.size	RestoreMV8x8.21, .Lfunc_end50-RestoreMV8x8.21
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.22           # -- Begin function StoreMV8x8.22
	.p2align	4, 0x90
	.type	StoreMV8x8.22,@function
StoreMV8x8.22:                          # @StoreMV8x8.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$54537612, -8(%rbp)     # imm = 0x3402D8C
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB51_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_1
.LBB51_4:                               # %for.end
	cmpl	$54537612, -8(%rbp)     # imm = 0x3402D8C
	jne	.LBB51_6
.LBB51_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_5
.Lfunc_end51:
	.size	StoreMV8x8.22, .Lfunc_end51-StoreMV8x8.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.23
.LCPI52_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI52_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.23
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.23,@function
Mode_Decision_for_4x4IntraBlocks.23:    # @Mode_Decision_for_4x4IntraBlocks.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI52_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1878362284, -168(%rbp) # imm = 0x6FF588AC
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -100(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -156(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -164(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB52_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB52_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB52_4
.LBB52_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB52_4
.LBB52_4:                               # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB52_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB52_7
.LBB52_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB52_7
.LBB52_7:                               # %cond.end31
	movl	%eax, -208(%rbp)
.LBB52_8:                               # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB52_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB52_11
.LBB52_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB52_11
.LBB52_11:                              # %cond.end42
	movl	%eax, -108(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB52_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB52_14
.LBB52_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB52_14
.LBB52_14:                              # %cond.end55
	movl	%eax, -112(%rbp)
	cmpl	$0, -108(%rbp)
	jl	.LBB52_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -112(%rbp)
	jge	.LBB52_17
.LBB52_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB52_21
.LBB52_17:                              # %cond.false59
	movl	-108(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB52_19
# %bb.18:                               # %cond.true61
	movl	-108(%rbp), %eax
	jmp	.LBB52_20
.LBB52_19:                              # %cond.false62
	movl	-112(%rbp), %eax
.LBB52_20:                              # %cond.end63
.LBB52_21:                              # %cond.end65
	movl	%eax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-180(%rbp), %rdx
	leaq	-176(%rbp), %rcx
	leaq	-160(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB52_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_49 Depth 2
                                        #       Child Loop BB52_51 Depth 3
                                        #     Child Loop BB52_64 Depth 2
                                        #       Child Loop BB52_66 Depth 3
                                        #     Child Loop BB52_73 Depth 2
                                        #       Child Loop BB52_75 Depth 3
                                        #     Child Loop BB52_81 Depth 2
                                        #       Child Loop BB52_83 Depth 3
                                        #     Child Loop BB52_91 Depth 2
                                        #       Child Loop BB52_93 Depth 3
                                        #     Child Loop BB52_99 Depth 2
                                        #       Child Loop BB52_101 Depth 3
                                        #     Child Loop BB52_107 Depth 2
                                        #       Child Loop BB52_109 Depth 3
                                        #     Child Loop BB52_115 Depth 2
                                        #       Child Loop BB52_117 Depth 3
                                        #     Child Loop BB52_123 Depth 2
                                        #       Child Loop BB52_125 Depth 3
                                        #     Child Loop BB52_131 Depth 2
                                        #       Child Loop BB52_133 Depth 3
                                        #     Child Loop BB52_166 Depth 2
                                        #       Child Loop BB52_168 Depth 3
                                        #     Child Loop BB52_175 Depth 2
                                        #       Child Loop BB52_177 Depth 3
                                        #     Child Loop BB52_183 Depth 2
                                        #       Child Loop BB52_185 Depth 3
                                        #     Child Loop BB52_191 Depth 2
                                        #       Child Loop BB52_193 Depth 3
                                        #     Child Loop BB52_199 Depth 2
                                        #       Child Loop BB52_201 Depth 3
                                        #         Child Loop BB52_203 Depth 4
                                        #     Child Loop BB52_211 Depth 2
                                        #       Child Loop BB52_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB52_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB52_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB52_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB52_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB52_28
.LBB52_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -176(%rbp)
	movb	$1, %al
	jne	.LBB52_32
.LBB52_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB52_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB52_31
.LBB52_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -180(%rbp)
	movb	$1, %al
	jne	.LBB52_32
.LBB52_31:                              # %lor.rhs
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -160(%rbp)
	setne	%al
.LBB52_32:                              # %lor.end
                                        #   in Loop: Header=BB52_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB52_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB52_46
.LBB52_34:                              # %if.then86
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB52_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB52_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB52_38
.LBB52_37:                              # %if.then92
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_223
.LBB52_38:                              # %if.end93
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB52_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB52_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB52_42
.LBB52_41:                              # %if.then99
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_223
.LBB52_42:                              # %if.end100
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB52_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB52_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_223
.LBB52_45:                              # %if.end105
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_46
.LBB52_46:                              # %if.end106
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -184(%rbp)
	je	.LBB52_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB52_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -120(%rbp)
.LBB52_49:                              # %for.cond111
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB52_49 Depth=2
	movl	$0, -12(%rbp)
.LBB52_51:                              # %for.cond114
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB52_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB52_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB52_51
.LBB52_54:                              # %for.end
                                        #   in Loop: Header=BB52_49 Depth=2
	jmp	.LBB52_55
.LBB52_55:                              # %for.inc133
                                        #   in Loop: Header=BB52_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_49
.LBB52_56:                              # %for.end135
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jne	.LBB52_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB52_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_59
.LBB52_58:                              # %cond.false139
                                        #   in Loop: Header=BB52_22 Depth=1
	vmovsd	.LCPI52_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB52_59:                              # %cond.end142
                                        #   in Loop: Header=BB52_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB52_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB52_61:                              # %if.end148
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_221
.LBB52_62:                              # %if.else
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB52_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
.LBB52_64:                              # %for.cond151
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB52_64 Depth=2
	movl	$0, -12(%rbp)
.LBB52_66:                              # %for.cond155
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB52_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB52_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_66
.LBB52_69:                              # %for.end194
                                        #   in Loop: Header=BB52_64 Depth=2
	jmp	.LBB52_70
.LBB52_70:                              # %for.inc195
                                        #   in Loop: Header=BB52_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_64
.LBB52_71:                              # %for.end197
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
.LBB52_73:                              # %for.cond202
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB52_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB52_73 Depth=2
	movl	$0, -12(%rbp)
.LBB52_75:                              # %for.cond206
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB52_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB52_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB52_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_75
.LBB52_78:                              # %for.end224
                                        #   in Loop: Header=BB52_73 Depth=2
	jmp	.LBB52_79
.LBB52_79:                              # %for.inc225
                                        #   in Loop: Header=BB52_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_73
.LBB52_80:                              # %for.end227
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -24(%rbp)
.LBB52_81:                              # %for.cond228
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB52_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB52_81 Depth=2
	movl	$0, -20(%rbp)
.LBB52_83:                              # %for.cond232
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB52_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB52_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB52_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_83
.LBB52_86:                              # %for.end249
                                        #   in Loop: Header=BB52_81 Depth=2
	jmp	.LBB52_87
.LBB52_87:                              # %for.inc250
                                        #   in Loop: Header=BB52_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_81
.LBB52_88:                              # %for.end252
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB52_89:                              # %if.end253
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB52_220
.LBB52_90:                              # %if.else254
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
.LBB52_91:                              # %for.cond255
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB52_91 Depth=2
	movl	$0, -12(%rbp)
.LBB52_93:                              # %for.cond259
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB52_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB52_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_93
.LBB52_96:                              # %for.end345
                                        #   in Loop: Header=BB52_91 Depth=2
	jmp	.LBB52_97
.LBB52_97:                              # %for.inc346
                                        #   in Loop: Header=BB52_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_91
.LBB52_98:                              # %for.end348
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
.LBB52_99:                              # %for.cond349
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB52_99 Depth=2
	movl	$0, -12(%rbp)
.LBB52_101:                             # %for.cond353
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB52_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB52_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_101
.LBB52_104:                             # %for.end368
                                        #   in Loop: Header=BB52_99 Depth=2
	jmp	.LBB52_105
.LBB52_105:                             # %for.inc369
                                        #   in Loop: Header=BB52_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_99
.LBB52_106:                             # %for.end371
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB52_107:                             # %for.cond374
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB52_107 Depth=2
	movl	$0, -12(%rbp)
.LBB52_109:                             # %for.cond378
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB52_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB52_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_109
.LBB52_112:                             # %for.end402
                                        #   in Loop: Header=BB52_107 Depth=2
	jmp	.LBB52_113
.LBB52_113:                             # %for.inc403
                                        #   in Loop: Header=BB52_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_107
.LBB52_114:                             # %for.end405
                                        #   in Loop: Header=BB52_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB52_115:                             # %for.cond409
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB52_115 Depth=2
	movl	$0, -12(%rbp)
.LBB52_117:                             # %for.cond413
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB52_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_117
.LBB52_120:                             # %for.end437
                                        #   in Loop: Header=BB52_115 Depth=2
	jmp	.LBB52_121
.LBB52_121:                             # %for.inc438
                                        #   in Loop: Header=BB52_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_115
.LBB52_122:                             # %for.end440
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB52_123:                             # %for.cond444
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB52_123 Depth=2
	movl	$0, -12(%rbp)
.LBB52_125:                             # %for.cond448
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB52_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_125
.LBB52_128:                             # %for.end463
                                        #   in Loop: Header=BB52_123 Depth=2
	jmp	.LBB52_129
.LBB52_129:                             # %for.inc464
                                        #   in Loop: Header=BB52_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_123
.LBB52_130:                             # %for.end466
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
.LBB52_131:                             # %for.cond467
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB52_131 Depth=2
	movl	$0, -12(%rbp)
.LBB52_133:                             # %for.cond471
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB52_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB52_137
.LBB52_136:                             # %cond.false516
                                        #   in Loop: Header=BB52_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB52_137:                             # %cond.end529
                                        #   in Loop: Header=BB52_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB52_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB52_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_143
.LBB52_139:                             # %cond.false535
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB52_142
.LBB52_141:                             # %cond.false551
                                        #   in Loop: Header=BB52_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB52_142:                             # %cond.end564
                                        #   in Loop: Header=BB52_133 Depth=3
.LBB52_143:                             # %cond.end566
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB52_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB52_146
.LBB52_145:                             # %cond.false588
                                        #   in Loop: Header=BB52_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB52_146:                             # %cond.end598
                                        #   in Loop: Header=BB52_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB52_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB52_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_152
.LBB52_148:                             # %cond.false604
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB52_151
.LBB52_150:                             # %cond.false617
                                        #   in Loop: Header=BB52_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB52_151:                             # %cond.end627
                                        #   in Loop: Header=BB52_133 Depth=3
.LBB52_152:                             # %cond.end629
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB52_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB52_155
.LBB52_154:                             # %cond.false655
                                        #   in Loop: Header=BB52_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB52_155:                             # %cond.end668
                                        #   in Loop: Header=BB52_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB52_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB52_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_161
.LBB52_157:                             # %cond.false674
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB52_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB52_160
.LBB52_159:                             # %cond.false690
                                        #   in Loop: Header=BB52_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB52_160:                             # %cond.end703
                                        #   in Loop: Header=BB52_133 Depth=3
.LBB52_161:                             # %cond.end705
                                        #   in Loop: Header=BB52_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB52_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_133
.LBB52_163:                             # %for.end718
                                        #   in Loop: Header=BB52_131 Depth=2
	jmp	.LBB52_164
.LBB52_164:                             # %for.inc719
                                        #   in Loop: Header=BB52_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_131
.LBB52_165:                             # %for.end721
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB52_166:                             # %for.cond722
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB52_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB52_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB52_168:                             # %for.cond726
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB52_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB52_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_168
.LBB52_171:                             # %for.end831
                                        #   in Loop: Header=BB52_166 Depth=2
	jmp	.LBB52_172
.LBB52_172:                             # %for.inc832
                                        #   in Loop: Header=BB52_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_166
.LBB52_173:                             # %for.end834
                                        #   in Loop: Header=BB52_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
.LBB52_175:                             # %for.cond842
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB52_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB52_175 Depth=2
	movl	$0, -12(%rbp)
.LBB52_177:                             # %for.cond846
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB52_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB52_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB52_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_177
.LBB52_180:                             # %for.end865
                                        #   in Loop: Header=BB52_175 Depth=2
	jmp	.LBB52_181
.LBB52_181:                             # %for.inc866
                                        #   in Loop: Header=BB52_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_175
.LBB52_182:                             # %for.end868
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
.LBB52_183:                             # %for.cond869
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB52_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB52_183 Depth=2
	movl	$0, -12(%rbp)
.LBB52_185:                             # %for.cond873
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB52_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB52_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB52_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_185
.LBB52_188:                             # %for.end893
                                        #   in Loop: Header=BB52_183 Depth=2
	jmp	.LBB52_189
.LBB52_189:                             # %for.inc894
                                        #   in Loop: Header=BB52_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_183
.LBB52_190:                             # %for.end896
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -16(%rbp)
.LBB52_191:                             # %for.cond897
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB52_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB52_191 Depth=2
	movl	$0, -12(%rbp)
.LBB52_193:                             # %for.cond901
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB52_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB52_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB52_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_193
.LBB52_196:                             # %for.end921
                                        #   in Loop: Header=BB52_191 Depth=2
	jmp	.LBB52_197
.LBB52_197:                             # %for.inc922
                                        #   in Loop: Header=BB52_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_191
.LBB52_198:                             # %for.end924
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -12(%rbp)
.LBB52_199:                             # %for.cond925
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_201 Depth 3
                                        #         Child Loop BB52_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB52_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB52_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB52_201:                             # %for.cond985
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB52_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB52_201 Depth=3
	movl	$0, -20(%rbp)
.LBB52_203:                             # %for.cond989
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_199 Depth=2
                                        #       Parent Loop BB52_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB52_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB52_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB52_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_203
.LBB52_206:                             # %for.end1011
                                        #   in Loop: Header=BB52_201 Depth=3
	jmp	.LBB52_207
.LBB52_207:                             # %for.inc1012
                                        #   in Loop: Header=BB52_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_201
.LBB52_208:                             # %for.end1014
                                        #   in Loop: Header=BB52_199 Depth=2
	jmp	.LBB52_209
.LBB52_209:                             # %for.inc1015
                                        #   in Loop: Header=BB52_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_199
.LBB52_210:                             # %for.end1017
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	$0, -24(%rbp)
.LBB52_211:                             # %for.cond1018
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB52_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB52_211 Depth=2
	movl	$0, -20(%rbp)
.LBB52_213:                             # %for.cond1022
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB52_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB52_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB52_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_213
.LBB52_216:                             # %for.end1040
                                        #   in Loop: Header=BB52_211 Depth=2
	jmp	.LBB52_217
.LBB52_217:                             # %for.inc1041
                                        #   in Loop: Header=BB52_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_211
.LBB52_218:                             # %for.end1043
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB52_219:                             # %if.end1044
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_220
.LBB52_220:                             # %if.end1045
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_221
.LBB52_221:                             # %if.end1046
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_222
.LBB52_222:                             # %if.end1047
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_223
.LBB52_223:                             # %for.inc1048
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB52_22
.LBB52_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-156(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-164(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB52_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB52_230
.LBB52_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB52_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB52_229
.LBB52_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB52_229:                             # %cond.end1065
.LBB52_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB52_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB52_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB52_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB52_233 Depth=1
	movl	$0, -12(%rbp)
.LBB52_235:                             # %for.cond1087
                                        #   Parent Loop BB52_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB52_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB52_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_235
.LBB52_238:                             # %for.end1128
                                        #   in Loop: Header=BB52_233 Depth=1
	jmp	.LBB52_239
.LBB52_239:                             # %for.inc1129
                                        #   in Loop: Header=BB52_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_233
.LBB52_240:                             # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-172(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	jmp	.LBB52_317
.LBB52_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB52_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB52_242 Depth=1
	movl	$0, -12(%rbp)
.LBB52_244:                             # %for.cond1138
                                        #   Parent Loop BB52_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB52_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB52_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_244
.LBB52_247:                             # %for.end1226
                                        #   in Loop: Header=BB52_242 Depth=1
	jmp	.LBB52_248
.LBB52_248:                             # %for.inc1227
                                        #   in Loop: Header=BB52_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_242
.LBB52_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB52_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB52_250 Depth=1
	movl	$0, -12(%rbp)
.LBB52_252:                             # %for.cond1234
                                        #   Parent Loop BB52_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB52_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB52_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_252
.LBB52_255:                             # %for.end1249
                                        #   in Loop: Header=BB52_250 Depth=1
	jmp	.LBB52_256
.LBB52_256:                             # %for.inc1250
                                        #   in Loop: Header=BB52_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_250
.LBB52_257:                             # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-172(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB52_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB52_258 Depth=1
	movl	$0, -12(%rbp)
.LBB52_260:                             # %for.cond1258
                                        #   Parent Loop BB52_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB52_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB52_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_260
.LBB52_263:                             # %for.end1282
                                        #   in Loop: Header=BB52_258 Depth=1
	jmp	.LBB52_264
.LBB52_264:                             # %for.inc1283
                                        #   in Loop: Header=BB52_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_258
.LBB52_265:                             # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB52_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB52_266 Depth=1
	movl	$0, -12(%rbp)
.LBB52_268:                             # %for.cond1328
                                        #   Parent Loop BB52_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB52_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB52_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_268
.LBB52_271:                             # %for.end1352
                                        #   in Loop: Header=BB52_266 Depth=1
	jmp	.LBB52_272
.LBB52_272:                             # %for.inc1353
                                        #   in Loop: Header=BB52_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_266
.LBB52_273:                             # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB52_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB52_274 Depth=1
	movl	$0, -12(%rbp)
.LBB52_276:                             # %for.cond1398
                                        #   Parent Loop BB52_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB52_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB52_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_276
.LBB52_279:                             # %for.end1413
                                        #   in Loop: Header=BB52_274 Depth=1
	jmp	.LBB52_280
.LBB52_280:                             # %for.inc1414
                                        #   in Loop: Header=BB52_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_274
.LBB52_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB52_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB52_282 Depth=1
	movl	$0, -12(%rbp)
.LBB52_284:                             # %for.cond1421
                                        #   Parent Loop BB52_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB52_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_288
.LBB52_287:                             # %cond.false1467
                                        #   in Loop: Header=BB52_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB52_288:                             # %cond.end1480
                                        #   in Loop: Header=BB52_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB52_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB52_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_294
.LBB52_290:                             # %cond.false1486
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_293
.LBB52_292:                             # %cond.false1502
                                        #   in Loop: Header=BB52_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB52_293:                             # %cond.end1515
                                        #   in Loop: Header=BB52_284 Depth=2
.LBB52_294:                             # %cond.end1517
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB52_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB52_297
.LBB52_296:                             # %cond.false1541
                                        #   in Loop: Header=BB52_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB52_297:                             # %cond.end1551
                                        #   in Loop: Header=BB52_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB52_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB52_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_303
.LBB52_299:                             # %cond.false1557
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_302
.LBB52_301:                             # %cond.false1570
                                        #   in Loop: Header=BB52_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB52_302:                             # %cond.end1580
                                        #   in Loop: Header=BB52_284 Depth=2
.LBB52_303:                             # %cond.end1582
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB52_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB52_306
.LBB52_305:                             # %cond.false1608
                                        #   in Loop: Header=BB52_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB52_306:                             # %cond.end1621
                                        #   in Loop: Header=BB52_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB52_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB52_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_312
.LBB52_308:                             # %cond.false1627
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB52_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_311
.LBB52_310:                             # %cond.false1643
                                        #   in Loop: Header=BB52_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB52_311:                             # %cond.end1656
                                        #   in Loop: Header=BB52_284 Depth=2
.LBB52_312:                             # %cond.end1658
                                        #   in Loop: Header=BB52_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB52_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_284
.LBB52_314:                             # %for.end1671
                                        #   in Loop: Header=BB52_282 Depth=1
	jmp	.LBB52_315
.LBB52_315:                             # %for.inc1672
                                        #   in Loop: Header=BB52_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_282
.LBB52_316:                             # %for.end1674
	jmp	.LBB52_317
.LBB52_317:                             # %if.end1675
	jmp	.LBB52_367
.LBB52_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB52_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB52_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB52_319 Depth=1
	movl	$0, -12(%rbp)
.LBB52_321:                             # %for.cond1681
                                        #   Parent Loop BB52_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB52_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB52_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB52_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_321
.LBB52_324:                             # %for.end1700
                                        #   in Loop: Header=BB52_319 Depth=1
	jmp	.LBB52_325
.LBB52_325:                             # %for.inc1701
                                        #   in Loop: Header=BB52_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_319
.LBB52_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB52_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB52_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB52_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB52_328 Depth=1
	movl	$0, -12(%rbp)
.LBB52_330:                             # %for.cond1711
                                        #   Parent Loop BB52_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB52_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB52_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB52_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_330
.LBB52_333:                             # %for.end1731
                                        #   in Loop: Header=BB52_328 Depth=1
	jmp	.LBB52_334
.LBB52_334:                             # %for.inc1732
                                        #   in Loop: Header=BB52_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_328
.LBB52_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB52_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB52_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB52_336 Depth=1
	movl	$0, -12(%rbp)
.LBB52_338:                             # %for.cond1739
                                        #   Parent Loop BB52_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB52_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB52_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB52_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_338
.LBB52_341:                             # %for.end1759
                                        #   in Loop: Header=BB52_336 Depth=1
	jmp	.LBB52_342
.LBB52_342:                             # %for.inc1760
                                        #   in Loop: Header=BB52_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_336
.LBB52_343:                             # %for.end1762
	jmp	.LBB52_344
.LBB52_344:                             # %if.end1763
	movl	$0, -24(%rbp)
.LBB52_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB52_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB52_345 Depth=1
	movl	$0, -20(%rbp)
.LBB52_347:                             # %for.cond1768
                                        #   Parent Loop BB52_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB52_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB52_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB52_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_347
.LBB52_350:                             # %for.end1800
                                        #   in Loop: Header=BB52_345 Depth=1
	jmp	.LBB52_351
.LBB52_351:                             # %for.inc1801
                                        #   in Loop: Header=BB52_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_345
.LBB52_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB52_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB52_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_356 Depth 2
                                        #       Child Loop BB52_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB52_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB52_354 Depth=1
	movl	$0, -24(%rbp)
.LBB52_356:                             # %for.cond1811
                                        #   Parent Loop BB52_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB52_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB52_356 Depth=2
	movl	$0, -20(%rbp)
.LBB52_358:                             # %for.cond1815
                                        #   Parent Loop BB52_354 Depth=1
                                        #     Parent Loop BB52_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB52_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB52_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB52_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_358
.LBB52_361:                             # %for.end1837
                                        #   in Loop: Header=BB52_356 Depth=2
	jmp	.LBB52_362
.LBB52_362:                             # %for.inc1838
                                        #   in Loop: Header=BB52_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_356
.LBB52_363:                             # %for.end1840
                                        #   in Loop: Header=BB52_354 Depth=1
	jmp	.LBB52_364
.LBB52_364:                             # %for.inc1841
                                        #   in Loop: Header=BB52_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_354
.LBB52_365:                             # %for.end1843
	jmp	.LBB52_366
.LBB52_366:                             # %if.end1844
	jmp	.LBB52_367
.LBB52_367:                             # %if.end1845
	movl	-100(%rbp), %ebx
	cmpl	$1878362284, -168(%rbp) # imm = 0x6FF588AC
	jne	.LBB52_369
.LBB52_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_368
.Lfunc_end52:
	.size	Mode_Decision_for_4x4IntraBlocks.23, .Lfunc_end52-Mode_Decision_for_4x4IntraBlocks.23
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.24 # -- Begin function Intra16x16_Mode_Decision.24
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.24,@function
Intra16x16_Mode_Decision.24:            # @Intra16x16_Mode_Decision.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1467726977, -56(%rbp)  # imm = 0x577BBC81
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB53_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB53_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB53_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB53_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB53_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB53_4 Depth=1
	movl	$0, -8(%rbp)
.LBB53_6:                               # %for.cond4
                                        #   Parent Loop BB53_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB53_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB53_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB53_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_6
.LBB53_9:                               # %for.end
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_10
.LBB53_10:                              # %for.inc87
                                        #   in Loop: Header=BB53_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_4
.LBB53_11:                              # %for.end89
	jmp	.LBB53_12
.LBB53_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB53_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB53_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB53_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB53_14 Depth=1
	movl	$0, -8(%rbp)
.LBB53_16:                              # %for.cond99
                                        #   Parent Loop BB53_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB53_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB53_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB53_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_16
.LBB53_19:                              # %for.end123
                                        #   in Loop: Header=BB53_14 Depth=1
	jmp	.LBB53_20
.LBB53_20:                              # %for.inc124
                                        #   in Loop: Header=BB53_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_14
.LBB53_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB53_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB53_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB53_22 Depth=1
	movl	$0, -8(%rbp)
.LBB53_24:                              # %for.cond132
                                        #   Parent Loop BB53_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB53_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB53_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB53_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_24
.LBB53_27:                              # %for.end156
                                        #   in Loop: Header=BB53_22 Depth=1
	jmp	.LBB53_28
.LBB53_28:                              # %for.inc157
                                        #   in Loop: Header=BB53_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_22
.LBB53_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB53_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB53_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB53_30 Depth=1
	movl	$0, -8(%rbp)
.LBB53_32:                              # %for.cond165
                                        #   Parent Loop BB53_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB53_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB53_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB53_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_32
.LBB53_35:                              # %for.end180
                                        #   in Loop: Header=BB53_30 Depth=1
	jmp	.LBB53_36
.LBB53_36:                              # %for.inc181
                                        #   in Loop: Header=BB53_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_30
.LBB53_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB53_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB53_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB53_38 Depth=1
	movl	$0, -8(%rbp)
.LBB53_40:                              # %for.cond190
                                        #   Parent Loop BB53_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB53_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB53_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB53_44
.LBB53_43:                              # %cond.false
                                        #   in Loop: Header=BB53_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB53_44:                              # %cond.end
                                        #   in Loop: Header=BB53_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB53_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB53_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB53_50
.LBB53_46:                              # %cond.false246
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB53_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB53_49
.LBB53_48:                              # %cond.false260
                                        #   in Loop: Header=BB53_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB53_49:                              # %cond.end271
                                        #   in Loop: Header=BB53_40 Depth=2
.LBB53_50:                              # %cond.end273
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB53_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB53_53
.LBB53_52:                              # %cond.false295
                                        #   in Loop: Header=BB53_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB53_53:                              # %cond.end305
                                        #   in Loop: Header=BB53_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB53_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB53_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_59
.LBB53_55:                              # %cond.false311
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB53_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB53_58
.LBB53_57:                              # %cond.false324
                                        #   in Loop: Header=BB53_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB53_58:                              # %cond.end334
                                        #   in Loop: Header=BB53_40 Depth=2
.LBB53_59:                              # %cond.end336
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB53_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB53_62
.LBB53_61:                              # %cond.false359
                                        #   in Loop: Header=BB53_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB53_62:                              # %cond.end370
                                        #   in Loop: Header=BB53_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB53_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB53_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB53_68
.LBB53_64:                              # %cond.false376
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB53_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB53_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB53_67
.LBB53_66:                              # %cond.false390
                                        #   in Loop: Header=BB53_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB53_67:                              # %cond.end401
                                        #   in Loop: Header=BB53_40 Depth=2
.LBB53_68:                              # %cond.end403
                                        #   in Loop: Header=BB53_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB53_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_40
.LBB53_70:                              # %for.end416
                                        #   in Loop: Header=BB53_38 Depth=1
	jmp	.LBB53_71
.LBB53_71:                              # %for.inc417
                                        #   in Loop: Header=BB53_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_38
.LBB53_72:                              # %for.end419
	jmp	.LBB53_73
.LBB53_73:                              # %if.end420
	cmpl	$1467726977, -56(%rbp)  # imm = 0x577BBC81
	jne	.LBB53_75
.LBB53_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_74
.Lfunc_end53:
	.size	Intra16x16_Mode_Decision.24, .Lfunc_end53-Intra16x16_Mode_Decision.24
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.25   # -- Begin function SetMotionVectorsMB.25
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.25,@function
SetMotionVectorsMB.25:                  # @SetMotionVectorsMB.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1800671057, -68(%rbp)  # imm = 0x6B540F51
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_3:                               # %for.cond3
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB54_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB54_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB54_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB54_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB54_10
.LBB54_9:                               # %cond.false
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB54_10:                              # %cond.end
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB54_11:                              # %if.end
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB54_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB54_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB54_15
.LBB54_14:                              # %if.else
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB54_15:                              # %if.end89
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_29
.LBB54_16:                              # %if.else90
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB54_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB54_28
.LBB54_18:                              # %if.else122
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB54_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB54_27
.LBB54_20:                              # %if.else174
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB54_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB54_26
.LBB54_22:                              # %if.else226
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB54_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB54_25
.LBB54_24:                              # %if.else298
                                        #   in Loop: Header=BB54_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB54_25:                              # %if.end299
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_26
.LBB54_26:                              # %if.end300
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_27
.LBB54_27:                              # %if.end301
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_28
.LBB54_28:                              # %if.end302
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_29
.LBB54_29:                              # %if.end303
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_30
.LBB54_30:                              # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_3
.LBB54_31:                              # %for.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_32
.LBB54_32:                              # %for.inc304
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_1
.LBB54_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB54_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_37 Depth 2
                                        #       Child Loop BB54_39 Depth 3
                                        #         Child Loop BB54_41 Depth 4
                                        #           Child Loop BB54_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB54_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB54_35 Depth=1
	movl	$0, -8(%rbp)
.LBB54_37:                              # %for.cond313
                                        #   Parent Loop BB54_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_39 Depth 3
                                        #         Child Loop BB54_41 Depth 4
                                        #           Child Loop BB54_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB54_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB54_37 Depth=2
	movl	$0, -20(%rbp)
.LBB54_39:                              # %for.cond317
                                        #   Parent Loop BB54_35 Depth=1
                                        #     Parent Loop BB54_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_41 Depth 4
                                        #           Child Loop BB54_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB54_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB54_39 Depth=3
	movl	$0, -24(%rbp)
.LBB54_41:                              # %for.cond321
                                        #   Parent Loop BB54_35 Depth=1
                                        #     Parent Loop BB54_37 Depth=2
                                        #       Parent Loop BB54_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB54_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB54_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB54_41 Depth=4
	movl	$0, -28(%rbp)
.LBB54_43:                              # %for.cond325
                                        #   Parent Loop BB54_35 Depth=1
                                        #     Parent Loop BB54_37 Depth=2
                                        #       Parent Loop BB54_39 Depth=3
                                        #         Parent Loop BB54_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB54_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB54_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB54_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB54_43
.LBB54_46:                              # %for.end423
                                        #   in Loop: Header=BB54_41 Depth=4
	jmp	.LBB54_47
.LBB54_47:                              # %for.inc424
                                        #   in Loop: Header=BB54_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_41
.LBB54_48:                              # %for.end426
                                        #   in Loop: Header=BB54_39 Depth=3
	jmp	.LBB54_49
.LBB54_49:                              # %for.inc427
                                        #   in Loop: Header=BB54_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_39
.LBB54_50:                              # %for.end429
                                        #   in Loop: Header=BB54_37 Depth=2
	jmp	.LBB54_51
.LBB54_51:                              # %for.inc430
                                        #   in Loop: Header=BB54_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_37
.LBB54_52:                              # %for.end432
                                        #   in Loop: Header=BB54_35 Depth=1
	jmp	.LBB54_53
.LBB54_53:                              # %for.inc433
                                        #   in Loop: Header=BB54_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_35
.LBB54_54:                              # %for.end435
	jmp	.LBB54_55
.LBB54_55:                              # %if.end436
	cmpl	$1800671057, -68(%rbp)  # imm = 0x6B540F51
	jne	.LBB54_57
.LBB54_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_56
.Lfunc_end54:
	.size	SetMotionVectorsMB.25, .Lfunc_end54-SetMotionVectorsMB.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.26
.LCPI55_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.26
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.26,@function
RDCost_for_macroblocks.26:              # @RDCost_for_macroblocks.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1459877989, -104(%rbp) # imm = 0x5703F865
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -120(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB55_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB55_3
.LBB55_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB55_3
.LBB55_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB55_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB55_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB55_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB55_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB55_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB55_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	$0, -12(%rbp)
.LBB55_10:                              # %for.cond17
                                        #   Parent Loop BB55_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB55_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB55_10 Depth=2
	movq	direct_pdir, %rax
	movl	-96(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB55_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB55_177
.LBB55_13:                              # %if.end
                                        #   in Loop: Header=BB55_10 Depth=2
	jmp	.LBB55_14
.LBB55_14:                              # %for.inc
                                        #   in Loop: Header=BB55_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_10
.LBB55_15:                              # %for.end
                                        #   in Loop: Header=BB55_8 Depth=1
	jmp	.LBB55_16
.LBB55_16:                              # %for.inc30
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_8
.LBB55_17:                              # %for.end32
	jmp	.LBB55_18
.LBB55_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB55_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB55_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB55_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB55_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB55_177
.LBB55_23:                              # %if.end46
	jmp	.LBB55_76
.LBB55_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB55_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB55_75
.LBB55_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB55_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB55_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB55_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_31 Depth 2
                                        #       Child Loop BB55_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB55_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB55_29 Depth=1
	movl	$0, -12(%rbp)
.LBB55_31:                              # %for.cond61
                                        #   Parent Loop BB55_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB55_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB55_31 Depth=2
	movl	$0, -24(%rbp)
.LBB55_33:                              # %for.cond65
                                        #   Parent Loop BB55_29 Depth=1
                                        #     Parent Loop BB55_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB55_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB55_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB55_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB55_33 Depth=3
	movl	$2, -40(%rbp)
.LBB55_36:                              # %if.end77
                                        #   in Loop: Header=BB55_33 Depth=3
	jmp	.LBB55_37
.LBB55_37:                              # %for.inc78
                                        #   in Loop: Header=BB55_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_33
.LBB55_38:                              # %for.end80
                                        #   in Loop: Header=BB55_31 Depth=2
	jmp	.LBB55_39
.LBB55_39:                              # %for.inc81
                                        #   in Loop: Header=BB55_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_31
.LBB55_40:                              # %for.end83
                                        #   in Loop: Header=BB55_29 Depth=1
	jmp	.LBB55_41
.LBB55_41:                              # %for.inc84
                                        #   in Loop: Header=BB55_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_29
.LBB55_42:                              # %for.end86
	movl	$0, -32(%rbp)
.LBB55_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB55_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB55_43 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB55_43 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB55_43
.LBB55_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB55_47:                              # %if.end97
	jmp	.LBB55_74
.LBB55_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB55_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB55_73
.LBB55_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB55_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB55_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB55_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_55 Depth 2
                                        #       Child Loop BB55_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB55_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB55_53 Depth=1
	movl	$0, -12(%rbp)
.LBB55_55:                              # %for.cond115
                                        #   Parent Loop BB55_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB55_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB55_55 Depth=2
	movl	$0, -24(%rbp)
.LBB55_57:                              # %for.cond119
                                        #   Parent Loop BB55_53 Depth=1
                                        #     Parent Loop BB55_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB55_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB55_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB55_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB55_57 Depth=3
	movl	$2, -40(%rbp)
.LBB55_60:                              # %if.end131
                                        #   in Loop: Header=BB55_57 Depth=3
	jmp	.LBB55_61
.LBB55_61:                              # %for.inc132
                                        #   in Loop: Header=BB55_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_57
.LBB55_62:                              # %for.end134
                                        #   in Loop: Header=BB55_55 Depth=2
	jmp	.LBB55_63
.LBB55_63:                              # %for.inc135
                                        #   in Loop: Header=BB55_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_55
.LBB55_64:                              # %for.end137
                                        #   in Loop: Header=BB55_53 Depth=1
	jmp	.LBB55_65
.LBB55_65:                              # %for.inc138
                                        #   in Loop: Header=BB55_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_53
.LBB55_66:                              # %for.end140
	movl	$0, -32(%rbp)
.LBB55_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB55_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB55_67 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB55_67 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB55_67
.LBB55_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB55_71:                              # %if.end152
	jmp	.LBB55_72
.LBB55_72:                              # %if.end153
	jmp	.LBB55_73
.LBB55_73:                              # %if.end154
	jmp	.LBB55_74
.LBB55_74:                              # %if.end155
	jmp	.LBB55_75
.LBB55_75:                              # %if.end156
	jmp	.LBB55_76
.LBB55_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB55_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB55_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB55_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB55_81
.LBB55_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB55_81
.LBB55_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB55_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB55_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB55_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB55_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB55_84 Depth=1
	movl	$0, -12(%rbp)
.LBB55_86:                              # %for.cond179
                                        #   Parent Loop BB55_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB55_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB55_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB55_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_86
.LBB55_89:                              # %for.end196
                                        #   in Loop: Header=BB55_84 Depth=1
	jmp	.LBB55_90
.LBB55_90:                              # %for.inc197
                                        #   in Loop: Header=BB55_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_84
.LBB55_91:                              # %for.end199
	jmp	.LBB55_101
.LBB55_92:                              # %if.else200
	movl	$0, -16(%rbp)
.LBB55_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB55_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB55_93 Depth=1
	movl	$0, -12(%rbp)
.LBB55_95:                              # %for.cond205
                                        #   Parent Loop BB55_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB55_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB55_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB55_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_95
.LBB55_98:                              # %for.end220
                                        #   in Loop: Header=BB55_93 Depth=1
	jmp	.LBB55_99
.LBB55_99:                              # %for.inc221
                                        #   in Loop: Header=BB55_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_93
.LBB55_100:                             # %for.end223
	jmp	.LBB55_101
.LBB55_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB55_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB55_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB55_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB55_107
.LBB55_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB55_107
# %bb.106:                              # %if.then238
	leaq	-28(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB55_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB55_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB55_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB55_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB55_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB55_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_114 Depth 2
                                        #       Child Loop BB55_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB55_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB55_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB55_114:                             # %for.cond259
                                        #   Parent Loop BB55_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB55_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB55_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB55_116:                             # %for.cond263
                                        #   Parent Loop BB55_112 Depth=1
                                        #     Parent Loop BB55_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB55_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB55_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_116
.LBB55_119:                             # %for.end291
                                        #   in Loop: Header=BB55_114 Depth=2
	jmp	.LBB55_120
.LBB55_120:                             # %for.inc292
                                        #   in Loop: Header=BB55_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_114
.LBB55_121:                             # %for.end294
                                        #   in Loop: Header=BB55_112 Depth=1
	jmp	.LBB55_122
.LBB55_122:                             # %for.inc295
                                        #   in Loop: Header=BB55_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_112
.LBB55_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB55_133
.LBB55_124:                             # %if.else300
	movl	$0, -12(%rbp)
.LBB55_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB55_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB55_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB55_127:                             # %for.cond306
                                        #   Parent Loop BB55_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB55_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB55_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_127
.LBB55_130:                             # %for.end334
                                        #   in Loop: Header=BB55_125 Depth=1
	jmp	.LBB55_131
.LBB55_131:                             # %for.inc335
                                        #   in Loop: Header=BB55_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_125
.LBB55_132:                             # %for.end337
	jmp	.LBB55_133
.LBB55_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB55_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB55_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB55_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB55_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB55_137:                             # %for.cond347
                                        #   Parent Loop BB55_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB55_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB55_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_137
.LBB55_140:                             # %for.end398
                                        #   in Loop: Header=BB55_135 Depth=1
	jmp	.LBB55_141
.LBB55_141:                             # %for.inc399
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_135
.LBB55_142:                             # %for.end401
	jmp	.LBB55_143
.LBB55_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB55_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB55_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB55_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB55_148
.LBB55_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-76(%rbp), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB55_149
.LBB55_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-28(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB55_149:                             # %if.end422
	jmp	.LBB55_151
.LBB55_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB55_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI55_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB55_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI55_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB55_154
.LBB55_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB55_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB55_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB55_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB55_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB55_159
.LBB55_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB55_177
.LBB55_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB55_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB55_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB55_165
	jmp	.LBB55_176
.LBB55_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB55_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB55_176
	jmp	.LBB55_165
.LBB55_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB55_165
	jmp	.LBB55_176
.LBB55_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB55_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB55_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB55_171
	jmp	.LBB55_174
.LBB55_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB55_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB55_174
	jmp	.LBB55_171
.LBB55_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB55_171
	jmp	.LBB55_174
.LBB55_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB55_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB55_177
.LBB55_173:                             # %if.end482
	jmp	.LBB55_174
.LBB55_174:                             # %if.end483
	jmp	.LBB55_175
.LBB55_175:                             # %if.end484
	jmp	.LBB55_176
.LBB55_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB55_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$1459877989, -104(%rbp) # imm = 0x5703F865
	jne	.LBB55_179
.LBB55_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_178
.Lfunc_end55:
	.size	RDCost_for_macroblocks.26, .Lfunc_end55-RDCost_for_macroblocks.26
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.27    # -- Begin function RestoreMVBlock8x8.27
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.27,@function
RestoreMVBlock8x8.27:                   # @RestoreMVBlock8x8.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1963256601, -68(%rbp)  # imm = 0x7504EB19
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB56_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB56_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB56_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB56_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_5:                               # %for.cond7
                                        #   Parent Loop BB56_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB56_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB56_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_5
.LBB56_8:                               # %for.end
                                        #   in Loop: Header=BB56_3 Depth=1
	jmp	.LBB56_9
.LBB56_9:                               # %for.inc76
                                        #   in Loop: Header=BB56_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_3
.LBB56_10:                              # %for.end78
	jmp	.LBB56_11
.LBB56_11:                              # %if.end
	jmp	.LBB56_46
.LBB56_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB56_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB56_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB56_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_16:                              # %for.cond84
                                        #   Parent Loop BB56_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB56_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB56_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_16
.LBB56_19:                              # %for.end161
                                        #   in Loop: Header=BB56_14 Depth=1
	jmp	.LBB56_20
.LBB56_20:                              # %for.inc162
                                        #   in Loop: Header=BB56_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_14
.LBB56_21:                              # %for.end164
	jmp	.LBB56_45
.LBB56_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB56_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB56_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB56_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_26:                              # %for.cond171
                                        #   Parent Loop BB56_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB56_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB56_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_26
.LBB56_29:                              # %for.end248
                                        #   in Loop: Header=BB56_24 Depth=1
	jmp	.LBB56_30
.LBB56_30:                              # %for.inc249
                                        #   in Loop: Header=BB56_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_24
.LBB56_31:                              # %for.end251
	jmp	.LBB56_44
.LBB56_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB56_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB56_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB56_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_36:                              # %for.cond258
                                        #   Parent Loop BB56_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB56_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB56_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_36
.LBB56_39:                              # %for.end407
                                        #   in Loop: Header=BB56_34 Depth=1
	jmp	.LBB56_40
.LBB56_40:                              # %for.inc408
                                        #   in Loop: Header=BB56_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_34
.LBB56_41:                              # %for.end410
	jmp	.LBB56_43
.LBB56_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB56_43:                              # %if.end412
	jmp	.LBB56_44
.LBB56_44:                              # %if.end413
	jmp	.LBB56_45
.LBB56_45:                              # %if.end414
	jmp	.LBB56_46
.LBB56_46:                              # %if.end415
	cmpl	$1963256601, -68(%rbp)  # imm = 0x7504EB19
	jne	.LBB56_48
.LBB56_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_47
.Lfunc_end56:
	.size	RestoreMVBlock8x8.27, .Lfunc_end56-RestoreMVBlock8x8.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.28
.LCPI57_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI57_1:
	.quad	4622945017495814144     # double 12
.LCPI57_2:
	.quad	4607182418800017408     # double 1
.LCPI57_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI57_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI57_5:
	.quad	4611686018427387904     # double 2
.LCPI57_6:
	.quad	4613937818241073152     # double 3
.LCPI57_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI57_8:
	.quad	4616189618054758400     # double 4
.LCPI57_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI57_10:
	.quad	4618441417868443648     # double 6
.LCPI57_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI57_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI57_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI57_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI57_15:
	.quad	4602678819172646912     # double 0.5
.LCPI57_16:
	.quad	4679240012837945344     # double 65536
.LCPI57_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI57_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.28
	.p2align	4, 0x90
	.type	encode_one_macroblock.28,@function
encode_one_macroblock.28:               # @encode_one_macroblock.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1753490717, -412(%rbp) # imm = 0x6884251D
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -268(%rbp)
	movl	$0, -188(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -304(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB57_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB57_4
.LBB57_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB57_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB57_5
.LBB57_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB57_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -320(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -416(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB57_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB57_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB57_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB57_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB57_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB57_11:                              # %land.end
.LBB57_12:                              # %lor.end36
.LBB57_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -316(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB57_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB57_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB57_17:                              # %lor.end51
.LBB57_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -288(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB57_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB57_21
.LBB57_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB57_21
.LBB57_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB57_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB57_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB57_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB57_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB57_27
.LBB57_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB57_27:                              # %if.end
	jmp	.LBB57_29
.LBB57_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB57_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB57_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB57_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB57_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB57_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB57_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB57_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB57_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB57_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB57_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB57_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB57_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB57_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB57_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB57_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB57_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB57_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB57_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB57_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB57_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB57_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB57_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-416(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB57_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB57_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB57_53 Depth=1
	movl	$0, -56(%rbp)
.LBB57_55:                              # %for.cond156
                                        #   Parent Loop BB57_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB57_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB57_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB57_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB57_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB57_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB57_59:                              # %if.end183
                                        #   in Loop: Header=BB57_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB57_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB57_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB57_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB57_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB57_62:                              # %if.end202
                                        #   in Loop: Header=BB57_55 Depth=2
	jmp	.LBB57_63
.LBB57_63:                              # %for.inc
                                        #   in Loop: Header=BB57_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_55
.LBB57_64:                              # %for.end
                                        #   in Loop: Header=BB57_53 Depth=1
	jmp	.LBB57_65
.LBB57_65:                              # %for.inc203
                                        #   in Loop: Header=BB57_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB57_53
.LBB57_66:                              # %for.end205
	jmp	.LBB57_93
.LBB57_67:                              # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB57_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB57_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	$0, -56(%rbp)
.LBB57_71:                              # %for.cond215
                                        #   Parent Loop BB57_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB57_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB57_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB57_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB57_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB57_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB57_75:                              # %if.end244
                                        #   in Loop: Header=BB57_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB57_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB57_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB57_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB57_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB57_78:                              # %if.end263
                                        #   in Loop: Header=BB57_71 Depth=2
	jmp	.LBB57_79
.LBB57_79:                              # %for.inc264
                                        #   in Loop: Header=BB57_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_71
.LBB57_80:                              # %for.end266
                                        #   in Loop: Header=BB57_69 Depth=1
	jmp	.LBB57_81
.LBB57_81:                              # %for.inc267
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB57_69
.LBB57_82:                              # %for.end269
	jmp	.LBB57_92
.LBB57_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB57_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB57_84 Depth=1
	movl	$0, -56(%rbp)
.LBB57_86:                              # %for.cond277
                                        #   Parent Loop BB57_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB57_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB57_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_86
.LBB57_89:                              # %for.end290
                                        #   in Loop: Header=BB57_84 Depth=1
	jmp	.LBB57_90
.LBB57_90:                              # %for.inc291
                                        #   in Loop: Header=BB57_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB57_84
.LBB57_91:                              # %for.end293
	jmp	.LBB57_92
.LBB57_92:                              # %if.end294
	jmp	.LBB57_93
.LBB57_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI57_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB57_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB57_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB57_99
.LBB57_98:                              # %if.else315
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB57_99:                              # %if.end326
	jmp	.LBB57_159
.LBB57_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB57_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI57_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB57_104
.LBB57_103:                             # %cond.false336
	vmovsd	.LCPI57_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB57_104:                             # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB57_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI57_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB57_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI57_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI57_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI57_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_109
.LBB57_108:                             # %cond.false357
	vmovsd	.LCPI57_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB57_109:                             # %cond.end359
	vmovsd	.LCPI57_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI57_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_115
.LBB57_111:                             # %cond.false364
	vmovsd	.LCPI57_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI57_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI57_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_114
.LBB57_113:                             # %cond.false369
	vmovsd	.LCPI57_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB57_114:                             # %cond.end371
.LBB57_115:                             # %cond.end373
	jmp	.LBB57_129
.LBB57_116:                             # %cond.false375
	cmpl	$0, -320(%rbp)
	je	.LBB57_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_120
.LBB57_119:                             # %cond.false382
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB57_120:                             # %cond.end384
	vmovsd	.LCPI57_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI57_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_126
.LBB57_122:                             # %cond.false389
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_125
.LBB57_124:                             # %cond.false394
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB57_125:                             # %cond.end396
.LBB57_126:                             # %cond.end398
	jmp	.LBB57_128
.LBB57_127:                             # %cond.false400
	vmovsd	.LCPI57_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_128
.LBB57_128:                             # %cond.end401
.LBB57_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB57_146
.LBB57_130:                             # %if.else406
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI57_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB57_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI57_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_145
.LBB57_132:                             # %cond.false415
	cmpl	$0, -320(%rbp)
	je	.LBB57_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_136
.LBB57_135:                             # %cond.false422
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB57_136:                             # %cond.end424
	vmovsd	.LCPI57_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI57_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_142
.LBB57_138:                             # %cond.false429
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB57_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI57_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_141
.LBB57_140:                             # %cond.false434
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB57_141:                             # %cond.end436
.LBB57_142:                             # %cond.end438
	jmp	.LBB57_144
.LBB57_143:                             # %cond.false440
	vmovsd	.LCPI57_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB57_144
.LBB57_144:                             # %cond.end441
.LBB57_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB57_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB57_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB57_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI57_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI57_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI57_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB57_152
.LBB57_151:                             # %cond.false465
	vmovsd	.LCPI57_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB57_152:                             # %cond.end473
	vmovsd	.LCPI57_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB57_153:                             # %if.end477
	jmp	.LBB57_158
.LBB57_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB57_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI57_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB57_157:                             # %if.end487
	jmp	.LBB57_158
.LBB57_158:                             # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB57_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB57_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI57_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB57_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB57_166
.LBB57_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB57_165
.LBB57_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB57_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB57_166:                             # %if.end510
	vmovsd	.LCPI57_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI57_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB57_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB57_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB57_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB57_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_167
.LBB57_170:                             # %for.end522
	movl	$0, -252(%rbp)
.LBB57_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_181 Depth 2
                                        #       Child Loop BB57_184 Depth 3
                                        #         Child Loop BB57_190 Depth 4
                                        #         Child Loop BB57_210 Depth 4
                                        #         Child Loop BB57_300 Depth 4
                                        #           Child Loop BB57_302 Depth 5
                                        #         Child Loop BB57_309 Depth 4
                                        #           Child Loop BB57_311 Depth 5
                                        #         Child Loop BB57_326 Depth 4
                                        #           Child Loop BB57_328 Depth 5
                                        #         Child Loop BB57_335 Depth 4
                                        #           Child Loop BB57_337 Depth 5
                                        #         Child Loop BB57_355 Depth 4
                                        #           Child Loop BB57_357 Depth 5
                                        #         Child Loop BB57_374 Depth 4
                                        #           Child Loop BB57_376 Depth 5
                                        #     Child Loop BB57_416 Depth 2
                                        #       Child Loop BB57_418 Depth 3
                                        #         Child Loop BB57_445 Depth 4
                                        #         Child Loop BB57_464 Depth 4
                                        #           Child Loop BB57_466 Depth 5
                                        #         Child Loop BB57_473 Depth 4
                                        #         Child Loop BB57_508 Depth 4
                                        #           Child Loop BB57_510 Depth 5
                                        #         Child Loop BB57_532 Depth 4
                                        #           Child Loop BB57_534 Depth 5
                                        #             Child Loop BB57_536 Depth 6
                                        #         Child Loop BB57_544 Depth 4
                                        #           Child Loop BB57_546 Depth 5
                                        #       Child Loop BB57_569 Depth 3
                                        #         Child Loop BB57_571 Depth 4
                                        #           Child Loop BB57_573 Depth 5
                                        #       Child Loop BB57_581 Depth 3
                                        #         Child Loop BB57_583 Depth 4
                                        #     Child Loop BB57_601 Depth 2
                                        #       Child Loop BB57_603 Depth 3
                                        #         Child Loop BB57_614 Depth 4
                                        #         Child Loop BB57_633 Depth 4
                                        #           Child Loop BB57_635 Depth 5
                                        #         Child Loop BB57_642 Depth 4
                                        #         Child Loop BB57_677 Depth 4
                                        #           Child Loop BB57_679 Depth 5
                                        #         Child Loop BB57_701 Depth 4
                                        #           Child Loop BB57_703 Depth 5
                                        #             Child Loop BB57_705 Depth 6
                                        #         Child Loop BB57_713 Depth 4
                                        #           Child Loop BB57_715 Depth 5
                                        #         Child Loop BB57_723 Depth 4
                                        #           Child Loop BB57_725 Depth 5
                                        #       Child Loop BB57_745 Depth 3
                                        #         Child Loop BB57_747 Depth 4
                                        #           Child Loop BB57_749 Depth 5
                                        #       Child Loop BB57_757 Depth 3
                                        #         Child Loop BB57_759 Depth 4
                                        #       Child Loop BB57_766 Depth 3
                                        #         Child Loop BB57_768 Depth 4
                                        #       Child Loop BB57_778 Depth 3
                                        #         Child Loop BB57_780 Depth 4
                                        #       Child Loop BB57_786 Depth 3
                                        #       Child Loop BB57_791 Depth 3
                                        #         Child Loop BB57_793 Depth 4
                                        #     Child Loop BB57_803 Depth 2
                                        #       Child Loop BB57_805 Depth 3
                                        #     Child Loop BB57_835 Depth 2
                                        #       Child Loop BB57_853 Depth 3
                                        #         Child Loop BB57_908 Depth 4
                                        #           Child Loop BB57_911 Depth 5
                                        #             Child Loop BB57_913 Depth 6
                                        #           Child Loop BB57_920 Depth 5
                                        #             Child Loop BB57_922 Depth 6
                                        #         Child Loop BB57_955 Depth 4
                                        #           Child Loop BB57_957 Depth 5
                                        #     Child Loop BB57_981 Depth 2
                                        #       Child Loop BB57_1014 Depth 3
                                        #         Child Loop BB57_1017 Depth 4
                                        #           Child Loop BB57_1019 Depth 5
                                        #         Child Loop BB57_1026 Depth 4
                                        #           Child Loop BB57_1028 Depth 5
                                        #       Child Loop BB57_1061 Depth 3
                                        #         Child Loop BB57_1063 Depth 4
                                        #     Child Loop BB57_1113 Depth 2
                                        #       Child Loop BB57_1115 Depth 3
                                        #     Child Loop BB57_1127 Depth 2
                                        #       Child Loop BB57_1129 Depth 3
                                        #         Child Loop BB57_1131 Depth 4
                                        #     Child Loop BB57_1141 Depth 2
                                        #       Child Loop BB57_1143 Depth 3
                                        #     Child Loop BB57_1152 Depth 2
                                        #       Child Loop BB57_1154 Depth 3
                                        #     Child Loop BB57_1160 Depth 2
                                        #       Child Loop BB57_1162 Depth 3
                                        #     Child Loop BB57_1174 Depth 2
                                        #       Child Loop BB57_1176 Depth 3
                                        #         Child Loop BB57_1178 Depth 4
                                        #     Child Loop BB57_1189 Depth 2
                                        #       Child Loop BB57_1191 Depth 3
                                        #     Child Loop BB57_1202 Depth 2
                                        #       Child Loop BB57_1204 Depth 3
                                        #     Child Loop BB57_1211 Depth 2
                                        #       Child Loop BB57_1213 Depth 3
                                        #     Child Loop BB57_1221 Depth 2
                                        #       Child Loop BB57_1223 Depth 3
                                        #     Child Loop BB57_1229 Depth 2
                                        #       Child Loop BB57_1231 Depth 3
                                        #     Child Loop BB57_1237 Depth 2
                                        #       Child Loop BB57_1239 Depth 3
                                        #     Child Loop BB57_1245 Depth 2
                                        #       Child Loop BB57_1247 Depth 3
	movl	-252(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB57_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$2, -316(%rbp)
	jne	.LBB57_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB57_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB57_176
.LBB57_175:                             # %if.else534
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB57_176:                             # %if.end536
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_177
.LBB57_177:                             # %if.end537
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB57_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB57_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB57_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB57_180:                             # %if.end542
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB57_181:                             # %for.cond543
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_184 Depth 3
                                        #         Child Loop BB57_190 Depth 4
                                        #         Child Loop BB57_210 Depth 4
                                        #         Child Loop BB57_300 Depth 4
                                        #           Child Loop BB57_302 Depth 5
                                        #         Child Loop BB57_309 Depth 4
                                        #           Child Loop BB57_311 Depth 5
                                        #         Child Loop BB57_326 Depth 4
                                        #           Child Loop BB57_328 Depth 5
                                        #         Child Loop BB57_335 Depth 4
                                        #           Child Loop BB57_337 Depth 5
                                        #         Child Loop BB57_355 Depth 4
                                        #           Child Loop BB57_357 Depth 5
                                        #         Child Loop BB57_374 Depth 4
                                        #           Child Loop BB57_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB57_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB57_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB57_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB57_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB57_184:                             # %for.cond554
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_190 Depth 4
                                        #         Child Loop BB57_210 Depth 4
                                        #         Child Loop BB57_300 Depth 4
                                        #           Child Loop BB57_302 Depth 5
                                        #         Child Loop BB57_309 Depth 4
                                        #           Child Loop BB57_311 Depth 5
                                        #         Child Loop BB57_326 Depth 4
                                        #           Child Loop BB57_328 Depth 5
                                        #         Child Loop BB57_335 Depth 4
                                        #           Child Loop BB57_337 Depth 5
                                        #         Child Loop BB57_355 Depth 4
                                        #           Child Loop BB57_357 Depth 5
                                        #         Child Loop BB57_374 Depth 4
                                        #           Child Loop BB57_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB57_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB57_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB57_187:                             # %land.end566
                                        #   in Loop: Header=BB57_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB57_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB57_189:                             # %land.end574
                                        #   in Loop: Header=BB57_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB57_190:                             # %for.cond577
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB57_190 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB57_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB57_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB57_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB57_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB57_206
.LBB57_194:                             # %if.then594
                                        #   in Loop: Header=BB57_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB57_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB57_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB57_198
.LBB57_197:                             # %cond.false604
                                        #   in Loop: Header=BB57_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_198:                             # %cond.end607
                                        #   in Loop: Header=BB57_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB57_203
.LBB57_199:                             # %cond.false610
                                        #   in Loop: Header=BB57_190 Depth=4
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB57_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB57_202
.LBB57_201:                             # %cond.false617
                                        #   in Loop: Header=BB57_190 Depth=4
	movl	$1, %eax
	jmp	.LBB57_202
.LBB57_202:                             # %cond.end618
                                        #   in Loop: Header=BB57_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_203:                             # %cond.end623
                                        #   in Loop: Header=BB57_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB57_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB57_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB57_205:                             # %if.end636
                                        #   in Loop: Header=BB57_190 Depth=4
	jmp	.LBB57_206
.LBB57_206:                             # %if.end637
                                        #   in Loop: Header=BB57_190 Depth=4
	jmp	.LBB57_207
.LBB57_207:                             # %for.inc638
                                        #   in Loop: Header=BB57_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB57_190
.LBB57_208:                             # %for.end640
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB57_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB57_210:                             # %for.cond643
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB57_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB57_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB57_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB57_215
.LBB57_214:                             # %cond.false660
                                        #   in Loop: Header=BB57_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_215:                             # %cond.end663
                                        #   in Loop: Header=BB57_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB57_220
.LBB57_216:                             # %cond.false667
                                        #   in Loop: Header=BB57_210 Depth=4
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB57_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB57_219
.LBB57_218:                             # %cond.false674
                                        #   in Loop: Header=BB57_210 Depth=4
	movl	$1, %eax
	jmp	.LBB57_219
.LBB57_219:                             # %cond.end675
                                        #   in Loop: Header=BB57_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_220:                             # %cond.end680
                                        #   in Loop: Header=BB57_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB57_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB57_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB57_222:                             # %if.end693
                                        #   in Loop: Header=BB57_210 Depth=4
	jmp	.LBB57_223
.LBB57_223:                             # %for.inc694
                                        #   in Loop: Header=BB57_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB57_210
.LBB57_224:                             # %for.end696
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB57_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB57_228
.LBB57_227:                             # %cond.false706
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_228:                             # %cond.end709
                                        #   in Loop: Header=BB57_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB57_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB57_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB57_231
.LBB57_230:                             # %cond.false719
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB57_231:                             # %cond.end721
                                        #   in Loop: Header=BB57_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB57_236
.LBB57_232:                             # %cond.false726
                                        #   in Loop: Header=BB57_184 Depth=3
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB57_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB57_235
.LBB57_234:                             # %cond.false733
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	$1, %eax
	jmp	.LBB57_235
.LBB57_235:                             # %cond.end734
                                        #   in Loop: Header=BB57_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_236:                             # %cond.end739
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB57_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB57_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB57_243
.LBB57_242:                             # %cond.false761
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB57_243:                             # %cond.end763
                                        #   in Loop: Header=BB57_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB57_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB57_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB57_246
.LBB57_245:                             # %cond.false773
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB57_246:                             # %cond.end775
                                        #   in Loop: Header=BB57_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB57_248
.LBB57_247:                             # %cond.false780
                                        #   in Loop: Header=BB57_184 Depth=3
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_248:                             # %cond.end784
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB57_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB57_252
.LBB57_251:                             # %cond.false797
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB57_252:                             # %cond.end799
                                        #   in Loop: Header=BB57_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB57_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB57_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB57_255
.LBB57_254:                             # %cond.false809
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB57_255:                             # %cond.end811
                                        #   in Loop: Header=BB57_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB57_257
.LBB57_256:                             # %cond.false816
                                        #   in Loop: Header=BB57_184 Depth=3
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_257:                             # %cond.end820
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	%eax, -172(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	jmp	.LBB57_259
.LBB57_258:                             # %if.else824
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
.LBB57_259:                             # %if.end825
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB57_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB57_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB57_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB57_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_285
.LBB57_266:                             # %if.else845
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB57_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB57_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB57_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB57_284
.LBB57_271:                             # %if.else859
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB57_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB57_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB57_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB57_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB57_283
.LBB57_276:                             # %if.else876
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB57_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB57_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jg	.LBB57_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB57_282
.LBB57_281:                             # %if.else893
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-172(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB57_282:                             # %if.end898
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_283
.LBB57_283:                             # %if.end899
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_284
.LBB57_284:                             # %if.end900
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_285
.LBB57_285:                             # %if.end901
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_295
.LBB57_286:                             # %if.else902
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB57_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_294
.LBB57_289:                             # %if.else910
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB57_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB57_293
.LBB57_292:                             # %if.else918
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB57_293:                             # %if.end920
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_294
.LBB57_294:                             # %if.end921
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_295
.LBB57_295:                             # %if.end922
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_297
.LBB57_296:                             # %if.else923
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB57_297:                             # %if.end925
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB57_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB57_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB57_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	$0, -24(%rbp)
.LBB57_300:                             # %for.cond933
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB57_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB57_300 Depth=4
	movl	$0, -20(%rbp)
.LBB57_302:                             # %for.cond937
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        #         Parent Loop BB57_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB57_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB57_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB57_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_302
.LBB57_305:                             # %for.end999
                                        #   in Loop: Header=BB57_300 Depth=4
	jmp	.LBB57_306
.LBB57_306:                             # %for.inc1000
                                        #   in Loop: Header=BB57_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_300
.LBB57_307:                             # %for.end1002
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_323
.LBB57_308:                             # %if.else1003
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	$0, -24(%rbp)
.LBB57_309:                             # %for.cond1004
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB57_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB57_309 Depth=4
	movl	$0, -20(%rbp)
.LBB57_311:                             # %for.cond1008
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        #         Parent Loop BB57_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB57_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB57_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB57_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB57_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB57_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB57_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB57_316
.LBB57_315:                             # %cond.false1024
                                        #   in Loop: Header=BB57_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB57_316:                             # %cond.end1025
                                        #   in Loop: Header=BB57_311 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB57_318
.LBB57_317:                             # %if.else1111
                                        #   in Loop: Header=BB57_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB57_318:                             # %if.end1217
                                        #   in Loop: Header=BB57_311 Depth=5
	jmp	.LBB57_319
.LBB57_319:                             # %for.inc1218
                                        #   in Loop: Header=BB57_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_311
.LBB57_320:                             # %for.end1220
                                        #   in Loop: Header=BB57_309 Depth=4
	jmp	.LBB57_321
.LBB57_321:                             # %for.inc1221
                                        #   in Loop: Header=BB57_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_309
.LBB57_322:                             # %for.end1223
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_323
.LBB57_323:                             # %if.end1224
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB57_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB57_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB57_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	$0, -24(%rbp)
.LBB57_326:                             # %for.cond1231
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB57_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB57_326 Depth=4
	movl	$0, -20(%rbp)
.LBB57_328:                             # %for.cond1235
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        #         Parent Loop BB57_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB57_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB57_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB57_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_328
.LBB57_331:                             # %for.end1303
                                        #   in Loop: Header=BB57_326 Depth=4
	jmp	.LBB57_332
.LBB57_332:                             # %for.inc1304
                                        #   in Loop: Header=BB57_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_326
.LBB57_333:                             # %for.end1306
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_351
.LBB57_334:                             # %if.else1307
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	$0, -24(%rbp)
.LBB57_335:                             # %for.cond1308
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB57_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB57_335 Depth=4
	movl	$0, -20(%rbp)
.LBB57_337:                             # %for.cond1312
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        #         Parent Loop BB57_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB57_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB57_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB57_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB57_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB57_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB57_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB57_342
.LBB57_341:                             # %cond.false1330
                                        #   in Loop: Header=BB57_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB57_342:                             # %cond.end1332
                                        #   in Loop: Header=BB57_337 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB57_346
.LBB57_343:                             # %if.else1419
                                        #   in Loop: Header=BB57_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB57_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB57_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB57_345:                             # %if.end1529
                                        #   in Loop: Header=BB57_337 Depth=5
	jmp	.LBB57_346
.LBB57_346:                             # %if.end1530
                                        #   in Loop: Header=BB57_337 Depth=5
	jmp	.LBB57_347
.LBB57_347:                             # %for.inc1531
                                        #   in Loop: Header=BB57_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_337
.LBB57_348:                             # %for.end1533
                                        #   in Loop: Header=BB57_335 Depth=4
	jmp	.LBB57_349
.LBB57_349:                             # %for.inc1534
                                        #   in Loop: Header=BB57_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_335
.LBB57_350:                             # %for.end1536
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_351
.LBB57_351:                             # %if.end1537
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_352
.LBB57_352:                             # %if.end1538
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_393
.LBB57_353:                             # %if.else1539
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB57_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB57_355:                             # %for.cond1546
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB57_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB57_355 Depth=4
	movl	$0, -20(%rbp)
.LBB57_357:                             # %for.cond1550
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        #         Parent Loop BB57_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB57_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB57_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB57_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB57_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB57_361
.LBB57_360:                             # %if.else1596
                                        #   in Loop: Header=BB57_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB57_361:                             # %if.end1676
                                        #   in Loop: Header=BB57_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB57_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB57_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB57_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB57_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB57_367
.LBB57_364:                             # %if.else1721
                                        #   in Loop: Header=BB57_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB57_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB57_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB57_366:                             # %if.end1805
                                        #   in Loop: Header=BB57_357 Depth=5
	jmp	.LBB57_367
.LBB57_367:                             # %if.end1806
                                        #   in Loop: Header=BB57_357 Depth=5
	jmp	.LBB57_368
.LBB57_368:                             # %if.end1807
                                        #   in Loop: Header=BB57_357 Depth=5
	jmp	.LBB57_369
.LBB57_369:                             # %for.inc1808
                                        #   in Loop: Header=BB57_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_357
.LBB57_370:                             # %for.end1810
                                        #   in Loop: Header=BB57_355 Depth=4
	jmp	.LBB57_371
.LBB57_371:                             # %for.inc1811
                                        #   in Loop: Header=BB57_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_355
.LBB57_372:                             # %for.end1813
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_392
.LBB57_373:                             # %if.else1814
                                        #   in Loop: Header=BB57_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB57_374:                             # %for.cond1818
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB57_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB57_374 Depth=4
	movl	$0, -20(%rbp)
.LBB57_376:                             # %for.cond1822
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_181 Depth=2
                                        #       Parent Loop BB57_184 Depth=3
                                        #         Parent Loop BB57_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB57_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB57_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB57_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB57_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB57_380
.LBB57_379:                             # %if.else1868
                                        #   in Loop: Header=BB57_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB57_380:                             # %if.end1948
                                        #   in Loop: Header=BB57_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB57_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB57_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB57_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB57_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB57_386
.LBB57_383:                             # %if.else1993
                                        #   in Loop: Header=BB57_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB57_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB57_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB57_385:                             # %if.end2077
                                        #   in Loop: Header=BB57_376 Depth=5
	jmp	.LBB57_386
.LBB57_386:                             # %if.end2078
                                        #   in Loop: Header=BB57_376 Depth=5
	jmp	.LBB57_387
.LBB57_387:                             # %if.end2079
                                        #   in Loop: Header=BB57_376 Depth=5
	jmp	.LBB57_388
.LBB57_388:                             # %for.inc2080
                                        #   in Loop: Header=BB57_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_376
.LBB57_389:                             # %for.end2082
                                        #   in Loop: Header=BB57_374 Depth=4
	jmp	.LBB57_390
.LBB57_390:                             # %for.inc2083
                                        #   in Loop: Header=BB57_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_374
.LBB57_391:                             # %for.end2085
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_392
.LBB57_392:                             # %if.end2086
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_393
.LBB57_393:                             # %if.end2087
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB57_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB57_399
.LBB57_395:                             # %if.else2106
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB57_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB57_398
.LBB57_397:                             # %if.else2131
                                        #   in Loop: Header=BB57_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB57_398:                             # %if.end2132
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_399
.LBB57_399:                             # %if.end2133
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB57_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB57_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB57_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB57_402:                             # %if.end2143
                                        #   in Loop: Header=BB57_184 Depth=3
	jmp	.LBB57_403
.LBB57_403:                             # %for.inc2144
                                        #   in Loop: Header=BB57_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_184
.LBB57_404:                             # %for.end2146
                                        #   in Loop: Header=BB57_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB57_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB57_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB57_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB57_407:                             # %if.end2155
                                        #   in Loop: Header=BB57_181 Depth=2
	jmp	.LBB57_408
.LBB57_408:                             # %if.end2156
                                        #   in Loop: Header=BB57_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB57_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB57_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -304(%rbp)
.LBB57_410:                             # %if.end2161
                                        #   in Loop: Header=BB57_181 Depth=2
	jmp	.LBB57_411
.LBB57_411:                             # %if.end2162
                                        #   in Loop: Header=BB57_181 Depth=2
	jmp	.LBB57_412
.LBB57_412:                             # %for.inc2163
                                        #   in Loop: Header=BB57_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_181
.LBB57_413:                             # %for.end2165
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB57_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB57_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB57_416:                             # %for.cond2172
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_418 Depth 3
                                        #         Child Loop BB57_445 Depth 4
                                        #         Child Loop BB57_464 Depth 4
                                        #           Child Loop BB57_466 Depth 5
                                        #         Child Loop BB57_473 Depth 4
                                        #         Child Loop BB57_508 Depth 4
                                        #           Child Loop BB57_510 Depth 5
                                        #         Child Loop BB57_532 Depth 4
                                        #           Child Loop BB57_534 Depth 5
                                        #             Child Loop BB57_536 Depth 6
                                        #         Child Loop BB57_544 Depth 4
                                        #           Child Loop BB57_546 Depth 5
                                        #       Child Loop BB57_569 Depth 3
                                        #         Child Loop BB57_571 Depth 4
                                        #           Child Loop BB57_573 Depth 5
                                        #       Child Loop BB57_581 Depth 3
                                        #         Child Loop BB57_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB57_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB57_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB57_418:                             # %for.cond2184
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_445 Depth 4
                                        #         Child Loop BB57_464 Depth 4
                                        #           Child Loop BB57_466 Depth 5
                                        #         Child Loop BB57_473 Depth 4
                                        #         Child Loop BB57_508 Depth 4
                                        #           Child Loop BB57_510 Depth 5
                                        #         Child Loop BB57_532 Depth 4
                                        #           Child Loop BB57_534 Depth 5
                                        #             Child Loop BB57_536 Depth 6
                                        #         Child Loop BB57_544 Depth 4
                                        #           Child Loop BB57_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB57_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB57_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB57_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB57_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB57_423
.LBB57_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB57_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB57_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB57_557
.LBB57_423:                             # %if.then2201
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB57_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	$0, -228(%rbp)
	movl	$0, -224(%rbp)
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -228(%rbp)
	cmpl	$2147483647, -228(%rbp) # imm = 0x7FFFFFFF
	je	.LBB57_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB57_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB57_428
.LBB57_427:                             # %if.then2214
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB57_429
.LBB57_428:                             # %if.else2215
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-228(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-224(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB57_429:                             # %if.end2218
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB57_431
	jmp	.LBB57_430
.LBB57_430:                             # %if.end2218
                                        #   in Loop: Header=BB57_418 Depth=3
	subl	$2, %eax
	je	.LBB57_438
	jmp	.LBB57_439
.LBB57_431:                             # %sw.bb
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-224(%rbp), %eax
	cmpl	-228(%rbp), %eax
	jl	.LBB57_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB57_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB57_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB57_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB57_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB57_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB57_436
.LBB57_435:                             # %if.then2231
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_437
.LBB57_436:                             # %if.else2232
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB57_437:                             # %if.end2233
                                        #   in Loop: Header=BB57_418 Depth=3
	jmp	.LBB57_440
.LBB57_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_440
.LBB57_439:                             # %sw.default
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB57_440:                             # %sw.epilog
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB57_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-176(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB57_442:                             # %if.end2240
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB57_443:                             # %if.end2242
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB57_518
.LBB57_444:                             # %if.else2278
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB57_445:                             # %for.cond2279
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB57_445 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB57_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB57_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB57_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB57_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB57_461
.LBB57_449:                             # %if.then2296
                                        #   in Loop: Header=BB57_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB57_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB57_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB57_453
.LBB57_452:                             # %cond.false2306
                                        #   in Loop: Header=BB57_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_453:                             # %cond.end2309
                                        #   in Loop: Header=BB57_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB57_458
.LBB57_454:                             # %cond.false2313
                                        #   in Loop: Header=BB57_445 Depth=4
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB57_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB57_457
.LBB57_456:                             # %cond.false2320
                                        #   in Loop: Header=BB57_445 Depth=4
	movl	$1, %eax
	jmp	.LBB57_457
.LBB57_457:                             # %cond.end2321
                                        #   in Loop: Header=BB57_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_458:                             # %cond.end2326
                                        #   in Loop: Header=BB57_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB57_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB57_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB57_460:                             # %if.end2339
                                        #   in Loop: Header=BB57_445 Depth=4
	jmp	.LBB57_461
.LBB57_461:                             # %if.end2340
                                        #   in Loop: Header=BB57_445 Depth=4
	jmp	.LBB57_462
.LBB57_462:                             # %for.inc2341
                                        #   in Loop: Header=BB57_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB57_445
.LBB57_463:                             # %for.end2343
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	$0, -24(%rbp)
.LBB57_464:                             # %for.cond2344
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB57_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB57_464 Depth=4
	movl	$0, -20(%rbp)
.LBB57_466:                             # %for.cond2348
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        #         Parent Loop BB57_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB57_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB57_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB57_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_466
.LBB57_469:                             # %for.end2405
                                        #   in Loop: Header=BB57_464 Depth=4
	jmp	.LBB57_470
.LBB57_470:                             # %for.inc2406
                                        #   in Loop: Header=BB57_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_464
.LBB57_471:                             # %for.end2408
                                        #   in Loop: Header=BB57_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB57_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB57_473:                             # %for.cond2411
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB57_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB57_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB57_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB57_478
.LBB57_477:                             # %cond.false2428
                                        #   in Loop: Header=BB57_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_478:                             # %cond.end2431
                                        #   in Loop: Header=BB57_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB57_483
.LBB57_479:                             # %cond.false2435
                                        #   in Loop: Header=BB57_473 Depth=4
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB57_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB57_482
.LBB57_481:                             # %cond.false2442
                                        #   in Loop: Header=BB57_473 Depth=4
	movl	$1, %eax
	jmp	.LBB57_482
.LBB57_482:                             # %cond.end2443
                                        #   in Loop: Header=BB57_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_483:                             # %cond.end2448
                                        #   in Loop: Header=BB57_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB57_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB57_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB57_485:                             # %if.end2461
                                        #   in Loop: Header=BB57_473 Depth=4
	jmp	.LBB57_486
.LBB57_486:                             # %for.inc2462
                                        #   in Loop: Header=BB57_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB57_473
.LBB57_487:                             # %for.end2464
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB57_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB57_491
.LBB57_490:                             # %cond.false2474
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_491:                             # %cond.end2477
                                        #   in Loop: Header=BB57_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB57_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB57_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB57_494
.LBB57_493:                             # %cond.false2487
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB57_494:                             # %cond.end2489
                                        #   in Loop: Header=BB57_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB57_499
.LBB57_495:                             # %cond.false2494
                                        #   in Loop: Header=BB57_418 Depth=3
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB57_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB57_498
.LBB57_497:                             # %cond.false2501
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	$1, %eax
	jmp	.LBB57_498
.LBB57_498:                             # %cond.end2502
                                        #   in Loop: Header=BB57_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_499:                             # %cond.end2507
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB57_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB57_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB57_507
.LBB57_502:                             # %if.else2517
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB57_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB57_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB57_506
.LBB57_505:                             # %if.else2524
                                        #   in Loop: Header=BB57_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB57_506:                             # %if.end2525
                                        #   in Loop: Header=BB57_418 Depth=3
	jmp	.LBB57_507
.LBB57_507:                             # %if.end2526
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	$0, -24(%rbp)
.LBB57_508:                             # %for.cond2527
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB57_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB57_508 Depth=4
	movl	$0, -20(%rbp)
.LBB57_510:                             # %for.cond2531
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        #         Parent Loop BB57_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB57_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB57_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB57_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_510
.LBB57_513:                             # %for.end2567
                                        #   in Loop: Header=BB57_508 Depth=4
	jmp	.LBB57_514
.LBB57_514:                             # %for.inc2568
                                        #   in Loop: Header=BB57_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_508
.LBB57_515:                             # %for.end2570
                                        #   in Loop: Header=BB57_418 Depth=3
	jmp	.LBB57_517
.LBB57_516:                             # %if.else2571
                                        #   in Loop: Header=BB57_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB57_517:                             # %if.end2572
                                        #   in Loop: Header=BB57_418 Depth=3
	jmp	.LBB57_518
.LBB57_518:                             # %if.end2573
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB57_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-268(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB57_526
.LBB57_520:                             # %if.else2578
                                        #   in Loop: Header=BB57_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB57_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB57_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB57_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB57_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB57_524
.LBB57_523:                             # %cond.false2592
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB57_524:                             # %cond.end2597
                                        #   in Loop: Header=BB57_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB57_525:                             # %if.end2603
                                        #   in Loop: Header=BB57_418 Depth=3
	jmp	.LBB57_526
.LBB57_526:                             # %if.end2604
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB57_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB57_530
.LBB57_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB57_556
.LBB57_530:                             # %if.then2616
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-268(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB57_532:                             # %for.cond2638
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_534 Depth 5
                                        #             Child Loop BB57_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB57_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB57_532 Depth=4
	movl	$0, -24(%rbp)
.LBB57_534:                             # %for.cond2642
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        #         Parent Loop BB57_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB57_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB57_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB57_534 Depth=5
	movl	$0, -20(%rbp)
.LBB57_536:                             # %for.cond2646
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        #         Parent Loop BB57_532 Depth=4
                                        #           Parent Loop BB57_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB57_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB57_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB57_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_536
.LBB57_539:                             # %for.end2668
                                        #   in Loop: Header=BB57_534 Depth=5
	jmp	.LBB57_540
.LBB57_540:                             # %for.inc2669
                                        #   in Loop: Header=BB57_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_534
.LBB57_541:                             # %for.end2671
                                        #   in Loop: Header=BB57_532 Depth=4
	jmp	.LBB57_542
.LBB57_542:                             # %for.inc2672
                                        #   in Loop: Header=BB57_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_532
.LBB57_543:                             # %for.end2674
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB57_544:                             # %for.cond2675
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB57_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_546:                             # %for.cond2680
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_418 Depth=3
                                        #         Parent Loop BB57_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB57_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB57_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB57_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB57_550
.LBB57_549:                             # %if.else2705
                                        #   in Loop: Header=BB57_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB57_550:                             # %if.end2754
                                        #   in Loop: Header=BB57_546 Depth=5
	jmp	.LBB57_551
.LBB57_551:                             # %for.inc2755
                                        #   in Loop: Header=BB57_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_546
.LBB57_552:                             # %for.end2757
                                        #   in Loop: Header=BB57_544 Depth=4
	jmp	.LBB57_553
.LBB57_553:                             # %for.inc2758
                                        #   in Loop: Header=BB57_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_544
.LBB57_554:                             # %for.end2760
                                        #   in Loop: Header=BB57_418 Depth=3
	jmp	.LBB57_555
.LBB57_555:                             # %if.end2761
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB57_556:                             # %if.end2762
                                        #   in Loop: Header=BB57_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB57_557:                             # %if.end2763
                                        #   in Loop: Header=BB57_418 Depth=3
	jmp	.LBB57_558
.LBB57_558:                             # %for.inc2764
                                        #   in Loop: Header=BB57_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB57_418
.LBB57_559:                             # %for.end2766
                                        #   in Loop: Header=BB57_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB57_416 Depth=2
	movl	-176(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB57_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB57_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB57_563
.LBB57_562:                             # %cond.true2782
                                        #   in Loop: Header=BB57_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB57_564
.LBB57_563:                             # %cond.false2783
                                        #   in Loop: Header=BB57_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB57_564
.LBB57_564:                             # %cond.end2784
                                        #   in Loop: Header=BB57_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB57_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB57_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB57_567
.LBB57_566:                             # %cond.true2793
                                        #   in Loop: Header=BB57_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB57_568
.LBB57_567:                             # %cond.false2794
                                        #   in Loop: Header=BB57_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB57_568
.LBB57_568:                             # %cond.end2795
                                        #   in Loop: Header=BB57_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -188(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB57_569:                             # %for.cond2813
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_571 Depth 4
                                        #           Child Loop BB57_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB57_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB57_569 Depth=3
	movl	$0, -24(%rbp)
.LBB57_571:                             # %for.cond2817
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB57_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB57_571 Depth=4
	movl	$0, -20(%rbp)
.LBB57_573:                             # %for.cond2821
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_569 Depth=3
                                        #         Parent Loop BB57_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB57_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB57_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB57_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_573
.LBB57_576:                             # %for.end2844
                                        #   in Loop: Header=BB57_571 Depth=4
	jmp	.LBB57_577
.LBB57_577:                             # %for.inc2845
                                        #   in Loop: Header=BB57_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_571
.LBB57_578:                             # %for.end2847
                                        #   in Loop: Header=BB57_569 Depth=3
	jmp	.LBB57_579
.LBB57_579:                             # %for.inc2848
                                        #   in Loop: Header=BB57_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_569
.LBB57_580:                             # %for.end2850
                                        #   in Loop: Header=BB57_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB57_581:                             # %for.cond2851
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB57_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_583:                             # %for.cond2856
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_416 Depth=2
                                        #       Parent Loop BB57_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB57_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB57_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB57_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB57_587
.LBB57_586:                             # %if.else2886
                                        #   in Loop: Header=BB57_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB57_587:                             # %if.end2935
                                        #   in Loop: Header=BB57_583 Depth=4
	jmp	.LBB57_588
.LBB57_588:                             # %for.inc2936
                                        #   in Loop: Header=BB57_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_583
.LBB57_589:                             # %for.end2938
                                        #   in Loop: Header=BB57_581 Depth=3
	jmp	.LBB57_590
.LBB57_590:                             # %for.inc2939
                                        #   in Loop: Header=BB57_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_581
.LBB57_591:                             # %for.end2941
                                        #   in Loop: Header=BB57_416 Depth=2
	jmp	.LBB57_592
.LBB57_592:                             # %if.end2942
                                        #   in Loop: Header=BB57_416 Depth=2
	cmpl	$0, -188(%rbp)
	je	.LBB57_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB57_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-188(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB57_594:                             # %if.end2948
                                        #   in Loop: Header=BB57_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB57_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB57_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB57_596:                             # %if.end2974
                                        #   in Loop: Header=BB57_416 Depth=2
	jmp	.LBB57_597
.LBB57_597:                             # %for.inc2975
                                        #   in Loop: Header=BB57_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_416
.LBB57_598:                             # %for.end2977
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_599:                             # %if.end2980
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB57_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB57_601:                             # %for.cond2985
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_603 Depth 3
                                        #         Child Loop BB57_614 Depth 4
                                        #         Child Loop BB57_633 Depth 4
                                        #           Child Loop BB57_635 Depth 5
                                        #         Child Loop BB57_642 Depth 4
                                        #         Child Loop BB57_677 Depth 4
                                        #           Child Loop BB57_679 Depth 5
                                        #         Child Loop BB57_701 Depth 4
                                        #           Child Loop BB57_703 Depth 5
                                        #             Child Loop BB57_705 Depth 6
                                        #         Child Loop BB57_713 Depth 4
                                        #           Child Loop BB57_715 Depth 5
                                        #         Child Loop BB57_723 Depth 4
                                        #           Child Loop BB57_725 Depth 5
                                        #       Child Loop BB57_745 Depth 3
                                        #         Child Loop BB57_747 Depth 4
                                        #           Child Loop BB57_749 Depth 5
                                        #       Child Loop BB57_757 Depth 3
                                        #         Child Loop BB57_759 Depth 4
                                        #       Child Loop BB57_766 Depth 3
                                        #         Child Loop BB57_768 Depth 4
                                        #       Child Loop BB57_778 Depth 3
                                        #         Child Loop BB57_780 Depth 4
                                        #       Child Loop BB57_786 Depth 3
                                        #       Child Loop BB57_791 Depth 3
                                        #         Child Loop BB57_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB57_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB57_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB57_603:                             # %for.cond2997
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_614 Depth 4
                                        #         Child Loop BB57_633 Depth 4
                                        #           Child Loop BB57_635 Depth 5
                                        #         Child Loop BB57_642 Depth 4
                                        #         Child Loop BB57_677 Depth 4
                                        #           Child Loop BB57_679 Depth 5
                                        #         Child Loop BB57_701 Depth 4
                                        #           Child Loop BB57_703 Depth 5
                                        #             Child Loop BB57_705 Depth 6
                                        #         Child Loop BB57_713 Depth 4
                                        #           Child Loop BB57_715 Depth 5
                                        #         Child Loop BB57_723 Depth 4
                                        #           Child Loop BB57_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB57_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB57_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB57_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB57_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB57_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB57_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB57_610
.LBB57_609:                             # %if.then3019
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB57_611
.LBB57_610:                             # %if.else3020
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB57_611:                             # %if.end3022
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB57_612:                             # %if.end3024
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB57_687
.LBB57_613:                             # %if.else3060
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB57_614:                             # %for.cond3061
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB57_614 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB57_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB57_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB57_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB57_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB57_630
.LBB57_618:                             # %if.then3078
                                        #   in Loop: Header=BB57_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB57_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB57_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB57_622
.LBB57_621:                             # %cond.false3088
                                        #   in Loop: Header=BB57_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_622:                             # %cond.end3091
                                        #   in Loop: Header=BB57_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB57_627
.LBB57_623:                             # %cond.false3095
                                        #   in Loop: Header=BB57_614 Depth=4
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB57_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB57_626
.LBB57_625:                             # %cond.false3102
                                        #   in Loop: Header=BB57_614 Depth=4
	movl	$1, %eax
	jmp	.LBB57_626
.LBB57_626:                             # %cond.end3103
                                        #   in Loop: Header=BB57_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_627:                             # %cond.end3108
                                        #   in Loop: Header=BB57_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB57_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB57_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB57_629:                             # %if.end3121
                                        #   in Loop: Header=BB57_614 Depth=4
	jmp	.LBB57_630
.LBB57_630:                             # %if.end3122
                                        #   in Loop: Header=BB57_614 Depth=4
	jmp	.LBB57_631
.LBB57_631:                             # %for.inc3123
                                        #   in Loop: Header=BB57_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB57_614
.LBB57_632:                             # %for.end3125
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	$0, -24(%rbp)
.LBB57_633:                             # %for.cond3126
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB57_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB57_633 Depth=4
	movl	$0, -20(%rbp)
.LBB57_635:                             # %for.cond3130
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        #         Parent Loop BB57_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB57_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB57_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB57_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_635
.LBB57_638:                             # %for.end3187
                                        #   in Loop: Header=BB57_633 Depth=4
	jmp	.LBB57_639
.LBB57_639:                             # %for.inc3188
                                        #   in Loop: Header=BB57_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_633
.LBB57_640:                             # %for.end3190
                                        #   in Loop: Header=BB57_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB57_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB57_642:                             # %for.cond3193
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB57_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB57_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB57_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB57_647
.LBB57_646:                             # %cond.false3210
                                        #   in Loop: Header=BB57_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_647:                             # %cond.end3213
                                        #   in Loop: Header=BB57_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB57_652
.LBB57_648:                             # %cond.false3217
                                        #   in Loop: Header=BB57_642 Depth=4
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB57_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB57_651
.LBB57_650:                             # %cond.false3224
                                        #   in Loop: Header=BB57_642 Depth=4
	movl	$1, %eax
	jmp	.LBB57_651
.LBB57_651:                             # %cond.end3225
                                        #   in Loop: Header=BB57_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_652:                             # %cond.end3230
                                        #   in Loop: Header=BB57_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB57_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB57_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB57_654:                             # %if.end3243
                                        #   in Loop: Header=BB57_642 Depth=4
	jmp	.LBB57_655
.LBB57_655:                             # %for.inc3244
                                        #   in Loop: Header=BB57_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB57_642
.LBB57_656:                             # %for.end3246
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB57_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB57_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB57_660
.LBB57_659:                             # %cond.false3256
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB57_660:                             # %cond.end3259
                                        #   in Loop: Header=BB57_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB57_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB57_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB57_663
.LBB57_662:                             # %cond.false3269
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB57_663:                             # %cond.end3271
                                        #   in Loop: Header=BB57_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB57_668
.LBB57_664:                             # %cond.false3276
                                        #   in Loop: Header=BB57_603 Depth=3
	vmovsd	.LCPI57_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB57_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB57_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB57_667
.LBB57_666:                             # %cond.false3283
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	$1, %eax
	jmp	.LBB57_667
.LBB57_667:                             # %cond.end3284
                                        #   in Loop: Header=BB57_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB57_668:                             # %cond.end3289
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB57_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB57_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB57_676
.LBB57_671:                             # %if.else3299
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB57_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB57_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB57_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB57_675
.LBB57_674:                             # %if.else3306
                                        #   in Loop: Header=BB57_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB57_675:                             # %if.end3307
                                        #   in Loop: Header=BB57_603 Depth=3
	jmp	.LBB57_676
.LBB57_676:                             # %if.end3308
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	$0, -24(%rbp)
.LBB57_677:                             # %for.cond3309
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB57_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB57_677 Depth=4
	movl	$0, -20(%rbp)
.LBB57_679:                             # %for.cond3313
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        #         Parent Loop BB57_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB57_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB57_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB57_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_679
.LBB57_682:                             # %for.end3349
                                        #   in Loop: Header=BB57_677 Depth=4
	jmp	.LBB57_683
.LBB57_683:                             # %for.inc3350
                                        #   in Loop: Header=BB57_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_677
.LBB57_684:                             # %for.end3352
                                        #   in Loop: Header=BB57_603 Depth=3
	jmp	.LBB57_686
.LBB57_685:                             # %if.else3353
                                        #   in Loop: Header=BB57_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB57_686:                             # %if.end3354
                                        #   in Loop: Header=BB57_603 Depth=3
	jmp	.LBB57_687
.LBB57_687:                             # %if.end3355
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB57_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-268(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB57_695
.LBB57_689:                             # %if.else3360
                                        #   in Loop: Header=BB57_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB57_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB57_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB57_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB57_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB57_693
.LBB57_692:                             # %cond.false3374
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB57_693:                             # %cond.end3379
                                        #   in Loop: Header=BB57_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB57_694:                             # %if.end3385
                                        #   in Loop: Header=BB57_603 Depth=3
	jmp	.LBB57_695
.LBB57_695:                             # %if.end3386
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB57_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB57_699
.LBB57_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB57_732
.LBB57_699:                             # %if.then3398
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-268(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB57_701:                             # %for.cond3422
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_703 Depth 5
                                        #             Child Loop BB57_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB57_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB57_701 Depth=4
	movl	$0, -24(%rbp)
.LBB57_703:                             # %for.cond3426
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        #         Parent Loop BB57_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB57_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB57_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB57_703 Depth=5
	movl	$0, -20(%rbp)
.LBB57_705:                             # %for.cond3430
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        #         Parent Loop BB57_701 Depth=4
                                        #           Parent Loop BB57_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB57_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB57_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB57_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_705
.LBB57_708:                             # %for.end3453
                                        #   in Loop: Header=BB57_703 Depth=5
	jmp	.LBB57_709
.LBB57_709:                             # %for.inc3454
                                        #   in Loop: Header=BB57_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_703
.LBB57_710:                             # %for.end3456
                                        #   in Loop: Header=BB57_701 Depth=4
	jmp	.LBB57_711
.LBB57_711:                             # %for.inc3457
                                        #   in Loop: Header=BB57_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_701
.LBB57_712:                             # %for.end3459
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB57_713:                             # %for.cond3460
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB57_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_715:                             # %for.cond3465
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        #         Parent Loop BB57_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB57_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB57_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_715
.LBB57_718:                             # %for.end3494
                                        #   in Loop: Header=BB57_713 Depth=4
	jmp	.LBB57_719
.LBB57_719:                             # %for.inc3495
                                        #   in Loop: Header=BB57_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_713
.LBB57_720:                             # %for.end3497
                                        #   in Loop: Header=BB57_603 Depth=3
	jmp	.LBB57_721
.LBB57_721:                             # %if.end3498
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB57_723:                             # %for.cond3502
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB57_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_725:                             # %for.cond3507
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_603 Depth=3
                                        #         Parent Loop BB57_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB57_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB57_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_725
.LBB57_728:                             # %for.end3562
                                        #   in Loop: Header=BB57_723 Depth=4
	jmp	.LBB57_729
.LBB57_729:                             # %for.inc3563
                                        #   in Loop: Header=BB57_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_723
.LBB57_730:                             # %for.end3565
                                        #   in Loop: Header=BB57_603 Depth=3
	jmp	.LBB57_731
.LBB57_731:                             # %if.end3566
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB57_732:                             # %if.end3567
                                        #   in Loop: Header=BB57_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB57_733:                             # %if.end3568
                                        #   in Loop: Header=BB57_603 Depth=3
	jmp	.LBB57_734
.LBB57_734:                             # %for.inc3569
                                        #   in Loop: Header=BB57_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB57_603
.LBB57_735:                             # %for.end3571
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-176(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB57_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB57_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB57_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB57_739
.LBB57_738:                             # %cond.true3588
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB57_740
.LBB57_739:                             # %cond.false3589
                                        #   in Loop: Header=BB57_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB57_740
.LBB57_740:                             # %cond.end3590
                                        #   in Loop: Header=BB57_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB57_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB57_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB57_743
.LBB57_742:                             # %cond.true3599
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB57_744
.LBB57_743:                             # %cond.false3600
                                        #   in Loop: Header=BB57_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB57_744
.LBB57_744:                             # %cond.end3601
                                        #   in Loop: Header=BB57_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -188(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB57_745:                             # %for.cond3619
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_747 Depth 4
                                        #           Child Loop BB57_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB57_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB57_745 Depth=3
	movl	$0, -24(%rbp)
.LBB57_747:                             # %for.cond3623
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB57_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB57_747 Depth=4
	movl	$0, -20(%rbp)
.LBB57_749:                             # %for.cond3627
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_745 Depth=3
                                        #         Parent Loop BB57_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB57_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB57_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB57_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_749
.LBB57_752:                             # %for.end3650
                                        #   in Loop: Header=BB57_747 Depth=4
	jmp	.LBB57_753
.LBB57_753:                             # %for.inc3651
                                        #   in Loop: Header=BB57_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_747
.LBB57_754:                             # %for.end3653
                                        #   in Loop: Header=BB57_745 Depth=3
	jmp	.LBB57_755
.LBB57_755:                             # %for.inc3654
                                        #   in Loop: Header=BB57_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_745
.LBB57_756:                             # %for.end3656
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB57_757:                             # %for.cond3657
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB57_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_759:                             # %for.cond3662
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB57_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB57_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_759
.LBB57_762:                             # %for.end3691
                                        #   in Loop: Header=BB57_757 Depth=3
	jmp	.LBB57_763
.LBB57_763:                             # %for.inc3692
                                        #   in Loop: Header=BB57_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_757
.LBB57_764:                             # %for.end3694
                                        #   in Loop: Header=BB57_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB57_766:                             # %for.cond3698
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB57_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_768:                             # %for.cond3703
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB57_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB57_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_768
.LBB57_771:                             # %for.end3758
                                        #   in Loop: Header=BB57_766 Depth=3
	jmp	.LBB57_772
.LBB57_772:                             # %for.inc3759
                                        #   in Loop: Header=BB57_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_766
.LBB57_773:                             # %for.end3761
                                        #   in Loop: Header=BB57_601 Depth=2
	jmp	.LBB57_774
.LBB57_774:                             # %if.end3762
                                        #   in Loop: Header=BB57_601 Depth=2
	jmp	.LBB57_775
.LBB57_775:                             # %if.end3763
                                        #   in Loop: Header=BB57_601 Depth=2
	cmpl	$0, -188(%rbp)
	je	.LBB57_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-188(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB57_777:                             # %if.end3769
                                        #   in Loop: Header=BB57_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB57_778:                             # %for.cond3781
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB57_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_780:                             # %for.cond3786
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB57_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB57_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_780
.LBB57_783:                             # %for.end3797
                                        #   in Loop: Header=BB57_778 Depth=3
	jmp	.LBB57_784
.LBB57_784:                             # %for.inc3798
                                        #   in Loop: Header=BB57_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_778
.LBB57_785:                             # %for.end3800
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_786:                             # %for.cond3802
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB57_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB57_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_786
.LBB57_789:                             # %for.end3811
                                        #   in Loop: Header=BB57_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB57_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB57_791:                             # %for.cond3819
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB57_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_793:                             # %for.cond3824
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_601 Depth=2
                                        #       Parent Loop BB57_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB57_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB57_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_793
.LBB57_796:                             # %for.end3844
                                        #   in Loop: Header=BB57_791 Depth=3
	jmp	.LBB57_797
.LBB57_797:                             # %for.inc3845
                                        #   in Loop: Header=BB57_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_791
.LBB57_798:                             # %for.end3847
                                        #   in Loop: Header=BB57_601 Depth=2
	jmp	.LBB57_799
.LBB57_799:                             # %if.end3848
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB57_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_601
.LBB57_801:                             # %for.end3860
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_802
.LBB57_802:                             # %if.end3861
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB57_803:                             # %for.cond3862
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB57_803 Depth=2
	movl	$0, -24(%rbp)
.LBB57_805:                             # %for.cond3866
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB57_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB57_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_805
.LBB57_808:                             # %for.end3890
                                        #   in Loop: Header=BB57_803 Depth=2
	jmp	.LBB57_809
.LBB57_809:                             # %for.inc3891
                                        #   in Loop: Header=BB57_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_803
.LBB57_810:                             # %for.end3893
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB57_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB57_825
.LBB57_813:                             # %if.then3902
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB57_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB57_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_822
.LBB57_816:                             # %if.else3910
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB57_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB57_821
.LBB57_818:                             # %if.else3915
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB57_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_820:                             # %if.end3922
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_821
.LBB57_821:                             # %if.end3923
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_822
.LBB57_822:                             # %if.end3924
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_824
.LBB57_823:                             # %if.else3925
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_824:                             # %if.end3927
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_825
.LBB57_825:                             # %if.end3928
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_827
.LBB57_826:                             # %if.else3929
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB57_827:                             # %if.end3930
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB57_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB57_830
.LBB57_829:                             # %if.then3938
                                        #   in Loop: Header=BB57_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB57_830:                             # %if.end3939
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_832
.LBB57_831:                             # %if.else3940
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB57_832:                             # %if.end3941
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB57_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB57_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB57_171 Depth=1
	leaq	-272(%rbp), %rdi
	leaq	-276(%rbp), %rsi
	leaq	-300(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB57_835:                             # %for.cond3949
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_853 Depth 3
                                        #         Child Loop BB57_908 Depth 4
                                        #           Child Loop BB57_911 Depth 5
                                        #             Child Loop BB57_913 Depth 6
                                        #           Child Loop BB57_920 Depth 5
                                        #             Child Loop BB57_922 Depth 6
                                        #         Child Loop BB57_955 Depth 4
                                        #           Child Loop BB57_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB57_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB57_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB57_846
.LBB57_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB57_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB57_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB57_846
.LBB57_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB57_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB57_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB57_846
.LBB57_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB57_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB57_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB57_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB57_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB57_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB57_835 Depth=2
	cmpl	$0, -300(%rbp)
	jne	.LBB57_847
.LBB57_846:                             # %if.then3982
                                        #   in Loop: Header=BB57_835 Depth=2
	jmp	.LBB57_976
.LBB57_847:                             # %if.end3983
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB57_835 Depth=2
	movl	$11, -308(%rbp)
	jmp	.LBB57_850
.LBB57_849:                             # %if.else3987
                                        #   in Loop: Header=BB57_835 Depth=2
	movl	$8, -308(%rbp)
.LBB57_850:                             # %if.end3988
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB57_852:                             # %if.end3994
                                        #   in Loop: Header=BB57_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB57_853:                             # %for.cond3995
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_908 Depth 4
                                        #           Child Loop BB57_911 Depth 5
                                        #             Child Loop BB57_913 Depth 6
                                        #           Child Loop BB57_920 Depth 5
                                        #             Child Loop BB57_922 Depth 6
                                        #         Child Loop BB57_955 Depth 4
                                        #           Child Loop BB57_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB57_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB57_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB57_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB57_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB57_857:                             # %if.end4010
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB57_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB57_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB57_866
.LBB57_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB57_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB57_866
.LBB57_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB57_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB57_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB57_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -300(%rbp)
	jne	.LBB57_867
.LBB57_866:                             # %if.then4032
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_974
.LBB57_867:                             # %if.end4033
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_869
.LBB57_868:                             # %if.else4034
                                        #   in Loop: Header=BB57_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB57_869:                             # %if.end4037
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB57_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB57_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB57_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB57_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB57_877:                             # %if.end4066
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_878
.LBB57_878:                             # %if.end4067
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB57_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB57_880:                             # %if.end4072
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB57_881:                             # %if.end4074
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB57_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB57_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB57_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB57_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB57_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB57_887:                             # %if.end4092
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_888
.LBB57_888:                             # %if.end4093
                                        #   in Loop: Header=BB57_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB57_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB57_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB57_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB57_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_902
.LBB57_893:                             # %if.else4110
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB57_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB57_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB57_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_901
.LBB57_897:                             # %if.else4120
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB57_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB57_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB57_900:                             # %if.end4128
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_901
.LBB57_901:                             # %if.end4129
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_902
.LBB57_902:                             # %if.end4130
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_903
.LBB57_903:                             # %if.end4131
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB57_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB57_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB57_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB57_947
.LBB57_907:                             # %if.then4146
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_908
.LBB57_908:                             # %while.body
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_835 Depth=2
                                        #       Parent Loop BB57_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_911 Depth 5
                                        #             Child Loop BB57_913 Depth 6
                                        #           Child Loop BB57_920 Depth 5
                                        #             Child Loop BB57_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB57_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB57_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB57_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB57_908 Depth=4
	movl	$0, -20(%rbp)
.LBB57_911:                             # %for.cond4153
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_835 Depth=2
                                        #       Parent Loop BB57_853 Depth=3
                                        #         Parent Loop BB57_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB57_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB57_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB57_911 Depth=5
	movl	$0, -24(%rbp)
.LBB57_913:                             # %for.cond4157
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_835 Depth=2
                                        #       Parent Loop BB57_853 Depth=3
                                        #         Parent Loop BB57_908 Depth=4
                                        #           Parent Loop BB57_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB57_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB57_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB57_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_913
.LBB57_916:                             # %for.end4182
                                        #   in Loop: Header=BB57_911 Depth=5
	jmp	.LBB57_917
.LBB57_917:                             # %for.inc4183
                                        #   in Loop: Header=BB57_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_911
.LBB57_918:                             # %for.end4185
                                        #   in Loop: Header=BB57_908 Depth=4
	jmp	.LBB57_928
.LBB57_919:                             # %if.else4186
                                        #   in Loop: Header=BB57_908 Depth=4
	movl	$0, -20(%rbp)
.LBB57_920:                             # %for.cond4187
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_835 Depth=2
                                        #       Parent Loop BB57_853 Depth=3
                                        #         Parent Loop BB57_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB57_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB57_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB57_920 Depth=5
	movl	$0, -24(%rbp)
.LBB57_922:                             # %for.cond4191
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_835 Depth=2
                                        #       Parent Loop BB57_853 Depth=3
                                        #         Parent Loop BB57_908 Depth=4
                                        #           Parent Loop BB57_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB57_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB57_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB57_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_922
.LBB57_925:                             # %for.end4215
                                        #   in Loop: Header=BB57_920 Depth=5
	jmp	.LBB57_926
.LBB57_926:                             # %for.inc4216
                                        #   in Loop: Header=BB57_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_920
.LBB57_927:                             # %for.end4218
                                        #   in Loop: Header=BB57_908 Depth=4
	jmp	.LBB57_928
.LBB57_928:                             # %if.end4219
                                        #   in Loop: Header=BB57_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB57_929:                             # %if.end4220
                                        #   in Loop: Header=BB57_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB57_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB57_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB57_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB57_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB57_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB57_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB57_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB57_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB57_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB57_908 Depth=4
	jmp	.LBB57_908
.LBB57_935:                             # %if.else4236
                                        #   in Loop: Header=BB57_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB57_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB57_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB57_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB57_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB57_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB57_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB57_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB57_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_934
.LBB57_940:                             # %if.else4250
                                        #   in Loop: Header=BB57_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB57_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB57_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB57_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB57_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB57_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB57_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_934
.LBB57_944:                             # %if.else4262
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB57_946
.LBB57_945:                             # %if.else4264
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_946
.LBB57_946:                             # %while.end
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_947
.LBB57_947:                             # %if.end4265
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB57_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB57_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB57_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB57_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB57_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB57_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB57_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	$0, -20(%rbp)
.LBB57_955:                             # %for.cond4288
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_835 Depth=2
                                        #       Parent Loop BB57_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB57_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB57_955 Depth=4
	movl	$0, -24(%rbp)
.LBB57_957:                             # %for.cond4292
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_835 Depth=2
                                        #       Parent Loop BB57_853 Depth=3
                                        #         Parent Loop BB57_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB57_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB57_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB57_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_957
.LBB57_960:                             # %for.end4316
                                        #   in Loop: Header=BB57_955 Depth=4
	jmp	.LBB57_961
.LBB57_961:                             # %for.inc4317
                                        #   in Loop: Header=BB57_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_955
.LBB57_962:                             # %for.end4319
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB57_963:                             # %if.end4320
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_964
.LBB57_964:                             # %if.end4321
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_965
.LBB57_965:                             # %if.end4322
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB57_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB57_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB57_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB57_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB57_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB57_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB57_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB57_972:                             # %if.end4356
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_973
.LBB57_973:                             # %if.end4357
                                        #   in Loop: Header=BB57_853 Depth=3
	jmp	.LBB57_974
.LBB57_974:                             # %for.inc4358
                                        #   in Loop: Header=BB57_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB57_853
.LBB57_975:                             # %for.end4360
                                        #   in Loop: Header=BB57_835 Depth=2
	jmp	.LBB57_976
.LBB57_976:                             # %for.inc4361
                                        #   in Loop: Header=BB57_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB57_835
.LBB57_977:                             # %for.end4364
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1082
.LBB57_978:                             # %if.else4365
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB57_980:                             # %if.end4371
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB57_981:                             # %for.cond4372
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1014 Depth 3
                                        #         Child Loop BB57_1017 Depth 4
                                        #           Child Loop BB57_1019 Depth 5
                                        #         Child Loop BB57_1026 Depth 4
                                        #           Child Loop BB57_1028 Depth 5
                                        #       Child Loop BB57_1061 Depth 3
                                        #         Child Loop BB57_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB57_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB57_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB57_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB57_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB57_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB57_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB57_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB57_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB57_990:                             # %if.end4407
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_991
.LBB57_991:                             # %if.end4408
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB57_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB57_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB57_993:                             # %if.end4413
                                        #   in Loop: Header=BB57_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB57_994:                             # %if.end4415
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB57_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB57_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB57_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB57_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_1008
.LBB57_999:                             # %if.else4433
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB57_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB57_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB57_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_1007
.LBB57_1003:                            # %if.else4443
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB57_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB57_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB57_1006:                            # %if.end4451
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1007
.LBB57_1007:                            # %if.end4452
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1008
.LBB57_1008:                            # %if.end4453
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1009
.LBB57_1009:                            # %if.end4454
                                        #   in Loop: Header=BB57_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB57_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB57_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB57_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB57_1053
.LBB57_1013:                            # %if.then4470
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1014
.LBB57_1014:                            # %while.body4471
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_1017 Depth 4
                                        #           Child Loop BB57_1019 Depth 5
                                        #         Child Loop BB57_1026 Depth 4
                                        #           Child Loop BB57_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB57_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB57_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB57_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB57_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB57_1017:                            # %for.cond4478
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_981 Depth=2
                                        #       Parent Loop BB57_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB57_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB57_1019:                            # %for.cond4482
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_981 Depth=2
                                        #       Parent Loop BB57_1014 Depth=3
                                        #         Parent Loop BB57_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB57_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB57_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1019
.LBB57_1022:                            # %for.end4507
                                        #   in Loop: Header=BB57_1017 Depth=4
	jmp	.LBB57_1023
.LBB57_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB57_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1017
.LBB57_1024:                            # %for.end4510
                                        #   in Loop: Header=BB57_1014 Depth=3
	jmp	.LBB57_1034
.LBB57_1025:                            # %if.else4511
                                        #   in Loop: Header=BB57_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB57_1026:                            # %for.cond4512
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_981 Depth=2
                                        #       Parent Loop BB57_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB57_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB57_1028:                            # %for.cond4516
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_981 Depth=2
                                        #       Parent Loop BB57_1014 Depth=3
                                        #         Parent Loop BB57_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB57_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB57_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1028
.LBB57_1031:                            # %for.end4540
                                        #   in Loop: Header=BB57_1026 Depth=4
	jmp	.LBB57_1032
.LBB57_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB57_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1026
.LBB57_1033:                            # %for.end4543
                                        #   in Loop: Header=BB57_1014 Depth=3
	jmp	.LBB57_1034
.LBB57_1034:                            # %if.end4544
                                        #   in Loop: Header=BB57_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB57_1035:                            # %if.end4545
                                        #   in Loop: Header=BB57_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB57_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB57_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB57_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB57_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB57_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB57_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB57_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB57_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB57_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB57_1014 Depth=3
	jmp	.LBB57_1014
.LBB57_1041:                            # %if.else4561
                                        #   in Loop: Header=BB57_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB57_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB57_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB57_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB57_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB57_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB57_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB57_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB57_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_1040
.LBB57_1046:                            # %if.else4575
                                        #   in Loop: Header=BB57_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB57_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB57_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB57_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB57_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB57_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB57_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_1040
.LBB57_1050:                            # %if.else4587
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB57_1052
.LBB57_1051:                            # %if.else4589
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1052
.LBB57_1052:                            # %while.end4590
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1053
.LBB57_1053:                            # %if.end4591
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB57_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB57_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB57_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB57_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB57_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB57_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB57_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB57_981 Depth=2
	movl	$0, -20(%rbp)
.LBB57_1061:                            # %for.cond4615
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB57_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB57_1063:                            # %for.cond4619
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_981 Depth=2
                                        #       Parent Loop BB57_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB57_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB57_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1063
.LBB57_1066:                            # %for.end4643
                                        #   in Loop: Header=BB57_1061 Depth=3
	jmp	.LBB57_1067
.LBB57_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB57_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1061
.LBB57_1068:                            # %for.end4646
                                        #   in Loop: Header=BB57_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB57_1069:                            # %if.end4647
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1070
.LBB57_1070:                            # %if.end4648
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1071
.LBB57_1071:                            # %if.end4649
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB57_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB57_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB57_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB57_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB57_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB57_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB57_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB57_1078:                            # %if.end4683
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1079
.LBB57_1079:                            # %if.end4684
                                        #   in Loop: Header=BB57_981 Depth=2
	jmp	.LBB57_1080
.LBB57_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB57_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB57_981
.LBB57_1081:                            # %for.end4687
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1082
.LBB57_1082:                            # %if.end4688
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1284
.LBB57_1083:                            # %if.else4689
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -312(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB57_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB57_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB57_1085:                            # %if.end4695
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB57_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB57_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -256(%rbp)
	je	.LBB57_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB57_1090
	jmp	.LBB57_1089
.LBB57_1089:                            # %if.then4702
                                        #   in Loop: Header=BB57_171 Depth=1
	subl	$2, %eax
	je	.LBB57_1097
	jmp	.LBB57_1098
.LBB57_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB57_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB57_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB57_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB57_1095
.LBB57_1094:                            # %if.then4716
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_1096
.LBB57_1095:                            # %if.else4717
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB57_1096:                            # %if.end4718
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1099
.LBB57_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_1099
.LBB57_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB57_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1101
.LBB57_1100:                            # %if.else4722
                                        #   in Loop: Header=BB57_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB57_1101:                            # %if.end4724
                                        #   in Loop: Header=BB57_171 Depth=1
	vmovsd	.LCPI57_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI57_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB57_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB57_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB57_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB57_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_1110
.LBB57_1106:                            # %if.else4743
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB57_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB57_1109
.LBB57_1108:                            # %if.else4748
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_1109:                            # %if.end4750
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1110
.LBB57_1110:                            # %if.end4751
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1112
.LBB57_1111:                            # %if.else4752
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_1112:                            # %if.end4754
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -20(%rbp)
.LBB57_1113:                            # %for.cond4755
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB57_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB57_1115:                            # %for.cond4759
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB57_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB57_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1115
.LBB57_1118:                            # %for.end4785
                                        #   in Loop: Header=BB57_1113 Depth=2
	jmp	.LBB57_1119
.LBB57_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB57_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1113
.LBB57_1120:                            # %for.end4788
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB57_1122
.LBB57_1121:                            # %if.else4789
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB57_1122:                            # %if.end4792
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1123
.LBB57_1123:                            # %if.end4793
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB57_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB57_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -20(%rbp)
.LBB57_1127:                            # %for.cond4806
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1129 Depth 3
                                        #         Child Loop BB57_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB57_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB57_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB57_1129:                            # %for.cond4810
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB57_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB57_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB57_1131:                            # %for.cond4814
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1127 Depth=2
                                        #       Parent Loop BB57_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB57_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB57_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB57_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB57_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB57_1134:                            # %if.end4826
                                        #   in Loop: Header=BB57_1131 Depth=4
	jmp	.LBB57_1135
.LBB57_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB57_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_1131
.LBB57_1136:                            # %for.end4829
                                        #   in Loop: Header=BB57_1129 Depth=3
	jmp	.LBB57_1137
.LBB57_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB57_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1129
.LBB57_1138:                            # %for.end4832
                                        #   in Loop: Header=BB57_1127 Depth=2
	jmp	.LBB57_1139
.LBB57_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB57_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1127
.LBB57_1140:                            # %for.end4835
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB57_1141:                            # %for.cond4840
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB57_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB57_1143:                            # %for.cond4844
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB57_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB57_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1143
.LBB57_1146:                            # %for.end4877
                                        #   in Loop: Header=BB57_1141 Depth=2
	jmp	.LBB57_1147
.LBB57_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB57_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1141
.LBB57_1148:                            # %for.end4880
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1149
.LBB57_1149:                            # %if.end4881
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB57_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB57_1151:                            # %if.end4889
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -24(%rbp)
.LBB57_1152:                            # %for.cond4890
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB57_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB57_1154:                            # %for.cond4894
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB57_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB57_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1154
.LBB57_1157:                            # %for.end4913
                                        #   in Loop: Header=BB57_1152 Depth=2
	jmp	.LBB57_1158
.LBB57_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB57_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1152
.LBB57_1159:                            # %for.end4916
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -20(%rbp)
.LBB57_1160:                            # %for.cond4917
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB57_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB57_1162:                            # %for.cond4921
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB57_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB57_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1162
.LBB57_1165:                            # %for.end4947
                                        #   in Loop: Header=BB57_1160 Depth=2
	jmp	.LBB57_1166
.LBB57_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB57_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1160
.LBB57_1167:                            # %for.end4950
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	jmp	.LBB57_1169
.LBB57_1168:                            # %if.else4952
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB57_1169:                            # %if.end4954
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1170
.LBB57_1170:                            # %if.end4955
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB57_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB57_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -20(%rbp)
.LBB57_1174:                            # %for.cond4968
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1176 Depth 3
                                        #         Child Loop BB57_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB57_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB57_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB57_1176:                            # %for.cond4972
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB57_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB57_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB57_1178:                            # %for.cond4976
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1174 Depth=2
                                        #       Parent Loop BB57_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB57_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB57_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB57_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB57_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB57_1181:                            # %if.end4988
                                        #   in Loop: Header=BB57_1178 Depth=4
	jmp	.LBB57_1182
.LBB57_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB57_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_1178
.LBB57_1183:                            # %for.end4991
                                        #   in Loop: Header=BB57_1176 Depth=3
	jmp	.LBB57_1184
.LBB57_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB57_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1176
.LBB57_1185:                            # %for.end4994
                                        #   in Loop: Header=BB57_1174 Depth=2
	jmp	.LBB57_1186
.LBB57_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB57_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1174
.LBB57_1187:                            # %for.end4997
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
.LBB57_1188:                            # %if.end5002
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB57_1189:                            # %for.cond5004
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB57_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB57_1191:                            # %for.cond5008
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB57_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB57_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1191
.LBB57_1194:                            # %for.end5034
                                        #   in Loop: Header=BB57_1189 Depth=2
	jmp	.LBB57_1195
.LBB57_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB57_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1189
.LBB57_1196:                            # %for.end5037
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	jmp	.LBB57_1198
.LBB57_1197:                            # %if.else5039
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB57_1198:                            # %if.end5043
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1199
.LBB57_1199:                            # %if.end5044
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB57_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB57_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -20(%rbp)
.LBB57_1202:                            # %for.cond5053
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB57_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB57_1204:                            # %for.cond5057
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB57_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB57_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1204
.LBB57_1207:                            # %for.end5084
                                        #   in Loop: Header=BB57_1202 Depth=2
	jmp	.LBB57_1208
.LBB57_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB57_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1202
.LBB57_1209:                            # %for.end5087
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -24(%rbp)
.LBB57_1211:                            # %for.cond5091
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB57_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB57_1213:                            # %for.cond5095
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB57_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -216(%rbp)
	movl	-216(%rbp), %eax
	subl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-220(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB57_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1213
.LBB57_1216:                            # %for.end5194
                                        #   in Loop: Header=BB57_1211 Depth=2
	jmp	.LBB57_1217
.LBB57_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB57_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1211
.LBB57_1218:                            # %for.end5197
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1219
.LBB57_1219:                            # %if.end5198
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -24(%rbp)
.LBB57_1221:                            # %for.cond5204
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB57_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB57_1223:                            # %for.cond5208
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB57_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB57_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1223
.LBB57_1226:                            # %for.end5232
                                        #   in Loop: Header=BB57_1221 Depth=2
	jmp	.LBB57_1227
.LBB57_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB57_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1221
.LBB57_1228:                            # %for.end5235
                                        #   in Loop: Header=BB57_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB57_1229:                            # %for.cond5237
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB57_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB57_1231:                            # %for.cond5241
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB57_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB57_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1231
.LBB57_1234:                            # %for.end5265
                                        #   in Loop: Header=BB57_1229 Depth=2
	jmp	.LBB57_1235
.LBB57_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB57_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1229
.LBB57_1236:                            # %for.end5268
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB57_1237:                            # %for.cond5270
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB57_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB57_1239:                            # %for.cond5274
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB57_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB57_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1239
.LBB57_1242:                            # %for.end5289
                                        #   in Loop: Header=BB57_1237 Depth=2
	jmp	.LBB57_1243
.LBB57_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB57_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1237
.LBB57_1244:                            # %for.end5292
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB57_1245:                            # %for.cond5296
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB57_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB57_1247:                            # %for.cond5300
                                        #   Parent Loop BB57_171 Depth=1
                                        #     Parent Loop BB57_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -220(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movl	-184(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -216(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-184(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB57_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB57_1251
.LBB57_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB57_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB57_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB57_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB57_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB57_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB57_1257
.LBB57_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%eax, %eax
	movl	-184(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB57_1256
.LBB57_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB57_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB57_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB57_1247 Depth=3
.LBB57_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB57_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB57_1260
.LBB57_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB57_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB57_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB57_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB57_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB57_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_1266
.LBB57_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB57_1265
.LBB57_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB57_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB57_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB57_1247 Depth=3
.LBB57_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-216(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB57_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB57_1269
.LBB57_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB57_1247 Depth=3
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB57_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB57_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB57_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB57_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB57_1275
.LBB57_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%eax, %eax
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB57_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB57_1274
.LBB57_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB57_1247 Depth=3
	movl	-216(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB57_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB57_1247 Depth=3
.LBB57_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB57_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB57_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1247
.LBB57_1277:                            # %for.end5546
                                        #   in Loop: Header=BB57_1245 Depth=2
	jmp	.LBB57_1278
.LBB57_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB57_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1245
.LBB57_1279:                            # %for.end5549
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1280
.LBB57_1280:                            # %if.end5550
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1282
.LBB57_1281:                            # %if.else5551
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB57_1282:                            # %if.end5554
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1283
.LBB57_1283:                            # %if.end5555
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1284
.LBB57_1284:                            # %if.end5556
                                        #   in Loop: Header=BB57_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB57_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB57_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB57_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB57_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB57_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB57_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -260(%rbp)
.LBB57_1289:                            # %if.end5574
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_1290
.LBB57_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB57_171
.LBB57_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB57_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB57_1295
.LBB57_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB57_1299
.LBB57_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB57_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB57_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB57_1298:                            # %if.end5597
	jmp	.LBB57_1299
.LBB57_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB57_1395
.LBB57_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB57_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB57_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB57_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB57_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB57_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB57_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB57_1308:                            # %for.cond5623
                                        #   Parent Loop BB57_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB57_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB57_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_1308
.LBB57_1311:                            # %for.end5639
                                        #   in Loop: Header=BB57_1306 Depth=1
	jmp	.LBB57_1312
.LBB57_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB57_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1306
.LBB57_1313:                            # %for.end5642
	jmp	.LBB57_1370
.LBB57_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB57_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB57_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB57_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB57_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB57_1318:                            # %for.cond5651
                                        #   Parent Loop BB57_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB57_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB57_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB57_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_1318
.LBB57_1321:                            # %for.end5680
                                        #   in Loop: Header=BB57_1316 Depth=1
	jmp	.LBB57_1322
.LBB57_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB57_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1316
.LBB57_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB57_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB57_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB57_1326:                            # %for.cond5688
                                        #   Parent Loop BB57_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB57_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB57_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1326
.LBB57_1329:                            # %for.end5707
                                        #   in Loop: Header=BB57_1324 Depth=1
	jmp	.LBB57_1330
.LBB57_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB57_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1324
.LBB57_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB57_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB57_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB57_1335:                            # %for.cond5718
                                        #   Parent Loop BB57_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB57_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB57_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1335
.LBB57_1338:                            # %for.end5752
                                        #   in Loop: Header=BB57_1333 Depth=1
	jmp	.LBB57_1339
.LBB57_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB57_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1333
.LBB57_1340:                            # %for.end5755
	jmp	.LBB57_1341
.LBB57_1341:                            # %if.end5756
	jmp	.LBB57_1342
.LBB57_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB57_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB57_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB57_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB57_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB57_1347:                            # %for.cond5772
                                        #   Parent Loop BB57_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB57_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB57_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_1347
.LBB57_1350:                            # %for.end5788
                                        #   in Loop: Header=BB57_1345 Depth=1
	jmp	.LBB57_1351
.LBB57_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB57_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1345
.LBB57_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB57_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB57_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB57_1356
# %bb.1355:                             # %if.then5800
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB57_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB57_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB57_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB57_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB57_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB57_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB57_1362:                            # %for.cond5816
                                        #   Parent Loop BB57_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB57_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB57_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB57_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_1362
.LBB57_1365:                            # %for.end5842
                                        #   in Loop: Header=BB57_1360 Depth=1
	jmp	.LBB57_1366
.LBB57_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB57_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_1360
.LBB57_1367:                            # %for.end5845
	jmp	.LBB57_1368
.LBB57_1368:                            # %if.end5846
	jmp	.LBB57_1369
.LBB57_1369:                            # %if.end5847
	jmp	.LBB57_1370
.LBB57_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB57_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB57_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB57_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB57_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB57_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -280(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB57_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB57_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB57_1382
.LBB57_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB57_1382
# %bb.1381:                             # %if.then5884
	leaq	-280(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB57_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB57_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB57_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB57_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB57_1392
.LBB57_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB57_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB57_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB57_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB57_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB57_1394:                            # %if.end5973
	jmp	.LBB57_1395
.LBB57_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB57_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB57_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB57_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB57_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB57_1401
.LBB57_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB57_1402
.LBB57_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB57_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB57_1406
.LBB57_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB57_1406:                            # %if.end6019
	jmp	.LBB57_1407
.LBB57_1407:                            # %if.end6020
	jmp	.LBB57_1408
.LBB57_1408:                            # %if.end6021
	jmp	.LBB57_1409
.LBB57_1409:                            # %if.end6022
	jmp	.LBB57_1410
.LBB57_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB57_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB57_1413
.LBB57_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB57_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB57_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB57_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB57_1420
	jmp	.LBB57_1428
.LBB57_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB57_1428
	jmp	.LBB57_1420
.LBB57_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB57_1420
	jmp	.LBB57_1428
.LBB57_1420:                            # %land.lhs.true6050
	movq	-424(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB57_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB57_1425
	jmp	.LBB57_1428
.LBB57_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_1424
# %bb.1423:                             # %cond.true6058
	movq	-424(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB57_1428
	jmp	.LBB57_1425
.LBB57_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB57_1425
	jmp	.LBB57_1428
.LBB57_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB57_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB57_1427:                            # %if.end6068
	jmp	.LBB57_1428
.LBB57_1428:                            # %if.end6069
	jmp	.LBB57_1429
.LBB57_1429:                            # %if.end6070
	jmp	.LBB57_1430
.LBB57_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB57_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB57_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB57_1452
.LBB57_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB57_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -260(%rbp)
	jne	.LBB57_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB57_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB57_1437:                            # %lor.end6142
.LBB57_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB57_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB57_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB57_1441:                            # %lor.end6166
.LBB57_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB57_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB57_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB57_1445:                            # %lor.end6191
.LBB57_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB57_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB57_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB57_1449:                            # %lor.end6216
.LBB57_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB57_1451:                            # %if.end6232
	jmp	.LBB57_1452
.LBB57_1452:                            # %if.end6233
	jmp	.LBB57_1464
.LBB57_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB57_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB57_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB57_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB57_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB57_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB57_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB57_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB57_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB57_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB57_1463:                            # %if.end6319
	jmp	.LBB57_1464
.LBB57_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB57_1466:                            # %if.end6327
	cmpl	$1753490717, -412(%rbp) # imm = 0x6884251D
	jne	.LBB57_1468
.LBB57_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_1467
.Lfunc_end57:
	.size	encode_one_macroblock.28, .Lfunc_end57-encode_one_macroblock.28
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.29         # -- Begin function RestoreMV8x8.29
	.p2align	4, 0x90
	.type	RestoreMV8x8.29,@function
RestoreMV8x8.29:                        # @RestoreMV8x8.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$897075169, -12(%rbp)   # imm = 0x357847E1
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	cmpl	$897075169, -12(%rbp)   # imm = 0x357847E1
	jne	.LBB58_6
.LBB58_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_5
.Lfunc_end58:
	.size	RestoreMV8x8.29, .Lfunc_end58-RestoreMV8x8.29
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.30            # -- Begin function I16Offset.30
	.p2align	4, 0x90
	.type	I16Offset.30,@function
I16Offset.30:                           # @I16Offset.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$240704298, -16(%rbp)   # imm = 0xE58DB2A
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-20(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$240704298, -16(%rbp)   # imm = 0xE58DB2A
	jne	.LBB59_2
.LBB59_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_1
.Lfunc_end59:
	.size	I16Offset.30, .Lfunc_end59-I16Offset.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.31
.LCPI60_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.31
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.31,@function
RDCost_for_8x8blocks.31:                # @RDCost_for_8x8blocks.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1524856173, -160(%rbp) # imm = 0x5AE3756D
	movq	%rdi, -144(%rbp)
	movq	%rsi, -192(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -128(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB60_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB60_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -116(%rbp)
	je	.LBB60_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB60_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -200(%rbp)
	jmp	.LBB60_139
.LBB60_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-192(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB60_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB60_8
.LBB60_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB60_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-128(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB60_19
.LBB60_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB60_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB60_13
.LBB60_12:                              # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB60_14
.LBB60_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB60_14
.LBB60_14:                              # %cond.end71
	movl	%eax, -172(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB60_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB60_17
.LBB60_16:                              # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB60_18
.LBB60_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB60_18
.LBB60_18:                              # %cond.end82
	movl	%eax, -164(%rbp)
	movq	-192(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-172(%rbp), %r8d
	movl	-164(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-128(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB60_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB60_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB60_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_23 Depth 2
                                        #       Child Loop BB60_25 Depth 3
                                        #     Child Loop BB60_31 Depth 2
                                        #       Child Loop BB60_33 Depth 3
                                        #     Child Loop BB60_39 Depth 2
                                        #       Child Loop BB60_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB60_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB60_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB60_23:                              # %for.cond96
                                        #   Parent Loop BB60_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB60_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB60_23 Depth=2
	movl	$0, -12(%rbp)
.LBB60_25:                              # %for.cond100
                                        #   Parent Loop BB60_21 Depth=1
                                        #     Parent Loop BB60_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB60_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB60_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB60_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_25
.LBB60_28:                              # %for.end
                                        #   in Loop: Header=BB60_23 Depth=2
	jmp	.LBB60_29
.LBB60_29:                              # %for.inc114
                                        #   in Loop: Header=BB60_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_23
.LBB60_30:                              # %for.end116
                                        #   in Loop: Header=BB60_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB60_31:                              # %for.cond120
                                        #   Parent Loop BB60_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB60_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB60_31 Depth=2
	movl	$0, -12(%rbp)
.LBB60_33:                              # %for.cond124
                                        #   Parent Loop BB60_21 Depth=1
                                        #     Parent Loop BB60_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB60_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB60_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB60_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_33
.LBB60_36:                              # %for.end152
                                        #   in Loop: Header=BB60_31 Depth=2
	jmp	.LBB60_37
.LBB60_37:                              # %for.inc153
                                        #   in Loop: Header=BB60_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_31
.LBB60_38:                              # %for.end155
                                        #   in Loop: Header=BB60_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB60_39:                              # %for.cond159
                                        #   Parent Loop BB60_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB60_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB60_39 Depth=2
	movl	$0, -12(%rbp)
.LBB60_41:                              # %for.cond163
                                        #   Parent Loop BB60_21 Depth=1
                                        #     Parent Loop BB60_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB60_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB60_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB60_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_41
.LBB60_44:                              # %for.end180
                                        #   in Loop: Header=BB60_39 Depth=2
	jmp	.LBB60_45
.LBB60_45:                              # %for.inc181
                                        #   in Loop: Header=BB60_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_39
.LBB60_46:                              # %for.end183
                                        #   in Loop: Header=BB60_21 Depth=1
	jmp	.LBB60_47
.LBB60_47:                              # %for.inc184
                                        #   in Loop: Header=BB60_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB60_21
.LBB60_48:                              # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB60_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_51:                              # %for.cond192
                                        #   Parent Loop BB60_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -120(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-120(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-120(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -72(%rbp)
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-72(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB60_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_55
.LBB60_54:                              # %cond.false229
                                        #   in Loop: Header=BB60_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB60_55:                              # %cond.end235
                                        #   in Loop: Header=BB60_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB60_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB60_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB60_61
.LBB60_57:                              # %cond.false241
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB60_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_60
.LBB60_59:                              # %cond.false250
                                        #   in Loop: Header=BB60_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB60_60:                              # %cond.end256
                                        #   in Loop: Header=BB60_51 Depth=2
.LBB60_61:                              # %cond.end258
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB60_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB60_64
.LBB60_63:                              # %cond.false276
                                        #   in Loop: Header=BB60_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB60_64:                              # %cond.end282
                                        #   in Loop: Header=BB60_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB60_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB60_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_70
.LBB60_66:                              # %cond.false288
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB60_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_69
.LBB60_68:                              # %cond.false297
                                        #   in Loop: Header=BB60_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB60_69:                              # %cond.end303
                                        #   in Loop: Header=BB60_51 Depth=2
.LBB60_70:                              # %cond.end305
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB60_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB60_73
.LBB60_72:                              # %cond.false325
                                        #   in Loop: Header=BB60_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB60_73:                              # %cond.end331
                                        #   in Loop: Header=BB60_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB60_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB60_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB60_79
.LBB60_75:                              # %cond.false337
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB60_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB60_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_78
.LBB60_77:                              # %cond.false346
                                        #   in Loop: Header=BB60_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB60_78:                              # %cond.end352
                                        #   in Loop: Header=BB60_51 Depth=2
.LBB60_79:                              # %cond.end354
                                        #   in Loop: Header=BB60_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB60_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_51
.LBB60_81:                              # %for.end369
                                        #   in Loop: Header=BB60_49 Depth=1
	jmp	.LBB60_82
.LBB60_82:                              # %for.inc370
                                        #   in Loop: Header=BB60_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_49
.LBB60_83:                              # %for.end372
	jmp	.LBB60_84
.LBB60_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB60_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB60_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB60_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB60_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB60_102
# %bb.89:                               # %if.then388
	movl	$0, -76(%rbp)
.LBB60_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_92 Depth 2
                                        #       Child Loop BB60_94 Depth 3
	movl	-76(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB60_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB60_90 Depth=1
	movl	-76(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_92:                              # %for.cond395
                                        #   Parent Loop BB60_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB60_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_94:                              # %for.cond403
                                        #   Parent Loop BB60_90 Depth=1
                                        #     Parent Loop BB60_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB60_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB60_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_94
.LBB60_97:                              # %for.end429
                                        #   in Loop: Header=BB60_92 Depth=2
	jmp	.LBB60_98
.LBB60_98:                              # %for.inc430
                                        #   in Loop: Header=BB60_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_92
.LBB60_99:                              # %for.end432
                                        #   in Loop: Header=BB60_90 Depth=1
	jmp	.LBB60_100
.LBB60_100:                             # %for.inc433
                                        #   in Loop: Header=BB60_90 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB60_90
.LBB60_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB60_113
.LBB60_102:                             # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB60_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_105:                             # %for.cond447
                                        #   Parent Loop BB60_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB60_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB60_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB60_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB60_108:                             # %if.end524
                                        #   in Loop: Header=BB60_105 Depth=2
	jmp	.LBB60_109
.LBB60_109:                             # %for.inc525
                                        #   in Loop: Header=BB60_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_105
.LBB60_110:                             # %for.end527
                                        #   in Loop: Header=BB60_103 Depth=1
	jmp	.LBB60_111
.LBB60_111:                             # %for.inc528
                                        #   in Loop: Header=BB60_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_103
.LBB60_112:                             # %for.end530
	jmp	.LBB60_113
.LBB60_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB60_115
# %bb.114:                              # %if.then534
	movl	-124(%rbp), %edi
	movl	-168(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_116
.LBB60_115:                             # %if.else536
	movl	-124(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB60_116:                             # %if.end547
	cmpl	$0, -116(%rbp)
	jne	.LBB60_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB60_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB60_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB60_121
.LBB60_120:                             # %if.then560
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB60_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB60_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB60_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB60_126
.LBB60_125:                             # %if.then579
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB60_126:                             # %if.end583
	jmp	.LBB60_127
.LBB60_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB60_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB60_130
.LBB60_129:                             # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB60_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB60_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB60_133
.LBB60_132:                             # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB60_133:                             # %if.end612
	jmp	.LBB60_134
.LBB60_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB60_136
# %bb.135:                              # %if.then617
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -68(%rbp)
	movl	-36(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB60_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB60_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB60_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
.LBB60_139:                             # %return
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1524856173, -160(%rbp) # imm = 0x5AE3756D
	jne	.LBB60_141
.LBB60_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB60_140
.Lfunc_end60:
	.size	RDCost_for_8x8blocks.31, .Lfunc_end60-RDCost_for_8x8blocks.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.32
.LCPI61_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI61_1:
	.quad	4622945017495814144     # double 12
.LCPI61_2:
	.quad	4607182418800017408     # double 1
.LCPI61_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI61_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI61_5:
	.quad	4611686018427387904     # double 2
.LCPI61_6:
	.quad	4613937818241073152     # double 3
.LCPI61_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI61_8:
	.quad	4616189618054758400     # double 4
.LCPI61_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI61_10:
	.quad	4618441417868443648     # double 6
.LCPI61_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI61_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI61_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI61_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI61_15:
	.quad	4602678819172646912     # double 0.5
.LCPI61_16:
	.quad	4679240012837945344     # double 65536
.LCPI61_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI61_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.32
	.p2align	4, 0x90
	.type	encode_one_macroblock.32,@function
encode_one_macroblock.32:               # @encode_one_macroblock.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$598980083, -412(%rbp)  # imm = 0x23B3B5F3
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -180(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -176(%rbp)
	movl	$0, -304(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB61_4
.LBB61_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB61_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB61_5
.LBB61_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB61_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -320(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -404(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB61_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB61_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB61_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB61_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB61_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB61_11:                              # %land.end
.LBB61_12:                              # %lor.end36
.LBB61_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -308(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB61_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB61_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB61_17:                              # %lor.end51
.LBB61_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB61_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB61_21
.LBB61_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB61_21
.LBB61_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB61_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB61_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -288(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -288(%rbp)
	je	.LBB61_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB61_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB61_27
.LBB61_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB61_27:                              # %if.end
	jmp	.LBB61_29
.LBB61_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB61_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB61_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB61_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB61_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB61_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB61_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB61_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB61_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB61_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB61_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB61_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB61_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB61_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB61_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB61_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB61_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB61_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB61_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB61_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB61_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB61_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB61_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB61_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB61_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB61_53 Depth=1
	movl	$0, -56(%rbp)
.LBB61_55:                              # %for.cond156
                                        #   Parent Loop BB61_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB61_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB61_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB61_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB61_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB61_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB61_59:                              # %if.end183
                                        #   in Loop: Header=BB61_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB61_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB61_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB61_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB61_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB61_62:                              # %if.end202
                                        #   in Loop: Header=BB61_55 Depth=2
	jmp	.LBB61_63
.LBB61_63:                              # %for.inc
                                        #   in Loop: Header=BB61_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_55
.LBB61_64:                              # %for.end
                                        #   in Loop: Header=BB61_53 Depth=1
	jmp	.LBB61_65
.LBB61_65:                              # %for.inc203
                                        #   in Loop: Header=BB61_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB61_53
.LBB61_66:                              # %for.end205
	jmp	.LBB61_93
.LBB61_67:                              # %if.else206
	cmpl	$0, -288(%rbp)
	je	.LBB61_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB61_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB61_69 Depth=1
	movl	$0, -56(%rbp)
.LBB61_71:                              # %for.cond215
                                        #   Parent Loop BB61_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB61_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB61_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB61_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB61_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB61_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB61_75:                              # %if.end244
                                        #   in Loop: Header=BB61_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB61_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB61_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB61_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB61_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB61_78:                              # %if.end263
                                        #   in Loop: Header=BB61_71 Depth=2
	jmp	.LBB61_79
.LBB61_79:                              # %for.inc264
                                        #   in Loop: Header=BB61_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_71
.LBB61_80:                              # %for.end266
                                        #   in Loop: Header=BB61_69 Depth=1
	jmp	.LBB61_81
.LBB61_81:                              # %for.inc267
                                        #   in Loop: Header=BB61_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB61_69
.LBB61_82:                              # %for.end269
	jmp	.LBB61_92
.LBB61_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB61_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB61_84 Depth=1
	movl	$0, -56(%rbp)
.LBB61_86:                              # %for.cond277
                                        #   Parent Loop BB61_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB61_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB61_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_86
.LBB61_89:                              # %for.end290
                                        #   in Loop: Header=BB61_84 Depth=1
	jmp	.LBB61_90
.LBB61_90:                              # %for.inc291
                                        #   in Loop: Header=BB61_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB61_84
.LBB61_91:                              # %for.end293
	jmp	.LBB61_92
.LBB61_92:                              # %if.end294
	jmp	.LBB61_93
.LBB61_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB61_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB61_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB61_99
.LBB61_98:                              # %if.else315
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB61_99:                              # %if.end326
	jmp	.LBB61_159
.LBB61_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB61_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI61_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB61_104
.LBB61_103:                             # %cond.false336
	vmovsd	.LCPI61_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB61_104:                             # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB61_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI61_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB61_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI61_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI61_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_109
.LBB61_108:                             # %cond.false357
	vmovsd	.LCPI61_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_109:                             # %cond.end359
	vmovsd	.LCPI61_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI61_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_115
.LBB61_111:                             # %cond.false364
	vmovsd	.LCPI61_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI61_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_114
.LBB61_113:                             # %cond.false369
	vmovsd	.LCPI61_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_114:                             # %cond.end371
.LBB61_115:                             # %cond.end373
	jmp	.LBB61_129
.LBB61_116:                             # %cond.false375
	cmpl	$0, -320(%rbp)
	je	.LBB61_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_120
.LBB61_119:                             # %cond.false382
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_120:                             # %cond.end384
	vmovsd	.LCPI61_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI61_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_126
.LBB61_122:                             # %cond.false389
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_125
.LBB61_124:                             # %cond.false394
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_125:                             # %cond.end396
.LBB61_126:                             # %cond.end398
	jmp	.LBB61_128
.LBB61_127:                             # %cond.false400
	vmovsd	.LCPI61_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_128
.LBB61_128:                             # %cond.end401
.LBB61_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB61_146
.LBB61_130:                             # %if.else406
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI61_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB61_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI61_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_145
.LBB61_132:                             # %cond.false415
	cmpl	$0, -320(%rbp)
	je	.LBB61_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_136
.LBB61_135:                             # %cond.false422
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_136:                             # %cond.end424
	vmovsd	.LCPI61_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI61_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_142
.LBB61_138:                             # %cond.false429
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB61_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI61_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_141
.LBB61_140:                             # %cond.false434
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_141:                             # %cond.end436
.LBB61_142:                             # %cond.end438
	jmp	.LBB61_144
.LBB61_143:                             # %cond.false440
	vmovsd	.LCPI61_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB61_144
.LBB61_144:                             # %cond.end441
.LBB61_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB61_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB61_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB61_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI61_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI61_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI61_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB61_152
.LBB61_151:                             # %cond.false465
	vmovsd	.LCPI61_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB61_152:                             # %cond.end473
	vmovsd	.LCPI61_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB61_153:                             # %if.end477
	jmp	.LBB61_158
.LBB61_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB61_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI61_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB61_157:                             # %if.end487
	jmp	.LBB61_158
.LBB61_158:                             # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB61_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB61_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI61_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB61_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB61_166
.LBB61_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB61_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB61_165
.LBB61_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB61_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB61_166:                             # %if.end510
	vmovsd	.LCPI61_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI61_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB61_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB61_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB61_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB61_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_167
.LBB61_170:                             # %for.end522
	movl	$0, -252(%rbp)
.LBB61_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_181 Depth 2
                                        #       Child Loop BB61_184 Depth 3
                                        #         Child Loop BB61_190 Depth 4
                                        #         Child Loop BB61_210 Depth 4
                                        #         Child Loop BB61_300 Depth 4
                                        #           Child Loop BB61_302 Depth 5
                                        #         Child Loop BB61_309 Depth 4
                                        #           Child Loop BB61_311 Depth 5
                                        #         Child Loop BB61_326 Depth 4
                                        #           Child Loop BB61_328 Depth 5
                                        #         Child Loop BB61_335 Depth 4
                                        #           Child Loop BB61_337 Depth 5
                                        #         Child Loop BB61_355 Depth 4
                                        #           Child Loop BB61_357 Depth 5
                                        #         Child Loop BB61_374 Depth 4
                                        #           Child Loop BB61_376 Depth 5
                                        #     Child Loop BB61_416 Depth 2
                                        #       Child Loop BB61_418 Depth 3
                                        #         Child Loop BB61_445 Depth 4
                                        #         Child Loop BB61_464 Depth 4
                                        #           Child Loop BB61_466 Depth 5
                                        #         Child Loop BB61_473 Depth 4
                                        #         Child Loop BB61_508 Depth 4
                                        #           Child Loop BB61_510 Depth 5
                                        #         Child Loop BB61_532 Depth 4
                                        #           Child Loop BB61_534 Depth 5
                                        #             Child Loop BB61_536 Depth 6
                                        #         Child Loop BB61_544 Depth 4
                                        #           Child Loop BB61_546 Depth 5
                                        #       Child Loop BB61_569 Depth 3
                                        #         Child Loop BB61_571 Depth 4
                                        #           Child Loop BB61_573 Depth 5
                                        #       Child Loop BB61_581 Depth 3
                                        #         Child Loop BB61_583 Depth 4
                                        #     Child Loop BB61_601 Depth 2
                                        #       Child Loop BB61_603 Depth 3
                                        #         Child Loop BB61_614 Depth 4
                                        #         Child Loop BB61_633 Depth 4
                                        #           Child Loop BB61_635 Depth 5
                                        #         Child Loop BB61_642 Depth 4
                                        #         Child Loop BB61_677 Depth 4
                                        #           Child Loop BB61_679 Depth 5
                                        #         Child Loop BB61_701 Depth 4
                                        #           Child Loop BB61_703 Depth 5
                                        #             Child Loop BB61_705 Depth 6
                                        #         Child Loop BB61_713 Depth 4
                                        #           Child Loop BB61_715 Depth 5
                                        #         Child Loop BB61_723 Depth 4
                                        #           Child Loop BB61_725 Depth 5
                                        #       Child Loop BB61_745 Depth 3
                                        #         Child Loop BB61_747 Depth 4
                                        #           Child Loop BB61_749 Depth 5
                                        #       Child Loop BB61_757 Depth 3
                                        #         Child Loop BB61_759 Depth 4
                                        #       Child Loop BB61_766 Depth 3
                                        #         Child Loop BB61_768 Depth 4
                                        #       Child Loop BB61_778 Depth 3
                                        #         Child Loop BB61_780 Depth 4
                                        #       Child Loop BB61_786 Depth 3
                                        #       Child Loop BB61_791 Depth 3
                                        #         Child Loop BB61_793 Depth 4
                                        #     Child Loop BB61_803 Depth 2
                                        #       Child Loop BB61_805 Depth 3
                                        #     Child Loop BB61_835 Depth 2
                                        #       Child Loop BB61_853 Depth 3
                                        #         Child Loop BB61_908 Depth 4
                                        #           Child Loop BB61_911 Depth 5
                                        #             Child Loop BB61_913 Depth 6
                                        #           Child Loop BB61_920 Depth 5
                                        #             Child Loop BB61_922 Depth 6
                                        #         Child Loop BB61_955 Depth 4
                                        #           Child Loop BB61_957 Depth 5
                                        #     Child Loop BB61_981 Depth 2
                                        #       Child Loop BB61_1014 Depth 3
                                        #         Child Loop BB61_1017 Depth 4
                                        #           Child Loop BB61_1019 Depth 5
                                        #         Child Loop BB61_1026 Depth 4
                                        #           Child Loop BB61_1028 Depth 5
                                        #       Child Loop BB61_1061 Depth 3
                                        #         Child Loop BB61_1063 Depth 4
                                        #     Child Loop BB61_1113 Depth 2
                                        #       Child Loop BB61_1115 Depth 3
                                        #     Child Loop BB61_1127 Depth 2
                                        #       Child Loop BB61_1129 Depth 3
                                        #         Child Loop BB61_1131 Depth 4
                                        #     Child Loop BB61_1141 Depth 2
                                        #       Child Loop BB61_1143 Depth 3
                                        #     Child Loop BB61_1152 Depth 2
                                        #       Child Loop BB61_1154 Depth 3
                                        #     Child Loop BB61_1160 Depth 2
                                        #       Child Loop BB61_1162 Depth 3
                                        #     Child Loop BB61_1174 Depth 2
                                        #       Child Loop BB61_1176 Depth 3
                                        #         Child Loop BB61_1178 Depth 4
                                        #     Child Loop BB61_1189 Depth 2
                                        #       Child Loop BB61_1191 Depth 3
                                        #     Child Loop BB61_1202 Depth 2
                                        #       Child Loop BB61_1204 Depth 3
                                        #     Child Loop BB61_1211 Depth 2
                                        #       Child Loop BB61_1213 Depth 3
                                        #     Child Loop BB61_1221 Depth 2
                                        #       Child Loop BB61_1223 Depth 3
                                        #     Child Loop BB61_1229 Depth 2
                                        #       Child Loop BB61_1231 Depth 3
                                        #     Child Loop BB61_1237 Depth 2
                                        #       Child Loop BB61_1239 Depth 3
                                        #     Child Loop BB61_1245 Depth 2
                                        #       Child Loop BB61_1247 Depth 3
	movl	-252(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB61_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$2, -308(%rbp)
	jne	.LBB61_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB61_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB61_176
.LBB61_175:                             # %if.else534
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB61_176:                             # %if.end536
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_177
.LBB61_177:                             # %if.end537
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB61_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB61_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB61_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB61_180:                             # %if.end542
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB61_181:                             # %for.cond543
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_184 Depth 3
                                        #         Child Loop BB61_190 Depth 4
                                        #         Child Loop BB61_210 Depth 4
                                        #         Child Loop BB61_300 Depth 4
                                        #           Child Loop BB61_302 Depth 5
                                        #         Child Loop BB61_309 Depth 4
                                        #           Child Loop BB61_311 Depth 5
                                        #         Child Loop BB61_326 Depth 4
                                        #           Child Loop BB61_328 Depth 5
                                        #         Child Loop BB61_335 Depth 4
                                        #           Child Loop BB61_337 Depth 5
                                        #         Child Loop BB61_355 Depth 4
                                        #           Child Loop BB61_357 Depth 5
                                        #         Child Loop BB61_374 Depth 4
                                        #           Child Loop BB61_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB61_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB61_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB61_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB61_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB61_184:                             # %for.cond554
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_190 Depth 4
                                        #         Child Loop BB61_210 Depth 4
                                        #         Child Loop BB61_300 Depth 4
                                        #           Child Loop BB61_302 Depth 5
                                        #         Child Loop BB61_309 Depth 4
                                        #           Child Loop BB61_311 Depth 5
                                        #         Child Loop BB61_326 Depth 4
                                        #           Child Loop BB61_328 Depth 5
                                        #         Child Loop BB61_335 Depth 4
                                        #           Child Loop BB61_337 Depth 5
                                        #         Child Loop BB61_355 Depth 4
                                        #           Child Loop BB61_357 Depth 5
                                        #         Child Loop BB61_374 Depth 4
                                        #           Child Loop BB61_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB61_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB61_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB61_187:                             # %land.end566
                                        #   in Loop: Header=BB61_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB61_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB61_189:                             # %land.end574
                                        #   in Loop: Header=BB61_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB61_190:                             # %for.cond577
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB61_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB61_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB61_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB61_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB61_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB61_206
.LBB61_194:                             # %if.then594
                                        #   in Loop: Header=BB61_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB61_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB61_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB61_198
.LBB61_197:                             # %cond.false604
                                        #   in Loop: Header=BB61_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_198:                             # %cond.end607
                                        #   in Loop: Header=BB61_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB61_203
.LBB61_199:                             # %cond.false610
                                        #   in Loop: Header=BB61_190 Depth=4
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB61_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB61_202
.LBB61_201:                             # %cond.false617
                                        #   in Loop: Header=BB61_190 Depth=4
	movl	$1, %eax
	jmp	.LBB61_202
.LBB61_202:                             # %cond.end618
                                        #   in Loop: Header=BB61_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_203:                             # %cond.end623
                                        #   in Loop: Header=BB61_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB61_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB61_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB61_205:                             # %if.end636
                                        #   in Loop: Header=BB61_190 Depth=4
	jmp	.LBB61_206
.LBB61_206:                             # %if.end637
                                        #   in Loop: Header=BB61_190 Depth=4
	jmp	.LBB61_207
.LBB61_207:                             # %for.inc638
                                        #   in Loop: Header=BB61_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB61_190
.LBB61_208:                             # %for.end640
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB61_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB61_210:                             # %for.cond643
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB61_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB61_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB61_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB61_215
.LBB61_214:                             # %cond.false660
                                        #   in Loop: Header=BB61_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_215:                             # %cond.end663
                                        #   in Loop: Header=BB61_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB61_220
.LBB61_216:                             # %cond.false667
                                        #   in Loop: Header=BB61_210 Depth=4
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB61_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB61_219
.LBB61_218:                             # %cond.false674
                                        #   in Loop: Header=BB61_210 Depth=4
	movl	$1, %eax
	jmp	.LBB61_219
.LBB61_219:                             # %cond.end675
                                        #   in Loop: Header=BB61_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_220:                             # %cond.end680
                                        #   in Loop: Header=BB61_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB61_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB61_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB61_222:                             # %if.end693
                                        #   in Loop: Header=BB61_210 Depth=4
	jmp	.LBB61_223
.LBB61_223:                             # %for.inc694
                                        #   in Loop: Header=BB61_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB61_210
.LBB61_224:                             # %for.end696
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB61_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB61_228
.LBB61_227:                             # %cond.false706
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_228:                             # %cond.end709
                                        #   in Loop: Header=BB61_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB61_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB61_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB61_231
.LBB61_230:                             # %cond.false719
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB61_231:                             # %cond.end721
                                        #   in Loop: Header=BB61_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB61_236
.LBB61_232:                             # %cond.false726
                                        #   in Loop: Header=BB61_184 Depth=3
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB61_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB61_235
.LBB61_234:                             # %cond.false733
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	$1, %eax
	jmp	.LBB61_235
.LBB61_235:                             # %cond.end734
                                        #   in Loop: Header=BB61_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_236:                             # %cond.end739
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB61_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB61_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB61_243
.LBB61_242:                             # %cond.false761
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB61_243:                             # %cond.end763
                                        #   in Loop: Header=BB61_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB61_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB61_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB61_246
.LBB61_245:                             # %cond.false773
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB61_246:                             # %cond.end775
                                        #   in Loop: Header=BB61_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB61_248
.LBB61_247:                             # %cond.false780
                                        #   in Loop: Header=BB61_184 Depth=3
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_248:                             # %cond.end784
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB61_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB61_252
.LBB61_251:                             # %cond.false797
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB61_252:                             # %cond.end799
                                        #   in Loop: Header=BB61_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB61_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB61_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB61_255
.LBB61_254:                             # %cond.false809
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB61_255:                             # %cond.end811
                                        #   in Loop: Header=BB61_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB61_257
.LBB61_256:                             # %cond.false816
                                        #   in Loop: Header=BB61_184 Depth=3
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_257:                             # %cond.end820
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	%eax, -172(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	jmp	.LBB61_259
.LBB61_258:                             # %if.else824
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
.LBB61_259:                             # %if.end825
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB61_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB61_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB61_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB61_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB61_285
.LBB61_266:                             # %if.else845
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB61_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB61_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB61_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB61_284
.LBB61_271:                             # %if.else859
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB61_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB61_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB61_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB61_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB61_283
.LBB61_276:                             # %if.else876
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB61_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB61_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jg	.LBB61_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB61_282
.LBB61_281:                             # %if.else893
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-172(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB61_282:                             # %if.end898
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_283
.LBB61_283:                             # %if.end899
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_284
.LBB61_284:                             # %if.end900
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_285
.LBB61_285:                             # %if.end901
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_295
.LBB61_286:                             # %if.else902
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB61_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB61_294
.LBB61_289:                             # %if.else910
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB61_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB61_293
.LBB61_292:                             # %if.else918
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB61_293:                             # %if.end920
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_294
.LBB61_294:                             # %if.end921
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_295
.LBB61_295:                             # %if.end922
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_297
.LBB61_296:                             # %if.else923
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB61_297:                             # %if.end925
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB61_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB61_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB61_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	$0, -24(%rbp)
.LBB61_300:                             # %for.cond933
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB61_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB61_300 Depth=4
	movl	$0, -20(%rbp)
.LBB61_302:                             # %for.cond937
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        #         Parent Loop BB61_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB61_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB61_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB61_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_302
.LBB61_305:                             # %for.end999
                                        #   in Loop: Header=BB61_300 Depth=4
	jmp	.LBB61_306
.LBB61_306:                             # %for.inc1000
                                        #   in Loop: Header=BB61_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_300
.LBB61_307:                             # %for.end1002
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_323
.LBB61_308:                             # %if.else1003
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	$0, -24(%rbp)
.LBB61_309:                             # %for.cond1004
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB61_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB61_309 Depth=4
	movl	$0, -20(%rbp)
.LBB61_311:                             # %for.cond1008
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        #         Parent Loop BB61_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB61_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB61_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB61_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB61_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB61_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB61_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB61_316
.LBB61_315:                             # %cond.false1024
                                        #   in Loop: Header=BB61_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB61_316:                             # %cond.end1025
                                        #   in Loop: Header=BB61_311 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB61_318
.LBB61_317:                             # %if.else1111
                                        #   in Loop: Header=BB61_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB61_318:                             # %if.end1217
                                        #   in Loop: Header=BB61_311 Depth=5
	jmp	.LBB61_319
.LBB61_319:                             # %for.inc1218
                                        #   in Loop: Header=BB61_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_311
.LBB61_320:                             # %for.end1220
                                        #   in Loop: Header=BB61_309 Depth=4
	jmp	.LBB61_321
.LBB61_321:                             # %for.inc1221
                                        #   in Loop: Header=BB61_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_309
.LBB61_322:                             # %for.end1223
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_323
.LBB61_323:                             # %if.end1224
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB61_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB61_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB61_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	$0, -24(%rbp)
.LBB61_326:                             # %for.cond1231
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB61_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB61_326 Depth=4
	movl	$0, -20(%rbp)
.LBB61_328:                             # %for.cond1235
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        #         Parent Loop BB61_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB61_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB61_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB61_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_328
.LBB61_331:                             # %for.end1303
                                        #   in Loop: Header=BB61_326 Depth=4
	jmp	.LBB61_332
.LBB61_332:                             # %for.inc1304
                                        #   in Loop: Header=BB61_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_326
.LBB61_333:                             # %for.end1306
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_351
.LBB61_334:                             # %if.else1307
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	$0, -24(%rbp)
.LBB61_335:                             # %for.cond1308
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB61_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB61_335 Depth=4
	movl	$0, -20(%rbp)
.LBB61_337:                             # %for.cond1312
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        #         Parent Loop BB61_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB61_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB61_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB61_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB61_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB61_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB61_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB61_342
.LBB61_341:                             # %cond.false1330
                                        #   in Loop: Header=BB61_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB61_342:                             # %cond.end1332
                                        #   in Loop: Header=BB61_337 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB61_346
.LBB61_343:                             # %if.else1419
                                        #   in Loop: Header=BB61_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB61_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB61_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB61_345:                             # %if.end1529
                                        #   in Loop: Header=BB61_337 Depth=5
	jmp	.LBB61_346
.LBB61_346:                             # %if.end1530
                                        #   in Loop: Header=BB61_337 Depth=5
	jmp	.LBB61_347
.LBB61_347:                             # %for.inc1531
                                        #   in Loop: Header=BB61_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_337
.LBB61_348:                             # %for.end1533
                                        #   in Loop: Header=BB61_335 Depth=4
	jmp	.LBB61_349
.LBB61_349:                             # %for.inc1534
                                        #   in Loop: Header=BB61_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_335
.LBB61_350:                             # %for.end1536
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_351
.LBB61_351:                             # %if.end1537
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_352
.LBB61_352:                             # %if.end1538
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_393
.LBB61_353:                             # %if.else1539
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB61_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB61_355:                             # %for.cond1546
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB61_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB61_355 Depth=4
	movl	$0, -20(%rbp)
.LBB61_357:                             # %for.cond1550
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        #         Parent Loop BB61_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB61_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB61_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB61_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB61_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB61_361
.LBB61_360:                             # %if.else1596
                                        #   in Loop: Header=BB61_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB61_361:                             # %if.end1676
                                        #   in Loop: Header=BB61_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB61_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB61_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB61_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB61_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB61_367
.LBB61_364:                             # %if.else1721
                                        #   in Loop: Header=BB61_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB61_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB61_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB61_366:                             # %if.end1805
                                        #   in Loop: Header=BB61_357 Depth=5
	jmp	.LBB61_367
.LBB61_367:                             # %if.end1806
                                        #   in Loop: Header=BB61_357 Depth=5
	jmp	.LBB61_368
.LBB61_368:                             # %if.end1807
                                        #   in Loop: Header=BB61_357 Depth=5
	jmp	.LBB61_369
.LBB61_369:                             # %for.inc1808
                                        #   in Loop: Header=BB61_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_357
.LBB61_370:                             # %for.end1810
                                        #   in Loop: Header=BB61_355 Depth=4
	jmp	.LBB61_371
.LBB61_371:                             # %for.inc1811
                                        #   in Loop: Header=BB61_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_355
.LBB61_372:                             # %for.end1813
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_392
.LBB61_373:                             # %if.else1814
                                        #   in Loop: Header=BB61_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB61_374:                             # %for.cond1818
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB61_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB61_374 Depth=4
	movl	$0, -20(%rbp)
.LBB61_376:                             # %for.cond1822
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_181 Depth=2
                                        #       Parent Loop BB61_184 Depth=3
                                        #         Parent Loop BB61_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB61_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB61_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB61_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB61_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB61_380
.LBB61_379:                             # %if.else1868
                                        #   in Loop: Header=BB61_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB61_380:                             # %if.end1948
                                        #   in Loop: Header=BB61_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB61_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB61_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB61_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB61_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB61_386
.LBB61_383:                             # %if.else1993
                                        #   in Loop: Header=BB61_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB61_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB61_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB61_385:                             # %if.end2077
                                        #   in Loop: Header=BB61_376 Depth=5
	jmp	.LBB61_386
.LBB61_386:                             # %if.end2078
                                        #   in Loop: Header=BB61_376 Depth=5
	jmp	.LBB61_387
.LBB61_387:                             # %if.end2079
                                        #   in Loop: Header=BB61_376 Depth=5
	jmp	.LBB61_388
.LBB61_388:                             # %for.inc2080
                                        #   in Loop: Header=BB61_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_376
.LBB61_389:                             # %for.end2082
                                        #   in Loop: Header=BB61_374 Depth=4
	jmp	.LBB61_390
.LBB61_390:                             # %for.inc2083
                                        #   in Loop: Header=BB61_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_374
.LBB61_391:                             # %for.end2085
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_392
.LBB61_392:                             # %if.end2086
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_393
.LBB61_393:                             # %if.end2087
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB61_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB61_399
.LBB61_395:                             # %if.else2106
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB61_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB61_398
.LBB61_397:                             # %if.else2131
                                        #   in Loop: Header=BB61_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB61_398:                             # %if.end2132
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_399
.LBB61_399:                             # %if.end2133
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB61_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB61_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB61_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB61_402:                             # %if.end2143
                                        #   in Loop: Header=BB61_184 Depth=3
	jmp	.LBB61_403
.LBB61_403:                             # %for.inc2144
                                        #   in Loop: Header=BB61_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_184
.LBB61_404:                             # %for.end2146
                                        #   in Loop: Header=BB61_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB61_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB61_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB61_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB61_407:                             # %if.end2155
                                        #   in Loop: Header=BB61_181 Depth=2
	jmp	.LBB61_408
.LBB61_408:                             # %if.end2156
                                        #   in Loop: Header=BB61_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB61_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB61_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -304(%rbp)
.LBB61_410:                             # %if.end2161
                                        #   in Loop: Header=BB61_181 Depth=2
	jmp	.LBB61_411
.LBB61_411:                             # %if.end2162
                                        #   in Loop: Header=BB61_181 Depth=2
	jmp	.LBB61_412
.LBB61_412:                             # %for.inc2163
                                        #   in Loop: Header=BB61_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_181
.LBB61_413:                             # %for.end2165
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB61_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB61_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB61_416:                             # %for.cond2172
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_418 Depth 3
                                        #         Child Loop BB61_445 Depth 4
                                        #         Child Loop BB61_464 Depth 4
                                        #           Child Loop BB61_466 Depth 5
                                        #         Child Loop BB61_473 Depth 4
                                        #         Child Loop BB61_508 Depth 4
                                        #           Child Loop BB61_510 Depth 5
                                        #         Child Loop BB61_532 Depth 4
                                        #           Child Loop BB61_534 Depth 5
                                        #             Child Loop BB61_536 Depth 6
                                        #         Child Loop BB61_544 Depth 4
                                        #           Child Loop BB61_546 Depth 5
                                        #       Child Loop BB61_569 Depth 3
                                        #         Child Loop BB61_571 Depth 4
                                        #           Child Loop BB61_573 Depth 5
                                        #       Child Loop BB61_581 Depth 3
                                        #         Child Loop BB61_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB61_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB61_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB61_418:                             # %for.cond2184
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_445 Depth 4
                                        #         Child Loop BB61_464 Depth 4
                                        #           Child Loop BB61_466 Depth 5
                                        #         Child Loop BB61_473 Depth 4
                                        #         Child Loop BB61_508 Depth 4
                                        #           Child Loop BB61_510 Depth 5
                                        #         Child Loop BB61_532 Depth 4
                                        #           Child Loop BB61_534 Depth 5
                                        #             Child Loop BB61_536 Depth 6
                                        #         Child Loop BB61_544 Depth 4
                                        #           Child Loop BB61_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB61_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB61_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB61_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB61_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB61_423
.LBB61_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB61_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB61_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB61_557
.LBB61_423:                             # %if.then2201
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB61_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	$0, -228(%rbp)
	movl	$0, -220(%rbp)
	movl	-28(%rbp), %edi
	leaq	-220(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -228(%rbp)
	cmpl	$2147483647, -228(%rbp) # imm = 0x7FFFFFFF
	je	.LBB61_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB61_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB61_428
.LBB61_427:                             # %if.then2214
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB61_429
.LBB61_428:                             # %if.else2215
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-228(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-220(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB61_429:                             # %if.end2218
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB61_431
	jmp	.LBB61_430
.LBB61_430:                             # %if.end2218
                                        #   in Loop: Header=BB61_418 Depth=3
	subl	$2, %eax
	je	.LBB61_438
	jmp	.LBB61_439
.LBB61_431:                             # %sw.bb
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-220(%rbp), %eax
	cmpl	-228(%rbp), %eax
	jl	.LBB61_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB61_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB61_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB61_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB61_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB61_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB61_436
.LBB61_435:                             # %if.then2231
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB61_437
.LBB61_436:                             # %if.else2232
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB61_437:                             # %if.end2233
                                        #   in Loop: Header=BB61_418 Depth=3
	jmp	.LBB61_440
.LBB61_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB61_440
.LBB61_439:                             # %sw.default
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB61_440:                             # %sw.epilog
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB61_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-188(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB61_442:                             # %if.end2240
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB61_443:                             # %if.end2242
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB61_518
.LBB61_444:                             # %if.else2278
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB61_445:                             # %for.cond2279
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB61_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB61_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB61_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB61_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB61_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB61_461
.LBB61_449:                             # %if.then2296
                                        #   in Loop: Header=BB61_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB61_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB61_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB61_453
.LBB61_452:                             # %cond.false2306
                                        #   in Loop: Header=BB61_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_453:                             # %cond.end2309
                                        #   in Loop: Header=BB61_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB61_458
.LBB61_454:                             # %cond.false2313
                                        #   in Loop: Header=BB61_445 Depth=4
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB61_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB61_457
.LBB61_456:                             # %cond.false2320
                                        #   in Loop: Header=BB61_445 Depth=4
	movl	$1, %eax
	jmp	.LBB61_457
.LBB61_457:                             # %cond.end2321
                                        #   in Loop: Header=BB61_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_458:                             # %cond.end2326
                                        #   in Loop: Header=BB61_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB61_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB61_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB61_460:                             # %if.end2339
                                        #   in Loop: Header=BB61_445 Depth=4
	jmp	.LBB61_461
.LBB61_461:                             # %if.end2340
                                        #   in Loop: Header=BB61_445 Depth=4
	jmp	.LBB61_462
.LBB61_462:                             # %for.inc2341
                                        #   in Loop: Header=BB61_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB61_445
.LBB61_463:                             # %for.end2343
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	$0, -24(%rbp)
.LBB61_464:                             # %for.cond2344
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB61_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB61_464 Depth=4
	movl	$0, -20(%rbp)
.LBB61_466:                             # %for.cond2348
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        #         Parent Loop BB61_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB61_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB61_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB61_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_466
.LBB61_469:                             # %for.end2405
                                        #   in Loop: Header=BB61_464 Depth=4
	jmp	.LBB61_470
.LBB61_470:                             # %for.inc2406
                                        #   in Loop: Header=BB61_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_464
.LBB61_471:                             # %for.end2408
                                        #   in Loop: Header=BB61_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB61_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB61_473:                             # %for.cond2411
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB61_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB61_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB61_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB61_478
.LBB61_477:                             # %cond.false2428
                                        #   in Loop: Header=BB61_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_478:                             # %cond.end2431
                                        #   in Loop: Header=BB61_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB61_483
.LBB61_479:                             # %cond.false2435
                                        #   in Loop: Header=BB61_473 Depth=4
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB61_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB61_482
.LBB61_481:                             # %cond.false2442
                                        #   in Loop: Header=BB61_473 Depth=4
	movl	$1, %eax
	jmp	.LBB61_482
.LBB61_482:                             # %cond.end2443
                                        #   in Loop: Header=BB61_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_483:                             # %cond.end2448
                                        #   in Loop: Header=BB61_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB61_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB61_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB61_485:                             # %if.end2461
                                        #   in Loop: Header=BB61_473 Depth=4
	jmp	.LBB61_486
.LBB61_486:                             # %for.inc2462
                                        #   in Loop: Header=BB61_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB61_473
.LBB61_487:                             # %for.end2464
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB61_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB61_491
.LBB61_490:                             # %cond.false2474
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_491:                             # %cond.end2477
                                        #   in Loop: Header=BB61_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB61_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB61_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB61_494
.LBB61_493:                             # %cond.false2487
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB61_494:                             # %cond.end2489
                                        #   in Loop: Header=BB61_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB61_499
.LBB61_495:                             # %cond.false2494
                                        #   in Loop: Header=BB61_418 Depth=3
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB61_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB61_498
.LBB61_497:                             # %cond.false2501
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	$1, %eax
	jmp	.LBB61_498
.LBB61_498:                             # %cond.end2502
                                        #   in Loop: Header=BB61_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_499:                             # %cond.end2507
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB61_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB61_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB61_507
.LBB61_502:                             # %if.else2517
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB61_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB61_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB61_506
.LBB61_505:                             # %if.else2524
                                        #   in Loop: Header=BB61_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB61_506:                             # %if.end2525
                                        #   in Loop: Header=BB61_418 Depth=3
	jmp	.LBB61_507
.LBB61_507:                             # %if.end2526
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	$0, -24(%rbp)
.LBB61_508:                             # %for.cond2527
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB61_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB61_508 Depth=4
	movl	$0, -20(%rbp)
.LBB61_510:                             # %for.cond2531
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        #         Parent Loop BB61_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB61_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB61_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB61_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_510
.LBB61_513:                             # %for.end2567
                                        #   in Loop: Header=BB61_508 Depth=4
	jmp	.LBB61_514
.LBB61_514:                             # %for.inc2568
                                        #   in Loop: Header=BB61_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_508
.LBB61_515:                             # %for.end2570
                                        #   in Loop: Header=BB61_418 Depth=3
	jmp	.LBB61_517
.LBB61_516:                             # %if.else2571
                                        #   in Loop: Header=BB61_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB61_517:                             # %if.end2572
                                        #   in Loop: Header=BB61_418 Depth=3
	jmp	.LBB61_518
.LBB61_518:                             # %if.end2573
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB61_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB61_526
.LBB61_520:                             # %if.else2578
                                        #   in Loop: Header=BB61_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB61_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB61_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB61_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB61_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB61_524
.LBB61_523:                             # %cond.false2592
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB61_524:                             # %cond.end2597
                                        #   in Loop: Header=BB61_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB61_525:                             # %if.end2603
                                        #   in Loop: Header=BB61_418 Depth=3
	jmp	.LBB61_526
.LBB61_526:                             # %if.end2604
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB61_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB61_530
.LBB61_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB61_556
.LBB61_530:                             # %if.then2616
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -188(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB61_532:                             # %for.cond2638
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_534 Depth 5
                                        #             Child Loop BB61_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB61_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB61_532 Depth=4
	movl	$0, -24(%rbp)
.LBB61_534:                             # %for.cond2642
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        #         Parent Loop BB61_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB61_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB61_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB61_534 Depth=5
	movl	$0, -20(%rbp)
.LBB61_536:                             # %for.cond2646
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        #         Parent Loop BB61_532 Depth=4
                                        #           Parent Loop BB61_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB61_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB61_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB61_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_536
.LBB61_539:                             # %for.end2668
                                        #   in Loop: Header=BB61_534 Depth=5
	jmp	.LBB61_540
.LBB61_540:                             # %for.inc2669
                                        #   in Loop: Header=BB61_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_534
.LBB61_541:                             # %for.end2671
                                        #   in Loop: Header=BB61_532 Depth=4
	jmp	.LBB61_542
.LBB61_542:                             # %for.inc2672
                                        #   in Loop: Header=BB61_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_532
.LBB61_543:                             # %for.end2674
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB61_544:                             # %for.cond2675
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB61_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_546:                             # %for.cond2680
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_418 Depth=3
                                        #         Parent Loop BB61_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB61_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB61_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB61_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB61_550
.LBB61_549:                             # %if.else2705
                                        #   in Loop: Header=BB61_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB61_550:                             # %if.end2754
                                        #   in Loop: Header=BB61_546 Depth=5
	jmp	.LBB61_551
.LBB61_551:                             # %for.inc2755
                                        #   in Loop: Header=BB61_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_546
.LBB61_552:                             # %for.end2757
                                        #   in Loop: Header=BB61_544 Depth=4
	jmp	.LBB61_553
.LBB61_553:                             # %for.inc2758
                                        #   in Loop: Header=BB61_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_544
.LBB61_554:                             # %for.end2760
                                        #   in Loop: Header=BB61_418 Depth=3
	jmp	.LBB61_555
.LBB61_555:                             # %if.end2761
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB61_556:                             # %if.end2762
                                        #   in Loop: Header=BB61_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB61_557:                             # %if.end2763
                                        #   in Loop: Header=BB61_418 Depth=3
	jmp	.LBB61_558
.LBB61_558:                             # %for.inc2764
                                        #   in Loop: Header=BB61_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB61_418
.LBB61_559:                             # %for.end2766
                                        #   in Loop: Header=BB61_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB61_416 Depth=2
	movl	-188(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB61_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB61_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB61_563
.LBB61_562:                             # %cond.true2782
                                        #   in Loop: Header=BB61_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB61_564
.LBB61_563:                             # %cond.false2783
                                        #   in Loop: Header=BB61_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB61_564
.LBB61_564:                             # %cond.end2784
                                        #   in Loop: Header=BB61_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB61_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB61_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB61_567
.LBB61_566:                             # %cond.true2793
                                        #   in Loop: Header=BB61_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB61_568
.LBB61_567:                             # %cond.false2794
                                        #   in Loop: Header=BB61_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB61_568
.LBB61_568:                             # %cond.end2795
                                        #   in Loop: Header=BB61_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB61_569:                             # %for.cond2813
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_571 Depth 4
                                        #           Child Loop BB61_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB61_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB61_569 Depth=3
	movl	$0, -24(%rbp)
.LBB61_571:                             # %for.cond2817
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB61_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB61_571 Depth=4
	movl	$0, -20(%rbp)
.LBB61_573:                             # %for.cond2821
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_569 Depth=3
                                        #         Parent Loop BB61_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB61_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB61_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB61_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_573
.LBB61_576:                             # %for.end2844
                                        #   in Loop: Header=BB61_571 Depth=4
	jmp	.LBB61_577
.LBB61_577:                             # %for.inc2845
                                        #   in Loop: Header=BB61_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_571
.LBB61_578:                             # %for.end2847
                                        #   in Loop: Header=BB61_569 Depth=3
	jmp	.LBB61_579
.LBB61_579:                             # %for.inc2848
                                        #   in Loop: Header=BB61_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_569
.LBB61_580:                             # %for.end2850
                                        #   in Loop: Header=BB61_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB61_581:                             # %for.cond2851
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB61_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_583:                             # %for.cond2856
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_416 Depth=2
                                        #       Parent Loop BB61_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB61_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB61_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB61_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB61_587
.LBB61_586:                             # %if.else2886
                                        #   in Loop: Header=BB61_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB61_587:                             # %if.end2935
                                        #   in Loop: Header=BB61_583 Depth=4
	jmp	.LBB61_588
.LBB61_588:                             # %for.inc2936
                                        #   in Loop: Header=BB61_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_583
.LBB61_589:                             # %for.end2938
                                        #   in Loop: Header=BB61_581 Depth=3
	jmp	.LBB61_590
.LBB61_590:                             # %for.inc2939
                                        #   in Loop: Header=BB61_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_581
.LBB61_591:                             # %for.end2941
                                        #   in Loop: Header=BB61_416 Depth=2
	jmp	.LBB61_592
.LBB61_592:                             # %if.end2942
                                        #   in Loop: Header=BB61_416 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB61_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB61_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB61_594:                             # %if.end2948
                                        #   in Loop: Header=BB61_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB61_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB61_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB61_596:                             # %if.end2974
                                        #   in Loop: Header=BB61_416 Depth=2
	jmp	.LBB61_597
.LBB61_597:                             # %for.inc2975
                                        #   in Loop: Header=BB61_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_416
.LBB61_598:                             # %for.end2977
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_599:                             # %if.end2980
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB61_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB61_601:                             # %for.cond2985
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_603 Depth 3
                                        #         Child Loop BB61_614 Depth 4
                                        #         Child Loop BB61_633 Depth 4
                                        #           Child Loop BB61_635 Depth 5
                                        #         Child Loop BB61_642 Depth 4
                                        #         Child Loop BB61_677 Depth 4
                                        #           Child Loop BB61_679 Depth 5
                                        #         Child Loop BB61_701 Depth 4
                                        #           Child Loop BB61_703 Depth 5
                                        #             Child Loop BB61_705 Depth 6
                                        #         Child Loop BB61_713 Depth 4
                                        #           Child Loop BB61_715 Depth 5
                                        #         Child Loop BB61_723 Depth 4
                                        #           Child Loop BB61_725 Depth 5
                                        #       Child Loop BB61_745 Depth 3
                                        #         Child Loop BB61_747 Depth 4
                                        #           Child Loop BB61_749 Depth 5
                                        #       Child Loop BB61_757 Depth 3
                                        #         Child Loop BB61_759 Depth 4
                                        #       Child Loop BB61_766 Depth 3
                                        #         Child Loop BB61_768 Depth 4
                                        #       Child Loop BB61_778 Depth 3
                                        #         Child Loop BB61_780 Depth 4
                                        #       Child Loop BB61_786 Depth 3
                                        #       Child Loop BB61_791 Depth 3
                                        #         Child Loop BB61_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB61_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB61_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB61_603:                             # %for.cond2997
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_614 Depth 4
                                        #         Child Loop BB61_633 Depth 4
                                        #           Child Loop BB61_635 Depth 5
                                        #         Child Loop BB61_642 Depth 4
                                        #         Child Loop BB61_677 Depth 4
                                        #           Child Loop BB61_679 Depth 5
                                        #         Child Loop BB61_701 Depth 4
                                        #           Child Loop BB61_703 Depth 5
                                        #             Child Loop BB61_705 Depth 6
                                        #         Child Loop BB61_713 Depth 4
                                        #           Child Loop BB61_715 Depth 5
                                        #         Child Loop BB61_723 Depth 4
                                        #           Child Loop BB61_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB61_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB61_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB61_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB61_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-220(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB61_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB61_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB61_610
.LBB61_609:                             # %if.then3019
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB61_611
.LBB61_610:                             # %if.else3020
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB61_611:                             # %if.end3022
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB61_612:                             # %if.end3024
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB61_687
.LBB61_613:                             # %if.else3060
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB61_614:                             # %for.cond3061
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB61_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB61_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB61_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB61_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB61_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB61_630
.LBB61_618:                             # %if.then3078
                                        #   in Loop: Header=BB61_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB61_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB61_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB61_622
.LBB61_621:                             # %cond.false3088
                                        #   in Loop: Header=BB61_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_622:                             # %cond.end3091
                                        #   in Loop: Header=BB61_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB61_627
.LBB61_623:                             # %cond.false3095
                                        #   in Loop: Header=BB61_614 Depth=4
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB61_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB61_626
.LBB61_625:                             # %cond.false3102
                                        #   in Loop: Header=BB61_614 Depth=4
	movl	$1, %eax
	jmp	.LBB61_626
.LBB61_626:                             # %cond.end3103
                                        #   in Loop: Header=BB61_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_627:                             # %cond.end3108
                                        #   in Loop: Header=BB61_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB61_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB61_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB61_629:                             # %if.end3121
                                        #   in Loop: Header=BB61_614 Depth=4
	jmp	.LBB61_630
.LBB61_630:                             # %if.end3122
                                        #   in Loop: Header=BB61_614 Depth=4
	jmp	.LBB61_631
.LBB61_631:                             # %for.inc3123
                                        #   in Loop: Header=BB61_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB61_614
.LBB61_632:                             # %for.end3125
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	$0, -24(%rbp)
.LBB61_633:                             # %for.cond3126
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB61_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB61_633 Depth=4
	movl	$0, -20(%rbp)
.LBB61_635:                             # %for.cond3130
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        #         Parent Loop BB61_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB61_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB61_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB61_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_635
.LBB61_638:                             # %for.end3187
                                        #   in Loop: Header=BB61_633 Depth=4
	jmp	.LBB61_639
.LBB61_639:                             # %for.inc3188
                                        #   in Loop: Header=BB61_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_633
.LBB61_640:                             # %for.end3190
                                        #   in Loop: Header=BB61_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB61_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB61_642:                             # %for.cond3193
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB61_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB61_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB61_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB61_647
.LBB61_646:                             # %cond.false3210
                                        #   in Loop: Header=BB61_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_647:                             # %cond.end3213
                                        #   in Loop: Header=BB61_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB61_652
.LBB61_648:                             # %cond.false3217
                                        #   in Loop: Header=BB61_642 Depth=4
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB61_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB61_651
.LBB61_650:                             # %cond.false3224
                                        #   in Loop: Header=BB61_642 Depth=4
	movl	$1, %eax
	jmp	.LBB61_651
.LBB61_651:                             # %cond.end3225
                                        #   in Loop: Header=BB61_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_652:                             # %cond.end3230
                                        #   in Loop: Header=BB61_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB61_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB61_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB61_654:                             # %if.end3243
                                        #   in Loop: Header=BB61_642 Depth=4
	jmp	.LBB61_655
.LBB61_655:                             # %for.inc3244
                                        #   in Loop: Header=BB61_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB61_642
.LBB61_656:                             # %for.end3246
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB61_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB61_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB61_660
.LBB61_659:                             # %cond.false3256
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB61_660:                             # %cond.end3259
                                        #   in Loop: Header=BB61_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB61_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB61_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB61_663
.LBB61_662:                             # %cond.false3269
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB61_663:                             # %cond.end3271
                                        #   in Loop: Header=BB61_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB61_668
.LBB61_664:                             # %cond.false3276
                                        #   in Loop: Header=BB61_603 Depth=3
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB61_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB61_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB61_667
.LBB61_666:                             # %cond.false3283
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	$1, %eax
	jmp	.LBB61_667
.LBB61_667:                             # %cond.end3284
                                        #   in Loop: Header=BB61_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB61_668:                             # %cond.end3289
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB61_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB61_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB61_676
.LBB61_671:                             # %if.else3299
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB61_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB61_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB61_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB61_675
.LBB61_674:                             # %if.else3306
                                        #   in Loop: Header=BB61_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB61_675:                             # %if.end3307
                                        #   in Loop: Header=BB61_603 Depth=3
	jmp	.LBB61_676
.LBB61_676:                             # %if.end3308
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	$0, -24(%rbp)
.LBB61_677:                             # %for.cond3309
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB61_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB61_677 Depth=4
	movl	$0, -20(%rbp)
.LBB61_679:                             # %for.cond3313
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        #         Parent Loop BB61_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB61_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB61_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB61_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_679
.LBB61_682:                             # %for.end3349
                                        #   in Loop: Header=BB61_677 Depth=4
	jmp	.LBB61_683
.LBB61_683:                             # %for.inc3350
                                        #   in Loop: Header=BB61_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_677
.LBB61_684:                             # %for.end3352
                                        #   in Loop: Header=BB61_603 Depth=3
	jmp	.LBB61_686
.LBB61_685:                             # %if.else3353
                                        #   in Loop: Header=BB61_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB61_686:                             # %if.end3354
                                        #   in Loop: Header=BB61_603 Depth=3
	jmp	.LBB61_687
.LBB61_687:                             # %if.end3355
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB61_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB61_695
.LBB61_689:                             # %if.else3360
                                        #   in Loop: Header=BB61_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB61_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB61_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB61_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB61_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB61_693
.LBB61_692:                             # %cond.false3374
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB61_693:                             # %cond.end3379
                                        #   in Loop: Header=BB61_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB61_694:                             # %if.end3385
                                        #   in Loop: Header=BB61_603 Depth=3
	jmp	.LBB61_695
.LBB61_695:                             # %if.end3386
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB61_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB61_699
.LBB61_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB61_732
.LBB61_699:                             # %if.then3398
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -188(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB61_701:                             # %for.cond3422
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_703 Depth 5
                                        #             Child Loop BB61_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB61_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB61_701 Depth=4
	movl	$0, -24(%rbp)
.LBB61_703:                             # %for.cond3426
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        #         Parent Loop BB61_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB61_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB61_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB61_703 Depth=5
	movl	$0, -20(%rbp)
.LBB61_705:                             # %for.cond3430
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        #         Parent Loop BB61_701 Depth=4
                                        #           Parent Loop BB61_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB61_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB61_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB61_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_705
.LBB61_708:                             # %for.end3453
                                        #   in Loop: Header=BB61_703 Depth=5
	jmp	.LBB61_709
.LBB61_709:                             # %for.inc3454
                                        #   in Loop: Header=BB61_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_703
.LBB61_710:                             # %for.end3456
                                        #   in Loop: Header=BB61_701 Depth=4
	jmp	.LBB61_711
.LBB61_711:                             # %for.inc3457
                                        #   in Loop: Header=BB61_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_701
.LBB61_712:                             # %for.end3459
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB61_713:                             # %for.cond3460
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB61_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_715:                             # %for.cond3465
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        #         Parent Loop BB61_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB61_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB61_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_715
.LBB61_718:                             # %for.end3494
                                        #   in Loop: Header=BB61_713 Depth=4
	jmp	.LBB61_719
.LBB61_719:                             # %for.inc3495
                                        #   in Loop: Header=BB61_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_713
.LBB61_720:                             # %for.end3497
                                        #   in Loop: Header=BB61_603 Depth=3
	jmp	.LBB61_721
.LBB61_721:                             # %if.end3498
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB61_723:                             # %for.cond3502
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB61_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_725:                             # %for.cond3507
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_603 Depth=3
                                        #         Parent Loop BB61_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB61_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB61_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_725
.LBB61_728:                             # %for.end3562
                                        #   in Loop: Header=BB61_723 Depth=4
	jmp	.LBB61_729
.LBB61_729:                             # %for.inc3563
                                        #   in Loop: Header=BB61_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_723
.LBB61_730:                             # %for.end3565
                                        #   in Loop: Header=BB61_603 Depth=3
	jmp	.LBB61_731
.LBB61_731:                             # %if.end3566
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB61_732:                             # %if.end3567
                                        #   in Loop: Header=BB61_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB61_733:                             # %if.end3568
                                        #   in Loop: Header=BB61_603 Depth=3
	jmp	.LBB61_734
.LBB61_734:                             # %for.inc3569
                                        #   in Loop: Header=BB61_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB61_603
.LBB61_735:                             # %for.end3571
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-188(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB61_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB61_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB61_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB61_739
.LBB61_738:                             # %cond.true3588
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB61_740
.LBB61_739:                             # %cond.false3589
                                        #   in Loop: Header=BB61_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB61_740
.LBB61_740:                             # %cond.end3590
                                        #   in Loop: Header=BB61_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB61_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB61_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB61_743
.LBB61_742:                             # %cond.true3599
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB61_744
.LBB61_743:                             # %cond.false3600
                                        #   in Loop: Header=BB61_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB61_744
.LBB61_744:                             # %cond.end3601
                                        #   in Loop: Header=BB61_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB61_745:                             # %for.cond3619
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_747 Depth 4
                                        #           Child Loop BB61_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB61_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB61_745 Depth=3
	movl	$0, -24(%rbp)
.LBB61_747:                             # %for.cond3623
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB61_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB61_747 Depth=4
	movl	$0, -20(%rbp)
.LBB61_749:                             # %for.cond3627
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_745 Depth=3
                                        #         Parent Loop BB61_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB61_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB61_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB61_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_749
.LBB61_752:                             # %for.end3650
                                        #   in Loop: Header=BB61_747 Depth=4
	jmp	.LBB61_753
.LBB61_753:                             # %for.inc3651
                                        #   in Loop: Header=BB61_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_747
.LBB61_754:                             # %for.end3653
                                        #   in Loop: Header=BB61_745 Depth=3
	jmp	.LBB61_755
.LBB61_755:                             # %for.inc3654
                                        #   in Loop: Header=BB61_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_745
.LBB61_756:                             # %for.end3656
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB61_757:                             # %for.cond3657
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB61_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_759:                             # %for.cond3662
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB61_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB61_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_759
.LBB61_762:                             # %for.end3691
                                        #   in Loop: Header=BB61_757 Depth=3
	jmp	.LBB61_763
.LBB61_763:                             # %for.inc3692
                                        #   in Loop: Header=BB61_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_757
.LBB61_764:                             # %for.end3694
                                        #   in Loop: Header=BB61_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB61_766:                             # %for.cond3698
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB61_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_768:                             # %for.cond3703
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB61_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB61_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_768
.LBB61_771:                             # %for.end3758
                                        #   in Loop: Header=BB61_766 Depth=3
	jmp	.LBB61_772
.LBB61_772:                             # %for.inc3759
                                        #   in Loop: Header=BB61_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_766
.LBB61_773:                             # %for.end3761
                                        #   in Loop: Header=BB61_601 Depth=2
	jmp	.LBB61_774
.LBB61_774:                             # %if.end3762
                                        #   in Loop: Header=BB61_601 Depth=2
	jmp	.LBB61_775
.LBB61_775:                             # %if.end3763
                                        #   in Loop: Header=BB61_601 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB61_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB61_777:                             # %if.end3769
                                        #   in Loop: Header=BB61_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB61_778:                             # %for.cond3781
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB61_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_780:                             # %for.cond3786
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB61_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB61_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_780
.LBB61_783:                             # %for.end3797
                                        #   in Loop: Header=BB61_778 Depth=3
	jmp	.LBB61_784
.LBB61_784:                             # %for.inc3798
                                        #   in Loop: Header=BB61_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_778
.LBB61_785:                             # %for.end3800
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_786:                             # %for.cond3802
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB61_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB61_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_786
.LBB61_789:                             # %for.end3811
                                        #   in Loop: Header=BB61_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB61_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB61_791:                             # %for.cond3819
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB61_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_793:                             # %for.cond3824
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_601 Depth=2
                                        #       Parent Loop BB61_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB61_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB61_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_793
.LBB61_796:                             # %for.end3844
                                        #   in Loop: Header=BB61_791 Depth=3
	jmp	.LBB61_797
.LBB61_797:                             # %for.inc3845
                                        #   in Loop: Header=BB61_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_791
.LBB61_798:                             # %for.end3847
                                        #   in Loop: Header=BB61_601 Depth=2
	jmp	.LBB61_799
.LBB61_799:                             # %if.end3848
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB61_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_601
.LBB61_801:                             # %for.end3860
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_802
.LBB61_802:                             # %if.end3861
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB61_803:                             # %for.cond3862
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB61_803 Depth=2
	movl	$0, -24(%rbp)
.LBB61_805:                             # %for.cond3866
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB61_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB61_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_805
.LBB61_808:                             # %for.end3890
                                        #   in Loop: Header=BB61_803 Depth=2
	jmp	.LBB61_809
.LBB61_809:                             # %for.inc3891
                                        #   in Loop: Header=BB61_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_803
.LBB61_810:                             # %for.end3893
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB61_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB61_825
.LBB61_813:                             # %if.then3902
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB61_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB61_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_822
.LBB61_816:                             # %if.else3910
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB61_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB61_821
.LBB61_818:                             # %if.else3915
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB61_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_820:                             # %if.end3922
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_821
.LBB61_821:                             # %if.end3923
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_822
.LBB61_822:                             # %if.end3924
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_824
.LBB61_823:                             # %if.else3925
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_824:                             # %if.end3927
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_825
.LBB61_825:                             # %if.end3928
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_827
.LBB61_826:                             # %if.else3929
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB61_827:                             # %if.end3930
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB61_830
.LBB61_829:                             # %if.then3938
                                        #   in Loop: Header=BB61_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB61_830:                             # %if.end3939
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_832
.LBB61_831:                             # %if.else3940
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB61_832:                             # %if.end3941
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB61_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB61_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB61_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-276(%rbp), %rsi
	leaq	-300(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB61_835:                             # %for.cond3949
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_853 Depth 3
                                        #         Child Loop BB61_908 Depth 4
                                        #           Child Loop BB61_911 Depth 5
                                        #             Child Loop BB61_913 Depth 6
                                        #           Child Loop BB61_920 Depth 5
                                        #             Child Loop BB61_922 Depth 6
                                        #         Child Loop BB61_955 Depth 4
                                        #           Child Loop BB61_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB61_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB61_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB61_846
.LBB61_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB61_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB61_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB61_846
.LBB61_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB61_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB61_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB61_846
.LBB61_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB61_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB61_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB61_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB61_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB61_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB61_835 Depth=2
	cmpl	$0, -300(%rbp)
	jne	.LBB61_847
.LBB61_846:                             # %if.then3982
                                        #   in Loop: Header=BB61_835 Depth=2
	jmp	.LBB61_976
.LBB61_847:                             # %if.end3983
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB61_835 Depth=2
	movl	$11, -316(%rbp)
	jmp	.LBB61_850
.LBB61_849:                             # %if.else3987
                                        #   in Loop: Header=BB61_835 Depth=2
	movl	$8, -316(%rbp)
.LBB61_850:                             # %if.end3988
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB61_852:                             # %if.end3994
                                        #   in Loop: Header=BB61_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB61_853:                             # %for.cond3995
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_908 Depth 4
                                        #           Child Loop BB61_911 Depth 5
                                        #             Child Loop BB61_913 Depth 6
                                        #           Child Loop BB61_920 Depth 5
                                        #             Child Loop BB61_922 Depth 6
                                        #         Child Loop BB61_955 Depth 4
                                        #           Child Loop BB61_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB61_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB61_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB61_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB61_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB61_857:                             # %if.end4010
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB61_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB61_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB61_866
.LBB61_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB61_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB61_866
.LBB61_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB61_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB61_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB61_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -300(%rbp)
	jne	.LBB61_867
.LBB61_866:                             # %if.then4032
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_974
.LBB61_867:                             # %if.end4033
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_869
.LBB61_868:                             # %if.else4034
                                        #   in Loop: Header=BB61_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB61_869:                             # %if.end4037
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB61_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB61_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB61_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB61_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB61_877:                             # %if.end4066
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_878
.LBB61_878:                             # %if.end4067
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB61_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB61_880:                             # %if.end4072
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB61_881:                             # %if.end4074
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB61_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB61_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB61_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB61_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB61_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB61_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB61_887:                             # %if.end4092
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_888
.LBB61_888:                             # %if.end4093
                                        #   in Loop: Header=BB61_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB61_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB61_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB61_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB61_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_902
.LBB61_893:                             # %if.else4110
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB61_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB61_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB61_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_901
.LBB61_897:                             # %if.else4120
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB61_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB61_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB61_900:                             # %if.end4128
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_901
.LBB61_901:                             # %if.end4129
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_902
.LBB61_902:                             # %if.end4130
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_903
.LBB61_903:                             # %if.end4131
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB61_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB61_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB61_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB61_947
.LBB61_907:                             # %if.then4146
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_908
.LBB61_908:                             # %while.body
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_835 Depth=2
                                        #       Parent Loop BB61_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_911 Depth 5
                                        #             Child Loop BB61_913 Depth 6
                                        #           Child Loop BB61_920 Depth 5
                                        #             Child Loop BB61_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB61_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB61_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB61_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB61_908 Depth=4
	movl	$0, -20(%rbp)
.LBB61_911:                             # %for.cond4153
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_835 Depth=2
                                        #       Parent Loop BB61_853 Depth=3
                                        #         Parent Loop BB61_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB61_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB61_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB61_911 Depth=5
	movl	$0, -24(%rbp)
.LBB61_913:                             # %for.cond4157
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_835 Depth=2
                                        #       Parent Loop BB61_853 Depth=3
                                        #         Parent Loop BB61_908 Depth=4
                                        #           Parent Loop BB61_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB61_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB61_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB61_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_913
.LBB61_916:                             # %for.end4182
                                        #   in Loop: Header=BB61_911 Depth=5
	jmp	.LBB61_917
.LBB61_917:                             # %for.inc4183
                                        #   in Loop: Header=BB61_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_911
.LBB61_918:                             # %for.end4185
                                        #   in Loop: Header=BB61_908 Depth=4
	jmp	.LBB61_928
.LBB61_919:                             # %if.else4186
                                        #   in Loop: Header=BB61_908 Depth=4
	movl	$0, -20(%rbp)
.LBB61_920:                             # %for.cond4187
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_835 Depth=2
                                        #       Parent Loop BB61_853 Depth=3
                                        #         Parent Loop BB61_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB61_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB61_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB61_920 Depth=5
	movl	$0, -24(%rbp)
.LBB61_922:                             # %for.cond4191
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_835 Depth=2
                                        #       Parent Loop BB61_853 Depth=3
                                        #         Parent Loop BB61_908 Depth=4
                                        #           Parent Loop BB61_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB61_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB61_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB61_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_922
.LBB61_925:                             # %for.end4215
                                        #   in Loop: Header=BB61_920 Depth=5
	jmp	.LBB61_926
.LBB61_926:                             # %for.inc4216
                                        #   in Loop: Header=BB61_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_920
.LBB61_927:                             # %for.end4218
                                        #   in Loop: Header=BB61_908 Depth=4
	jmp	.LBB61_928
.LBB61_928:                             # %if.end4219
                                        #   in Loop: Header=BB61_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB61_929:                             # %if.end4220
                                        #   in Loop: Header=BB61_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB61_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB61_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB61_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB61_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB61_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB61_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB61_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB61_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB61_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB61_908 Depth=4
	jmp	.LBB61_908
.LBB61_935:                             # %if.else4236
                                        #   in Loop: Header=BB61_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB61_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB61_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB61_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB61_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB61_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB61_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB61_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB61_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_934
.LBB61_940:                             # %if.else4250
                                        #   in Loop: Header=BB61_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB61_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB61_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB61_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB61_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB61_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB61_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_934
.LBB61_944:                             # %if.else4262
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB61_946
.LBB61_945:                             # %if.else4264
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_946
.LBB61_946:                             # %while.end
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_947
.LBB61_947:                             # %if.end4265
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB61_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB61_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB61_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB61_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB61_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB61_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB61_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	$0, -20(%rbp)
.LBB61_955:                             # %for.cond4288
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_835 Depth=2
                                        #       Parent Loop BB61_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB61_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB61_955 Depth=4
	movl	$0, -24(%rbp)
.LBB61_957:                             # %for.cond4292
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_835 Depth=2
                                        #       Parent Loop BB61_853 Depth=3
                                        #         Parent Loop BB61_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB61_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB61_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB61_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_957
.LBB61_960:                             # %for.end4316
                                        #   in Loop: Header=BB61_955 Depth=4
	jmp	.LBB61_961
.LBB61_961:                             # %for.inc4317
                                        #   in Loop: Header=BB61_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_955
.LBB61_962:                             # %for.end4319
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB61_963:                             # %if.end4320
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_964
.LBB61_964:                             # %if.end4321
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_965
.LBB61_965:                             # %if.end4322
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB61_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB61_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB61_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB61_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB61_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB61_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB61_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB61_972:                             # %if.end4356
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_973
.LBB61_973:                             # %if.end4357
                                        #   in Loop: Header=BB61_853 Depth=3
	jmp	.LBB61_974
.LBB61_974:                             # %for.inc4358
                                        #   in Loop: Header=BB61_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB61_853
.LBB61_975:                             # %for.end4360
                                        #   in Loop: Header=BB61_835 Depth=2
	jmp	.LBB61_976
.LBB61_976:                             # %for.inc4361
                                        #   in Loop: Header=BB61_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB61_835
.LBB61_977:                             # %for.end4364
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1082
.LBB61_978:                             # %if.else4365
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB61_980:                             # %if.end4371
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB61_981:                             # %for.cond4372
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1014 Depth 3
                                        #         Child Loop BB61_1017 Depth 4
                                        #           Child Loop BB61_1019 Depth 5
                                        #         Child Loop BB61_1026 Depth 4
                                        #           Child Loop BB61_1028 Depth 5
                                        #       Child Loop BB61_1061 Depth 3
                                        #         Child Loop BB61_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB61_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB61_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB61_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB61_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB61_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB61_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB61_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB61_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB61_990:                             # %if.end4407
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_991
.LBB61_991:                             # %if.end4408
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB61_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB61_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB61_993:                             # %if.end4413
                                        #   in Loop: Header=BB61_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB61_994:                             # %if.end4415
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB61_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB61_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB61_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB61_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_1008
.LBB61_999:                             # %if.else4433
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB61_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB61_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB61_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_1007
.LBB61_1003:                            # %if.else4443
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB61_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB61_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB61_1006:                            # %if.end4451
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1007
.LBB61_1007:                            # %if.end4452
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1008
.LBB61_1008:                            # %if.end4453
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1009
.LBB61_1009:                            # %if.end4454
                                        #   in Loop: Header=BB61_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB61_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB61_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB61_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB61_1053
.LBB61_1013:                            # %if.then4470
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1014
.LBB61_1014:                            # %while.body4471
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_1017 Depth 4
                                        #           Child Loop BB61_1019 Depth 5
                                        #         Child Loop BB61_1026 Depth 4
                                        #           Child Loop BB61_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB61_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB61_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB61_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB61_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB61_1017:                            # %for.cond4478
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_981 Depth=2
                                        #       Parent Loop BB61_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB61_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB61_1019:                            # %for.cond4482
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_981 Depth=2
                                        #       Parent Loop BB61_1014 Depth=3
                                        #         Parent Loop BB61_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB61_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB61_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1019
.LBB61_1022:                            # %for.end4507
                                        #   in Loop: Header=BB61_1017 Depth=4
	jmp	.LBB61_1023
.LBB61_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB61_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1017
.LBB61_1024:                            # %for.end4510
                                        #   in Loop: Header=BB61_1014 Depth=3
	jmp	.LBB61_1034
.LBB61_1025:                            # %if.else4511
                                        #   in Loop: Header=BB61_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB61_1026:                            # %for.cond4512
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_981 Depth=2
                                        #       Parent Loop BB61_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB61_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB61_1028:                            # %for.cond4516
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_981 Depth=2
                                        #       Parent Loop BB61_1014 Depth=3
                                        #         Parent Loop BB61_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB61_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB61_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1028
.LBB61_1031:                            # %for.end4540
                                        #   in Loop: Header=BB61_1026 Depth=4
	jmp	.LBB61_1032
.LBB61_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB61_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1026
.LBB61_1033:                            # %for.end4543
                                        #   in Loop: Header=BB61_1014 Depth=3
	jmp	.LBB61_1034
.LBB61_1034:                            # %if.end4544
                                        #   in Loop: Header=BB61_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB61_1035:                            # %if.end4545
                                        #   in Loop: Header=BB61_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB61_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB61_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB61_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB61_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB61_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB61_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB61_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB61_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB61_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB61_1014 Depth=3
	jmp	.LBB61_1014
.LBB61_1041:                            # %if.else4561
                                        #   in Loop: Header=BB61_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB61_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB61_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB61_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB61_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB61_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB61_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB61_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB61_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_1040
.LBB61_1046:                            # %if.else4575
                                        #   in Loop: Header=BB61_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB61_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB61_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB61_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB61_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB61_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB61_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_1040
.LBB61_1050:                            # %if.else4587
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB61_1052
.LBB61_1051:                            # %if.else4589
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1052
.LBB61_1052:                            # %while.end4590
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1053
.LBB61_1053:                            # %if.end4591
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB61_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB61_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB61_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB61_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB61_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB61_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB61_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB61_981 Depth=2
	movl	$0, -20(%rbp)
.LBB61_1061:                            # %for.cond4615
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB61_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB61_1063:                            # %for.cond4619
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_981 Depth=2
                                        #       Parent Loop BB61_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB61_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB61_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1063
.LBB61_1066:                            # %for.end4643
                                        #   in Loop: Header=BB61_1061 Depth=3
	jmp	.LBB61_1067
.LBB61_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB61_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1061
.LBB61_1068:                            # %for.end4646
                                        #   in Loop: Header=BB61_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB61_1069:                            # %if.end4647
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1070
.LBB61_1070:                            # %if.end4648
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1071
.LBB61_1071:                            # %if.end4649
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB61_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB61_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB61_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB61_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB61_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB61_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB61_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB61_1078:                            # %if.end4683
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1079
.LBB61_1079:                            # %if.end4684
                                        #   in Loop: Header=BB61_981 Depth=2
	jmp	.LBB61_1080
.LBB61_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB61_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB61_981
.LBB61_1081:                            # %for.end4687
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1082
.LBB61_1082:                            # %if.end4688
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1284
.LBB61_1083:                            # %if.else4689
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -312(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB61_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB61_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB61_1085:                            # %if.end4695
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB61_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB61_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -256(%rbp)
	je	.LBB61_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB61_1090
	jmp	.LBB61_1089
.LBB61_1089:                            # %if.then4702
                                        #   in Loop: Header=BB61_171 Depth=1
	subl	$2, %eax
	je	.LBB61_1097
	jmp	.LBB61_1098
.LBB61_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB61_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB61_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB61_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB61_1095
.LBB61_1094:                            # %if.then4716
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB61_1096
.LBB61_1095:                            # %if.else4717
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB61_1096:                            # %if.end4718
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1099
.LBB61_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB61_1099
.LBB61_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB61_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1101
.LBB61_1100:                            # %if.else4722
                                        #   in Loop: Header=BB61_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB61_1101:                            # %if.end4724
                                        #   in Loop: Header=BB61_171 Depth=1
	vmovsd	.LCPI61_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI61_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB61_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB61_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB61_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB61_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_1110
.LBB61_1106:                            # %if.else4743
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB61_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB61_1109
.LBB61_1108:                            # %if.else4748
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_1109:                            # %if.end4750
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1110
.LBB61_1110:                            # %if.end4751
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1112
.LBB61_1111:                            # %if.else4752
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_1112:                            # %if.end4754
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -20(%rbp)
.LBB61_1113:                            # %for.cond4755
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB61_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB61_1115:                            # %for.cond4759
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB61_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB61_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1115
.LBB61_1118:                            # %for.end4785
                                        #   in Loop: Header=BB61_1113 Depth=2
	jmp	.LBB61_1119
.LBB61_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB61_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1113
.LBB61_1120:                            # %for.end4788
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB61_1122
.LBB61_1121:                            # %if.else4789
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB61_1122:                            # %if.end4792
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1123
.LBB61_1123:                            # %if.end4793
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB61_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB61_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -20(%rbp)
.LBB61_1127:                            # %for.cond4806
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1129 Depth 3
                                        #         Child Loop BB61_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB61_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB61_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB61_1129:                            # %for.cond4810
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB61_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB61_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB61_1131:                            # %for.cond4814
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1127 Depth=2
                                        #       Parent Loop BB61_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB61_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB61_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB61_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB61_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB61_1134:                            # %if.end4826
                                        #   in Loop: Header=BB61_1131 Depth=4
	jmp	.LBB61_1135
.LBB61_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB61_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_1131
.LBB61_1136:                            # %for.end4829
                                        #   in Loop: Header=BB61_1129 Depth=3
	jmp	.LBB61_1137
.LBB61_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB61_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1129
.LBB61_1138:                            # %for.end4832
                                        #   in Loop: Header=BB61_1127 Depth=2
	jmp	.LBB61_1139
.LBB61_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB61_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1127
.LBB61_1140:                            # %for.end4835
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	$0, -24(%rbp)
.LBB61_1141:                            # %for.cond4840
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB61_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB61_1143:                            # %for.cond4844
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB61_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB61_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1143
.LBB61_1146:                            # %for.end4877
                                        #   in Loop: Header=BB61_1141 Depth=2
	jmp	.LBB61_1147
.LBB61_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB61_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1141
.LBB61_1148:                            # %for.end4880
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1149
.LBB61_1149:                            # %if.end4881
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB61_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB61_1151:                            # %if.end4889
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -24(%rbp)
.LBB61_1152:                            # %for.cond4890
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB61_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB61_1154:                            # %for.cond4894
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB61_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB61_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1154
.LBB61_1157:                            # %for.end4913
                                        #   in Loop: Header=BB61_1152 Depth=2
	jmp	.LBB61_1158
.LBB61_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB61_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1152
.LBB61_1159:                            # %for.end4916
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -20(%rbp)
.LBB61_1160:                            # %for.cond4917
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB61_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB61_1162:                            # %for.cond4921
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB61_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB61_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1162
.LBB61_1165:                            # %for.end4947
                                        #   in Loop: Header=BB61_1160 Depth=2
	jmp	.LBB61_1166
.LBB61_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB61_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1160
.LBB61_1167:                            # %for.end4950
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	jmp	.LBB61_1169
.LBB61_1168:                            # %if.else4952
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB61_1169:                            # %if.end4954
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1170
.LBB61_1170:                            # %if.end4955
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB61_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB61_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -20(%rbp)
.LBB61_1174:                            # %for.cond4968
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1176 Depth 3
                                        #         Child Loop BB61_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB61_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB61_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB61_1176:                            # %for.cond4972
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB61_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB61_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB61_1178:                            # %for.cond4976
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1174 Depth=2
                                        #       Parent Loop BB61_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB61_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB61_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB61_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB61_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB61_1181:                            # %if.end4988
                                        #   in Loop: Header=BB61_1178 Depth=4
	jmp	.LBB61_1182
.LBB61_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB61_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_1178
.LBB61_1183:                            # %for.end4991
                                        #   in Loop: Header=BB61_1176 Depth=3
	jmp	.LBB61_1184
.LBB61_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB61_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1176
.LBB61_1185:                            # %for.end4994
                                        #   in Loop: Header=BB61_1174 Depth=2
	jmp	.LBB61_1186
.LBB61_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB61_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1174
.LBB61_1187:                            # %for.end4997
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
.LBB61_1188:                            # %if.end5002
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB61_1189:                            # %for.cond5004
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB61_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB61_1191:                            # %for.cond5008
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB61_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB61_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1191
.LBB61_1194:                            # %for.end5034
                                        #   in Loop: Header=BB61_1189 Depth=2
	jmp	.LBB61_1195
.LBB61_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB61_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1189
.LBB61_1196:                            # %for.end5037
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	jmp	.LBB61_1198
.LBB61_1197:                            # %if.else5039
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB61_1198:                            # %if.end5043
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1199
.LBB61_1199:                            # %if.end5044
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB61_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB61_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -20(%rbp)
.LBB61_1202:                            # %for.cond5053
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB61_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB61_1204:                            # %for.cond5057
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB61_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB61_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1204
.LBB61_1207:                            # %for.end5084
                                        #   in Loop: Header=BB61_1202 Depth=2
	jmp	.LBB61_1208
.LBB61_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB61_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1202
.LBB61_1209:                            # %for.end5087
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -24(%rbp)
.LBB61_1211:                            # %for.cond5091
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB61_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB61_1213:                            # %for.cond5095
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB61_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -216(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movl	-224(%rbp), %eax
	subl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-216(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB61_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1213
.LBB61_1216:                            # %for.end5194
                                        #   in Loop: Header=BB61_1211 Depth=2
	jmp	.LBB61_1217
.LBB61_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB61_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1211
.LBB61_1218:                            # %for.end5197
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1219
.LBB61_1219:                            # %if.end5198
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -24(%rbp)
.LBB61_1221:                            # %for.cond5204
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB61_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB61_1223:                            # %for.cond5208
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB61_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB61_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1223
.LBB61_1226:                            # %for.end5232
                                        #   in Loop: Header=BB61_1221 Depth=2
	jmp	.LBB61_1227
.LBB61_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB61_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1221
.LBB61_1228:                            # %for.end5235
                                        #   in Loop: Header=BB61_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB61_1229:                            # %for.cond5237
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB61_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB61_1231:                            # %for.cond5241
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB61_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB61_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1231
.LBB61_1234:                            # %for.end5265
                                        #   in Loop: Header=BB61_1229 Depth=2
	jmp	.LBB61_1235
.LBB61_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB61_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1229
.LBB61_1236:                            # %for.end5268
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB61_1237:                            # %for.cond5270
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB61_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB61_1239:                            # %for.cond5274
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB61_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB61_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1239
.LBB61_1242:                            # %for.end5289
                                        #   in Loop: Header=BB61_1237 Depth=2
	jmp	.LBB61_1243
.LBB61_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB61_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1237
.LBB61_1244:                            # %for.end5292
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB61_1245:                            # %for.cond5296
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB61_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB61_1247:                            # %for.cond5300
                                        #   Parent Loop BB61_171 Depth=1
                                        #     Parent Loop BB61_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -216(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movl	-184(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -224(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-184(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB61_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB61_1251
.LBB61_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB61_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB61_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB61_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB61_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB61_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB61_1257
.LBB61_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%eax, %eax
	movl	-184(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB61_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB61_1256
.LBB61_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB61_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB61_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB61_1247 Depth=3
.LBB61_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-216(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB61_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB61_1260
.LBB61_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB61_1247 Depth=3
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB61_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB61_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB61_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB61_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_1266
.LBB61_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%eax, %eax
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB61_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB61_1265
.LBB61_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB61_1247 Depth=3
	movl	-216(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB61_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB61_1247 Depth=3
.LBB61_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB61_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB61_1269
.LBB61_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB61_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB61_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB61_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB61_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB61_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB61_1275
.LBB61_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB61_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB61_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB61_1274
.LBB61_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB61_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB61_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB61_1247 Depth=3
.LBB61_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB61_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB61_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1247
.LBB61_1277:                            # %for.end5546
                                        #   in Loop: Header=BB61_1245 Depth=2
	jmp	.LBB61_1278
.LBB61_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB61_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1245
.LBB61_1279:                            # %for.end5549
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1280
.LBB61_1280:                            # %if.end5550
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1282
.LBB61_1281:                            # %if.else5551
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB61_1282:                            # %if.end5554
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1283
.LBB61_1283:                            # %if.end5555
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1284
.LBB61_1284:                            # %if.end5556
                                        #   in Loop: Header=BB61_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB61_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB61_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB61_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB61_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB61_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB61_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -260(%rbp)
.LBB61_1289:                            # %if.end5574
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_1290
.LBB61_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB61_171
.LBB61_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB61_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB61_1295
.LBB61_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB61_1299
.LBB61_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB61_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB61_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB61_1298:                            # %if.end5597
	jmp	.LBB61_1299
.LBB61_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB61_1395
.LBB61_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB61_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB61_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB61_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB61_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB61_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB61_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB61_1308:                            # %for.cond5623
                                        #   Parent Loop BB61_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB61_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB61_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_1308
.LBB61_1311:                            # %for.end5639
                                        #   in Loop: Header=BB61_1306 Depth=1
	jmp	.LBB61_1312
.LBB61_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB61_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1306
.LBB61_1313:                            # %for.end5642
	jmp	.LBB61_1370
.LBB61_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB61_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB61_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB61_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB61_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB61_1318:                            # %for.cond5651
                                        #   Parent Loop BB61_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB61_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB61_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB61_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_1318
.LBB61_1321:                            # %for.end5680
                                        #   in Loop: Header=BB61_1316 Depth=1
	jmp	.LBB61_1322
.LBB61_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB61_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1316
.LBB61_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB61_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB61_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB61_1326:                            # %for.cond5688
                                        #   Parent Loop BB61_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB61_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB61_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1326
.LBB61_1329:                            # %for.end5707
                                        #   in Loop: Header=BB61_1324 Depth=1
	jmp	.LBB61_1330
.LBB61_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB61_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1324
.LBB61_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB61_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB61_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB61_1335:                            # %for.cond5718
                                        #   Parent Loop BB61_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB61_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB61_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1335
.LBB61_1338:                            # %for.end5752
                                        #   in Loop: Header=BB61_1333 Depth=1
	jmp	.LBB61_1339
.LBB61_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB61_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1333
.LBB61_1340:                            # %for.end5755
	jmp	.LBB61_1341
.LBB61_1341:                            # %if.end5756
	jmp	.LBB61_1342
.LBB61_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB61_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB61_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB61_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB61_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB61_1347:                            # %for.cond5772
                                        #   Parent Loop BB61_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB61_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB61_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB61_1347
.LBB61_1350:                            # %for.end5788
                                        #   in Loop: Header=BB61_1345 Depth=1
	jmp	.LBB61_1351
.LBB61_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB61_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1345
.LBB61_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB61_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB61_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB61_1356
# %bb.1355:                             # %if.then5800
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB61_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB61_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB61_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB61_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB61_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB61_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB61_1362:                            # %for.cond5816
                                        #   Parent Loop BB61_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB61_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB61_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB61_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_1362
.LBB61_1365:                            # %for.end5842
                                        #   in Loop: Header=BB61_1360 Depth=1
	jmp	.LBB61_1366
.LBB61_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB61_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_1360
.LBB61_1367:                            # %for.end5845
	jmp	.LBB61_1368
.LBB61_1368:                            # %if.end5846
	jmp	.LBB61_1369
.LBB61_1369:                            # %if.end5847
	jmp	.LBB61_1370
.LBB61_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB61_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB61_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB61_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB61_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB61_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -280(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB61_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB61_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB61_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB61_1382
.LBB61_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB61_1382
# %bb.1381:                             # %if.then5884
	leaq	-280(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB61_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB61_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB61_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB61_1392
.LBB61_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB61_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB61_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB61_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB61_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB61_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB61_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB61_1394:                            # %if.end5973
	jmp	.LBB61_1395
.LBB61_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB61_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB61_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB61_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB61_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB61_1401
.LBB61_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB61_1402
.LBB61_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB61_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB61_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB61_1406
.LBB61_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB61_1406:                            # %if.end6019
	jmp	.LBB61_1407
.LBB61_1407:                            # %if.end6020
	jmp	.LBB61_1408
.LBB61_1408:                            # %if.end6021
	jmp	.LBB61_1409
.LBB61_1409:                            # %if.end6022
	jmp	.LBB61_1410
.LBB61_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB61_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB61_1413
.LBB61_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB61_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB61_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB61_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB61_1420
	jmp	.LBB61_1428
.LBB61_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB61_1428
	jmp	.LBB61_1420
.LBB61_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB61_1420
	jmp	.LBB61_1428
.LBB61_1420:                            # %land.lhs.true6050
	movq	-440(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB61_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB61_1425
	jmp	.LBB61_1428
.LBB61_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_1424
# %bb.1423:                             # %cond.true6058
	movq	-440(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB61_1428
	jmp	.LBB61_1425
.LBB61_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB61_1425
	jmp	.LBB61_1428
.LBB61_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-288(%rbp), %eax
	je	.LBB61_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB61_1427:                            # %if.end6068
	jmp	.LBB61_1428
.LBB61_1428:                            # %if.end6069
	jmp	.LBB61_1429
.LBB61_1429:                            # %if.end6070
	jmp	.LBB61_1430
.LBB61_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB61_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB61_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB61_1452
.LBB61_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB61_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -260(%rbp)
	jne	.LBB61_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB61_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB61_1437:                            # %lor.end6142
.LBB61_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB61_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB61_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB61_1441:                            # %lor.end6166
.LBB61_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB61_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB61_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB61_1445:                            # %lor.end6191
.LBB61_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB61_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB61_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB61_1449:                            # %lor.end6216
.LBB61_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB61_1451:                            # %if.end6232
	jmp	.LBB61_1452
.LBB61_1452:                            # %if.end6233
	jmp	.LBB61_1464
.LBB61_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB61_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB61_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB61_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB61_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB61_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB61_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB61_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB61_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB61_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB61_1463:                            # %if.end6319
	jmp	.LBB61_1464
.LBB61_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB61_1466:                            # %if.end6327
	cmpl	$598980083, -412(%rbp)  # imm = 0x23B3B5F3
	jne	.LBB61_1468
.LBB61_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_1467
.Lfunc_end61:
	.size	encode_one_macroblock.32, .Lfunc_end61-encode_one_macroblock.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.33
.LCPI62_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.33
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.33,@function
RDCost_for_macroblocks.33:              # @RDCost_for_macroblocks.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$96055161, -100(%rbp)   # imm = 0x5B9AF79
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB62_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB62_3
.LBB62_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB62_3
.LBB62_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB62_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB62_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB62_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB62_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -12(%rbp)
.LBB62_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB62_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$0, -16(%rbp)
.LBB62_10:                              # %for.cond17
                                        #   Parent Loop BB62_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB62_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB62_10 Depth=2
	movq	direct_pdir, %rax
	movl	-104(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-96(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB62_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB62_177
.LBB62_13:                              # %if.end
                                        #   in Loop: Header=BB62_10 Depth=2
	jmp	.LBB62_14
.LBB62_14:                              # %for.inc
                                        #   in Loop: Header=BB62_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_10
.LBB62_15:                              # %for.end
                                        #   in Loop: Header=BB62_8 Depth=1
	jmp	.LBB62_16
.LBB62_16:                              # %for.inc30
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_8
.LBB62_17:                              # %for.end32
	jmp	.LBB62_18
.LBB62_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB62_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB62_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB62_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB62_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB62_177
.LBB62_23:                              # %if.end46
	jmp	.LBB62_76
.LBB62_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB62_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB62_75
.LBB62_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB62_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB62_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB62_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_31 Depth 2
                                        #       Child Loop BB62_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB62_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB62_29 Depth=1
	movl	$0, -16(%rbp)
.LBB62_31:                              # %for.cond61
                                        #   Parent Loop BB62_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB62_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB62_31 Depth=2
	movl	$0, -20(%rbp)
.LBB62_33:                              # %for.cond65
                                        #   Parent Loop BB62_29 Depth=1
                                        #     Parent Loop BB62_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB62_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB62_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB62_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	$2, -40(%rbp)
.LBB62_36:                              # %if.end77
                                        #   in Loop: Header=BB62_33 Depth=3
	jmp	.LBB62_37
.LBB62_37:                              # %for.inc78
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_33
.LBB62_38:                              # %for.end80
                                        #   in Loop: Header=BB62_31 Depth=2
	jmp	.LBB62_39
.LBB62_39:                              # %for.inc81
                                        #   in Loop: Header=BB62_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_31
.LBB62_40:                              # %for.end83
                                        #   in Loop: Header=BB62_29 Depth=1
	jmp	.LBB62_41
.LBB62_41:                              # %for.inc84
                                        #   in Loop: Header=BB62_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_29
.LBB62_42:                              # %for.end86
	movl	$0, -32(%rbp)
.LBB62_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB62_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB62_43 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB62_43 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB62_43
.LBB62_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB62_47:                              # %if.end97
	jmp	.LBB62_74
.LBB62_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB62_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB62_73
.LBB62_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB62_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB62_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB62_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_55 Depth 2
                                        #       Child Loop BB62_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB62_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB62_53 Depth=1
	movl	$0, -16(%rbp)
.LBB62_55:                              # %for.cond115
                                        #   Parent Loop BB62_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB62_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB62_55 Depth=2
	movl	$0, -20(%rbp)
.LBB62_57:                              # %for.cond119
                                        #   Parent Loop BB62_53 Depth=1
                                        #     Parent Loop BB62_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB62_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB62_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB62_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB62_57 Depth=3
	movl	$2, -40(%rbp)
.LBB62_60:                              # %if.end131
                                        #   in Loop: Header=BB62_57 Depth=3
	jmp	.LBB62_61
.LBB62_61:                              # %for.inc132
                                        #   in Loop: Header=BB62_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_57
.LBB62_62:                              # %for.end134
                                        #   in Loop: Header=BB62_55 Depth=2
	jmp	.LBB62_63
.LBB62_63:                              # %for.inc135
                                        #   in Loop: Header=BB62_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_55
.LBB62_64:                              # %for.end137
                                        #   in Loop: Header=BB62_53 Depth=1
	jmp	.LBB62_65
.LBB62_65:                              # %for.inc138
                                        #   in Loop: Header=BB62_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_53
.LBB62_66:                              # %for.end140
	movl	$0, -32(%rbp)
.LBB62_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB62_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB62_67 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB62_67 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB62_67
.LBB62_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB62_71:                              # %if.end152
	jmp	.LBB62_72
.LBB62_72:                              # %if.end153
	jmp	.LBB62_73
.LBB62_73:                              # %if.end154
	jmp	.LBB62_74
.LBB62_74:                              # %if.end155
	jmp	.LBB62_75
.LBB62_75:                              # %if.end156
	jmp	.LBB62_76
.LBB62_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB62_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB62_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB62_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB62_81
.LBB62_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB62_81
.LBB62_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB62_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB62_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB62_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB62_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB62_84 Depth=1
	movl	$0, -16(%rbp)
.LBB62_86:                              # %for.cond179
                                        #   Parent Loop BB62_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB62_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB62_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB62_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_86
.LBB62_89:                              # %for.end196
                                        #   in Loop: Header=BB62_84 Depth=1
	jmp	.LBB62_90
.LBB62_90:                              # %for.inc197
                                        #   in Loop: Header=BB62_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_84
.LBB62_91:                              # %for.end199
	jmp	.LBB62_101
.LBB62_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB62_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB62_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB62_93 Depth=1
	movl	$0, -16(%rbp)
.LBB62_95:                              # %for.cond205
                                        #   Parent Loop BB62_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB62_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB62_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB62_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_95
.LBB62_98:                              # %for.end220
                                        #   in Loop: Header=BB62_93 Depth=1
	jmp	.LBB62_99
.LBB62_99:                              # %for.inc221
                                        #   in Loop: Header=BB62_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_93
.LBB62_100:                             # %for.end223
	jmp	.LBB62_101
.LBB62_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB62_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB62_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB62_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB62_107
.LBB62_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB62_107
# %bb.106:                              # %if.then238
	leaq	-36(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB62_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB62_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB62_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB62_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB62_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB62_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_114 Depth 2
                                        #       Child Loop BB62_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB62_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB62_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB62_114:                             # %for.cond259
                                        #   Parent Loop BB62_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB62_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB62_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB62_116:                             # %for.cond263
                                        #   Parent Loop BB62_112 Depth=1
                                        #     Parent Loop BB62_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB62_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB62_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_116
.LBB62_119:                             # %for.end291
                                        #   in Loop: Header=BB62_114 Depth=2
	jmp	.LBB62_120
.LBB62_120:                             # %for.inc292
                                        #   in Loop: Header=BB62_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_114
.LBB62_121:                             # %for.end294
                                        #   in Loop: Header=BB62_112 Depth=1
	jmp	.LBB62_122
.LBB62_122:                             # %for.inc295
                                        #   in Loop: Header=BB62_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_112
.LBB62_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB62_133
.LBB62_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB62_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB62_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB62_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB62_127:                             # %for.cond306
                                        #   Parent Loop BB62_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB62_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB62_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_127
.LBB62_130:                             # %for.end334
                                        #   in Loop: Header=BB62_125 Depth=1
	jmp	.LBB62_131
.LBB62_131:                             # %for.inc335
                                        #   in Loop: Header=BB62_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_125
.LBB62_132:                             # %for.end337
	jmp	.LBB62_133
.LBB62_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB62_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB62_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB62_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB62_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB62_137:                             # %for.cond347
                                        #   Parent Loop BB62_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB62_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB62_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_137
.LBB62_140:                             # %for.end398
                                        #   in Loop: Header=BB62_135 Depth=1
	jmp	.LBB62_141
.LBB62_141:                             # %for.inc399
                                        #   in Loop: Header=BB62_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_135
.LBB62_142:                             # %for.end401
	jmp	.LBB62_143
.LBB62_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB62_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB62_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB62_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB62_148
.LBB62_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
	movl	-72(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB62_149
.LBB62_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-36(%rbp), %esi
	leaq	-28(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
.LBB62_149:                             # %if.end422
	jmp	.LBB62_151
.LBB62_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
.LBB62_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI62_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB62_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI62_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB62_154
.LBB62_153:                             # %cond.false431
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm2
.LBB62_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB62_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB62_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB62_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB62_159
.LBB62_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB62_177
.LBB62_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB62_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB62_165
	jmp	.LBB62_176
.LBB62_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB62_176
	jmp	.LBB62_165
.LBB62_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB62_165
	jmp	.LBB62_176
.LBB62_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB62_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB62_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB62_171
	jmp	.LBB62_174
.LBB62_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB62_174
	jmp	.LBB62_171
.LBB62_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB62_171
	jmp	.LBB62_174
.LBB62_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB62_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB62_177
.LBB62_173:                             # %if.end482
	jmp	.LBB62_174
.LBB62_174:                             # %if.end483
	jmp	.LBB62_175
.LBB62_175:                             # %if.end484
	jmp	.LBB62_176
.LBB62_176:                             # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB62_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$96055161, -100(%rbp)   # imm = 0x5B9AF79
	jne	.LBB62_179
.LBB62_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_178
.Lfunc_end62:
	.size	RDCost_for_macroblocks.33, .Lfunc_end62-RDCost_for_macroblocks.33
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.34 # -- Begin function RDCost_for_4x4IntraBlocks.34
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.34,@function
RDCost_for_4x4IntraBlocks.34:           # @RDCost_for_4x4IntraBlocks.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1123341531, -68(%rbp)  # imm = 0x42F4D4DB
	movq	%rdi, -128(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -152(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	$0, -76(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB63_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB63_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_4:                               # %for.cond15
                                        #   Parent Loop BB63_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB63_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-72(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-144(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB63_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_4
.LBB63_7:                               # %for.end
                                        #   in Loop: Header=BB63_2 Depth=1
	jmp	.LBB63_8
.LBB63_8:                               # %for.inc33
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_2
.LBB63_9:                               # %for.end35
	jmp	.LBB63_10
.LBB63_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-48(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB63_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_16
.LBB63_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB63_15
.LBB63_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB63_15:                              # %cond.end
.LBB63_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB63_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB63_18:                              # %if.end50
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB63_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB63_21
.LBB63_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB63_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB63_23
# %bb.22:                               # %if.then66
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_24
.LBB63_23:                              # %if.else69
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-152(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB63_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB63_27
.LBB63_26:                              # %if.else81
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB63_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1123341531, -68(%rbp)  # imm = 0x42F4D4DB
	jne	.LBB63_29
.LBB63_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB63_28
.Lfunc_end63:
	.size	RDCost_for_4x4IntraBlocks.34, .Lfunc_end63-RDCost_for_4x4IntraBlocks.34
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.35 # -- Begin function set_mbaff_parameters.35
	.p2align	4, 0x90
	.type	set_mbaff_parameters.35,@function
set_mbaff_parameters.35:                # @set_mbaff_parameters.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1292927884, -32(%rbp)  # imm = 0x4D10838C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB64_2
# %bb.1:                                # %if.then
	jmp	.LBB64_82
.LBB64_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB64_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB64_3 Depth=1
	movl	$0, -4(%rbp)
.LBB64_5:                               # %for.cond3
                                        #   Parent Loop BB64_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB64_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB64_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_5
.LBB64_8:                               # %for.end
                                        #   in Loop: Header=BB64_3 Depth=1
	jmp	.LBB64_9
.LBB64_9:                               # %for.inc17
                                        #   in Loop: Header=BB64_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_3
.LBB64_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB64_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB64_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB64_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB64_12 Depth=1
	movl	$0, -4(%rbp)
.LBB64_14:                              # %for.cond27
                                        #   Parent Loop BB64_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB64_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB64_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB64_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_14
.LBB64_17:                              # %for.end60
                                        #   in Loop: Header=BB64_12 Depth=1
	jmp	.LBB64_18
.LBB64_18:                              # %for.inc61
                                        #   in Loop: Header=BB64_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_12
.LBB64_19:                              # %for.end63
	jmp	.LBB64_20
.LBB64_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB64_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB64_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB64_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB64_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_26 Depth 2
                                        #       Child Loop BB64_28 Depth 3
                                        #         Child Loop BB64_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB64_24 Depth=1
	movl	$0, -8(%rbp)
.LBB64_26:                              # %for.cond84
                                        #   Parent Loop BB64_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_28 Depth 3
                                        #         Child Loop BB64_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB64_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB64_26 Depth=2
	movl	$0, -12(%rbp)
.LBB64_28:                              # %for.cond88
                                        #   Parent Loop BB64_24 Depth=1
                                        #     Parent Loop BB64_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB64_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB64_28 Depth=3
	movl	$0, -16(%rbp)
.LBB64_30:                              # %for.cond92
                                        #   Parent Loop BB64_24 Depth=1
                                        #     Parent Loop BB64_26 Depth=2
                                        #       Parent Loop BB64_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB64_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB64_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB64_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_30
.LBB64_33:                              # %for.end115
                                        #   in Loop: Header=BB64_28 Depth=3
	jmp	.LBB64_34
.LBB64_34:                              # %for.inc116
                                        #   in Loop: Header=BB64_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_28
.LBB64_35:                              # %for.end118
                                        #   in Loop: Header=BB64_26 Depth=2
	jmp	.LBB64_36
.LBB64_36:                              # %for.inc119
                                        #   in Loop: Header=BB64_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_26
.LBB64_37:                              # %for.end121
                                        #   in Loop: Header=BB64_24 Depth=1
	jmp	.LBB64_38
.LBB64_38:                              # %for.inc122
                                        #   in Loop: Header=BB64_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_24
.LBB64_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB64_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_42 Depth 2
                                        #       Child Loop BB64_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB64_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB64_40 Depth=1
	movl	$0, -12(%rbp)
.LBB64_42:                              # %for.cond129
                                        #   Parent Loop BB64_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB64_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB64_42 Depth=2
	movl	$0, -16(%rbp)
.LBB64_44:                              # %for.cond133
                                        #   Parent Loop BB64_40 Depth=1
                                        #     Parent Loop BB64_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB64_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB64_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB64_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_44
.LBB64_47:                              # %for.end152
                                        #   in Loop: Header=BB64_42 Depth=2
	jmp	.LBB64_48
.LBB64_48:                              # %for.inc153
                                        #   in Loop: Header=BB64_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_42
.LBB64_49:                              # %for.end155
                                        #   in Loop: Header=BB64_40 Depth=1
	jmp	.LBB64_50
.LBB64_50:                              # %for.inc156
                                        #   in Loop: Header=BB64_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_40
.LBB64_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB64_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB64_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB64_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_52
.LBB64_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB64_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB64_56 Depth=1
	movl	$0, -4(%rbp)
.LBB64_58:                              # %for.cond180
                                        #   Parent Loop BB64_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB64_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB64_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_58
.LBB64_61:                              # %for.end198
                                        #   in Loop: Header=BB64_56 Depth=1
	jmp	.LBB64_62
.LBB64_62:                              # %for.inc199
                                        #   in Loop: Header=BB64_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_56
.LBB64_63:                              # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB64_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB64_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB64_65 Depth=1
	movl	$0, -4(%rbp)
.LBB64_67:                              # %for.cond208
                                        #   Parent Loop BB64_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB64_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB64_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_67
.LBB64_70:                              # %for.end230
                                        #   in Loop: Header=BB64_65 Depth=1
	jmp	.LBB64_71
.LBB64_71:                              # %for.inc231
                                        #   in Loop: Header=BB64_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_65
.LBB64_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB64_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB64_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB64_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB64_76:                              # %for.cond244
                                        #   Parent Loop BB64_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB64_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB64_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_76
.LBB64_79:                              # %for.end267
                                        #   in Loop: Header=BB64_74 Depth=1
	jmp	.LBB64_80
.LBB64_80:                              # %for.inc268
                                        #   in Loop: Header=BB64_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_74
.LBB64_81:                              # %for.end270.loopexit
	jmp	.LBB64_82
.LBB64_82:                              # %for.end270
	cmpl	$1292927884, -32(%rbp)  # imm = 0x4D10838C
	jne	.LBB64_84
.LBB64_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_83
.Lfunc_end64:
	.size	set_mbaff_parameters.35, .Lfunc_end64-set_mbaff_parameters.35
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.36 # -- Begin function GetBestTransformP8x8.36
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.36,@function
GetBestTransformP8x8.36:                # @GetBestTransformP8x8.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$62544614, -64(%rbp)    # imm = 0x3BA5AE6
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB65_2
# %bb.1:                                # %if.then
	movl	$1, -36(%rbp)
	jmp	.LBB65_25
.LBB65_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB65_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_5 Depth 2
                                        #       Child Loop BB65_7 Depth 3
                                        #         Child Loop BB65_9 Depth 4
                                        #           Child Loop BB65_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB65_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB65_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	$0, -32(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_5:                               # %for.cond3
                                        #   Parent Loop BB65_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_7 Depth 3
                                        #         Child Loop BB65_9 Depth 4
                                        #           Child Loop BB65_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB65_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB65_7:                               # %for.cond7
                                        #   Parent Loop BB65_3 Depth=1
                                        #     Parent Loop BB65_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_9 Depth 4
                                        #           Child Loop BB65_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB65_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB65_9:                               # %for.cond12
                                        #   Parent Loop BB65_3 Depth=1
                                        #     Parent Loop BB65_5 Depth=2
                                        #       Parent Loop BB65_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB65_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB65_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB65_9 Depth=4
	movl	$0, -16(%rbp)
.LBB65_11:                              # %for.cond15
                                        #   Parent Loop BB65_3 Depth=1
                                        #     Parent Loop BB65_5 Depth=2
                                        #       Parent Loop BB65_7 Depth=3
                                        #         Parent Loop BB65_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB65_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB65_11 Depth=5
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB65_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_11
.LBB65_14:                              # %for.end
                                        #   in Loop: Header=BB65_9 Depth=4
	jmp	.LBB65_15
.LBB65_15:                              # %for.inc51
                                        #   in Loop: Header=BB65_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_9
.LBB65_16:                              # %for.end53
                                        #   in Loop: Header=BB65_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB65_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_7
.LBB65_18:                              # %for.end57
                                        #   in Loop: Header=BB65_5 Depth=2
	jmp	.LBB65_19
.LBB65_19:                              # %for.inc58
                                        #   in Loop: Header=BB65_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_5
.LBB65_20:                              # %for.end60
                                        #   in Loop: Header=BB65_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB65_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_3
.LBB65_22:                              # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_24
# %bb.23:                               # %if.then69
	movl	$1, -36(%rbp)
	jmp	.LBB65_25
.LBB65_24:                              # %if.else
	movl	$0, -36(%rbp)
.LBB65_25:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$62544614, -64(%rbp)    # imm = 0x3BA5AE6
	jne	.LBB65_27
.LBB65_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_26
.Lfunc_end65:
	.size	GetBestTransformP8x8.36, .Lfunc_end65-GetBestTransformP8x8.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.37
.LCPI66_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.37
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.37,@function
RDCost_for_macroblocks.37:              # @RDCost_for_macroblocks.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$207593582, -104(%rbp)  # imm = 0xC5FA06E
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB66_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB66_3
.LBB66_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB66_3
.LBB66_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -120(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB66_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB66_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB66_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB66_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -12(%rbp)
.LBB66_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB66_8 Depth=1
	movl	$0, -16(%rbp)
.LBB66_10:                              # %for.cond17
                                        #   Parent Loop BB66_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB66_10 Depth=2
	movq	direct_pdir, %rax
	movl	-100(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-96(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB66_177
.LBB66_13:                              # %if.end
                                        #   in Loop: Header=BB66_10 Depth=2
	jmp	.LBB66_14
.LBB66_14:                              # %for.inc
                                        #   in Loop: Header=BB66_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_10
.LBB66_15:                              # %for.end
                                        #   in Loop: Header=BB66_8 Depth=1
	jmp	.LBB66_16
.LBB66_16:                              # %for.inc30
                                        #   in Loop: Header=BB66_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_8
.LBB66_17:                              # %for.end32
	jmp	.LBB66_18
.LBB66_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB66_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB66_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB66_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB66_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB66_177
.LBB66_23:                              # %if.end46
	jmp	.LBB66_76
.LBB66_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB66_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB66_75
.LBB66_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB66_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB66_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_31 Depth 2
                                        #       Child Loop BB66_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB66_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB66_29 Depth=1
	movl	$0, -16(%rbp)
.LBB66_31:                              # %for.cond61
                                        #   Parent Loop BB66_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB66_31 Depth=2
	movl	$0, -20(%rbp)
.LBB66_33:                              # %for.cond65
                                        #   Parent Loop BB66_29 Depth=1
                                        #     Parent Loop BB66_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB66_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB66_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB66_33 Depth=3
	movl	$2, -40(%rbp)
.LBB66_36:                              # %if.end77
                                        #   in Loop: Header=BB66_33 Depth=3
	jmp	.LBB66_37
.LBB66_37:                              # %for.inc78
                                        #   in Loop: Header=BB66_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_33
.LBB66_38:                              # %for.end80
                                        #   in Loop: Header=BB66_31 Depth=2
	jmp	.LBB66_39
.LBB66_39:                              # %for.inc81
                                        #   in Loop: Header=BB66_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_31
.LBB66_40:                              # %for.end83
                                        #   in Loop: Header=BB66_29 Depth=1
	jmp	.LBB66_41
.LBB66_41:                              # %for.inc84
                                        #   in Loop: Header=BB66_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_29
.LBB66_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB66_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB66_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB66_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB66_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_43
.LBB66_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB66_47:                              # %if.end97
	jmp	.LBB66_74
.LBB66_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB66_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB66_73
.LBB66_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB66_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB66_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_55 Depth 2
                                        #       Child Loop BB66_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB66_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB66_53 Depth=1
	movl	$0, -16(%rbp)
.LBB66_55:                              # %for.cond115
                                        #   Parent Loop BB66_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB66_55 Depth=2
	movl	$0, -20(%rbp)
.LBB66_57:                              # %for.cond119
                                        #   Parent Loop BB66_53 Depth=1
                                        #     Parent Loop BB66_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB66_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB66_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB66_57 Depth=3
	movl	$2, -40(%rbp)
.LBB66_60:                              # %if.end131
                                        #   in Loop: Header=BB66_57 Depth=3
	jmp	.LBB66_61
.LBB66_61:                              # %for.inc132
                                        #   in Loop: Header=BB66_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_57
.LBB66_62:                              # %for.end134
                                        #   in Loop: Header=BB66_55 Depth=2
	jmp	.LBB66_63
.LBB66_63:                              # %for.inc135
                                        #   in Loop: Header=BB66_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_55
.LBB66_64:                              # %for.end137
                                        #   in Loop: Header=BB66_53 Depth=1
	jmp	.LBB66_65
.LBB66_65:                              # %for.inc138
                                        #   in Loop: Header=BB66_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_53
.LBB66_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB66_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB66_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB66_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB66_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_67
.LBB66_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB66_71:                              # %if.end152
	jmp	.LBB66_72
.LBB66_72:                              # %if.end153
	jmp	.LBB66_73
.LBB66_73:                              # %if.end154
	jmp	.LBB66_74
.LBB66_74:                              # %if.end155
	jmp	.LBB66_75
.LBB66_75:                              # %if.end156
	jmp	.LBB66_76
.LBB66_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB66_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB66_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB66_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB66_81
.LBB66_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB66_81
.LBB66_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB66_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB66_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB66_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB66_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB66_84 Depth=1
	movl	$0, -16(%rbp)
.LBB66_86:                              # %for.cond179
                                        #   Parent Loop BB66_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB66_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB66_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB66_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_86
.LBB66_89:                              # %for.end196
                                        #   in Loop: Header=BB66_84 Depth=1
	jmp	.LBB66_90
.LBB66_90:                              # %for.inc197
                                        #   in Loop: Header=BB66_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_84
.LBB66_91:                              # %for.end199
	jmp	.LBB66_101
.LBB66_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB66_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB66_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB66_93 Depth=1
	movl	$0, -16(%rbp)
.LBB66_95:                              # %for.cond205
                                        #   Parent Loop BB66_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB66_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB66_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB66_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_95
.LBB66_98:                              # %for.end220
                                        #   in Loop: Header=BB66_93 Depth=1
	jmp	.LBB66_99
.LBB66_99:                              # %for.inc221
                                        #   in Loop: Header=BB66_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_93
.LBB66_100:                             # %for.end223
	jmp	.LBB66_101
.LBB66_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB66_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB66_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB66_107
.LBB66_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB66_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB66_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB66_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB66_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB66_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB66_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB66_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_114 Depth 2
                                        #       Child Loop BB66_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB66_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB66_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB66_114:                             # %for.cond259
                                        #   Parent Loop BB66_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB66_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB66_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB66_116:                             # %for.cond263
                                        #   Parent Loop BB66_112 Depth=1
                                        #     Parent Loop BB66_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB66_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB66_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_116
.LBB66_119:                             # %for.end291
                                        #   in Loop: Header=BB66_114 Depth=2
	jmp	.LBB66_120
.LBB66_120:                             # %for.inc292
                                        #   in Loop: Header=BB66_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_114
.LBB66_121:                             # %for.end294
                                        #   in Loop: Header=BB66_112 Depth=1
	jmp	.LBB66_122
.LBB66_122:                             # %for.inc295
                                        #   in Loop: Header=BB66_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_112
.LBB66_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB66_133
.LBB66_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB66_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB66_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB66_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB66_127:                             # %for.cond306
                                        #   Parent Loop BB66_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB66_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB66_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_127
.LBB66_130:                             # %for.end334
                                        #   in Loop: Header=BB66_125 Depth=1
	jmp	.LBB66_131
.LBB66_131:                             # %for.inc335
                                        #   in Loop: Header=BB66_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_125
.LBB66_132:                             # %for.end337
	jmp	.LBB66_133
.LBB66_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB66_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB66_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB66_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB66_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB66_137:                             # %for.cond347
                                        #   Parent Loop BB66_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB66_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB66_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_137
.LBB66_140:                             # %for.end398
                                        #   in Loop: Header=BB66_135 Depth=1
	jmp	.LBB66_141
.LBB66_141:                             # %for.inc399
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_135
.LBB66_142:                             # %for.end401
	jmp	.LBB66_143
.LBB66_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB66_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB66_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB66_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB66_148
.LBB66_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-76(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB66_149
.LBB66_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB66_149:                             # %if.end422
	jmp	.LBB66_151
.LBB66_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB66_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI66_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB66_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI66_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB66_154
.LBB66_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB66_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB66_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB66_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB66_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB66_159
.LBB66_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB66_177
.LBB66_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB66_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB66_165
	jmp	.LBB66_176
.LBB66_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB66_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB66_176
	jmp	.LBB66_165
.LBB66_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB66_165
	jmp	.LBB66_176
.LBB66_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB66_175
# %bb.166:                              # %if.then465
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB66_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB66_171
	jmp	.LBB66_174
.LBB66_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB66_170
# %bb.169:                              # %cond.true473
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB66_174
	jmp	.LBB66_171
.LBB66_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB66_171
	jmp	.LBB66_174
.LBB66_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB66_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB66_177
.LBB66_173:                             # %if.end482
	jmp	.LBB66_174
.LBB66_174:                             # %if.end483
	jmp	.LBB66_175
.LBB66_175:                             # %if.end484
	jmp	.LBB66_176
.LBB66_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB66_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$207593582, -104(%rbp)  # imm = 0xC5FA06E
	jne	.LBB66_179
.LBB66_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_178
.Lfunc_end66:
	.size	RDCost_for_macroblocks.37, .Lfunc_end66-RDCost_for_macroblocks.37
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.38 # -- Begin function RDCost_for_4x4IntraBlocks.38
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.38,@function
RDCost_for_4x4IntraBlocks.38:           # @RDCost_for_4x4IntraBlocks.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$680662677, -76(%rbp)   # imm = 0x28921695
	movq	%rdi, -144(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -80(%rbp)
	movl	-48(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-80(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_10
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB67_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_4 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB67_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB67_2 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_4:                               # %for.cond15
                                        #   Parent Loop BB67_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB67_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-72(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-128(%rbp), %rdx
	movl	-68(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB67_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_4
.LBB67_7:                               # %for.end
                                        #   in Loop: Header=BB67_2 Depth=1
	jmp	.LBB67_8
.LBB67_8:                               # %for.inc33
                                        #   in Loop: Header=BB67_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_2
.LBB67_9:                               # %for.end35
	jmp	.LBB67_10
.LBB67_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-56(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB67_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB67_16
.LBB67_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB67_15
.LBB67_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB67_15:                              # %cond.end
.LBB67_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB67_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_18:                              # %if.end50
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB67_21
.LBB67_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB67_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_23
# %bb.22:                               # %if.then66
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_24
.LBB67_23:                              # %if.else69
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-112(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB67_27
.LBB67_26:                              # %if.else81
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB67_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$680662677, -76(%rbp)   # imm = 0x28921695
	jne	.LBB67_29
.LBB67_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB67_28
.Lfunc_end67:
	.size	RDCost_for_4x4IntraBlocks.38, .Lfunc_end67-RDCost_for_4x4IntraBlocks.38
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.39 # -- Begin function Intra16x16_Mode_Decision.39
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.39,@function
Intra16x16_Mode_Decision.39:            # @Intra16x16_Mode_Decision.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$616588128, -56(%rbp)   # imm = 0x24C06360
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB68_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB68_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB68_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	$0, -8(%rbp)
.LBB68_6:                               # %for.cond4
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB68_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB68_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_6
.LBB68_9:                               # %for.end
                                        #   in Loop: Header=BB68_4 Depth=1
	jmp	.LBB68_10
.LBB68_10:                              # %for.inc87
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_4
.LBB68_11:                              # %for.end89
	jmp	.LBB68_12
.LBB68_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB68_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB68_14 Depth=1
	movl	$0, -8(%rbp)
.LBB68_16:                              # %for.cond99
                                        #   Parent Loop BB68_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB68_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB68_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_16
.LBB68_19:                              # %for.end123
                                        #   in Loop: Header=BB68_14 Depth=1
	jmp	.LBB68_20
.LBB68_20:                              # %for.inc124
                                        #   in Loop: Header=BB68_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_14
.LBB68_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB68_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -8(%rbp)
.LBB68_24:                              # %for.cond132
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB68_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB68_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_24
.LBB68_27:                              # %for.end156
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_28
.LBB68_28:                              # %for.inc157
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_22
.LBB68_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB68_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB68_30 Depth=1
	movl	$0, -8(%rbp)
.LBB68_32:                              # %for.cond165
                                        #   Parent Loop BB68_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB68_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB68_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_32
.LBB68_35:                              # %for.end180
                                        #   in Loop: Header=BB68_30 Depth=1
	jmp	.LBB68_36
.LBB68_36:                              # %for.inc181
                                        #   in Loop: Header=BB68_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_30
.LBB68_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB68_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB68_38 Depth=1
	movl	$0, -8(%rbp)
.LBB68_40:                              # %for.cond190
                                        #   Parent Loop BB68_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -28(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB68_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_44
.LBB68_43:                              # %cond.false
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB68_44:                              # %cond.end
                                        #   in Loop: Header=BB68_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB68_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB68_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_50
.LBB68_46:                              # %cond.false246
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_49
.LBB68_48:                              # %cond.false260
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_49:                              # %cond.end271
                                        #   in Loop: Header=BB68_40 Depth=2
.LBB68_50:                              # %cond.end273
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_53
.LBB68_52:                              # %cond.false295
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB68_53:                              # %cond.end305
                                        #   in Loop: Header=BB68_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB68_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_59
.LBB68_55:                              # %cond.false311
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_58
.LBB68_57:                              # %cond.false324
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_58:                              # %cond.end334
                                        #   in Loop: Header=BB68_40 Depth=2
.LBB68_59:                              # %cond.end336
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_62
.LBB68_61:                              # %cond.false359
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB68_62:                              # %cond.end370
                                        #   in Loop: Header=BB68_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB68_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_68
.LBB68_64:                              # %cond.false376
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_67
.LBB68_66:                              # %cond.false390
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_67:                              # %cond.end401
                                        #   in Loop: Header=BB68_40 Depth=2
.LBB68_68:                              # %cond.end403
                                        #   in Loop: Header=BB68_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_40
.LBB68_70:                              # %for.end416
                                        #   in Loop: Header=BB68_38 Depth=1
	jmp	.LBB68_71
.LBB68_71:                              # %for.inc417
                                        #   in Loop: Header=BB68_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_38
.LBB68_72:                              # %for.end419
	jmp	.LBB68_73
.LBB68_73:                              # %if.end420
	cmpl	$616588128, -56(%rbp)   # imm = 0x24C06360
	jne	.LBB68_75
.LBB68_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_74
.Lfunc_end68:
	.size	Intra16x16_Mode_Decision.39, .Lfunc_end68-Intra16x16_Mode_Decision.39
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.40            # -- Begin function I16Offset.40
	.p2align	4, 0x90
	.type	I16Offset.40,@function
I16Offset.40:                           # @I16Offset.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$539097546, -20(%rbp)   # imm = 0x2021F9CA
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$539097546, -20(%rbp)   # imm = 0x2021F9CA
	jne	.LBB69_2
.LBB69_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_1
.Lfunc_end69:
	.size	I16Offset.40, .Lfunc_end69-I16Offset.40
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.41           # -- Begin function StoreMV8x8.41
	.p2align	4, 0x90
	.type	StoreMV8x8.41,@function
StoreMV8x8.41:                          # @StoreMV8x8.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1651394965, -16(%rbp)  # imm = 0x626E4995
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_1
.LBB70_4:                               # %for.end
	cmpl	$1651394965, -16(%rbp)  # imm = 0x626E4995
	jne	.LBB70_6
.LBB70_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_5
.Lfunc_end70:
	.size	StoreMV8x8.41, .Lfunc_end70-StoreMV8x8.41
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.42           # -- Begin function StoreMV8x8.42
	.p2align	4, 0x90
	.type	StoreMV8x8.42,@function
StoreMV8x8.42:                          # @StoreMV8x8.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$551326041, -12(%rbp)   # imm = 0x20DC9159
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB71_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_1
.LBB71_4:                               # %for.end
	cmpl	$551326041, -12(%rbp)   # imm = 0x20DC9159
	jne	.LBB71_6
.LBB71_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_5
.Lfunc_end71:
	.size	StoreMV8x8.42, .Lfunc_end71-StoreMV8x8.42
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.43
.LCPI72_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI72_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.43
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.43,@function
Mode_Decision_for_8x8IntraBlocks.43:    # @Mode_Decision_for_8x8IntraBlocks.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI72_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1479962267, -20(%rbp)  # imm = 0x58366E9B
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB72_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB72_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$1, -16(%rbp)
.LBB72_4:                               # %if.end
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_1
.LBB72_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1479962267, -20(%rbp)  # imm = 0x58366E9B
	jne	.LBB72_8
.LBB72_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_7
.Lfunc_end72:
	.size	Mode_Decision_for_8x8IntraBlocks.43, .Lfunc_end72-Mode_Decision_for_8x8IntraBlocks.43
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.44      # -- Begin function StoreMVBlock8x8.44
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.44,@function
StoreMVBlock8x8.44:                     # @StoreMVBlock8x8.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$128979132, -68(%rbp)   # imm = 0x7B010BC
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB73_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB73_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB73_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB73_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_5:                               # %for.cond7
                                        #   Parent Loop BB73_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB73_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB73_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB73_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_5
.LBB73_8:                               # %for.end
                                        #   in Loop: Header=BB73_3 Depth=1
	jmp	.LBB73_9
.LBB73_9:                               # %for.inc76
                                        #   in Loop: Header=BB73_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_3
.LBB73_10:                              # %for.end78
	jmp	.LBB73_11
.LBB73_11:                              # %if.end
	jmp	.LBB73_46
.LBB73_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB73_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB73_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB73_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_16:                              # %for.cond84
                                        #   Parent Loop BB73_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB73_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB73_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB73_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_16
.LBB73_19:                              # %for.end161
                                        #   in Loop: Header=BB73_14 Depth=1
	jmp	.LBB73_20
.LBB73_20:                              # %for.inc162
                                        #   in Loop: Header=BB73_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_14
.LBB73_21:                              # %for.end164
	jmp	.LBB73_45
.LBB73_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB73_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB73_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB73_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_26:                              # %for.cond171
                                        #   Parent Loop BB73_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB73_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB73_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB73_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_26
.LBB73_29:                              # %for.end248
                                        #   in Loop: Header=BB73_24 Depth=1
	jmp	.LBB73_30
.LBB73_30:                              # %for.inc249
                                        #   in Loop: Header=BB73_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_24
.LBB73_31:                              # %for.end251
	jmp	.LBB73_44
.LBB73_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB73_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB73_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB73_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_36:                              # %for.cond258
                                        #   Parent Loop BB73_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB73_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB73_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_36
.LBB73_39:                              # %for.end407
                                        #   in Loop: Header=BB73_34 Depth=1
	jmp	.LBB73_40
.LBB73_40:                              # %for.inc408
                                        #   in Loop: Header=BB73_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_34
.LBB73_41:                              # %for.end410
	jmp	.LBB73_43
.LBB73_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB73_43:                              # %if.end412
	jmp	.LBB73_44
.LBB73_44:                              # %if.end413
	jmp	.LBB73_45
.LBB73_45:                              # %if.end414
	jmp	.LBB73_46
.LBB73_46:                              # %if.end415
	cmpl	$128979132, -68(%rbp)   # imm = 0x7B010BC
	jne	.LBB73_48
.LBB73_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_47
.Lfunc_end73:
	.size	StoreMVBlock8x8.44, .Lfunc_end73-StoreMVBlock8x8.44
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.45 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.45
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.45,@function
Mode_Decision_for_Intra4x4Macroblock.45: # @Mode_Decision_for_Intra4x4Macroblock.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$978143554, -24(%rbp)   # imm = 0x3A4D4942
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB74_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB74_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB74_4:                               # %if.end
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_1
.LBB74_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$978143554, -24(%rbp)   # imm = 0x3A4D4942
	jne	.LBB74_8
.LBB74_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_7
.Lfunc_end74:
	.size	Mode_Decision_for_Intra4x4Macroblock.45, .Lfunc_end74-Mode_Decision_for_Intra4x4Macroblock.45
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.46 # -- Begin function store_macroblock_parameters.46
	.p2align	4, 0x90
	.type	store_macroblock_parameters.46,@function
store_macroblock_parameters.46:         # @store_macroblock_parameters.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$729118183, -36(%rbp)   # imm = 0x2B7575E7
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB75_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB75_3
.LBB75_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB75_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB75_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB75_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB75_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_4
.LBB75_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB75_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB75_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB75_10:                              # %for.cond20
                                        #   Parent Loop BB75_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB75_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB75_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_10
.LBB75_13:                              # %for.end39
                                        #   in Loop: Header=BB75_8 Depth=1
	jmp	.LBB75_14
.LBB75_14:                              # %for.inc40
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_8
.LBB75_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB75_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB75_16 Depth=1
	movl	$0, -8(%rbp)
.LBB75_18:                              # %for.cond47
                                        #   Parent Loop BB75_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB75_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB75_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_18
.LBB75_21:                              # %for.end70
                                        #   in Loop: Header=BB75_16 Depth=1
	jmp	.LBB75_22
.LBB75_22:                              # %for.inc71
                                        #   in Loop: Header=BB75_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_16
.LBB75_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB75_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	$0, -4(%rbp)
.LBB75_26:                              # %for.cond78
                                        #   Parent Loop BB75_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB75_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_26
.LBB75_29:                              # %for.end94
                                        #   in Loop: Header=BB75_24 Depth=1
	jmp	.LBB75_30
.LBB75_30:                              # %for.inc95
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_24
.LBB75_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB75_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB75_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB75_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB75_33 Depth=1
	movl	$0, -4(%rbp)
.LBB75_35:                              # %for.cond105
                                        #   Parent Loop BB75_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB75_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB75_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB75_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_35
.LBB75_38:                              # %for.end136
                                        #   in Loop: Header=BB75_33 Depth=1
	jmp	.LBB75_39
.LBB75_39:                              # %for.inc137
                                        #   in Loop: Header=BB75_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_33
.LBB75_40:                              # %for.end139
	jmp	.LBB75_41
.LBB75_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB75_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB75_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB75_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_46 Depth 2
                                        #       Child Loop BB75_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB75_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB75_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB75_46:                              # %for.cond152
                                        #   Parent Loop BB75_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB75_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB75_48:                              # %for.cond159
                                        #   Parent Loop BB75_44 Depth=1
                                        #     Parent Loop BB75_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB75_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB75_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_48
.LBB75_51:                              # %for.end179
                                        #   in Loop: Header=BB75_46 Depth=2
	jmp	.LBB75_52
.LBB75_52:                              # %for.inc180
                                        #   in Loop: Header=BB75_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_46
.LBB75_53:                              # %for.end182
                                        #   in Loop: Header=BB75_44 Depth=1
	jmp	.LBB75_54
.LBB75_54:                              # %for.inc183
                                        #   in Loop: Header=BB75_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_44
.LBB75_55:                              # %for.end185
	jmp	.LBB75_56
.LBB75_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB75_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB75_59
.LBB75_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB75_60
.LBB75_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB75_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB75_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB75_61 Depth=1
	movl	$0, -4(%rbp)
.LBB75_63:                              # %for.cond197
                                        #   Parent Loop BB75_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB75_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB75_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB75_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB75_66:                              # %if.end230
                                        #   in Loop: Header=BB75_63 Depth=2
	jmp	.LBB75_67
.LBB75_67:                              # %for.inc231
                                        #   in Loop: Header=BB75_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_63
.LBB75_68:                              # %for.end233
                                        #   in Loop: Header=BB75_61 Depth=1
	jmp	.LBB75_69
.LBB75_69:                              # %for.inc234
                                        #   in Loop: Header=BB75_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_61
.LBB75_70:                              # %for.end236
	cmpl	$729118183, -36(%rbp)   # imm = 0x2B7575E7
	jne	.LBB75_72
.LBB75_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_71
.Lfunc_end75:
	.size	store_macroblock_parameters.46, .Lfunc_end75-store_macroblock_parameters.46
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.47           # -- Begin function StoreMV8x8.47
	.p2align	4, 0x90
	.type	StoreMV8x8.47,@function
StoreMV8x8.47:                          # @StoreMV8x8.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1633538915, -12(%rbp)  # imm = 0x615DD363
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB76_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_4:                               # %for.end
	cmpl	$1633538915, -12(%rbp)  # imm = 0x615DD363
	jne	.LBB76_6
.LBB76_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_5
.Lfunc_end76:
	.size	StoreMV8x8.47, .Lfunc_end76-StoreMV8x8.47
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.48 # -- Begin function RDCost_for_4x4Blocks_Chroma.48
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.48,@function
RDCost_for_4x4Blocks_Chroma.48:         # @RDCost_for_4x4Blocks_Chroma.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1389071326, -60(%rbp)  # imm = 0x52CB8BDE
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB77_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB77_3
.LBB77_2:                               # %if.else
	movl	$0, -32(%rbp)
.LBB77_3:                               # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB77_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB77_18
.LBB77_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB77_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB77_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB77_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB77_8:                               # %land.end
                                        #   in Loop: Header=BB77_6 Depth=1
	testb	$1, %al
	jne	.LBB77_9
	jmp	.LBB77_17
.LBB77_9:                               # %for.body
                                        #   in Loop: Header=BB77_6 Depth=1
	movq	-88(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB77_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB77_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB77_12
.LBB77_11:                              # %if.else54
                                        #   in Loop: Header=BB77_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB77_12:                              # %if.end55
                                        #   in Loop: Header=BB77_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB77_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB77_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB77_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB77_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB77_15:                              # %lor.end
                                        #   in Loop: Header=BB77_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB77_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB77_6
.LBB77_17:                              # %for.end
	jmp	.LBB77_18
.LBB77_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1389071326, -60(%rbp)  # imm = 0x52CB8BDE
	jne	.LBB77_20
.LBB77_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_19
.Lfunc_end77:
	.size	RDCost_for_4x4Blocks_Chroma.48, .Lfunc_end77-RDCost_for_4x4Blocks_Chroma.48
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.49       # -- Begin function UpdatePixelMap.49
	.p2align	4, 0x90
	.type	UpdatePixelMap.49,@function
UpdatePixelMap.49:                      # @UpdatePixelMap.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1605776813, -28(%rbp)  # imm = 0x5FB635AD
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB78_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB78_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	$0, -8(%rbp)
.LBB78_4:                               # %for.cond2
                                        #   Parent Loop BB78_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB78_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB78_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB78_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_4
.LBB78_7:                               # %for.end
                                        #   in Loop: Header=BB78_2 Depth=1
	jmp	.LBB78_8
.LBB78_8:                               # %for.inc7
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_2
.LBB78_9:                               # %for.end9
	jmp	.LBB78_41
.LBB78_10:                              # %if.else
	movl	$0, -12(%rbp)
.LBB78_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_13 Depth 2
                                        #       Child Loop BB78_16 Depth 3
                                        #         Child Loop BB78_18 Depth 4
                                        #       Child Loop BB78_25 Depth 3
                                        #         Child Loop BB78_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB78_11 Depth=1
	movl	$0, -16(%rbp)
.LBB78_13:                              # %for.cond14
                                        #   Parent Loop BB78_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_16 Depth 3
                                        #         Child Loop BB78_18 Depth 4
                                        #       Child Loop BB78_25 Depth 3
                                        #         Child Loop BB78_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB78_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB78_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB78_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB78_16:                              # %for.cond27
                                        #   Parent Loop BB78_11 Depth=1
                                        #     Parent Loop BB78_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB78_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB78_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB78_18:                              # %for.cond31
                                        #   Parent Loop BB78_11 Depth=1
                                        #     Parent Loop BB78_13 Depth=2
                                        #       Parent Loop BB78_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB78_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB78_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB78_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_18
.LBB78_21:                              # %for.end40
                                        #   in Loop: Header=BB78_16 Depth=3
	jmp	.LBB78_22
.LBB78_22:                              # %for.inc41
                                        #   in Loop: Header=BB78_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_16
.LBB78_23:                              # %for.end43
                                        #   in Loop: Header=BB78_13 Depth=2
	jmp	.LBB78_36
.LBB78_24:                              # %if.else44
                                        #   in Loop: Header=BB78_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB78_25:                              # %for.cond46
                                        #   Parent Loop BB78_11 Depth=1
                                        #     Parent Loop BB78_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB78_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB78_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB78_27:                              # %for.cond50
                                        #   Parent Loop BB78_11 Depth=1
                                        #     Parent Loop BB78_13 Depth=2
                                        #       Parent Loop BB78_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB78_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB78_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB78_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB78_31
.LBB78_30:                              # %cond.false
                                        #   in Loop: Header=BB78_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB78_31:                              # %cond.end
                                        #   in Loop: Header=BB78_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB78_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_27
.LBB78_33:                              # %for.end76
                                        #   in Loop: Header=BB78_25 Depth=3
	jmp	.LBB78_34
.LBB78_34:                              # %for.inc77
                                        #   in Loop: Header=BB78_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_25
.LBB78_35:                              # %for.end79
                                        #   in Loop: Header=BB78_13 Depth=2
	jmp	.LBB78_36
.LBB78_36:                              # %if.end
                                        #   in Loop: Header=BB78_13 Depth=2
	jmp	.LBB78_37
.LBB78_37:                              # %for.inc80
                                        #   in Loop: Header=BB78_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_13
.LBB78_38:                              # %for.end82
                                        #   in Loop: Header=BB78_11 Depth=1
	jmp	.LBB78_39
.LBB78_39:                              # %for.inc83
                                        #   in Loop: Header=BB78_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_11
.LBB78_40:                              # %for.end85
	jmp	.LBB78_41
.LBB78_41:                              # %if.end86
	cmpl	$1605776813, -28(%rbp)  # imm = 0x5FB635AD
	jne	.LBB78_43
.LBB78_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_42
.Lfunc_end78:
	.size	UpdatePixelMap.49, .Lfunc_end78-UpdatePixelMap.49
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.50 # -- Begin function SetModesAndRefframeForBlocks.50
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.50,@function
SetModesAndRefframeForBlocks.50:        # @SetModesAndRefframeForBlocks.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$74205671, -36(%rbp)    # imm = 0x46C49E7
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB79_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB79_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB79_4
.LBB79_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB79_4
.LBB79_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB79_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB79_7
.LBB79_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB79_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB79_42
# %bb.8:                                # %if.end
	movq	.LJTI79_0(,%rax,8), %rax
	jmpq	*%rax
.LBB79_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB79_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB79_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB79_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB79_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB79_14
.LBB79_13:                              # %cond.false26
                                        #   in Loop: Header=BB79_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_14
.LBB79_14:                              # %cond.end27
                                        #   in Loop: Header=BB79_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB79_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_10
.LBB79_16:                              # %for.end
	jmp	.LBB79_43
.LBB79_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB79_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB79_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB79_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_18
.LBB79_21:                              # %for.end49
	jmp	.LBB79_43
.LBB79_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB79_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB79_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB79_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_23
.LBB79_26:                              # %for.end71
	jmp	.LBB79_43
.LBB79_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB79_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB79_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB79_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_28
.LBB79_31:                              # %for.end85
	jmp	.LBB79_43
.LBB79_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB79_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB79_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB79_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_33
.LBB79_36:                              # %for.end99
	jmp	.LBB79_43
.LBB79_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB79_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB79_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB79_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_38
.LBB79_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB79_43
.LBB79_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB79_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB79_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB79_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB79_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB79_70
.LBB79_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB79_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB79_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB79_49 Depth=1
	movl	$0, -4(%rbp)
.LBB79_51:                              # %for.cond131
                                        #   Parent Loop BB79_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB79_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB79_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB79_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB79_55
.LBB79_54:                              # %if.else174
                                        #   in Loop: Header=BB79_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB79_55:                              # %if.end195
                                        #   in Loop: Header=BB79_51 Depth=2
	jmp	.LBB79_56
.LBB79_56:                              # %for.inc196
                                        #   in Loop: Header=BB79_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_51
.LBB79_57:                              # %for.end198
                                        #   in Loop: Header=BB79_49 Depth=1
	jmp	.LBB79_58
.LBB79_58:                              # %for.inc199
                                        #   in Loop: Header=BB79_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_49
.LBB79_59:                              # %for.end201
	jmp	.LBB79_69
.LBB79_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB79_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB79_61 Depth=1
	movl	$0, -4(%rbp)
.LBB79_63:                              # %for.cond207
                                        #   Parent Loop BB79_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB79_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB79_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_63
.LBB79_66:                              # %for.end227
                                        #   in Loop: Header=BB79_61 Depth=1
	jmp	.LBB79_67
.LBB79_67:                              # %for.inc228
                                        #   in Loop: Header=BB79_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_61
.LBB79_68:                              # %for.end230
	jmp	.LBB79_69
.LBB79_69:                              # %if.end231
	jmp	.LBB79_127
.LBB79_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB79_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB79_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB79_72 Depth=1
	movl	$0, -4(%rbp)
.LBB79_74:                              # %for.cond239
                                        #   Parent Loop BB79_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB79_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB79_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB79_105
.LBB79_78:                              # %if.else298
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB79_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB79_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_90
.LBB79_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB79_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB79_90
.LBB79_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB79_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_90
.LBB79_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_90
.LBB79_89:                              # %if.then356
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB79_104
.LBB79_90:                              # %if.else377
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_96
.LBB79_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB79_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB79_96
.LBB79_95:                              # %cond.true404
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB79_97
.LBB79_96:                              # %cond.false410
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_97
.LBB79_97:                              # %cond.end411
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB79_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_102
.LBB79_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_102
.LBB79_101:                             # %cond.true448
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB79_103
.LBB79_102:                             # %cond.false454
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_103
.LBB79_103:                             # %cond.end455
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB79_104:                             # %if.end468
                                        #   in Loop: Header=BB79_74 Depth=2
	jmp	.LBB79_105
.LBB79_105:                             # %if.end469
                                        #   in Loop: Header=BB79_74 Depth=2
	jmp	.LBB79_106
.LBB79_106:                             # %for.inc470
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_74
.LBB79_107:                             # %for.end472
                                        #   in Loop: Header=BB79_72 Depth=1
	jmp	.LBB79_108
.LBB79_108:                             # %for.inc473
                                        #   in Loop: Header=BB79_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_72
.LBB79_109:                             # %for.end475
	jmp	.LBB79_126
.LBB79_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB79_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB79_111 Depth=1
	movl	$0, -4(%rbp)
.LBB79_113:                             # %for.cond481
                                        #   Parent Loop BB79_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB79_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB79_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_120
.LBB79_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB79_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB79_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB79_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB79_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB79_120
.LBB79_119:                             # %cond.true519
                                        #   in Loop: Header=BB79_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB79_121
.LBB79_120:                             # %cond.false525
                                        #   in Loop: Header=BB79_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_121
.LBB79_121:                             # %cond.end526
                                        #   in Loop: Header=BB79_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB79_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_113
.LBB79_123:                             # %for.end541
                                        #   in Loop: Header=BB79_111 Depth=1
	jmp	.LBB79_124
.LBB79_124:                             # %for.inc542
                                        #   in Loop: Header=BB79_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_111
.LBB79_125:                             # %for.end544
	jmp	.LBB79_126
.LBB79_126:                             # %if.end545
	jmp	.LBB79_127
.LBB79_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB79_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB79_128 Depth=1
	movl	$0, -4(%rbp)
.LBB79_130:                             # %for.cond551
                                        #   Parent Loop BB79_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB79_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB79_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB79_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB79_134
.LBB79_133:                             # %cond.false584
                                        #   in Loop: Header=BB79_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB79_134
.LBB79_134:                             # %cond.end585
                                        #   in Loop: Header=BB79_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB79_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_130
.LBB79_136:                             # %for.end598
                                        #   in Loop: Header=BB79_128 Depth=1
	jmp	.LBB79_137
.LBB79_137:                             # %for.inc599
                                        #   in Loop: Header=BB79_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_128
.LBB79_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB79_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB79_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB79_140 Depth=1
	movl	$0, -4(%rbp)
.LBB79_142:                             # %for.cond608
                                        #   Parent Loop BB79_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB79_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB79_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB79_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB79_146
.LBB79_145:                             # %cond.false642
                                        #   in Loop: Header=BB79_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB79_146
.LBB79_146:                             # %cond.end643
                                        #   in Loop: Header=BB79_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB79_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_142
.LBB79_148:                             # %for.end657
                                        #   in Loop: Header=BB79_140 Depth=1
	jmp	.LBB79_149
.LBB79_149:                             # %for.inc658
                                        #   in Loop: Header=BB79_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_140
.LBB79_150:                             # %for.end660
	jmp	.LBB79_151
.LBB79_151:                             # %if.end661
	cmpl	$74205671, -36(%rbp)    # imm = 0x46C49E7
	jne	.LBB79_153
.LBB79_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_152
.Lfunc_end79:
	.size	SetModesAndRefframeForBlocks.50, .Lfunc_end79-SetModesAndRefframeForBlocks.50
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI79_0:
	.quad	.LBB79_9
	.quad	.LBB79_17
	.quad	.LBB79_17
	.quad	.LBB79_17
	.quad	.LBB79_42
	.quad	.LBB79_42
	.quad	.LBB79_42
	.quad	.LBB79_42
	.quad	.LBB79_22
	.quad	.LBB79_27
	.quad	.LBB79_32
	.quad	.LBB79_42
	.quad	.LBB79_42
	.quad	.LBB79_37
                                        # -- End function
	.text
	.globl	SetRefAndMotionVectors.51 # -- Begin function SetRefAndMotionVectors.51
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.51,@function
SetRefAndMotionVectors.51:              # @SetRefAndMotionVectors.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$289227534, -72(%rbp)   # imm = 0x113D430E
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB80_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB80_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB80_4
.LBB80_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB80_5
.LBB80_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB80_5
.LBB80_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB80_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB80_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB80_9
.LBB80_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB80_9
.LBB80_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB80_19
# %bb.10:                               # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB80_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB80_11 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_13:                              # %for.cond34
                                        #   Parent Loop BB80_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB80_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB80_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB80_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_13
.LBB80_16:                              # %for.end
                                        #   in Loop: Header=BB80_11 Depth=1
	jmp	.LBB80_17
.LBB80_17:                              # %for.inc117
                                        #   in Loop: Header=BB80_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_11
.LBB80_18:                              # %for.end119
	jmp	.LBB80_64
.LBB80_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB80_29
# %bb.20:                               # %if.then121
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB80_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB80_21 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_23:                              # %for.cond126
                                        #   Parent Loop BB80_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB80_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB80_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB80_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_23
.LBB80_26:                              # %for.end211
                                        #   in Loop: Header=BB80_21 Depth=1
	jmp	.LBB80_27
.LBB80_27:                              # %for.inc212
                                        #   in Loop: Header=BB80_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_21
.LBB80_28:                              # %for.end214
	jmp	.LBB80_64
.LBB80_29:                              # %if.else
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB80_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB80_30 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_32:                              # %for.cond219
                                        #   Parent Loop BB80_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB80_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB80_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB80_35:                              # %if.end255
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB80_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB80_46
.LBB80_37:                              # %if.then261
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB80_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB80_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB80_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB80_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB80_43
.LBB80_42:                              # %cond.false274
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB80_43:                              # %cond.end275
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB80_45
.LBB80_44:                              # %if.else342
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB80_45:                              # %if.end424
                                        #   in Loop: Header=BB80_32 Depth=2
	jmp	.LBB80_47
.LBB80_46:                              # %if.else425
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB80_47:                              # %if.end468
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB80_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB80_58
.LBB80_49:                              # %if.then474
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB80_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB80_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB80_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB80_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB80_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB80_55
.LBB80_54:                              # %cond.false490
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB80_55:                              # %cond.end492
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB80_57
.LBB80_56:                              # %if.else559
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB80_57:                              # %if.end641
                                        #   in Loop: Header=BB80_32 Depth=2
	jmp	.LBB80_59
.LBB80_58:                              # %if.else642
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB80_59:                              # %if.end685
                                        #   in Loop: Header=BB80_32 Depth=2
	jmp	.LBB80_60
.LBB80_60:                              # %for.inc686
                                        #   in Loop: Header=BB80_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_32
.LBB80_61:                              # %for.end688
                                        #   in Loop: Header=BB80_30 Depth=1
	jmp	.LBB80_62
.LBB80_62:                              # %for.inc689
                                        #   in Loop: Header=BB80_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_30
.LBB80_63:                              # %for.end691
	jmp	.LBB80_64
.LBB80_64:                              # %if.end692
	cmpl	$289227534, -72(%rbp)   # imm = 0x113D430E
	jne	.LBB80_66
.LBB80_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_65
.Lfunc_end80:
	.size	SetRefAndMotionVectors.51, .Lfunc_end80-SetRefAndMotionVectors.51
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.52 # -- Begin function store_macroblock_parameters.52
	.p2align	4, 0x90
	.type	store_macroblock_parameters.52,@function
store_macroblock_parameters.52:         # @store_macroblock_parameters.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1439482665, -36(%rbp)  # imm = 0x55CCC329
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB81_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB81_3
.LBB81_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB81_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB81_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB81_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB81_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB81_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_4
.LBB81_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB81_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB81_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB81_10:                              # %for.cond20
                                        #   Parent Loop BB81_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB81_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB81_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_10
.LBB81_13:                              # %for.end39
                                        #   in Loop: Header=BB81_8 Depth=1
	jmp	.LBB81_14
.LBB81_14:                              # %for.inc40
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_8
.LBB81_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB81_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB81_16 Depth=1
	movl	$0, -8(%rbp)
.LBB81_18:                              # %for.cond47
                                        #   Parent Loop BB81_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB81_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB81_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_18
.LBB81_21:                              # %for.end70
                                        #   in Loop: Header=BB81_16 Depth=1
	jmp	.LBB81_22
.LBB81_22:                              # %for.inc71
                                        #   in Loop: Header=BB81_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_16
.LBB81_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB81_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	$0, -4(%rbp)
.LBB81_26:                              # %for.cond78
                                        #   Parent Loop BB81_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB81_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB81_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_26
.LBB81_29:                              # %for.end94
                                        #   in Loop: Header=BB81_24 Depth=1
	jmp	.LBB81_30
.LBB81_30:                              # %for.inc95
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_24
.LBB81_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB81_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB81_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB81_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB81_33 Depth=1
	movl	$0, -4(%rbp)
.LBB81_35:                              # %for.cond105
                                        #   Parent Loop BB81_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB81_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB81_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB81_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_35
.LBB81_38:                              # %for.end136
                                        #   in Loop: Header=BB81_33 Depth=1
	jmp	.LBB81_39
.LBB81_39:                              # %for.inc137
                                        #   in Loop: Header=BB81_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_33
.LBB81_40:                              # %for.end139
	jmp	.LBB81_41
.LBB81_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB81_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB81_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB81_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_46 Depth 2
                                        #       Child Loop BB81_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB81_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB81_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB81_46:                              # %for.cond152
                                        #   Parent Loop BB81_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB81_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB81_48:                              # %for.cond159
                                        #   Parent Loop BB81_44 Depth=1
                                        #     Parent Loop BB81_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB81_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB81_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_48
.LBB81_51:                              # %for.end179
                                        #   in Loop: Header=BB81_46 Depth=2
	jmp	.LBB81_52
.LBB81_52:                              # %for.inc180
                                        #   in Loop: Header=BB81_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_46
.LBB81_53:                              # %for.end182
                                        #   in Loop: Header=BB81_44 Depth=1
	jmp	.LBB81_54
.LBB81_54:                              # %for.inc183
                                        #   in Loop: Header=BB81_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_44
.LBB81_55:                              # %for.end185
	jmp	.LBB81_56
.LBB81_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB81_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB81_59
.LBB81_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB81_60
.LBB81_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB81_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB81_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB81_61 Depth=1
	movl	$0, -4(%rbp)
.LBB81_63:                              # %for.cond197
                                        #   Parent Loop BB81_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB81_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB81_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB81_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB81_66:                              # %if.end230
                                        #   in Loop: Header=BB81_63 Depth=2
	jmp	.LBB81_67
.LBB81_67:                              # %for.inc231
                                        #   in Loop: Header=BB81_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_63
.LBB81_68:                              # %for.end233
                                        #   in Loop: Header=BB81_61 Depth=1
	jmp	.LBB81_69
.LBB81_69:                              # %for.inc234
                                        #   in Loop: Header=BB81_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_61
.LBB81_70:                              # %for.end236
	cmpl	$1439482665, -36(%rbp)  # imm = 0x55CCC329
	jne	.LBB81_72
.LBB81_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_71
.Lfunc_end81:
	.size	store_macroblock_parameters.52, .Lfunc_end81-store_macroblock_parameters.52
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.53 # -- Begin function set_mbaff_parameters.53
	.p2align	4, 0x90
	.type	set_mbaff_parameters.53,@function
set_mbaff_parameters.53:                # @set_mbaff_parameters.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1857177522, -36(%rbp)  # imm = 0x6EB247B2
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB82_2
# %bb.1:                                # %if.then
	jmp	.LBB82_82
.LBB82_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB82_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB82_3 Depth=1
	movl	$0, -4(%rbp)
.LBB82_5:                               # %for.cond3
                                        #   Parent Loop BB82_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB82_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB82_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_5
.LBB82_8:                               # %for.end
                                        #   in Loop: Header=BB82_3 Depth=1
	jmp	.LBB82_9
.LBB82_9:                               # %for.inc17
                                        #   in Loop: Header=BB82_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_3
.LBB82_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB82_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB82_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB82_12 Depth=1
	movl	$0, -4(%rbp)
.LBB82_14:                              # %for.cond27
                                        #   Parent Loop BB82_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB82_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB82_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB82_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_14
.LBB82_17:                              # %for.end60
                                        #   in Loop: Header=BB82_12 Depth=1
	jmp	.LBB82_18
.LBB82_18:                              # %for.inc61
                                        #   in Loop: Header=BB82_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_12
.LBB82_19:                              # %for.end63
	jmp	.LBB82_20
.LBB82_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB82_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB82_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB82_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB82_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_26 Depth 2
                                        #       Child Loop BB82_28 Depth 3
                                        #         Child Loop BB82_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	$0, -8(%rbp)
.LBB82_26:                              # %for.cond84
                                        #   Parent Loop BB82_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_28 Depth 3
                                        #         Child Loop BB82_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB82_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	$0, -12(%rbp)
.LBB82_28:                              # %for.cond88
                                        #   Parent Loop BB82_24 Depth=1
                                        #     Parent Loop BB82_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB82_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB82_28 Depth=3
	movl	$0, -16(%rbp)
.LBB82_30:                              # %for.cond92
                                        #   Parent Loop BB82_24 Depth=1
                                        #     Parent Loop BB82_26 Depth=2
                                        #       Parent Loop BB82_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB82_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB82_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB82_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_30
.LBB82_33:                              # %for.end115
                                        #   in Loop: Header=BB82_28 Depth=3
	jmp	.LBB82_34
.LBB82_34:                              # %for.inc116
                                        #   in Loop: Header=BB82_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_28
.LBB82_35:                              # %for.end118
                                        #   in Loop: Header=BB82_26 Depth=2
	jmp	.LBB82_36
.LBB82_36:                              # %for.inc119
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_26
.LBB82_37:                              # %for.end121
                                        #   in Loop: Header=BB82_24 Depth=1
	jmp	.LBB82_38
.LBB82_38:                              # %for.inc122
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_24
.LBB82_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB82_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_42 Depth 2
                                        #       Child Loop BB82_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB82_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB82_40 Depth=1
	movl	$0, -12(%rbp)
.LBB82_42:                              # %for.cond129
                                        #   Parent Loop BB82_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB82_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB82_42 Depth=2
	movl	$0, -16(%rbp)
.LBB82_44:                              # %for.cond133
                                        #   Parent Loop BB82_40 Depth=1
                                        #     Parent Loop BB82_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB82_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB82_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB82_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_44
.LBB82_47:                              # %for.end152
                                        #   in Loop: Header=BB82_42 Depth=2
	jmp	.LBB82_48
.LBB82_48:                              # %for.inc153
                                        #   in Loop: Header=BB82_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_42
.LBB82_49:                              # %for.end155
                                        #   in Loop: Header=BB82_40 Depth=1
	jmp	.LBB82_50
.LBB82_50:                              # %for.inc156
                                        #   in Loop: Header=BB82_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_40
.LBB82_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB82_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB82_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB82_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB82_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_52
.LBB82_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB82_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB82_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB82_56 Depth=1
	movl	$0, -4(%rbp)
.LBB82_58:                              # %for.cond180
                                        #   Parent Loop BB82_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB82_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB82_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB82_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_58
.LBB82_61:                              # %for.end198
                                        #   in Loop: Header=BB82_56 Depth=1
	jmp	.LBB82_62
.LBB82_62:                              # %for.inc199
                                        #   in Loop: Header=BB82_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_56
.LBB82_63:                              # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB82_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB82_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB82_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB82_65 Depth=1
	movl	$0, -4(%rbp)
.LBB82_67:                              # %for.cond208
                                        #   Parent Loop BB82_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB82_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB82_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB82_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_67
.LBB82_70:                              # %for.end230
                                        #   in Loop: Header=BB82_65 Depth=1
	jmp	.LBB82_71
.LBB82_71:                              # %for.inc231
                                        #   in Loop: Header=BB82_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_65
.LBB82_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB82_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB82_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB82_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB82_76:                              # %for.cond244
                                        #   Parent Loop BB82_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB82_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB82_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_76
.LBB82_79:                              # %for.end267
                                        #   in Loop: Header=BB82_74 Depth=1
	jmp	.LBB82_80
.LBB82_80:                              # %for.inc268
                                        #   in Loop: Header=BB82_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_74
.LBB82_81:                              # %for.end270.loopexit
	jmp	.LBB82_82
.LBB82_82:                              # %for.end270
	cmpl	$1857177522, -36(%rbp)  # imm = 0x6EB247B2
	jne	.LBB82_84
.LBB82_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_83
.Lfunc_end82:
	.size	set_mbaff_parameters.53, .Lfunc_end82-set_mbaff_parameters.53
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.54   # -- Begin function SetMotionVectorsMB.54
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.54,@function
SetMotionVectorsMB.54:                  # @SetMotionVectorsMB.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$335807282, -68(%rbp)   # imm = 0x14040332
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_3:                               # %for.cond3
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB83_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB83_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB83_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB83_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB83_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB83_10
.LBB83_9:                               # %cond.false
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB83_10:                              # %cond.end
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB83_11:                              # %if.end
                                        #   in Loop: Header=BB83_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB83_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB83_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB83_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB83_15
.LBB83_14:                              # %if.else
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB83_15:                              # %if.end89
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_29
.LBB83_16:                              # %if.else90
                                        #   in Loop: Header=BB83_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB83_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB83_28
.LBB83_18:                              # %if.else122
                                        #   in Loop: Header=BB83_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB83_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB83_27
.LBB83_20:                              # %if.else174
                                        #   in Loop: Header=BB83_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB83_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB83_26
.LBB83_22:                              # %if.else226
                                        #   in Loop: Header=BB83_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB83_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB83_25
.LBB83_24:                              # %if.else298
                                        #   in Loop: Header=BB83_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB83_25:                              # %if.end299
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_26
.LBB83_26:                              # %if.end300
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_27
.LBB83_27:                              # %if.end301
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_28
.LBB83_28:                              # %if.end302
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_29
.LBB83_29:                              # %if.end303
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_30
.LBB83_30:                              # %for.inc
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_3
.LBB83_31:                              # %for.end
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_32
.LBB83_32:                              # %for.inc304
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_1
.LBB83_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB83_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB83_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_37 Depth 2
                                        #       Child Loop BB83_39 Depth 3
                                        #         Child Loop BB83_41 Depth 4
                                        #           Child Loop BB83_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB83_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB83_35 Depth=1
	movl	$0, -8(%rbp)
.LBB83_37:                              # %for.cond313
                                        #   Parent Loop BB83_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_39 Depth 3
                                        #         Child Loop BB83_41 Depth 4
                                        #           Child Loop BB83_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB83_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB83_37 Depth=2
	movl	$0, -20(%rbp)
.LBB83_39:                              # %for.cond317
                                        #   Parent Loop BB83_35 Depth=1
                                        #     Parent Loop BB83_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_41 Depth 4
                                        #           Child Loop BB83_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB83_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB83_39 Depth=3
	movl	$0, -24(%rbp)
.LBB83_41:                              # %for.cond321
                                        #   Parent Loop BB83_35 Depth=1
                                        #     Parent Loop BB83_37 Depth=2
                                        #       Parent Loop BB83_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB83_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB83_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB83_41 Depth=4
	movl	$0, -28(%rbp)
.LBB83_43:                              # %for.cond325
                                        #   Parent Loop BB83_35 Depth=1
                                        #     Parent Loop BB83_37 Depth=2
                                        #       Parent Loop BB83_39 Depth=3
                                        #         Parent Loop BB83_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB83_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB83_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB83_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB83_43
.LBB83_46:                              # %for.end423
                                        #   in Loop: Header=BB83_41 Depth=4
	jmp	.LBB83_47
.LBB83_47:                              # %for.inc424
                                        #   in Loop: Header=BB83_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB83_41
.LBB83_48:                              # %for.end426
                                        #   in Loop: Header=BB83_39 Depth=3
	jmp	.LBB83_49
.LBB83_49:                              # %for.inc427
                                        #   in Loop: Header=BB83_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_39
.LBB83_50:                              # %for.end429
                                        #   in Loop: Header=BB83_37 Depth=2
	jmp	.LBB83_51
.LBB83_51:                              # %for.inc430
                                        #   in Loop: Header=BB83_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_37
.LBB83_52:                              # %for.end432
                                        #   in Loop: Header=BB83_35 Depth=1
	jmp	.LBB83_53
.LBB83_53:                              # %for.inc433
                                        #   in Loop: Header=BB83_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_35
.LBB83_54:                              # %for.end435
	jmp	.LBB83_55
.LBB83_55:                              # %if.end436
	cmpl	$335807282, -68(%rbp)   # imm = 0x14040332
	jne	.LBB83_57
.LBB83_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_56
.Lfunc_end83:
	.size	SetMotionVectorsMB.54, .Lfunc_end83-SetMotionVectorsMB.54
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.55   # -- Begin function SetMotionVectorsMB.55
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.55,@function
SetMotionVectorsMB.55:                  # @SetMotionVectorsMB.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1636184919, -72(%rbp)  # imm = 0x61863357
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -4(%rbp)
.LBB84_3:                               # %for.cond3
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB84_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB84_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB84_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB84_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB84_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB84_10
.LBB84_9:                               # %cond.false
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB84_10:                              # %cond.end
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB84_11:                              # %if.end
                                        #   in Loop: Header=BB84_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB84_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB84_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB84_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB84_15
.LBB84_14:                              # %if.else
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB84_15:                              # %if.end89
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_29
.LBB84_16:                              # %if.else90
                                        #   in Loop: Header=BB84_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB84_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB84_28
.LBB84_18:                              # %if.else122
                                        #   in Loop: Header=BB84_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB84_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB84_27
.LBB84_20:                              # %if.else174
                                        #   in Loop: Header=BB84_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB84_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB84_26
.LBB84_22:                              # %if.else226
                                        #   in Loop: Header=BB84_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB84_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB84_25
.LBB84_24:                              # %if.else298
                                        #   in Loop: Header=BB84_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB84_25:                              # %if.end299
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_26
.LBB84_26:                              # %if.end300
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_27
.LBB84_27:                              # %if.end301
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_28
.LBB84_28:                              # %if.end302
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_29
.LBB84_29:                              # %if.end303
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_30
.LBB84_30:                              # %for.inc
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_3
.LBB84_31:                              # %for.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_32
.LBB84_32:                              # %for.inc304
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_1
.LBB84_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB84_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB84_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_37 Depth 2
                                        #       Child Loop BB84_39 Depth 3
                                        #         Child Loop BB84_41 Depth 4
                                        #           Child Loop BB84_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB84_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB84_35 Depth=1
	movl	$0, -8(%rbp)
.LBB84_37:                              # %for.cond313
                                        #   Parent Loop BB84_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_39 Depth 3
                                        #         Child Loop BB84_41 Depth 4
                                        #           Child Loop BB84_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB84_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB84_37 Depth=2
	movl	$0, -20(%rbp)
.LBB84_39:                              # %for.cond317
                                        #   Parent Loop BB84_35 Depth=1
                                        #     Parent Loop BB84_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_41 Depth 4
                                        #           Child Loop BB84_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB84_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB84_39 Depth=3
	movl	$0, -24(%rbp)
.LBB84_41:                              # %for.cond321
                                        #   Parent Loop BB84_35 Depth=1
                                        #     Parent Loop BB84_37 Depth=2
                                        #       Parent Loop BB84_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB84_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB84_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB84_41 Depth=4
	movl	$0, -28(%rbp)
.LBB84_43:                              # %for.cond325
                                        #   Parent Loop BB84_35 Depth=1
                                        #     Parent Loop BB84_37 Depth=2
                                        #       Parent Loop BB84_39 Depth=3
                                        #         Parent Loop BB84_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB84_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB84_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB84_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB84_43
.LBB84_46:                              # %for.end423
                                        #   in Loop: Header=BB84_41 Depth=4
	jmp	.LBB84_47
.LBB84_47:                              # %for.inc424
                                        #   in Loop: Header=BB84_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB84_41
.LBB84_48:                              # %for.end426
                                        #   in Loop: Header=BB84_39 Depth=3
	jmp	.LBB84_49
.LBB84_49:                              # %for.inc427
                                        #   in Loop: Header=BB84_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB84_39
.LBB84_50:                              # %for.end429
                                        #   in Loop: Header=BB84_37 Depth=2
	jmp	.LBB84_51
.LBB84_51:                              # %for.inc430
                                        #   in Loop: Header=BB84_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_37
.LBB84_52:                              # %for.end432
                                        #   in Loop: Header=BB84_35 Depth=1
	jmp	.LBB84_53
.LBB84_53:                              # %for.inc433
                                        #   in Loop: Header=BB84_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_35
.LBB84_54:                              # %for.end435
	jmp	.LBB84_55
.LBB84_55:                              # %if.end436
	cmpl	$1636184919, -72(%rbp)  # imm = 0x61863357
	jne	.LBB84_57
.LBB84_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_56
.Lfunc_end84:
	.size	SetMotionVectorsMB.55, .Lfunc_end84-SetMotionVectorsMB.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.56
.LCPI85_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI85_1:
	.quad	4622945017495814144     # double 12
.LCPI85_2:
	.quad	4607182418800017408     # double 1
.LCPI85_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI85_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI85_5:
	.quad	4611686018427387904     # double 2
.LCPI85_6:
	.quad	4613937818241073152     # double 3
.LCPI85_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI85_8:
	.quad	4616189618054758400     # double 4
.LCPI85_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI85_10:
	.quad	4618441417868443648     # double 6
.LCPI85_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI85_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI85_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI85_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI85_15:
	.quad	4602678819172646912     # double 0.5
.LCPI85_16:
	.quad	4679240012837945344     # double 65536
.LCPI85_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI85_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.56
	.p2align	4, 0x90
	.type	encode_one_macroblock.56,@function
encode_one_macroblock.56:               # @encode_one_macroblock.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$416000523, -408(%rbp)  # imm = 0x18CBAA0B
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -176(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -320(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_4
.LBB85_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB85_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB85_5
.LBB85_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB85_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -312(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -412(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB85_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB85_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB85_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB85_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB85_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB85_11:                              # %land.end
.LBB85_12:                              # %lor.end36
.LBB85_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -300(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB85_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB85_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB85_17:                              # %lor.end51
.LBB85_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB85_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB85_21
.LBB85_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB85_21
.LBB85_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB85_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB85_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -280(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -280(%rbp)
	je	.LBB85_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB85_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB85_27
.LBB85_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB85_27:                              # %if.end
	jmp	.LBB85_29
.LBB85_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB85_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB85_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB85_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB85_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB85_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB85_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB85_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB85_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB85_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB85_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB85_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB85_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB85_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB85_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB85_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-412(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB85_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB85_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB85_53 Depth=1
	movl	$0, -56(%rbp)
.LBB85_55:                              # %for.cond156
                                        #   Parent Loop BB85_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB85_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB85_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB85_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB85_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB85_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB85_59:                              # %if.end183
                                        #   in Loop: Header=BB85_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB85_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB85_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB85_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB85_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB85_62:                              # %if.end202
                                        #   in Loop: Header=BB85_55 Depth=2
	jmp	.LBB85_63
.LBB85_63:                              # %for.inc
                                        #   in Loop: Header=BB85_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_55
.LBB85_64:                              # %for.end
                                        #   in Loop: Header=BB85_53 Depth=1
	jmp	.LBB85_65
.LBB85_65:                              # %for.inc203
                                        #   in Loop: Header=BB85_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB85_53
.LBB85_66:                              # %for.end205
	jmp	.LBB85_93
.LBB85_67:                              # %if.else206
	cmpl	$0, -280(%rbp)
	je	.LBB85_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB85_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB85_69 Depth=1
	movl	$0, -56(%rbp)
.LBB85_71:                              # %for.cond215
                                        #   Parent Loop BB85_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB85_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB85_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB85_75:                              # %if.end244
                                        #   in Loop: Header=BB85_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB85_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB85_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB85_78:                              # %if.end263
                                        #   in Loop: Header=BB85_71 Depth=2
	jmp	.LBB85_79
.LBB85_79:                              # %for.inc264
                                        #   in Loop: Header=BB85_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_71
.LBB85_80:                              # %for.end266
                                        #   in Loop: Header=BB85_69 Depth=1
	jmp	.LBB85_81
.LBB85_81:                              # %for.inc267
                                        #   in Loop: Header=BB85_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB85_69
.LBB85_82:                              # %for.end269
	jmp	.LBB85_92
.LBB85_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB85_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB85_84 Depth=1
	movl	$0, -56(%rbp)
.LBB85_86:                              # %for.cond277
                                        #   Parent Loop BB85_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB85_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB85_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_86
.LBB85_89:                              # %for.end290
                                        #   in Loop: Header=BB85_84 Depth=1
	jmp	.LBB85_90
.LBB85_90:                              # %for.inc291
                                        #   in Loop: Header=BB85_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB85_84
.LBB85_91:                              # %for.end293
	jmp	.LBB85_92
.LBB85_92:                              # %if.end294
	jmp	.LBB85_93
.LBB85_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI85_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB85_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB85_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB85_99
.LBB85_98:                              # %if.else315
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB85_99:                              # %if.end326
	jmp	.LBB85_159
.LBB85_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB85_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI85_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB85_104
.LBB85_103:                             # %cond.false336
	vmovsd	.LCPI85_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB85_104:                             # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB85_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI85_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB85_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_109
.LBB85_108:                             # %cond.false357
	vmovsd	.LCPI85_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_109:                             # %cond.end359
	vmovsd	.LCPI85_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI85_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_115
.LBB85_111:                             # %cond.false364
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_114
.LBB85_113:                             # %cond.false369
	vmovsd	.LCPI85_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_114:                             # %cond.end371
.LBB85_115:                             # %cond.end373
	jmp	.LBB85_129
.LBB85_116:                             # %cond.false375
	cmpl	$0, -312(%rbp)
	je	.LBB85_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_120
.LBB85_119:                             # %cond.false382
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_120:                             # %cond.end384
	vmovsd	.LCPI85_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI85_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_126
.LBB85_122:                             # %cond.false389
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_125
.LBB85_124:                             # %cond.false394
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_125:                             # %cond.end396
.LBB85_126:                             # %cond.end398
	jmp	.LBB85_128
.LBB85_127:                             # %cond.false400
	vmovsd	.LCPI85_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_128
.LBB85_128:                             # %cond.end401
.LBB85_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB85_146
.LBB85_130:                             # %if.else406
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI85_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB85_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_145
.LBB85_132:                             # %cond.false415
	cmpl	$0, -312(%rbp)
	je	.LBB85_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_136
.LBB85_135:                             # %cond.false422
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_136:                             # %cond.end424
	vmovsd	.LCPI85_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI85_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_142
.LBB85_138:                             # %cond.false429
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_141
.LBB85_140:                             # %cond.false434
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_141:                             # %cond.end436
.LBB85_142:                             # %cond.end438
	jmp	.LBB85_144
.LBB85_143:                             # %cond.false440
	vmovsd	.LCPI85_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_144
.LBB85_144:                             # %cond.end441
.LBB85_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB85_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB85_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI85_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI85_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB85_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI85_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB85_152
.LBB85_151:                             # %cond.false465
	vmovsd	.LCPI85_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB85_152:                             # %cond.end473
	vmovsd	.LCPI85_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_153:                             # %if.end477
	jmp	.LBB85_158
.LBB85_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB85_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI85_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_157:                             # %if.end487
	jmp	.LBB85_158
.LBB85_158:                             # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB85_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI85_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB85_166
.LBB85_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB85_165
.LBB85_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB85_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB85_166:                             # %if.end510
	vmovsd	.LCPI85_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI85_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB85_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB85_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB85_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB85_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB85_167
.LBB85_170:                             # %for.end522
	movl	$0, -252(%rbp)
.LBB85_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_181 Depth 2
                                        #       Child Loop BB85_184 Depth 3
                                        #         Child Loop BB85_190 Depth 4
                                        #         Child Loop BB85_210 Depth 4
                                        #         Child Loop BB85_300 Depth 4
                                        #           Child Loop BB85_302 Depth 5
                                        #         Child Loop BB85_309 Depth 4
                                        #           Child Loop BB85_311 Depth 5
                                        #         Child Loop BB85_326 Depth 4
                                        #           Child Loop BB85_328 Depth 5
                                        #         Child Loop BB85_335 Depth 4
                                        #           Child Loop BB85_337 Depth 5
                                        #         Child Loop BB85_355 Depth 4
                                        #           Child Loop BB85_357 Depth 5
                                        #         Child Loop BB85_374 Depth 4
                                        #           Child Loop BB85_376 Depth 5
                                        #     Child Loop BB85_416 Depth 2
                                        #       Child Loop BB85_418 Depth 3
                                        #         Child Loop BB85_445 Depth 4
                                        #         Child Loop BB85_464 Depth 4
                                        #           Child Loop BB85_466 Depth 5
                                        #         Child Loop BB85_473 Depth 4
                                        #         Child Loop BB85_508 Depth 4
                                        #           Child Loop BB85_510 Depth 5
                                        #         Child Loop BB85_532 Depth 4
                                        #           Child Loop BB85_534 Depth 5
                                        #             Child Loop BB85_536 Depth 6
                                        #         Child Loop BB85_544 Depth 4
                                        #           Child Loop BB85_546 Depth 5
                                        #       Child Loop BB85_569 Depth 3
                                        #         Child Loop BB85_571 Depth 4
                                        #           Child Loop BB85_573 Depth 5
                                        #       Child Loop BB85_581 Depth 3
                                        #         Child Loop BB85_583 Depth 4
                                        #     Child Loop BB85_601 Depth 2
                                        #       Child Loop BB85_603 Depth 3
                                        #         Child Loop BB85_614 Depth 4
                                        #         Child Loop BB85_633 Depth 4
                                        #           Child Loop BB85_635 Depth 5
                                        #         Child Loop BB85_642 Depth 4
                                        #         Child Loop BB85_677 Depth 4
                                        #           Child Loop BB85_679 Depth 5
                                        #         Child Loop BB85_701 Depth 4
                                        #           Child Loop BB85_703 Depth 5
                                        #             Child Loop BB85_705 Depth 6
                                        #         Child Loop BB85_713 Depth 4
                                        #           Child Loop BB85_715 Depth 5
                                        #         Child Loop BB85_723 Depth 4
                                        #           Child Loop BB85_725 Depth 5
                                        #       Child Loop BB85_745 Depth 3
                                        #         Child Loop BB85_747 Depth 4
                                        #           Child Loop BB85_749 Depth 5
                                        #       Child Loop BB85_757 Depth 3
                                        #         Child Loop BB85_759 Depth 4
                                        #       Child Loop BB85_766 Depth 3
                                        #         Child Loop BB85_768 Depth 4
                                        #       Child Loop BB85_778 Depth 3
                                        #         Child Loop BB85_780 Depth 4
                                        #       Child Loop BB85_786 Depth 3
                                        #       Child Loop BB85_791 Depth 3
                                        #         Child Loop BB85_793 Depth 4
                                        #     Child Loop BB85_803 Depth 2
                                        #       Child Loop BB85_805 Depth 3
                                        #     Child Loop BB85_835 Depth 2
                                        #       Child Loop BB85_853 Depth 3
                                        #         Child Loop BB85_908 Depth 4
                                        #           Child Loop BB85_911 Depth 5
                                        #             Child Loop BB85_913 Depth 6
                                        #           Child Loop BB85_920 Depth 5
                                        #             Child Loop BB85_922 Depth 6
                                        #         Child Loop BB85_955 Depth 4
                                        #           Child Loop BB85_957 Depth 5
                                        #     Child Loop BB85_981 Depth 2
                                        #       Child Loop BB85_1014 Depth 3
                                        #         Child Loop BB85_1017 Depth 4
                                        #           Child Loop BB85_1019 Depth 5
                                        #         Child Loop BB85_1026 Depth 4
                                        #           Child Loop BB85_1028 Depth 5
                                        #       Child Loop BB85_1061 Depth 3
                                        #         Child Loop BB85_1063 Depth 4
                                        #     Child Loop BB85_1113 Depth 2
                                        #       Child Loop BB85_1115 Depth 3
                                        #     Child Loop BB85_1127 Depth 2
                                        #       Child Loop BB85_1129 Depth 3
                                        #         Child Loop BB85_1131 Depth 4
                                        #     Child Loop BB85_1141 Depth 2
                                        #       Child Loop BB85_1143 Depth 3
                                        #     Child Loop BB85_1152 Depth 2
                                        #       Child Loop BB85_1154 Depth 3
                                        #     Child Loop BB85_1160 Depth 2
                                        #       Child Loop BB85_1162 Depth 3
                                        #     Child Loop BB85_1174 Depth 2
                                        #       Child Loop BB85_1176 Depth 3
                                        #         Child Loop BB85_1178 Depth 4
                                        #     Child Loop BB85_1189 Depth 2
                                        #       Child Loop BB85_1191 Depth 3
                                        #     Child Loop BB85_1202 Depth 2
                                        #       Child Loop BB85_1204 Depth 3
                                        #     Child Loop BB85_1211 Depth 2
                                        #       Child Loop BB85_1213 Depth 3
                                        #     Child Loop BB85_1221 Depth 2
                                        #       Child Loop BB85_1223 Depth 3
                                        #     Child Loop BB85_1229 Depth 2
                                        #       Child Loop BB85_1231 Depth 3
                                        #     Child Loop BB85_1237 Depth 2
                                        #       Child Loop BB85_1239 Depth 3
                                        #     Child Loop BB85_1245 Depth 2
                                        #       Child Loop BB85_1247 Depth 3
	movl	-252(%rbp), %eax
	cmpl	-300(%rbp), %eax
	jge	.LBB85_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$2, -300(%rbp)
	jne	.LBB85_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB85_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB85_176
.LBB85_175:                             # %if.else534
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB85_176:                             # %if.end536
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_177
.LBB85_177:                             # %if.end537
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB85_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB85_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB85_180:                             # %if.end542
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB85_181:                             # %for.cond543
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_184 Depth 3
                                        #         Child Loop BB85_190 Depth 4
                                        #         Child Loop BB85_210 Depth 4
                                        #         Child Loop BB85_300 Depth 4
                                        #           Child Loop BB85_302 Depth 5
                                        #         Child Loop BB85_309 Depth 4
                                        #           Child Loop BB85_311 Depth 5
                                        #         Child Loop BB85_326 Depth 4
                                        #           Child Loop BB85_328 Depth 5
                                        #         Child Loop BB85_335 Depth 4
                                        #           Child Loop BB85_337 Depth 5
                                        #         Child Loop BB85_355 Depth 4
                                        #           Child Loop BB85_357 Depth 5
                                        #         Child Loop BB85_374 Depth 4
                                        #           Child Loop BB85_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB85_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB85_184:                             # %for.cond554
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_190 Depth 4
                                        #         Child Loop BB85_210 Depth 4
                                        #         Child Loop BB85_300 Depth 4
                                        #           Child Loop BB85_302 Depth 5
                                        #         Child Loop BB85_309 Depth 4
                                        #           Child Loop BB85_311 Depth 5
                                        #         Child Loop BB85_326 Depth 4
                                        #           Child Loop BB85_328 Depth 5
                                        #         Child Loop BB85_335 Depth 4
                                        #           Child Loop BB85_337 Depth 5
                                        #         Child Loop BB85_355 Depth 4
                                        #           Child Loop BB85_357 Depth 5
                                        #         Child Loop BB85_374 Depth 4
                                        #           Child Loop BB85_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB85_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB85_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB85_187:                             # %land.end566
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB85_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB85_189:                             # %land.end574
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB85_190:                             # %for.cond577
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB85_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB85_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB85_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB85_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB85_206
.LBB85_194:                             # %if.then594
                                        #   in Loop: Header=BB85_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB85_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_198
.LBB85_197:                             # %cond.false604
                                        #   in Loop: Header=BB85_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_198:                             # %cond.end607
                                        #   in Loop: Header=BB85_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_203
.LBB85_199:                             # %cond.false610
                                        #   in Loop: Header=BB85_190 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB85_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_202
.LBB85_201:                             # %cond.false617
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	$1, %eax
	jmp	.LBB85_202
.LBB85_202:                             # %cond.end618
                                        #   in Loop: Header=BB85_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_203:                             # %cond.end623
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB85_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB85_205:                             # %if.end636
                                        #   in Loop: Header=BB85_190 Depth=4
	jmp	.LBB85_206
.LBB85_206:                             # %if.end637
                                        #   in Loop: Header=BB85_190 Depth=4
	jmp	.LBB85_207
.LBB85_207:                             # %for.inc638
                                        #   in Loop: Header=BB85_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_190
.LBB85_208:                             # %for.end640
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB85_210:                             # %for.cond643
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB85_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB85_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB85_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_215
.LBB85_214:                             # %cond.false660
                                        #   in Loop: Header=BB85_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_215:                             # %cond.end663
                                        #   in Loop: Header=BB85_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_220
.LBB85_216:                             # %cond.false667
                                        #   in Loop: Header=BB85_210 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB85_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_219
.LBB85_218:                             # %cond.false674
                                        #   in Loop: Header=BB85_210 Depth=4
	movl	$1, %eax
	jmp	.LBB85_219
.LBB85_219:                             # %cond.end675
                                        #   in Loop: Header=BB85_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_220:                             # %cond.end680
                                        #   in Loop: Header=BB85_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB85_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB85_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB85_222:                             # %if.end693
                                        #   in Loop: Header=BB85_210 Depth=4
	jmp	.LBB85_223
.LBB85_223:                             # %for.inc694
                                        #   in Loop: Header=BB85_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_210
.LBB85_224:                             # %for.end696
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_228
.LBB85_227:                             # %cond.false706
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_228:                             # %cond.end709
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_231
.LBB85_230:                             # %cond.false719
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_231:                             # %cond.end721
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_236
.LBB85_232:                             # %cond.false726
                                        #   in Loop: Header=BB85_184 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB85_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB85_235
.LBB85_234:                             # %cond.false733
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$1, %eax
	jmp	.LBB85_235
.LBB85_235:                             # %cond.end734
                                        #   in Loop: Header=BB85_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_236:                             # %cond.end739
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB85_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_243
.LBB85_242:                             # %cond.false761
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB85_243:                             # %cond.end763
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_246
.LBB85_245:                             # %cond.false773
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_246:                             # %cond.end775
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_248
.LBB85_247:                             # %cond.false780
                                        #   in Loop: Header=BB85_184 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_248:                             # %cond.end784
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_252
.LBB85_251:                             # %cond.false797
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB85_252:                             # %cond.end799
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_255
.LBB85_254:                             # %cond.false809
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_255:                             # %cond.end811
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_257
.LBB85_256:                             # %cond.false816
                                        #   in Loop: Header=BB85_184 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_257:                             # %cond.end820
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	%eax, -188(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB85_259
.LBB85_258:                             # %if.else824
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
.LBB85_259:                             # %if.end825
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB85_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB85_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_285
.LBB85_266:                             # %if.else845
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB85_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB85_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB85_284
.LBB85_271:                             # %if.else859
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB85_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB85_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB85_283
.LBB85_276:                             # %if.else876
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jg	.LBB85_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB85_282
.LBB85_281:                             # %if.else893
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-188(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB85_282:                             # %if.end898
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_283
.LBB85_283:                             # %if.end899
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_284
.LBB85_284:                             # %if.end900
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_285
.LBB85_285:                             # %if.end901
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_295
.LBB85_286:                             # %if.else902
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_294
.LBB85_289:                             # %if.else910
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB85_293
.LBB85_292:                             # %if.else918
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB85_293:                             # %if.end920
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_294
.LBB85_294:                             # %if.end921
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_295
.LBB85_295:                             # %if.end922
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_297
.LBB85_296:                             # %if.else923
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_297:                             # %if.end925
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB85_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB85_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$0, -24(%rbp)
.LBB85_300:                             # %for.cond933
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB85_300 Depth=4
	movl	$0, -20(%rbp)
.LBB85_302:                             # %for.cond937
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB85_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB85_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_302
.LBB85_305:                             # %for.end999
                                        #   in Loop: Header=BB85_300 Depth=4
	jmp	.LBB85_306
.LBB85_306:                             # %for.inc1000
                                        #   in Loop: Header=BB85_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_300
.LBB85_307:                             # %for.end1002
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_323
.LBB85_308:                             # %if.else1003
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$0, -24(%rbp)
.LBB85_309:                             # %for.cond1004
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB85_309 Depth=4
	movl	$0, -20(%rbp)
.LBB85_311:                             # %for.cond1008
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB85_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB85_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB85_316
.LBB85_315:                             # %cond.false1024
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB85_316:                             # %cond.end1025
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB85_318
.LBB85_317:                             # %if.else1111
                                        #   in Loop: Header=BB85_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_318:                             # %if.end1217
                                        #   in Loop: Header=BB85_311 Depth=5
	jmp	.LBB85_319
.LBB85_319:                             # %for.inc1218
                                        #   in Loop: Header=BB85_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_311
.LBB85_320:                             # %for.end1220
                                        #   in Loop: Header=BB85_309 Depth=4
	jmp	.LBB85_321
.LBB85_321:                             # %for.inc1221
                                        #   in Loop: Header=BB85_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_309
.LBB85_322:                             # %for.end1223
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_323
.LBB85_323:                             # %if.end1224
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB85_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$0, -24(%rbp)
.LBB85_326:                             # %for.cond1231
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB85_326 Depth=4
	movl	$0, -20(%rbp)
.LBB85_328:                             # %for.cond1235
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB85_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB85_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_328
.LBB85_331:                             # %for.end1303
                                        #   in Loop: Header=BB85_326 Depth=4
	jmp	.LBB85_332
.LBB85_332:                             # %for.inc1304
                                        #   in Loop: Header=BB85_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_326
.LBB85_333:                             # %for.end1306
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_351
.LBB85_334:                             # %if.else1307
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$0, -24(%rbp)
.LBB85_335:                             # %for.cond1308
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB85_335 Depth=4
	movl	$0, -20(%rbp)
.LBB85_337:                             # %for.cond1312
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB85_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB85_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB85_342
.LBB85_341:                             # %cond.false1330
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB85_342:                             # %cond.end1332
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB85_346
.LBB85_343:                             # %if.else1419
                                        #   in Loop: Header=BB85_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_345:                             # %if.end1529
                                        #   in Loop: Header=BB85_337 Depth=5
	jmp	.LBB85_346
.LBB85_346:                             # %if.end1530
                                        #   in Loop: Header=BB85_337 Depth=5
	jmp	.LBB85_347
.LBB85_347:                             # %for.inc1531
                                        #   in Loop: Header=BB85_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_337
.LBB85_348:                             # %for.end1533
                                        #   in Loop: Header=BB85_335 Depth=4
	jmp	.LBB85_349
.LBB85_349:                             # %for.inc1534
                                        #   in Loop: Header=BB85_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_335
.LBB85_350:                             # %for.end1536
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_351
.LBB85_351:                             # %if.end1537
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_352
.LBB85_352:                             # %if.end1538
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_393
.LBB85_353:                             # %if.else1539
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB85_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB85_355:                             # %for.cond1546
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB85_355 Depth=4
	movl	$0, -20(%rbp)
.LBB85_357:                             # %for.cond1550
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB85_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB85_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB85_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_361
.LBB85_360:                             # %if.else1596
                                        #   in Loop: Header=BB85_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_361:                             # %if.end1676
                                        #   in Loop: Header=BB85_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB85_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB85_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB85_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_367
.LBB85_364:                             # %if.else1721
                                        #   in Loop: Header=BB85_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB85_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_366:                             # %if.end1805
                                        #   in Loop: Header=BB85_357 Depth=5
	jmp	.LBB85_367
.LBB85_367:                             # %if.end1806
                                        #   in Loop: Header=BB85_357 Depth=5
	jmp	.LBB85_368
.LBB85_368:                             # %if.end1807
                                        #   in Loop: Header=BB85_357 Depth=5
	jmp	.LBB85_369
.LBB85_369:                             # %for.inc1808
                                        #   in Loop: Header=BB85_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_357
.LBB85_370:                             # %for.end1810
                                        #   in Loop: Header=BB85_355 Depth=4
	jmp	.LBB85_371
.LBB85_371:                             # %for.inc1811
                                        #   in Loop: Header=BB85_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_355
.LBB85_372:                             # %for.end1813
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_392
.LBB85_373:                             # %if.else1814
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB85_374:                             # %for.cond1818
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB85_374 Depth=4
	movl	$0, -20(%rbp)
.LBB85_376:                             # %for.cond1822
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB85_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB85_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB85_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_380
.LBB85_379:                             # %if.else1868
                                        #   in Loop: Header=BB85_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_380:                             # %if.end1948
                                        #   in Loop: Header=BB85_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB85_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB85_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB85_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_386
.LBB85_383:                             # %if.else1993
                                        #   in Loop: Header=BB85_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB85_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_385:                             # %if.end2077
                                        #   in Loop: Header=BB85_376 Depth=5
	jmp	.LBB85_386
.LBB85_386:                             # %if.end2078
                                        #   in Loop: Header=BB85_376 Depth=5
	jmp	.LBB85_387
.LBB85_387:                             # %if.end2079
                                        #   in Loop: Header=BB85_376 Depth=5
	jmp	.LBB85_388
.LBB85_388:                             # %for.inc2080
                                        #   in Loop: Header=BB85_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_376
.LBB85_389:                             # %for.end2082
                                        #   in Loop: Header=BB85_374 Depth=4
	jmp	.LBB85_390
.LBB85_390:                             # %for.inc2083
                                        #   in Loop: Header=BB85_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_374
.LBB85_391:                             # %for.end2085
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_392
.LBB85_392:                             # %if.end2086
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_393
.LBB85_393:                             # %if.end2087
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB85_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB85_399
.LBB85_395:                             # %if.else2106
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB85_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB85_398
.LBB85_397:                             # %if.else2131
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB85_398:                             # %if.end2132
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_399
.LBB85_399:                             # %if.end2133
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB85_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB85_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB85_402:                             # %if.end2143
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_403
.LBB85_403:                             # %for.inc2144
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_184
.LBB85_404:                             # %for.end2146
                                        #   in Loop: Header=BB85_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB85_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB85_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB85_407:                             # %if.end2155
                                        #   in Loop: Header=BB85_181 Depth=2
	jmp	.LBB85_408
.LBB85_408:                             # %if.end2156
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB85_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -320(%rbp)
.LBB85_410:                             # %if.end2161
                                        #   in Loop: Header=BB85_181 Depth=2
	jmp	.LBB85_411
.LBB85_411:                             # %if.end2162
                                        #   in Loop: Header=BB85_181 Depth=2
	jmp	.LBB85_412
.LBB85_412:                             # %for.inc2163
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB85_181
.LBB85_413:                             # %for.end2165
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB85_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB85_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB85_416:                             # %for.cond2172
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_418 Depth 3
                                        #         Child Loop BB85_445 Depth 4
                                        #         Child Loop BB85_464 Depth 4
                                        #           Child Loop BB85_466 Depth 5
                                        #         Child Loop BB85_473 Depth 4
                                        #         Child Loop BB85_508 Depth 4
                                        #           Child Loop BB85_510 Depth 5
                                        #         Child Loop BB85_532 Depth 4
                                        #           Child Loop BB85_534 Depth 5
                                        #             Child Loop BB85_536 Depth 6
                                        #         Child Loop BB85_544 Depth 4
                                        #           Child Loop BB85_546 Depth 5
                                        #       Child Loop BB85_569 Depth 3
                                        #         Child Loop BB85_571 Depth 4
                                        #           Child Loop BB85_573 Depth 5
                                        #       Child Loop BB85_581 Depth 3
                                        #         Child Loop BB85_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB85_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB85_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB85_418:                             # %for.cond2184
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_445 Depth 4
                                        #         Child Loop BB85_464 Depth 4
                                        #           Child Loop BB85_466 Depth 5
                                        #         Child Loop BB85_473 Depth 4
                                        #         Child Loop BB85_508 Depth 4
                                        #           Child Loop BB85_510 Depth 5
                                        #         Child Loop BB85_532 Depth 4
                                        #           Child Loop BB85_534 Depth 5
                                        #             Child Loop BB85_536 Depth 6
                                        #         Child Loop BB85_544 Depth 4
                                        #           Child Loop BB85_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB85_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB85_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_423
.LBB85_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_557
.LBB85_423:                             # %if.then2201
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB85_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$0, -212(%rbp)
	movl	$0, -224(%rbp)
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -212(%rbp)
	cmpl	$2147483647, -212(%rbp) # imm = 0x7FFFFFFF
	je	.LBB85_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB85_428
.LBB85_427:                             # %if.then2214
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB85_429
.LBB85_428:                             # %if.else2215
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-212(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-224(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB85_429:                             # %if.end2218
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB85_431
	jmp	.LBB85_430
.LBB85_430:                             # %if.end2218
                                        #   in Loop: Header=BB85_418 Depth=3
	subl	$2, %eax
	je	.LBB85_438
	jmp	.LBB85_439
.LBB85_431:                             # %sw.bb
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-224(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jl	.LBB85_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB85_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB85_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB85_436
.LBB85_435:                             # %if.then2231
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_437
.LBB85_436:                             # %if.else2232
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_437:                             # %if.end2233
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_440
.LBB85_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_440
.LBB85_439:                             # %sw.default
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_440:                             # %sw.epilog
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB85_442:                             # %if.end2240
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB85_443:                             # %if.end2242
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB85_518
.LBB85_444:                             # %if.else2278
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB85_445:                             # %for.cond2279
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB85_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB85_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB85_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB85_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB85_461
.LBB85_449:                             # %if.then2296
                                        #   in Loop: Header=BB85_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB85_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_453
.LBB85_452:                             # %cond.false2306
                                        #   in Loop: Header=BB85_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_453:                             # %cond.end2309
                                        #   in Loop: Header=BB85_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_458
.LBB85_454:                             # %cond.false2313
                                        #   in Loop: Header=BB85_445 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB85_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_457
.LBB85_456:                             # %cond.false2320
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	$1, %eax
	jmp	.LBB85_457
.LBB85_457:                             # %cond.end2321
                                        #   in Loop: Header=BB85_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_458:                             # %cond.end2326
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB85_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB85_460:                             # %if.end2339
                                        #   in Loop: Header=BB85_445 Depth=4
	jmp	.LBB85_461
.LBB85_461:                             # %if.end2340
                                        #   in Loop: Header=BB85_445 Depth=4
	jmp	.LBB85_462
.LBB85_462:                             # %for.inc2341
                                        #   in Loop: Header=BB85_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_445
.LBB85_463:                             # %for.end2343
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$0, -24(%rbp)
.LBB85_464:                             # %for.cond2344
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB85_464 Depth=4
	movl	$0, -20(%rbp)
.LBB85_466:                             # %for.cond2348
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB85_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB85_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_466
.LBB85_469:                             # %for.end2405
                                        #   in Loop: Header=BB85_464 Depth=4
	jmp	.LBB85_470
.LBB85_470:                             # %for.inc2406
                                        #   in Loop: Header=BB85_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_464
.LBB85_471:                             # %for.end2408
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB85_473:                             # %for.cond2411
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB85_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB85_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB85_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_478
.LBB85_477:                             # %cond.false2428
                                        #   in Loop: Header=BB85_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_478:                             # %cond.end2431
                                        #   in Loop: Header=BB85_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_483
.LBB85_479:                             # %cond.false2435
                                        #   in Loop: Header=BB85_473 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB85_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_482
.LBB85_481:                             # %cond.false2442
                                        #   in Loop: Header=BB85_473 Depth=4
	movl	$1, %eax
	jmp	.LBB85_482
.LBB85_482:                             # %cond.end2443
                                        #   in Loop: Header=BB85_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_483:                             # %cond.end2448
                                        #   in Loop: Header=BB85_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB85_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB85_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB85_485:                             # %if.end2461
                                        #   in Loop: Header=BB85_473 Depth=4
	jmp	.LBB85_486
.LBB85_486:                             # %for.inc2462
                                        #   in Loop: Header=BB85_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_473
.LBB85_487:                             # %for.end2464
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB85_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_491
.LBB85_490:                             # %cond.false2474
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_491:                             # %cond.end2477
                                        #   in Loop: Header=BB85_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB85_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_494
.LBB85_493:                             # %cond.false2487
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_494:                             # %cond.end2489
                                        #   in Loop: Header=BB85_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_499
.LBB85_495:                             # %cond.false2494
                                        #   in Loop: Header=BB85_418 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB85_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB85_498
.LBB85_497:                             # %cond.false2501
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$1, %eax
	jmp	.LBB85_498
.LBB85_498:                             # %cond.end2502
                                        #   in Loop: Header=BB85_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_499:                             # %cond.end2507
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB85_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB85_507
.LBB85_502:                             # %if.else2517
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB85_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB85_506
.LBB85_505:                             # %if.else2524
                                        #   in Loop: Header=BB85_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB85_506:                             # %if.end2525
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_507
.LBB85_507:                             # %if.end2526
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$0, -24(%rbp)
.LBB85_508:                             # %for.cond2527
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB85_508 Depth=4
	movl	$0, -20(%rbp)
.LBB85_510:                             # %for.cond2531
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB85_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB85_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_510
.LBB85_513:                             # %for.end2567
                                        #   in Loop: Header=BB85_508 Depth=4
	jmp	.LBB85_514
.LBB85_514:                             # %for.inc2568
                                        #   in Loop: Header=BB85_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_508
.LBB85_515:                             # %for.end2570
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_517
.LBB85_516:                             # %if.else2571
                                        #   in Loop: Header=BB85_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_517:                             # %if.end2572
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_518
.LBB85_518:                             # %if.end2573
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB85_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB85_526
.LBB85_520:                             # %if.else2578
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB85_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB85_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB85_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB85_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_524
.LBB85_523:                             # %cond.false2592
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB85_524:                             # %cond.end2597
                                        #   in Loop: Header=BB85_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB85_525:                             # %if.end2603
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_526
.LBB85_526:                             # %if.end2604
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB85_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB85_530
.LBB85_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB85_556
.LBB85_530:                             # %if.then2616
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB85_532:                             # %for.cond2638
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_534 Depth 5
                                        #             Child Loop BB85_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB85_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB85_532 Depth=4
	movl	$0, -24(%rbp)
.LBB85_534:                             # %for.cond2642
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB85_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB85_534 Depth=5
	movl	$0, -20(%rbp)
.LBB85_536:                             # %for.cond2646
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_532 Depth=4
                                        #           Parent Loop BB85_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB85_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB85_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB85_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_536
.LBB85_539:                             # %for.end2668
                                        #   in Loop: Header=BB85_534 Depth=5
	jmp	.LBB85_540
.LBB85_540:                             # %for.inc2669
                                        #   in Loop: Header=BB85_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_534
.LBB85_541:                             # %for.end2671
                                        #   in Loop: Header=BB85_532 Depth=4
	jmp	.LBB85_542
.LBB85_542:                             # %for.inc2672
                                        #   in Loop: Header=BB85_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_532
.LBB85_543:                             # %for.end2674
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_544:                             # %for.cond2675
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB85_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_546:                             # %for.cond2680
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB85_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB85_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB85_550
.LBB85_549:                             # %if.else2705
                                        #   in Loop: Header=BB85_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB85_550:                             # %if.end2754
                                        #   in Loop: Header=BB85_546 Depth=5
	jmp	.LBB85_551
.LBB85_551:                             # %for.inc2755
                                        #   in Loop: Header=BB85_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_546
.LBB85_552:                             # %for.end2757
                                        #   in Loop: Header=BB85_544 Depth=4
	jmp	.LBB85_553
.LBB85_553:                             # %for.inc2758
                                        #   in Loop: Header=BB85_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_544
.LBB85_554:                             # %for.end2760
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_555
.LBB85_555:                             # %if.end2761
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB85_556:                             # %if.end2762
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB85_557:                             # %if.end2763
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_558
.LBB85_558:                             # %for.inc2764
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB85_418
.LBB85_559:                             # %for.end2766
                                        #   in Loop: Header=BB85_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB85_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB85_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB85_563
.LBB85_562:                             # %cond.true2782
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB85_564
.LBB85_563:                             # %cond.false2783
                                        #   in Loop: Header=BB85_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB85_564
.LBB85_564:                             # %cond.end2784
                                        #   in Loop: Header=BB85_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB85_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB85_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB85_567
.LBB85_566:                             # %cond.true2793
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB85_568
.LBB85_567:                             # %cond.false2794
                                        #   in Loop: Header=BB85_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB85_568
.LBB85_568:                             # %cond.end2795
                                        #   in Loop: Header=BB85_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB85_569:                             # %for.cond2813
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_571 Depth 4
                                        #           Child Loop BB85_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB85_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB85_569 Depth=3
	movl	$0, -24(%rbp)
.LBB85_571:                             # %for.cond2817
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB85_571 Depth=4
	movl	$0, -20(%rbp)
.LBB85_573:                             # %for.cond2821
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_569 Depth=3
                                        #         Parent Loop BB85_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB85_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB85_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB85_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_573
.LBB85_576:                             # %for.end2844
                                        #   in Loop: Header=BB85_571 Depth=4
	jmp	.LBB85_577
.LBB85_577:                             # %for.inc2845
                                        #   in Loop: Header=BB85_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_571
.LBB85_578:                             # %for.end2847
                                        #   in Loop: Header=BB85_569 Depth=3
	jmp	.LBB85_579
.LBB85_579:                             # %for.inc2848
                                        #   in Loop: Header=BB85_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_569
.LBB85_580:                             # %for.end2850
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_581:                             # %for.cond2851
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB85_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_583:                             # %for.cond2856
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB85_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB85_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB85_587
.LBB85_586:                             # %if.else2886
                                        #   in Loop: Header=BB85_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB85_587:                             # %if.end2935
                                        #   in Loop: Header=BB85_583 Depth=4
	jmp	.LBB85_588
.LBB85_588:                             # %for.inc2936
                                        #   in Loop: Header=BB85_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_583
.LBB85_589:                             # %for.end2938
                                        #   in Loop: Header=BB85_581 Depth=3
	jmp	.LBB85_590
.LBB85_590:                             # %for.inc2939
                                        #   in Loop: Header=BB85_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_581
.LBB85_591:                             # %for.end2941
                                        #   in Loop: Header=BB85_416 Depth=2
	jmp	.LBB85_592
.LBB85_592:                             # %if.end2942
                                        #   in Loop: Header=BB85_416 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB85_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB85_594:                             # %if.end2948
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB85_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB85_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB85_596:                             # %if.end2974
                                        #   in Loop: Header=BB85_416 Depth=2
	jmp	.LBB85_597
.LBB85_597:                             # %for.inc2975
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_416
.LBB85_598:                             # %for.end2977
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_599:                             # %if.end2980
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB85_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB85_601:                             # %for.cond2985
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_603 Depth 3
                                        #         Child Loop BB85_614 Depth 4
                                        #         Child Loop BB85_633 Depth 4
                                        #           Child Loop BB85_635 Depth 5
                                        #         Child Loop BB85_642 Depth 4
                                        #         Child Loop BB85_677 Depth 4
                                        #           Child Loop BB85_679 Depth 5
                                        #         Child Loop BB85_701 Depth 4
                                        #           Child Loop BB85_703 Depth 5
                                        #             Child Loop BB85_705 Depth 6
                                        #         Child Loop BB85_713 Depth 4
                                        #           Child Loop BB85_715 Depth 5
                                        #         Child Loop BB85_723 Depth 4
                                        #           Child Loop BB85_725 Depth 5
                                        #       Child Loop BB85_745 Depth 3
                                        #         Child Loop BB85_747 Depth 4
                                        #           Child Loop BB85_749 Depth 5
                                        #       Child Loop BB85_757 Depth 3
                                        #         Child Loop BB85_759 Depth 4
                                        #       Child Loop BB85_766 Depth 3
                                        #         Child Loop BB85_768 Depth 4
                                        #       Child Loop BB85_778 Depth 3
                                        #         Child Loop BB85_780 Depth 4
                                        #       Child Loop BB85_786 Depth 3
                                        #       Child Loop BB85_791 Depth 3
                                        #         Child Loop BB85_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB85_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB85_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB85_603:                             # %for.cond2997
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_614 Depth 4
                                        #         Child Loop BB85_633 Depth 4
                                        #           Child Loop BB85_635 Depth 5
                                        #         Child Loop BB85_642 Depth 4
                                        #         Child Loop BB85_677 Depth 4
                                        #           Child Loop BB85_679 Depth 5
                                        #         Child Loop BB85_701 Depth 4
                                        #           Child Loop BB85_703 Depth 5
                                        #             Child Loop BB85_705 Depth 6
                                        #         Child Loop BB85_713 Depth 4
                                        #           Child Loop BB85_715 Depth 5
                                        #         Child Loop BB85_723 Depth 4
                                        #           Child Loop BB85_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB85_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB85_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB85_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB85_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB85_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB85_610
.LBB85_609:                             # %if.then3019
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB85_611
.LBB85_610:                             # %if.else3020
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB85_611:                             # %if.end3022
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB85_612:                             # %if.end3024
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB85_687
.LBB85_613:                             # %if.else3060
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB85_614:                             # %for.cond3061
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB85_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB85_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB85_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB85_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB85_630
.LBB85_618:                             # %if.then3078
                                        #   in Loop: Header=BB85_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB85_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_622
.LBB85_621:                             # %cond.false3088
                                        #   in Loop: Header=BB85_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_622:                             # %cond.end3091
                                        #   in Loop: Header=BB85_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_627
.LBB85_623:                             # %cond.false3095
                                        #   in Loop: Header=BB85_614 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB85_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_626
.LBB85_625:                             # %cond.false3102
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	$1, %eax
	jmp	.LBB85_626
.LBB85_626:                             # %cond.end3103
                                        #   in Loop: Header=BB85_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_627:                             # %cond.end3108
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB85_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB85_629:                             # %if.end3121
                                        #   in Loop: Header=BB85_614 Depth=4
	jmp	.LBB85_630
.LBB85_630:                             # %if.end3122
                                        #   in Loop: Header=BB85_614 Depth=4
	jmp	.LBB85_631
.LBB85_631:                             # %for.inc3123
                                        #   in Loop: Header=BB85_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_614
.LBB85_632:                             # %for.end3125
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	$0, -24(%rbp)
.LBB85_633:                             # %for.cond3126
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB85_633 Depth=4
	movl	$0, -20(%rbp)
.LBB85_635:                             # %for.cond3130
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB85_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB85_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_635
.LBB85_638:                             # %for.end3187
                                        #   in Loop: Header=BB85_633 Depth=4
	jmp	.LBB85_639
.LBB85_639:                             # %for.inc3188
                                        #   in Loop: Header=BB85_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_633
.LBB85_640:                             # %for.end3190
                                        #   in Loop: Header=BB85_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB85_642:                             # %for.cond3193
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB85_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB85_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB85_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_647
.LBB85_646:                             # %cond.false3210
                                        #   in Loop: Header=BB85_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_647:                             # %cond.end3213
                                        #   in Loop: Header=BB85_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_652
.LBB85_648:                             # %cond.false3217
                                        #   in Loop: Header=BB85_642 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB85_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_651
.LBB85_650:                             # %cond.false3224
                                        #   in Loop: Header=BB85_642 Depth=4
	movl	$1, %eax
	jmp	.LBB85_651
.LBB85_651:                             # %cond.end3225
                                        #   in Loop: Header=BB85_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_652:                             # %cond.end3230
                                        #   in Loop: Header=BB85_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB85_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB85_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB85_654:                             # %if.end3243
                                        #   in Loop: Header=BB85_642 Depth=4
	jmp	.LBB85_655
.LBB85_655:                             # %for.inc3244
                                        #   in Loop: Header=BB85_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_642
.LBB85_656:                             # %for.end3246
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB85_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_660
.LBB85_659:                             # %cond.false3256
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_660:                             # %cond.end3259
                                        #   in Loop: Header=BB85_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB85_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_663
.LBB85_662:                             # %cond.false3269
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_663:                             # %cond.end3271
                                        #   in Loop: Header=BB85_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_668
.LBB85_664:                             # %cond.false3276
                                        #   in Loop: Header=BB85_603 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB85_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB85_667
.LBB85_666:                             # %cond.false3283
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	$1, %eax
	jmp	.LBB85_667
.LBB85_667:                             # %cond.end3284
                                        #   in Loop: Header=BB85_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_668:                             # %cond.end3289
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB85_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB85_676
.LBB85_671:                             # %if.else3299
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB85_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB85_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB85_675
.LBB85_674:                             # %if.else3306
                                        #   in Loop: Header=BB85_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB85_675:                             # %if.end3307
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_676
.LBB85_676:                             # %if.end3308
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	$0, -24(%rbp)
.LBB85_677:                             # %for.cond3309
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB85_677 Depth=4
	movl	$0, -20(%rbp)
.LBB85_679:                             # %for.cond3313
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB85_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB85_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_679
.LBB85_682:                             # %for.end3349
                                        #   in Loop: Header=BB85_677 Depth=4
	jmp	.LBB85_683
.LBB85_683:                             # %for.inc3350
                                        #   in Loop: Header=BB85_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_677
.LBB85_684:                             # %for.end3352
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_686
.LBB85_685:                             # %if.else3353
                                        #   in Loop: Header=BB85_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_686:                             # %if.end3354
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_687
.LBB85_687:                             # %if.end3355
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB85_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB85_695
.LBB85_689:                             # %if.else3360
                                        #   in Loop: Header=BB85_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB85_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB85_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB85_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB85_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_693
.LBB85_692:                             # %cond.false3374
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB85_693:                             # %cond.end3379
                                        #   in Loop: Header=BB85_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB85_694:                             # %if.end3385
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_695
.LBB85_695:                             # %if.end3386
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB85_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB85_699
.LBB85_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB85_732
.LBB85_699:                             # %if.then3398
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB85_701:                             # %for.cond3422
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_703 Depth 5
                                        #             Child Loop BB85_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB85_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB85_701 Depth=4
	movl	$0, -24(%rbp)
.LBB85_703:                             # %for.cond3426
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB85_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB85_703 Depth=5
	movl	$0, -20(%rbp)
.LBB85_705:                             # %for.cond3430
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_701 Depth=4
                                        #           Parent Loop BB85_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB85_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB85_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB85_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_705
.LBB85_708:                             # %for.end3453
                                        #   in Loop: Header=BB85_703 Depth=5
	jmp	.LBB85_709
.LBB85_709:                             # %for.inc3454
                                        #   in Loop: Header=BB85_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_703
.LBB85_710:                             # %for.end3456
                                        #   in Loop: Header=BB85_701 Depth=4
	jmp	.LBB85_711
.LBB85_711:                             # %for.inc3457
                                        #   in Loop: Header=BB85_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_701
.LBB85_712:                             # %for.end3459
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_713:                             # %for.cond3460
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB85_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_715:                             # %for.cond3465
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB85_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB85_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_715
.LBB85_718:                             # %for.end3494
                                        #   in Loop: Header=BB85_713 Depth=4
	jmp	.LBB85_719
.LBB85_719:                             # %for.inc3495
                                        #   in Loop: Header=BB85_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_713
.LBB85_720:                             # %for.end3497
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_721
.LBB85_721:                             # %if.end3498
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_723:                             # %for.cond3502
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB85_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_725:                             # %for.cond3507
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB85_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB85_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_725
.LBB85_728:                             # %for.end3562
                                        #   in Loop: Header=BB85_723 Depth=4
	jmp	.LBB85_729
.LBB85_729:                             # %for.inc3563
                                        #   in Loop: Header=BB85_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_723
.LBB85_730:                             # %for.end3565
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_731
.LBB85_731:                             # %if.end3566
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB85_732:                             # %if.end3567
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB85_733:                             # %if.end3568
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_734
.LBB85_734:                             # %for.inc3569
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB85_603
.LBB85_735:                             # %for.end3571
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB85_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB85_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB85_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB85_739
.LBB85_738:                             # %cond.true3588
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB85_740
.LBB85_739:                             # %cond.false3589
                                        #   in Loop: Header=BB85_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB85_740
.LBB85_740:                             # %cond.end3590
                                        #   in Loop: Header=BB85_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB85_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB85_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB85_743
.LBB85_742:                             # %cond.true3599
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB85_744
.LBB85_743:                             # %cond.false3600
                                        #   in Loop: Header=BB85_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB85_744
.LBB85_744:                             # %cond.end3601
                                        #   in Loop: Header=BB85_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB85_745:                             # %for.cond3619
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_747 Depth 4
                                        #           Child Loop BB85_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB85_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB85_745 Depth=3
	movl	$0, -24(%rbp)
.LBB85_747:                             # %for.cond3623
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB85_747 Depth=4
	movl	$0, -20(%rbp)
.LBB85_749:                             # %for.cond3627
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_745 Depth=3
                                        #         Parent Loop BB85_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB85_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB85_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB85_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_749
.LBB85_752:                             # %for.end3650
                                        #   in Loop: Header=BB85_747 Depth=4
	jmp	.LBB85_753
.LBB85_753:                             # %for.inc3651
                                        #   in Loop: Header=BB85_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_747
.LBB85_754:                             # %for.end3653
                                        #   in Loop: Header=BB85_745 Depth=3
	jmp	.LBB85_755
.LBB85_755:                             # %for.inc3654
                                        #   in Loop: Header=BB85_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_745
.LBB85_756:                             # %for.end3656
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_757:                             # %for.cond3657
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB85_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_759:                             # %for.cond3662
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB85_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB85_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_759
.LBB85_762:                             # %for.end3691
                                        #   in Loop: Header=BB85_757 Depth=3
	jmp	.LBB85_763
.LBB85_763:                             # %for.inc3692
                                        #   in Loop: Header=BB85_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_757
.LBB85_764:                             # %for.end3694
                                        #   in Loop: Header=BB85_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_766:                             # %for.cond3698
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB85_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_768:                             # %for.cond3703
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB85_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB85_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_768
.LBB85_771:                             # %for.end3758
                                        #   in Loop: Header=BB85_766 Depth=3
	jmp	.LBB85_772
.LBB85_772:                             # %for.inc3759
                                        #   in Loop: Header=BB85_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_766
.LBB85_773:                             # %for.end3761
                                        #   in Loop: Header=BB85_601 Depth=2
	jmp	.LBB85_774
.LBB85_774:                             # %if.end3762
                                        #   in Loop: Header=BB85_601 Depth=2
	jmp	.LBB85_775
.LBB85_775:                             # %if.end3763
                                        #   in Loop: Header=BB85_601 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB85_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB85_777:                             # %if.end3769
                                        #   in Loop: Header=BB85_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_778:                             # %for.cond3781
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB85_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_780:                             # %for.cond3786
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB85_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB85_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_780
.LBB85_783:                             # %for.end3797
                                        #   in Loop: Header=BB85_778 Depth=3
	jmp	.LBB85_784
.LBB85_784:                             # %for.inc3798
                                        #   in Loop: Header=BB85_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_778
.LBB85_785:                             # %for.end3800
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_786:                             # %for.cond3802
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB85_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB85_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_786
.LBB85_789:                             # %for.end3811
                                        #   in Loop: Header=BB85_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB85_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_791:                             # %for.cond3819
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB85_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_793:                             # %for.cond3824
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB85_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB85_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_793
.LBB85_796:                             # %for.end3844
                                        #   in Loop: Header=BB85_791 Depth=3
	jmp	.LBB85_797
.LBB85_797:                             # %for.inc3845
                                        #   in Loop: Header=BB85_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_791
.LBB85_798:                             # %for.end3847
                                        #   in Loop: Header=BB85_601 Depth=2
	jmp	.LBB85_799
.LBB85_799:                             # %if.end3848
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_601
.LBB85_801:                             # %for.end3860
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_802
.LBB85_802:                             # %if.end3861
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB85_803:                             # %for.cond3862
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB85_803 Depth=2
	movl	$0, -24(%rbp)
.LBB85_805:                             # %for.cond3866
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB85_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB85_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_805
.LBB85_808:                             # %for.end3890
                                        #   in Loop: Header=BB85_803 Depth=2
	jmp	.LBB85_809
.LBB85_809:                             # %for.inc3891
                                        #   in Loop: Header=BB85_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_803
.LBB85_810:                             # %for.end3893
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB85_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB85_825
.LBB85_813:                             # %if.then3902
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB85_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB85_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_822
.LBB85_816:                             # %if.else3910
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB85_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB85_821
.LBB85_818:                             # %if.else3915
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB85_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_820:                             # %if.end3922
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_821
.LBB85_821:                             # %if.end3923
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_822
.LBB85_822:                             # %if.end3924
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_824
.LBB85_823:                             # %if.else3925
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_824:                             # %if.end3927
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_825
.LBB85_825:                             # %if.end3928
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_827
.LBB85_826:                             # %if.else3929
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB85_827:                             # %if.end3930
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_830
.LBB85_829:                             # %if.then3938
                                        #   in Loop: Header=BB85_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB85_830:                             # %if.end3939
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_832
.LBB85_831:                             # %if.else3940
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB85_832:                             # %if.end3941
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB85_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB85_171 Depth=1
	leaq	-276(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-304(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB85_835:                             # %for.cond3949
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_853 Depth 3
                                        #         Child Loop BB85_908 Depth 4
                                        #           Child Loop BB85_911 Depth 5
                                        #             Child Loop BB85_913 Depth 6
                                        #           Child Loop BB85_920 Depth 5
                                        #             Child Loop BB85_922 Depth 6
                                        #         Child Loop BB85_955 Depth 4
                                        #           Child Loop BB85_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB85_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB85_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB85_846
.LBB85_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB85_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB85_846
.LBB85_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB85_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB85_846
.LBB85_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB85_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB85_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB85_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -304(%rbp)
	jne	.LBB85_847
.LBB85_846:                             # %if.then3982
                                        #   in Loop: Header=BB85_835 Depth=2
	jmp	.LBB85_976
.LBB85_847:                             # %if.end3983
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB85_835 Depth=2
	movl	$11, -316(%rbp)
	jmp	.LBB85_850
.LBB85_849:                             # %if.else3987
                                        #   in Loop: Header=BB85_835 Depth=2
	movl	$8, -316(%rbp)
.LBB85_850:                             # %if.end3988
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB85_852:                             # %if.end3994
                                        #   in Loop: Header=BB85_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB85_853:                             # %for.cond3995
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_908 Depth 4
                                        #           Child Loop BB85_911 Depth 5
                                        #             Child Loop BB85_913 Depth 6
                                        #           Child Loop BB85_920 Depth 5
                                        #             Child Loop BB85_922 Depth 6
                                        #         Child Loop BB85_955 Depth 4
                                        #           Child Loop BB85_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB85_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB85_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB85_857:                             # %if.end4010
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB85_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB85_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB85_866
.LBB85_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB85_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB85_866
.LBB85_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB85_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB85_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB85_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -304(%rbp)
	jne	.LBB85_867
.LBB85_866:                             # %if.then4032
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_974
.LBB85_867:                             # %if.end4033
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_869
.LBB85_868:                             # %if.else4034
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB85_869:                             # %if.end4037
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB85_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB85_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB85_877:                             # %if.end4066
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_878
.LBB85_878:                             # %if.end4067
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB85_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB85_880:                             # %if.end4072
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB85_881:                             # %if.end4074
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB85_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB85_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB85_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB85_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB85_887:                             # %if.end4092
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_888
.LBB85_888:                             # %if.end4093
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB85_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB85_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_902
.LBB85_893:                             # %if.else4110
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_901
.LBB85_897:                             # %if.else4120
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB85_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB85_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB85_900:                             # %if.end4128
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_901
.LBB85_901:                             # %if.end4129
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_902
.LBB85_902:                             # %if.end4130
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_903
.LBB85_903:                             # %if.end4131
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB85_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB85_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB85_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB85_947
.LBB85_907:                             # %if.then4146
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_908
.LBB85_908:                             # %while.body
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_911 Depth 5
                                        #             Child Loop BB85_913 Depth 6
                                        #           Child Loop BB85_920 Depth 5
                                        #             Child Loop BB85_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB85_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB85_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB85_908 Depth=4
	movl	$0, -20(%rbp)
.LBB85_911:                             # %for.cond4153
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB85_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB85_911 Depth=5
	movl	$0, -24(%rbp)
.LBB85_913:                             # %for.cond4157
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_908 Depth=4
                                        #           Parent Loop BB85_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB85_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB85_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB85_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_913
.LBB85_916:                             # %for.end4182
                                        #   in Loop: Header=BB85_911 Depth=5
	jmp	.LBB85_917
.LBB85_917:                             # %for.inc4183
                                        #   in Loop: Header=BB85_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_911
.LBB85_918:                             # %for.end4185
                                        #   in Loop: Header=BB85_908 Depth=4
	jmp	.LBB85_928
.LBB85_919:                             # %if.else4186
                                        #   in Loop: Header=BB85_908 Depth=4
	movl	$0, -20(%rbp)
.LBB85_920:                             # %for.cond4187
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB85_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB85_920 Depth=5
	movl	$0, -24(%rbp)
.LBB85_922:                             # %for.cond4191
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_908 Depth=4
                                        #           Parent Loop BB85_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB85_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB85_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB85_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_922
.LBB85_925:                             # %for.end4215
                                        #   in Loop: Header=BB85_920 Depth=5
	jmp	.LBB85_926
.LBB85_926:                             # %for.inc4216
                                        #   in Loop: Header=BB85_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_920
.LBB85_927:                             # %for.end4218
                                        #   in Loop: Header=BB85_908 Depth=4
	jmp	.LBB85_928
.LBB85_928:                             # %if.end4219
                                        #   in Loop: Header=BB85_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB85_929:                             # %if.end4220
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB85_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB85_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB85_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB85_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB85_908 Depth=4
	jmp	.LBB85_908
.LBB85_935:                             # %if.else4236
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB85_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB85_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_934
.LBB85_940:                             # %if.else4250
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB85_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB85_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_934
.LBB85_944:                             # %if.else4262
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB85_946
.LBB85_945:                             # %if.else4264
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_946
.LBB85_946:                             # %while.end
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_947
.LBB85_947:                             # %if.end4265
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB85_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB85_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB85_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB85_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB85_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	$0, -20(%rbp)
.LBB85_955:                             # %for.cond4288
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB85_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB85_955 Depth=4
	movl	$0, -24(%rbp)
.LBB85_957:                             # %for.cond4292
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB85_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB85_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB85_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_957
.LBB85_960:                             # %for.end4316
                                        #   in Loop: Header=BB85_955 Depth=4
	jmp	.LBB85_961
.LBB85_961:                             # %for.inc4317
                                        #   in Loop: Header=BB85_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_955
.LBB85_962:                             # %for.end4319
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB85_963:                             # %if.end4320
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_964
.LBB85_964:                             # %if.end4321
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_965
.LBB85_965:                             # %if.end4322
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB85_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB85_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB85_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB85_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB85_972:                             # %if.end4356
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_973
.LBB85_973:                             # %if.end4357
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_974
.LBB85_974:                             # %for.inc4358
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB85_853
.LBB85_975:                             # %for.end4360
                                        #   in Loop: Header=BB85_835 Depth=2
	jmp	.LBB85_976
.LBB85_976:                             # %for.inc4361
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB85_835
.LBB85_977:                             # %for.end4364
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1082
.LBB85_978:                             # %if.else4365
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB85_980:                             # %if.end4371
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB85_981:                             # %for.cond4372
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1014 Depth 3
                                        #         Child Loop BB85_1017 Depth 4
                                        #           Child Loop BB85_1019 Depth 5
                                        #         Child Loop BB85_1026 Depth 4
                                        #           Child Loop BB85_1028 Depth 5
                                        #       Child Loop BB85_1061 Depth 3
                                        #         Child Loop BB85_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB85_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB85_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB85_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB85_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB85_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB85_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB85_990:                             # %if.end4407
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_991
.LBB85_991:                             # %if.end4408
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB85_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB85_993:                             # %if.end4413
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB85_994:                             # %if.end4415
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB85_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB85_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1008
.LBB85_999:                             # %if.else4433
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB85_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB85_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1007
.LBB85_1003:                            # %if.else4443
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB85_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB85_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB85_1006:                            # %if.end4451
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1007
.LBB85_1007:                            # %if.end4452
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1008
.LBB85_1008:                            # %if.end4453
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1009
.LBB85_1009:                            # %if.end4454
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB85_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB85_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB85_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB85_1053
.LBB85_1013:                            # %if.then4470
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1014
.LBB85_1014:                            # %while.body4471
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_1017 Depth 4
                                        #           Child Loop BB85_1019 Depth 5
                                        #         Child Loop BB85_1026 Depth 4
                                        #           Child Loop BB85_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB85_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB85_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB85_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB85_1017:                            # %for.cond4478
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB85_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB85_1019:                            # %for.cond4482
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1014 Depth=3
                                        #         Parent Loop BB85_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB85_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB85_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1019
.LBB85_1022:                            # %for.end4507
                                        #   in Loop: Header=BB85_1017 Depth=4
	jmp	.LBB85_1023
.LBB85_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB85_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1017
.LBB85_1024:                            # %for.end4510
                                        #   in Loop: Header=BB85_1014 Depth=3
	jmp	.LBB85_1034
.LBB85_1025:                            # %if.else4511
                                        #   in Loop: Header=BB85_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB85_1026:                            # %for.cond4512
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB85_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB85_1028:                            # %for.cond4516
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1014 Depth=3
                                        #         Parent Loop BB85_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB85_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB85_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1028
.LBB85_1031:                            # %for.end4540
                                        #   in Loop: Header=BB85_1026 Depth=4
	jmp	.LBB85_1032
.LBB85_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB85_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1026
.LBB85_1033:                            # %for.end4543
                                        #   in Loop: Header=BB85_1014 Depth=3
	jmp	.LBB85_1034
.LBB85_1034:                            # %if.end4544
                                        #   in Loop: Header=BB85_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB85_1035:                            # %if.end4545
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB85_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB85_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB85_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB85_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB85_1014 Depth=3
	jmp	.LBB85_1014
.LBB85_1041:                            # %if.else4561
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1040
.LBB85_1046:                            # %if.else4575
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB85_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB85_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1040
.LBB85_1050:                            # %if.else4587
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB85_1052
.LBB85_1051:                            # %if.else4589
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1052
.LBB85_1052:                            # %while.end4590
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1053
.LBB85_1053:                            # %if.end4591
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB85_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB85_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB85_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB85_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB85_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB85_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB85_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1061:                            # %for.cond4615
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB85_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB85_1063:                            # %for.cond4619
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB85_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB85_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1063
.LBB85_1066:                            # %for.end4643
                                        #   in Loop: Header=BB85_1061 Depth=3
	jmp	.LBB85_1067
.LBB85_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB85_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1061
.LBB85_1068:                            # %for.end4646
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB85_1069:                            # %if.end4647
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1070
.LBB85_1070:                            # %if.end4648
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1071
.LBB85_1071:                            # %if.end4649
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB85_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB85_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB85_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB85_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB85_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB85_1078:                            # %if.end4683
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1079
.LBB85_1079:                            # %if.end4684
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1080
.LBB85_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB85_981
.LBB85_1081:                            # %for.end4687
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1082
.LBB85_1082:                            # %if.end4688
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1284
.LBB85_1083:                            # %if.else4689
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -308(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB85_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB85_1085:                            # %if.end4695
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB85_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB85_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB85_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB85_1090
	jmp	.LBB85_1089
.LBB85_1089:                            # %if.then4702
                                        #   in Loop: Header=BB85_171 Depth=1
	subl	$2, %eax
	je	.LBB85_1097
	jmp	.LBB85_1098
.LBB85_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB85_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB85_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB85_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB85_1095
.LBB85_1094:                            # %if.then4716
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_1096
.LBB85_1095:                            # %if.else4717
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_1096:                            # %if.end4718
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1099
.LBB85_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_1099
.LBB85_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1101
.LBB85_1100:                            # %if.else4722
                                        #   in Loop: Header=BB85_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB85_1101:                            # %if.end4724
                                        #   in Loop: Header=BB85_171 Depth=1
	vmovsd	.LCPI85_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI85_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB85_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB85_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1110
.LBB85_1106:                            # %if.else4743
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB85_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1109
.LBB85_1108:                            # %if.else4748
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1109:                            # %if.end4750
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1110
.LBB85_1110:                            # %if.end4751
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1112
.LBB85_1111:                            # %if.else4752
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1112:                            # %if.end4754
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1113:                            # %for.cond4755
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB85_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1115:                            # %for.cond4759
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB85_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB85_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1115
.LBB85_1118:                            # %for.end4785
                                        #   in Loop: Header=BB85_1113 Depth=2
	jmp	.LBB85_1119
.LBB85_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB85_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1113
.LBB85_1120:                            # %for.end4788
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB85_1122
.LBB85_1121:                            # %if.else4789
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB85_1122:                            # %if.end4792
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1123
.LBB85_1123:                            # %if.end4793
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB85_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB85_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1127:                            # %for.cond4806
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1129 Depth 3
                                        #         Child Loop BB85_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB85_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB85_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1129:                            # %for.cond4810
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB85_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB85_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB85_1131:                            # %for.cond4814
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1127 Depth=2
                                        #       Parent Loop BB85_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB85_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB85_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB85_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB85_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB85_1134:                            # %if.end4826
                                        #   in Loop: Header=BB85_1131 Depth=4
	jmp	.LBB85_1135
.LBB85_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB85_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1131
.LBB85_1136:                            # %for.end4829
                                        #   in Loop: Header=BB85_1129 Depth=3
	jmp	.LBB85_1137
.LBB85_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB85_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1129
.LBB85_1138:                            # %for.end4832
                                        #   in Loop: Header=BB85_1127 Depth=2
	jmp	.LBB85_1139
.LBB85_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB85_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1127
.LBB85_1140:                            # %for.end4835
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB85_1141:                            # %for.cond4840
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB85_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1143:                            # %for.cond4844
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB85_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB85_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1143
.LBB85_1146:                            # %for.end4877
                                        #   in Loop: Header=BB85_1141 Depth=2
	jmp	.LBB85_1147
.LBB85_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB85_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1141
.LBB85_1148:                            # %for.end4880
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1149
.LBB85_1149:                            # %if.end4881
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB85_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB85_1151:                            # %if.end4889
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1152:                            # %for.cond4890
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB85_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1154:                            # %for.cond4894
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB85_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB85_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1154
.LBB85_1157:                            # %for.end4913
                                        #   in Loop: Header=BB85_1152 Depth=2
	jmp	.LBB85_1158
.LBB85_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB85_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1152
.LBB85_1159:                            # %for.end4916
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1160:                            # %for.cond4917
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB85_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1162:                            # %for.cond4921
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB85_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB85_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1162
.LBB85_1165:                            # %for.end4947
                                        #   in Loop: Header=BB85_1160 Depth=2
	jmp	.LBB85_1166
.LBB85_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB85_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1160
.LBB85_1167:                            # %for.end4950
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB85_1169
.LBB85_1168:                            # %if.else4952
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB85_1169:                            # %if.end4954
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1170
.LBB85_1170:                            # %if.end4955
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB85_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB85_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1174:                            # %for.cond4968
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1176 Depth 3
                                        #         Child Loop BB85_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB85_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB85_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1176:                            # %for.cond4972
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB85_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB85_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB85_1178:                            # %for.cond4976
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1174 Depth=2
                                        #       Parent Loop BB85_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB85_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB85_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB85_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB85_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB85_1181:                            # %if.end4988
                                        #   in Loop: Header=BB85_1178 Depth=4
	jmp	.LBB85_1182
.LBB85_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB85_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1178
.LBB85_1183:                            # %for.end4991
                                        #   in Loop: Header=BB85_1176 Depth=3
	jmp	.LBB85_1184
.LBB85_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB85_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1176
.LBB85_1185:                            # %for.end4994
                                        #   in Loop: Header=BB85_1174 Depth=2
	jmp	.LBB85_1186
.LBB85_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB85_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1174
.LBB85_1187:                            # %for.end4997
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
.LBB85_1188:                            # %if.end5002
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB85_1189:                            # %for.cond5004
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB85_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1191:                            # %for.cond5008
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB85_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB85_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1191
.LBB85_1194:                            # %for.end5034
                                        #   in Loop: Header=BB85_1189 Depth=2
	jmp	.LBB85_1195
.LBB85_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB85_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1189
.LBB85_1196:                            # %for.end5037
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB85_1198
.LBB85_1197:                            # %if.else5039
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB85_1198:                            # %if.end5043
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1199
.LBB85_1199:                            # %if.end5044
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB85_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB85_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1202:                            # %for.cond5053
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB85_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1204:                            # %for.cond5057
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB85_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB85_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1204
.LBB85_1207:                            # %for.end5084
                                        #   in Loop: Header=BB85_1202 Depth=2
	jmp	.LBB85_1208
.LBB85_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB85_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1202
.LBB85_1209:                            # %for.end5087
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1211:                            # %for.cond5091
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB85_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1213:                            # %for.cond5095
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB85_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -216(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movl	-220(%rbp), %eax
	subl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-216(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB85_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1213
.LBB85_1216:                            # %for.end5194
                                        #   in Loop: Header=BB85_1211 Depth=2
	jmp	.LBB85_1217
.LBB85_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB85_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1211
.LBB85_1218:                            # %for.end5197
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1219
.LBB85_1219:                            # %if.end5198
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1221:                            # %for.cond5204
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB85_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1223:                            # %for.cond5208
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB85_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB85_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1223
.LBB85_1226:                            # %for.end5232
                                        #   in Loop: Header=BB85_1221 Depth=2
	jmp	.LBB85_1227
.LBB85_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB85_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1221
.LBB85_1228:                            # %for.end5235
                                        #   in Loop: Header=BB85_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB85_1229:                            # %for.cond5237
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB85_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1231:                            # %for.cond5241
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB85_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB85_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1231
.LBB85_1234:                            # %for.end5265
                                        #   in Loop: Header=BB85_1229 Depth=2
	jmp	.LBB85_1235
.LBB85_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB85_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1229
.LBB85_1236:                            # %for.end5268
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB85_1237:                            # %for.cond5270
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB85_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1239:                            # %for.cond5274
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB85_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB85_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1239
.LBB85_1242:                            # %for.end5289
                                        #   in Loop: Header=BB85_1237 Depth=2
	jmp	.LBB85_1243
.LBB85_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB85_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1237
.LBB85_1244:                            # %for.end5292
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB85_1245:                            # %for.cond5296
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB85_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1247:                            # %for.cond5300
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -216(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movl	-184(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -220(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-184(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB85_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_1251
.LBB85_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB85_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB85_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB85_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB85_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB85_1257
.LBB85_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	movl	-184(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_1256
.LBB85_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB85_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB85_1247 Depth=3
.LBB85_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-216(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB85_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_1260
.LBB85_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB85_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB85_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB85_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB85_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_1266
.LBB85_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_1265
.LBB85_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-216(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB85_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB85_1247 Depth=3
.LBB85_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB85_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_1269
.LBB85_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB85_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB85_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB85_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB85_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB85_1275
.LBB85_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_1274
.LBB85_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB85_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB85_1247 Depth=3
.LBB85_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB85_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1247
.LBB85_1277:                            # %for.end5546
                                        #   in Loop: Header=BB85_1245 Depth=2
	jmp	.LBB85_1278
.LBB85_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB85_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1245
.LBB85_1279:                            # %for.end5549
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1280
.LBB85_1280:                            # %if.end5550
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1282
.LBB85_1281:                            # %if.else5551
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB85_1282:                            # %if.end5554
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1283
.LBB85_1283:                            # %if.end5555
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1284
.LBB85_1284:                            # %if.end5556
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB85_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB85_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB85_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB85_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -256(%rbp)
.LBB85_1289:                            # %if.end5574
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1290
.LBB85_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB85_171
.LBB85_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB85_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB85_1295
.LBB85_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB85_1299
.LBB85_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB85_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB85_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB85_1298:                            # %if.end5597
	jmp	.LBB85_1299
.LBB85_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB85_1395
.LBB85_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB85_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB85_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB85_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB85_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB85_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB85_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB85_1308:                            # %for.cond5623
                                        #   Parent Loop BB85_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB85_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB85_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1308
.LBB85_1311:                            # %for.end5639
                                        #   in Loop: Header=BB85_1306 Depth=1
	jmp	.LBB85_1312
.LBB85_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB85_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1306
.LBB85_1313:                            # %for.end5642
	jmp	.LBB85_1370
.LBB85_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB85_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB85_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB85_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB85_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1318:                            # %for.cond5651
                                        #   Parent Loop BB85_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB85_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB85_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB85_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1318
.LBB85_1321:                            # %for.end5680
                                        #   in Loop: Header=BB85_1316 Depth=1
	jmp	.LBB85_1322
.LBB85_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB85_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1316
.LBB85_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB85_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB85_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1326:                            # %for.cond5688
                                        #   Parent Loop BB85_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB85_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB85_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1326
.LBB85_1329:                            # %for.end5707
                                        #   in Loop: Header=BB85_1324 Depth=1
	jmp	.LBB85_1330
.LBB85_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB85_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1324
.LBB85_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB85_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB85_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1335:                            # %for.cond5718
                                        #   Parent Loop BB85_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB85_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB85_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1335
.LBB85_1338:                            # %for.end5752
                                        #   in Loop: Header=BB85_1333 Depth=1
	jmp	.LBB85_1339
.LBB85_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB85_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1333
.LBB85_1340:                            # %for.end5755
	jmp	.LBB85_1341
.LBB85_1341:                            # %if.end5756
	jmp	.LBB85_1342
.LBB85_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB85_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB85_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB85_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB85_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB85_1347:                            # %for.cond5772
                                        #   Parent Loop BB85_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB85_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB85_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1347
.LBB85_1350:                            # %for.end5788
                                        #   in Loop: Header=BB85_1345 Depth=1
	jmp	.LBB85_1351
.LBB85_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB85_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1345
.LBB85_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB85_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB85_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB85_1356
# %bb.1355:                             # %if.then5800
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB85_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB85_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB85_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB85_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1362:                            # %for.cond5816
                                        #   Parent Loop BB85_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB85_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB85_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1362
.LBB85_1365:                            # %for.end5842
                                        #   in Loop: Header=BB85_1360 Depth=1
	jmp	.LBB85_1366
.LBB85_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB85_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1360
.LBB85_1367:                            # %for.end5845
	jmp	.LBB85_1368
.LBB85_1368:                            # %if.end5846
	jmp	.LBB85_1369
.LBB85_1369:                            # %if.end5847
	jmp	.LBB85_1370
.LBB85_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB85_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB85_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB85_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB85_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB85_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB85_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB85_1382
.LBB85_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB85_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB85_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB85_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_1392
.LBB85_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB85_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB85_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB85_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB85_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB85_1394:                            # %if.end5973
	jmp	.LBB85_1395
.LBB85_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB85_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB85_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB85_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB85_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB85_1401
.LBB85_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB85_1402
.LBB85_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB85_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB85_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB85_1406
.LBB85_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB85_1406:                            # %if.end6019
	jmp	.LBB85_1407
.LBB85_1407:                            # %if.end6020
	jmp	.LBB85_1408
.LBB85_1408:                            # %if.end6021
	jmp	.LBB85_1409
.LBB85_1409:                            # %if.end6022
	jmp	.LBB85_1410
.LBB85_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB85_1413
.LBB85_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB85_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB85_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB85_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB85_1420
	jmp	.LBB85_1428
.LBB85_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_1428
	jmp	.LBB85_1420
.LBB85_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB85_1420
	jmp	.LBB85_1428
.LBB85_1420:                            # %land.lhs.true6050
	movq	-448(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB85_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB85_1425
	jmp	.LBB85_1428
.LBB85_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_1424
# %bb.1423:                             # %cond.true6058
	movq	-448(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_1428
	jmp	.LBB85_1425
.LBB85_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB85_1425
	jmp	.LBB85_1428
.LBB85_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-280(%rbp), %eax
	je	.LBB85_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB85_1427:                            # %if.end6068
	jmp	.LBB85_1428
.LBB85_1428:                            # %if.end6069
	jmp	.LBB85_1429
.LBB85_1429:                            # %if.end6070
	jmp	.LBB85_1430
.LBB85_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB85_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB85_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB85_1452
.LBB85_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB85_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -256(%rbp)
	jne	.LBB85_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1437:                            # %lor.end6142
.LBB85_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB85_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB85_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB85_1441:                            # %lor.end6166
.LBB85_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB85_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1445:                            # %lor.end6191
.LBB85_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB85_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB85_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB85_1449:                            # %lor.end6216
.LBB85_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB85_1451:                            # %if.end6232
	jmp	.LBB85_1452
.LBB85_1452:                            # %if.end6233
	jmp	.LBB85_1464
.LBB85_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB85_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB85_1463:                            # %if.end6319
	jmp	.LBB85_1464
.LBB85_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB85_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB85_1466:                            # %if.end6327
	cmpl	$416000523, -408(%rbp)  # imm = 0x18CBAA0B
	jne	.LBB85_1468
.LBB85_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_1467
.Lfunc_end85:
	.size	encode_one_macroblock.56, .Lfunc_end85-encode_one_macroblock.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.57
.LCPI86_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI86_1:
	.quad	4622945017495814144     # double 12
.LCPI86_2:
	.quad	4607182418800017408     # double 1
.LCPI86_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI86_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI86_5:
	.quad	4611686018427387904     # double 2
.LCPI86_6:
	.quad	4613937818241073152     # double 3
.LCPI86_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI86_8:
	.quad	4616189618054758400     # double 4
.LCPI86_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI86_10:
	.quad	4618441417868443648     # double 6
.LCPI86_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI86_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI86_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI86_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI86_15:
	.quad	4602678819172646912     # double 0.5
.LCPI86_16:
	.quad	4679240012837945344     # double 65536
.LCPI86_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI86_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.57
	.p2align	4, 0x90
	.type	encode_one_macroblock.57,@function
encode_one_macroblock.57:               # @encode_one_macroblock.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$580197076, -404(%rbp)  # imm = 0x22951AD4
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -184(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -300(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB86_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB86_4
.LBB86_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB86_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB86_5
.LBB86_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB86_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -312(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -408(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB86_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB86_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB86_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB86_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB86_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB86_11:                              # %land.end
.LBB86_12:                              # %lor.end36
.LBB86_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -320(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB86_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB86_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB86_17:                              # %lor.end51
.LBB86_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -288(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB86_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB86_21
.LBB86_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB86_21
.LBB86_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB86_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB86_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -280(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -280(%rbp)
	je	.LBB86_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB86_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB86_27
.LBB86_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB86_27:                              # %if.end
	jmp	.LBB86_29
.LBB86_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB86_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB86_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB86_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB86_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB86_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB86_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB86_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB86_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB86_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB86_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB86_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB86_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB86_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB86_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB86_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB86_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB86_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB86_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB86_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB86_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB86_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB86_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB86_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-408(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB86_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB86_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB86_53 Depth=1
	movl	$0, -56(%rbp)
.LBB86_55:                              # %for.cond156
                                        #   Parent Loop BB86_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB86_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB86_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB86_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB86_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB86_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB86_59:                              # %if.end183
                                        #   in Loop: Header=BB86_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB86_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB86_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB86_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB86_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB86_62:                              # %if.end202
                                        #   in Loop: Header=BB86_55 Depth=2
	jmp	.LBB86_63
.LBB86_63:                              # %for.inc
                                        #   in Loop: Header=BB86_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_55
.LBB86_64:                              # %for.end
                                        #   in Loop: Header=BB86_53 Depth=1
	jmp	.LBB86_65
.LBB86_65:                              # %for.inc203
                                        #   in Loop: Header=BB86_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB86_53
.LBB86_66:                              # %for.end205
	jmp	.LBB86_93
.LBB86_67:                              # %if.else206
	cmpl	$0, -280(%rbp)
	je	.LBB86_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB86_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB86_69 Depth=1
	movl	$0, -56(%rbp)
.LBB86_71:                              # %for.cond215
                                        #   Parent Loop BB86_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB86_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB86_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB86_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB86_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB86_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB86_75:                              # %if.end244
                                        #   in Loop: Header=BB86_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB86_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB86_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB86_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB86_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB86_78:                              # %if.end263
                                        #   in Loop: Header=BB86_71 Depth=2
	jmp	.LBB86_79
.LBB86_79:                              # %for.inc264
                                        #   in Loop: Header=BB86_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_71
.LBB86_80:                              # %for.end266
                                        #   in Loop: Header=BB86_69 Depth=1
	jmp	.LBB86_81
.LBB86_81:                              # %for.inc267
                                        #   in Loop: Header=BB86_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB86_69
.LBB86_82:                              # %for.end269
	jmp	.LBB86_92
.LBB86_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB86_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB86_84 Depth=1
	movl	$0, -56(%rbp)
.LBB86_86:                              # %for.cond277
                                        #   Parent Loop BB86_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB86_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB86_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_86
.LBB86_89:                              # %for.end290
                                        #   in Loop: Header=BB86_84 Depth=1
	jmp	.LBB86_90
.LBB86_90:                              # %for.inc291
                                        #   in Loop: Header=BB86_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB86_84
.LBB86_91:                              # %for.end293
	jmp	.LBB86_92
.LBB86_92:                              # %if.end294
	jmp	.LBB86_93
.LBB86_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI86_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB86_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB86_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB86_99
.LBB86_98:                              # %if.else315
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB86_99:                              # %if.end326
	jmp	.LBB86_159
.LBB86_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB86_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI86_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB86_104
.LBB86_103:                             # %cond.false336
	vmovsd	.LCPI86_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB86_104:                             # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB86_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI86_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB86_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI86_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI86_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI86_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_109
.LBB86_108:                             # %cond.false357
	vmovsd	.LCPI86_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB86_109:                             # %cond.end359
	vmovsd	.LCPI86_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI86_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_115
.LBB86_111:                             # %cond.false364
	vmovsd	.LCPI86_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI86_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI86_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_114
.LBB86_113:                             # %cond.false369
	vmovsd	.LCPI86_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB86_114:                             # %cond.end371
.LBB86_115:                             # %cond.end373
	jmp	.LBB86_129
.LBB86_116:                             # %cond.false375
	cmpl	$0, -312(%rbp)
	je	.LBB86_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_120
.LBB86_119:                             # %cond.false382
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB86_120:                             # %cond.end384
	vmovsd	.LCPI86_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI86_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_126
.LBB86_122:                             # %cond.false389
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_125
.LBB86_124:                             # %cond.false394
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB86_125:                             # %cond.end396
.LBB86_126:                             # %cond.end398
	jmp	.LBB86_128
.LBB86_127:                             # %cond.false400
	vmovsd	.LCPI86_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_128
.LBB86_128:                             # %cond.end401
.LBB86_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB86_146
.LBB86_130:                             # %if.else406
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI86_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB86_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI86_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_145
.LBB86_132:                             # %cond.false415
	cmpl	$0, -312(%rbp)
	je	.LBB86_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_136
.LBB86_135:                             # %cond.false422
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB86_136:                             # %cond.end424
	vmovsd	.LCPI86_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI86_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_142
.LBB86_138:                             # %cond.false429
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB86_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI86_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_141
.LBB86_140:                             # %cond.false434
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB86_141:                             # %cond.end436
.LBB86_142:                             # %cond.end438
	jmp	.LBB86_144
.LBB86_143:                             # %cond.false440
	vmovsd	.LCPI86_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB86_144
.LBB86_144:                             # %cond.end441
.LBB86_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB86_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB86_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB86_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI86_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI86_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI86_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB86_152
.LBB86_151:                             # %cond.false465
	vmovsd	.LCPI86_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB86_152:                             # %cond.end473
	vmovsd	.LCPI86_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB86_153:                             # %if.end477
	jmp	.LBB86_158
.LBB86_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB86_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI86_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB86_157:                             # %if.end487
	jmp	.LBB86_158
.LBB86_158:                             # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB86_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB86_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI86_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB86_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB86_166
.LBB86_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB86_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB86_165
.LBB86_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB86_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB86_166:                             # %if.end510
	vmovsd	.LCPI86_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI86_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB86_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB86_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB86_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB86_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB86_167
.LBB86_170:                             # %for.end522
	movl	$0, -252(%rbp)
.LBB86_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_181 Depth 2
                                        #       Child Loop BB86_184 Depth 3
                                        #         Child Loop BB86_190 Depth 4
                                        #         Child Loop BB86_210 Depth 4
                                        #         Child Loop BB86_300 Depth 4
                                        #           Child Loop BB86_302 Depth 5
                                        #         Child Loop BB86_309 Depth 4
                                        #           Child Loop BB86_311 Depth 5
                                        #         Child Loop BB86_326 Depth 4
                                        #           Child Loop BB86_328 Depth 5
                                        #         Child Loop BB86_335 Depth 4
                                        #           Child Loop BB86_337 Depth 5
                                        #         Child Loop BB86_355 Depth 4
                                        #           Child Loop BB86_357 Depth 5
                                        #         Child Loop BB86_374 Depth 4
                                        #           Child Loop BB86_376 Depth 5
                                        #     Child Loop BB86_416 Depth 2
                                        #       Child Loop BB86_418 Depth 3
                                        #         Child Loop BB86_445 Depth 4
                                        #         Child Loop BB86_464 Depth 4
                                        #           Child Loop BB86_466 Depth 5
                                        #         Child Loop BB86_473 Depth 4
                                        #         Child Loop BB86_508 Depth 4
                                        #           Child Loop BB86_510 Depth 5
                                        #         Child Loop BB86_532 Depth 4
                                        #           Child Loop BB86_534 Depth 5
                                        #             Child Loop BB86_536 Depth 6
                                        #         Child Loop BB86_544 Depth 4
                                        #           Child Loop BB86_546 Depth 5
                                        #       Child Loop BB86_569 Depth 3
                                        #         Child Loop BB86_571 Depth 4
                                        #           Child Loop BB86_573 Depth 5
                                        #       Child Loop BB86_581 Depth 3
                                        #         Child Loop BB86_583 Depth 4
                                        #     Child Loop BB86_601 Depth 2
                                        #       Child Loop BB86_603 Depth 3
                                        #         Child Loop BB86_614 Depth 4
                                        #         Child Loop BB86_633 Depth 4
                                        #           Child Loop BB86_635 Depth 5
                                        #         Child Loop BB86_642 Depth 4
                                        #         Child Loop BB86_677 Depth 4
                                        #           Child Loop BB86_679 Depth 5
                                        #         Child Loop BB86_701 Depth 4
                                        #           Child Loop BB86_703 Depth 5
                                        #             Child Loop BB86_705 Depth 6
                                        #         Child Loop BB86_713 Depth 4
                                        #           Child Loop BB86_715 Depth 5
                                        #         Child Loop BB86_723 Depth 4
                                        #           Child Loop BB86_725 Depth 5
                                        #       Child Loop BB86_745 Depth 3
                                        #         Child Loop BB86_747 Depth 4
                                        #           Child Loop BB86_749 Depth 5
                                        #       Child Loop BB86_757 Depth 3
                                        #         Child Loop BB86_759 Depth 4
                                        #       Child Loop BB86_766 Depth 3
                                        #         Child Loop BB86_768 Depth 4
                                        #       Child Loop BB86_778 Depth 3
                                        #         Child Loop BB86_780 Depth 4
                                        #       Child Loop BB86_786 Depth 3
                                        #       Child Loop BB86_791 Depth 3
                                        #         Child Loop BB86_793 Depth 4
                                        #     Child Loop BB86_803 Depth 2
                                        #       Child Loop BB86_805 Depth 3
                                        #     Child Loop BB86_835 Depth 2
                                        #       Child Loop BB86_853 Depth 3
                                        #         Child Loop BB86_908 Depth 4
                                        #           Child Loop BB86_911 Depth 5
                                        #             Child Loop BB86_913 Depth 6
                                        #           Child Loop BB86_920 Depth 5
                                        #             Child Loop BB86_922 Depth 6
                                        #         Child Loop BB86_955 Depth 4
                                        #           Child Loop BB86_957 Depth 5
                                        #     Child Loop BB86_981 Depth 2
                                        #       Child Loop BB86_1014 Depth 3
                                        #         Child Loop BB86_1017 Depth 4
                                        #           Child Loop BB86_1019 Depth 5
                                        #         Child Loop BB86_1026 Depth 4
                                        #           Child Loop BB86_1028 Depth 5
                                        #       Child Loop BB86_1061 Depth 3
                                        #         Child Loop BB86_1063 Depth 4
                                        #     Child Loop BB86_1113 Depth 2
                                        #       Child Loop BB86_1115 Depth 3
                                        #     Child Loop BB86_1127 Depth 2
                                        #       Child Loop BB86_1129 Depth 3
                                        #         Child Loop BB86_1131 Depth 4
                                        #     Child Loop BB86_1141 Depth 2
                                        #       Child Loop BB86_1143 Depth 3
                                        #     Child Loop BB86_1152 Depth 2
                                        #       Child Loop BB86_1154 Depth 3
                                        #     Child Loop BB86_1160 Depth 2
                                        #       Child Loop BB86_1162 Depth 3
                                        #     Child Loop BB86_1174 Depth 2
                                        #       Child Loop BB86_1176 Depth 3
                                        #         Child Loop BB86_1178 Depth 4
                                        #     Child Loop BB86_1189 Depth 2
                                        #       Child Loop BB86_1191 Depth 3
                                        #     Child Loop BB86_1202 Depth 2
                                        #       Child Loop BB86_1204 Depth 3
                                        #     Child Loop BB86_1211 Depth 2
                                        #       Child Loop BB86_1213 Depth 3
                                        #     Child Loop BB86_1221 Depth 2
                                        #       Child Loop BB86_1223 Depth 3
                                        #     Child Loop BB86_1229 Depth 2
                                        #       Child Loop BB86_1231 Depth 3
                                        #     Child Loop BB86_1237 Depth 2
                                        #       Child Loop BB86_1239 Depth 3
                                        #     Child Loop BB86_1245 Depth 2
                                        #       Child Loop BB86_1247 Depth 3
	movl	-252(%rbp), %eax
	cmpl	-320(%rbp), %eax
	jge	.LBB86_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$2, -320(%rbp)
	jne	.LBB86_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB86_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB86_176
.LBB86_175:                             # %if.else534
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB86_176:                             # %if.end536
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_177
.LBB86_177:                             # %if.end537
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB86_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB86_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB86_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB86_180:                             # %if.end542
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB86_181:                             # %for.cond543
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_184 Depth 3
                                        #         Child Loop BB86_190 Depth 4
                                        #         Child Loop BB86_210 Depth 4
                                        #         Child Loop BB86_300 Depth 4
                                        #           Child Loop BB86_302 Depth 5
                                        #         Child Loop BB86_309 Depth 4
                                        #           Child Loop BB86_311 Depth 5
                                        #         Child Loop BB86_326 Depth 4
                                        #           Child Loop BB86_328 Depth 5
                                        #         Child Loop BB86_335 Depth 4
                                        #           Child Loop BB86_337 Depth 5
                                        #         Child Loop BB86_355 Depth 4
                                        #           Child Loop BB86_357 Depth 5
                                        #         Child Loop BB86_374 Depth 4
                                        #           Child Loop BB86_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB86_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB86_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB86_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB86_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB86_184:                             # %for.cond554
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_190 Depth 4
                                        #         Child Loop BB86_210 Depth 4
                                        #         Child Loop BB86_300 Depth 4
                                        #           Child Loop BB86_302 Depth 5
                                        #         Child Loop BB86_309 Depth 4
                                        #           Child Loop BB86_311 Depth 5
                                        #         Child Loop BB86_326 Depth 4
                                        #           Child Loop BB86_328 Depth 5
                                        #         Child Loop BB86_335 Depth 4
                                        #           Child Loop BB86_337 Depth 5
                                        #         Child Loop BB86_355 Depth 4
                                        #           Child Loop BB86_357 Depth 5
                                        #         Child Loop BB86_374 Depth 4
                                        #           Child Loop BB86_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB86_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB86_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB86_187:                             # %land.end566
                                        #   in Loop: Header=BB86_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB86_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB86_189:                             # %land.end574
                                        #   in Loop: Header=BB86_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB86_190:                             # %for.cond577
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB86_190 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB86_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB86_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB86_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB86_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB86_206
.LBB86_194:                             # %if.then594
                                        #   in Loop: Header=BB86_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB86_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB86_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_198
.LBB86_197:                             # %cond.false604
                                        #   in Loop: Header=BB86_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_198:                             # %cond.end607
                                        #   in Loop: Header=BB86_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB86_203
.LBB86_199:                             # %cond.false610
                                        #   in Loop: Header=BB86_190 Depth=4
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB86_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB86_202
.LBB86_201:                             # %cond.false617
                                        #   in Loop: Header=BB86_190 Depth=4
	movl	$1, %eax
	jmp	.LBB86_202
.LBB86_202:                             # %cond.end618
                                        #   in Loop: Header=BB86_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_203:                             # %cond.end623
                                        #   in Loop: Header=BB86_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB86_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB86_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB86_205:                             # %if.end636
                                        #   in Loop: Header=BB86_190 Depth=4
	jmp	.LBB86_206
.LBB86_206:                             # %if.end637
                                        #   in Loop: Header=BB86_190 Depth=4
	jmp	.LBB86_207
.LBB86_207:                             # %for.inc638
                                        #   in Loop: Header=BB86_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB86_190
.LBB86_208:                             # %for.end640
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB86_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB86_210:                             # %for.cond643
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB86_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB86_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB86_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_215
.LBB86_214:                             # %cond.false660
                                        #   in Loop: Header=BB86_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_215:                             # %cond.end663
                                        #   in Loop: Header=BB86_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB86_220
.LBB86_216:                             # %cond.false667
                                        #   in Loop: Header=BB86_210 Depth=4
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB86_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB86_219
.LBB86_218:                             # %cond.false674
                                        #   in Loop: Header=BB86_210 Depth=4
	movl	$1, %eax
	jmp	.LBB86_219
.LBB86_219:                             # %cond.end675
                                        #   in Loop: Header=BB86_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_220:                             # %cond.end680
                                        #   in Loop: Header=BB86_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB86_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB86_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB86_222:                             # %if.end693
                                        #   in Loop: Header=BB86_210 Depth=4
	jmp	.LBB86_223
.LBB86_223:                             # %for.inc694
                                        #   in Loop: Header=BB86_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB86_210
.LBB86_224:                             # %for.end696
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB86_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB86_228
.LBB86_227:                             # %cond.false706
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_228:                             # %cond.end709
                                        #   in Loop: Header=BB86_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB86_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB86_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB86_231
.LBB86_230:                             # %cond.false719
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB86_231:                             # %cond.end721
                                        #   in Loop: Header=BB86_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB86_236
.LBB86_232:                             # %cond.false726
                                        #   in Loop: Header=BB86_184 Depth=3
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB86_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB86_235
.LBB86_234:                             # %cond.false733
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	$1, %eax
	jmp	.LBB86_235
.LBB86_235:                             # %cond.end734
                                        #   in Loop: Header=BB86_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_236:                             # %cond.end739
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB86_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB86_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB86_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB86_243
.LBB86_242:                             # %cond.false761
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB86_243:                             # %cond.end763
                                        #   in Loop: Header=BB86_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB86_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB86_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB86_246
.LBB86_245:                             # %cond.false773
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB86_246:                             # %cond.end775
                                        #   in Loop: Header=BB86_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB86_248
.LBB86_247:                             # %cond.false780
                                        #   in Loop: Header=BB86_184 Depth=3
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_248:                             # %cond.end784
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB86_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB86_252
.LBB86_251:                             # %cond.false797
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB86_252:                             # %cond.end799
                                        #   in Loop: Header=BB86_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB86_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB86_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB86_255
.LBB86_254:                             # %cond.false809
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB86_255:                             # %cond.end811
                                        #   in Loop: Header=BB86_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB86_257
.LBB86_256:                             # %cond.false816
                                        #   in Loop: Header=BB86_184 Depth=3
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_257:                             # %cond.end820
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	%eax, -176(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	jmp	.LBB86_259
.LBB86_258:                             # %if.else824
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
.LBB86_259:                             # %if.end825
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB86_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB86_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB86_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB86_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB86_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_285
.LBB86_266:                             # %if.else845
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB86_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB86_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB86_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB86_284
.LBB86_271:                             # %if.else859
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB86_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB86_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB86_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB86_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB86_283
.LBB86_276:                             # %if.else876
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB86_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB86_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jg	.LBB86_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB86_282
.LBB86_281:                             # %if.else893
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-176(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB86_282:                             # %if.end898
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_283
.LBB86_283:                             # %if.end899
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_284
.LBB86_284:                             # %if.end900
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_285
.LBB86_285:                             # %if.end901
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_295
.LBB86_286:                             # %if.else902
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB86_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_294
.LBB86_289:                             # %if.else910
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB86_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB86_293
.LBB86_292:                             # %if.else918
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB86_293:                             # %if.end920
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_294
.LBB86_294:                             # %if.end921
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_295
.LBB86_295:                             # %if.end922
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_297
.LBB86_296:                             # %if.else923
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB86_297:                             # %if.end925
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB86_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB86_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB86_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	$0, -24(%rbp)
.LBB86_300:                             # %for.cond933
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB86_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB86_300 Depth=4
	movl	$0, -20(%rbp)
.LBB86_302:                             # %for.cond937
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        #         Parent Loop BB86_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB86_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB86_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB86_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_302
.LBB86_305:                             # %for.end999
                                        #   in Loop: Header=BB86_300 Depth=4
	jmp	.LBB86_306
.LBB86_306:                             # %for.inc1000
                                        #   in Loop: Header=BB86_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_300
.LBB86_307:                             # %for.end1002
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_323
.LBB86_308:                             # %if.else1003
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	$0, -24(%rbp)
.LBB86_309:                             # %for.cond1004
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB86_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB86_309 Depth=4
	movl	$0, -20(%rbp)
.LBB86_311:                             # %for.cond1008
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        #         Parent Loop BB86_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB86_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB86_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB86_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB86_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB86_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB86_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB86_316
.LBB86_315:                             # %cond.false1024
                                        #   in Loop: Header=BB86_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB86_316:                             # %cond.end1025
                                        #   in Loop: Header=BB86_311 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB86_318
.LBB86_317:                             # %if.else1111
                                        #   in Loop: Header=BB86_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB86_318:                             # %if.end1217
                                        #   in Loop: Header=BB86_311 Depth=5
	jmp	.LBB86_319
.LBB86_319:                             # %for.inc1218
                                        #   in Loop: Header=BB86_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_311
.LBB86_320:                             # %for.end1220
                                        #   in Loop: Header=BB86_309 Depth=4
	jmp	.LBB86_321
.LBB86_321:                             # %for.inc1221
                                        #   in Loop: Header=BB86_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_309
.LBB86_322:                             # %for.end1223
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_323
.LBB86_323:                             # %if.end1224
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB86_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB86_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB86_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	$0, -24(%rbp)
.LBB86_326:                             # %for.cond1231
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB86_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB86_326 Depth=4
	movl	$0, -20(%rbp)
.LBB86_328:                             # %for.cond1235
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        #         Parent Loop BB86_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB86_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB86_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB86_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_328
.LBB86_331:                             # %for.end1303
                                        #   in Loop: Header=BB86_326 Depth=4
	jmp	.LBB86_332
.LBB86_332:                             # %for.inc1304
                                        #   in Loop: Header=BB86_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_326
.LBB86_333:                             # %for.end1306
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_351
.LBB86_334:                             # %if.else1307
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	$0, -24(%rbp)
.LBB86_335:                             # %for.cond1308
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB86_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB86_335 Depth=4
	movl	$0, -20(%rbp)
.LBB86_337:                             # %for.cond1312
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        #         Parent Loop BB86_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB86_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB86_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB86_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB86_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB86_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB86_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB86_342
.LBB86_341:                             # %cond.false1330
                                        #   in Loop: Header=BB86_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB86_342:                             # %cond.end1332
                                        #   in Loop: Header=BB86_337 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB86_346
.LBB86_343:                             # %if.else1419
                                        #   in Loop: Header=BB86_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB86_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB86_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB86_345:                             # %if.end1529
                                        #   in Loop: Header=BB86_337 Depth=5
	jmp	.LBB86_346
.LBB86_346:                             # %if.end1530
                                        #   in Loop: Header=BB86_337 Depth=5
	jmp	.LBB86_347
.LBB86_347:                             # %for.inc1531
                                        #   in Loop: Header=BB86_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_337
.LBB86_348:                             # %for.end1533
                                        #   in Loop: Header=BB86_335 Depth=4
	jmp	.LBB86_349
.LBB86_349:                             # %for.inc1534
                                        #   in Loop: Header=BB86_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_335
.LBB86_350:                             # %for.end1536
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_351
.LBB86_351:                             # %if.end1537
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_352
.LBB86_352:                             # %if.end1538
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_393
.LBB86_353:                             # %if.else1539
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB86_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB86_355:                             # %for.cond1546
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB86_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB86_355 Depth=4
	movl	$0, -20(%rbp)
.LBB86_357:                             # %for.cond1550
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        #         Parent Loop BB86_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB86_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB86_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB86_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB86_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB86_361
.LBB86_360:                             # %if.else1596
                                        #   in Loop: Header=BB86_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB86_361:                             # %if.end1676
                                        #   in Loop: Header=BB86_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB86_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB86_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB86_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB86_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB86_367
.LBB86_364:                             # %if.else1721
                                        #   in Loop: Header=BB86_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB86_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB86_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB86_366:                             # %if.end1805
                                        #   in Loop: Header=BB86_357 Depth=5
	jmp	.LBB86_367
.LBB86_367:                             # %if.end1806
                                        #   in Loop: Header=BB86_357 Depth=5
	jmp	.LBB86_368
.LBB86_368:                             # %if.end1807
                                        #   in Loop: Header=BB86_357 Depth=5
	jmp	.LBB86_369
.LBB86_369:                             # %for.inc1808
                                        #   in Loop: Header=BB86_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_357
.LBB86_370:                             # %for.end1810
                                        #   in Loop: Header=BB86_355 Depth=4
	jmp	.LBB86_371
.LBB86_371:                             # %for.inc1811
                                        #   in Loop: Header=BB86_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_355
.LBB86_372:                             # %for.end1813
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_392
.LBB86_373:                             # %if.else1814
                                        #   in Loop: Header=BB86_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB86_374:                             # %for.cond1818
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB86_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB86_374 Depth=4
	movl	$0, -20(%rbp)
.LBB86_376:                             # %for.cond1822
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_181 Depth=2
                                        #       Parent Loop BB86_184 Depth=3
                                        #         Parent Loop BB86_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB86_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB86_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB86_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB86_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB86_380
.LBB86_379:                             # %if.else1868
                                        #   in Loop: Header=BB86_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB86_380:                             # %if.end1948
                                        #   in Loop: Header=BB86_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB86_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB86_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB86_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB86_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB86_386
.LBB86_383:                             # %if.else1993
                                        #   in Loop: Header=BB86_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB86_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB86_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB86_385:                             # %if.end2077
                                        #   in Loop: Header=BB86_376 Depth=5
	jmp	.LBB86_386
.LBB86_386:                             # %if.end2078
                                        #   in Loop: Header=BB86_376 Depth=5
	jmp	.LBB86_387
.LBB86_387:                             # %if.end2079
                                        #   in Loop: Header=BB86_376 Depth=5
	jmp	.LBB86_388
.LBB86_388:                             # %for.inc2080
                                        #   in Loop: Header=BB86_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_376
.LBB86_389:                             # %for.end2082
                                        #   in Loop: Header=BB86_374 Depth=4
	jmp	.LBB86_390
.LBB86_390:                             # %for.inc2083
                                        #   in Loop: Header=BB86_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_374
.LBB86_391:                             # %for.end2085
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_392
.LBB86_392:                             # %if.end2086
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_393
.LBB86_393:                             # %if.end2087
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB86_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB86_399
.LBB86_395:                             # %if.else2106
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB86_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB86_398
.LBB86_397:                             # %if.else2131
                                        #   in Loop: Header=BB86_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB86_398:                             # %if.end2132
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_399
.LBB86_399:                             # %if.end2133
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB86_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB86_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB86_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB86_402:                             # %if.end2143
                                        #   in Loop: Header=BB86_184 Depth=3
	jmp	.LBB86_403
.LBB86_403:                             # %for.inc2144
                                        #   in Loop: Header=BB86_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_184
.LBB86_404:                             # %for.end2146
                                        #   in Loop: Header=BB86_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB86_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB86_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB86_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB86_407:                             # %if.end2155
                                        #   in Loop: Header=BB86_181 Depth=2
	jmp	.LBB86_408
.LBB86_408:                             # %if.end2156
                                        #   in Loop: Header=BB86_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB86_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB86_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -300(%rbp)
.LBB86_410:                             # %if.end2161
                                        #   in Loop: Header=BB86_181 Depth=2
	jmp	.LBB86_411
.LBB86_411:                             # %if.end2162
                                        #   in Loop: Header=BB86_181 Depth=2
	jmp	.LBB86_412
.LBB86_412:                             # %for.inc2163
                                        #   in Loop: Header=BB86_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB86_181
.LBB86_413:                             # %for.end2165
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB86_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB86_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB86_416:                             # %for.cond2172
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_418 Depth 3
                                        #         Child Loop BB86_445 Depth 4
                                        #         Child Loop BB86_464 Depth 4
                                        #           Child Loop BB86_466 Depth 5
                                        #         Child Loop BB86_473 Depth 4
                                        #         Child Loop BB86_508 Depth 4
                                        #           Child Loop BB86_510 Depth 5
                                        #         Child Loop BB86_532 Depth 4
                                        #           Child Loop BB86_534 Depth 5
                                        #             Child Loop BB86_536 Depth 6
                                        #         Child Loop BB86_544 Depth 4
                                        #           Child Loop BB86_546 Depth 5
                                        #       Child Loop BB86_569 Depth 3
                                        #         Child Loop BB86_571 Depth 4
                                        #           Child Loop BB86_573 Depth 5
                                        #       Child Loop BB86_581 Depth 3
                                        #         Child Loop BB86_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB86_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB86_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB86_418:                             # %for.cond2184
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_445 Depth 4
                                        #         Child Loop BB86_464 Depth 4
                                        #           Child Loop BB86_466 Depth 5
                                        #         Child Loop BB86_473 Depth 4
                                        #         Child Loop BB86_508 Depth 4
                                        #           Child Loop BB86_510 Depth 5
                                        #         Child Loop BB86_532 Depth 4
                                        #           Child Loop BB86_534 Depth 5
                                        #             Child Loop BB86_536 Depth 6
                                        #         Child Loop BB86_544 Depth 4
                                        #           Child Loop BB86_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB86_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB86_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB86_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB86_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB86_423
.LBB86_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB86_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB86_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB86_557
.LBB86_423:                             # %if.then2201
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB86_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	$0, -216(%rbp)
	movl	$0, -212(%rbp)
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -216(%rbp)
	cmpl	$2147483647, -216(%rbp) # imm = 0x7FFFFFFF
	je	.LBB86_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB86_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB86_428
.LBB86_427:                             # %if.then2214
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB86_429
.LBB86_428:                             # %if.else2215
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-216(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-212(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB86_429:                             # %if.end2218
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB86_431
	jmp	.LBB86_430
.LBB86_430:                             # %if.end2218
                                        #   in Loop: Header=BB86_418 Depth=3
	subl	$2, %eax
	je	.LBB86_438
	jmp	.LBB86_439
.LBB86_431:                             # %sw.bb
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-212(%rbp), %eax
	cmpl	-216(%rbp), %eax
	jl	.LBB86_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB86_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB86_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB86_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB86_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB86_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB86_436
.LBB86_435:                             # %if.then2231
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_437
.LBB86_436:                             # %if.else2232
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB86_437:                             # %if.end2233
                                        #   in Loop: Header=BB86_418 Depth=3
	jmp	.LBB86_440
.LBB86_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_440
.LBB86_439:                             # %sw.default
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB86_440:                             # %sw.epilog
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB86_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB86_442:                             # %if.end2240
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB86_443:                             # %if.end2242
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB86_518
.LBB86_444:                             # %if.else2278
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB86_445:                             # %for.cond2279
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB86_445 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB86_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB86_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB86_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB86_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB86_461
.LBB86_449:                             # %if.then2296
                                        #   in Loop: Header=BB86_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB86_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB86_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_453
.LBB86_452:                             # %cond.false2306
                                        #   in Loop: Header=BB86_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_453:                             # %cond.end2309
                                        #   in Loop: Header=BB86_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB86_458
.LBB86_454:                             # %cond.false2313
                                        #   in Loop: Header=BB86_445 Depth=4
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB86_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB86_457
.LBB86_456:                             # %cond.false2320
                                        #   in Loop: Header=BB86_445 Depth=4
	movl	$1, %eax
	jmp	.LBB86_457
.LBB86_457:                             # %cond.end2321
                                        #   in Loop: Header=BB86_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_458:                             # %cond.end2326
                                        #   in Loop: Header=BB86_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB86_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB86_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB86_460:                             # %if.end2339
                                        #   in Loop: Header=BB86_445 Depth=4
	jmp	.LBB86_461
.LBB86_461:                             # %if.end2340
                                        #   in Loop: Header=BB86_445 Depth=4
	jmp	.LBB86_462
.LBB86_462:                             # %for.inc2341
                                        #   in Loop: Header=BB86_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB86_445
.LBB86_463:                             # %for.end2343
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	$0, -24(%rbp)
.LBB86_464:                             # %for.cond2344
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB86_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB86_464 Depth=4
	movl	$0, -20(%rbp)
.LBB86_466:                             # %for.cond2348
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        #         Parent Loop BB86_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB86_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB86_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB86_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_466
.LBB86_469:                             # %for.end2405
                                        #   in Loop: Header=BB86_464 Depth=4
	jmp	.LBB86_470
.LBB86_470:                             # %for.inc2406
                                        #   in Loop: Header=BB86_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_464
.LBB86_471:                             # %for.end2408
                                        #   in Loop: Header=BB86_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB86_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB86_473:                             # %for.cond2411
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB86_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB86_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB86_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_478
.LBB86_477:                             # %cond.false2428
                                        #   in Loop: Header=BB86_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_478:                             # %cond.end2431
                                        #   in Loop: Header=BB86_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB86_483
.LBB86_479:                             # %cond.false2435
                                        #   in Loop: Header=BB86_473 Depth=4
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB86_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB86_482
.LBB86_481:                             # %cond.false2442
                                        #   in Loop: Header=BB86_473 Depth=4
	movl	$1, %eax
	jmp	.LBB86_482
.LBB86_482:                             # %cond.end2443
                                        #   in Loop: Header=BB86_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_483:                             # %cond.end2448
                                        #   in Loop: Header=BB86_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB86_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB86_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB86_485:                             # %if.end2461
                                        #   in Loop: Header=BB86_473 Depth=4
	jmp	.LBB86_486
.LBB86_486:                             # %for.inc2462
                                        #   in Loop: Header=BB86_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB86_473
.LBB86_487:                             # %for.end2464
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB86_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB86_491
.LBB86_490:                             # %cond.false2474
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_491:                             # %cond.end2477
                                        #   in Loop: Header=BB86_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB86_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB86_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB86_494
.LBB86_493:                             # %cond.false2487
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB86_494:                             # %cond.end2489
                                        #   in Loop: Header=BB86_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB86_499
.LBB86_495:                             # %cond.false2494
                                        #   in Loop: Header=BB86_418 Depth=3
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB86_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB86_498
.LBB86_497:                             # %cond.false2501
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	$1, %eax
	jmp	.LBB86_498
.LBB86_498:                             # %cond.end2502
                                        #   in Loop: Header=BB86_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_499:                             # %cond.end2507
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB86_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB86_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB86_507
.LBB86_502:                             # %if.else2517
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB86_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB86_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB86_506
.LBB86_505:                             # %if.else2524
                                        #   in Loop: Header=BB86_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB86_506:                             # %if.end2525
                                        #   in Loop: Header=BB86_418 Depth=3
	jmp	.LBB86_507
.LBB86_507:                             # %if.end2526
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	$0, -24(%rbp)
.LBB86_508:                             # %for.cond2527
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB86_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB86_508 Depth=4
	movl	$0, -20(%rbp)
.LBB86_510:                             # %for.cond2531
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        #         Parent Loop BB86_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB86_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB86_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB86_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_510
.LBB86_513:                             # %for.end2567
                                        #   in Loop: Header=BB86_508 Depth=4
	jmp	.LBB86_514
.LBB86_514:                             # %for.inc2568
                                        #   in Loop: Header=BB86_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_508
.LBB86_515:                             # %for.end2570
                                        #   in Loop: Header=BB86_418 Depth=3
	jmp	.LBB86_517
.LBB86_516:                             # %if.else2571
                                        #   in Loop: Header=BB86_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB86_517:                             # %if.end2572
                                        #   in Loop: Header=BB86_418 Depth=3
	jmp	.LBB86_518
.LBB86_518:                             # %if.end2573
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB86_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB86_526
.LBB86_520:                             # %if.else2578
                                        #   in Loop: Header=BB86_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB86_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB86_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB86_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB86_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB86_524
.LBB86_523:                             # %cond.false2592
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB86_524:                             # %cond.end2597
                                        #   in Loop: Header=BB86_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB86_525:                             # %if.end2603
                                        #   in Loop: Header=BB86_418 Depth=3
	jmp	.LBB86_526
.LBB86_526:                             # %if.end2604
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB86_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB86_530
.LBB86_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB86_556
.LBB86_530:                             # %if.then2616
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB86_532:                             # %for.cond2638
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_534 Depth 5
                                        #             Child Loop BB86_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB86_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB86_532 Depth=4
	movl	$0, -24(%rbp)
.LBB86_534:                             # %for.cond2642
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        #         Parent Loop BB86_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB86_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB86_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB86_534 Depth=5
	movl	$0, -20(%rbp)
.LBB86_536:                             # %for.cond2646
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        #         Parent Loop BB86_532 Depth=4
                                        #           Parent Loop BB86_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB86_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB86_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB86_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_536
.LBB86_539:                             # %for.end2668
                                        #   in Loop: Header=BB86_534 Depth=5
	jmp	.LBB86_540
.LBB86_540:                             # %for.inc2669
                                        #   in Loop: Header=BB86_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_534
.LBB86_541:                             # %for.end2671
                                        #   in Loop: Header=BB86_532 Depth=4
	jmp	.LBB86_542
.LBB86_542:                             # %for.inc2672
                                        #   in Loop: Header=BB86_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_532
.LBB86_543:                             # %for.end2674
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_544:                             # %for.cond2675
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB86_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_546:                             # %for.cond2680
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_418 Depth=3
                                        #         Parent Loop BB86_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB86_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB86_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB86_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB86_550
.LBB86_549:                             # %if.else2705
                                        #   in Loop: Header=BB86_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB86_550:                             # %if.end2754
                                        #   in Loop: Header=BB86_546 Depth=5
	jmp	.LBB86_551
.LBB86_551:                             # %for.inc2755
                                        #   in Loop: Header=BB86_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_546
.LBB86_552:                             # %for.end2757
                                        #   in Loop: Header=BB86_544 Depth=4
	jmp	.LBB86_553
.LBB86_553:                             # %for.inc2758
                                        #   in Loop: Header=BB86_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_544
.LBB86_554:                             # %for.end2760
                                        #   in Loop: Header=BB86_418 Depth=3
	jmp	.LBB86_555
.LBB86_555:                             # %if.end2761
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB86_556:                             # %if.end2762
                                        #   in Loop: Header=BB86_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB86_557:                             # %if.end2763
                                        #   in Loop: Header=BB86_418 Depth=3
	jmp	.LBB86_558
.LBB86_558:                             # %for.inc2764
                                        #   in Loop: Header=BB86_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB86_418
.LBB86_559:                             # %for.end2766
                                        #   in Loop: Header=BB86_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB86_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB86_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB86_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB86_563
.LBB86_562:                             # %cond.true2782
                                        #   in Loop: Header=BB86_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB86_564
.LBB86_563:                             # %cond.false2783
                                        #   in Loop: Header=BB86_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB86_564
.LBB86_564:                             # %cond.end2784
                                        #   in Loop: Header=BB86_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB86_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB86_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB86_567
.LBB86_566:                             # %cond.true2793
                                        #   in Loop: Header=BB86_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB86_568
.LBB86_567:                             # %cond.false2794
                                        #   in Loop: Header=BB86_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB86_568
.LBB86_568:                             # %cond.end2795
                                        #   in Loop: Header=BB86_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB86_569:                             # %for.cond2813
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_571 Depth 4
                                        #           Child Loop BB86_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB86_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB86_569 Depth=3
	movl	$0, -24(%rbp)
.LBB86_571:                             # %for.cond2817
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB86_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB86_571 Depth=4
	movl	$0, -20(%rbp)
.LBB86_573:                             # %for.cond2821
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_569 Depth=3
                                        #         Parent Loop BB86_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB86_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB86_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB86_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_573
.LBB86_576:                             # %for.end2844
                                        #   in Loop: Header=BB86_571 Depth=4
	jmp	.LBB86_577
.LBB86_577:                             # %for.inc2845
                                        #   in Loop: Header=BB86_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_571
.LBB86_578:                             # %for.end2847
                                        #   in Loop: Header=BB86_569 Depth=3
	jmp	.LBB86_579
.LBB86_579:                             # %for.inc2848
                                        #   in Loop: Header=BB86_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_569
.LBB86_580:                             # %for.end2850
                                        #   in Loop: Header=BB86_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_581:                             # %for.cond2851
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB86_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_583:                             # %for.cond2856
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_416 Depth=2
                                        #       Parent Loop BB86_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB86_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB86_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB86_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB86_587
.LBB86_586:                             # %if.else2886
                                        #   in Loop: Header=BB86_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB86_587:                             # %if.end2935
                                        #   in Loop: Header=BB86_583 Depth=4
	jmp	.LBB86_588
.LBB86_588:                             # %for.inc2936
                                        #   in Loop: Header=BB86_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_583
.LBB86_589:                             # %for.end2938
                                        #   in Loop: Header=BB86_581 Depth=3
	jmp	.LBB86_590
.LBB86_590:                             # %for.inc2939
                                        #   in Loop: Header=BB86_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_581
.LBB86_591:                             # %for.end2941
                                        #   in Loop: Header=BB86_416 Depth=2
	jmp	.LBB86_592
.LBB86_592:                             # %if.end2942
                                        #   in Loop: Header=BB86_416 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB86_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB86_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB86_594:                             # %if.end2948
                                        #   in Loop: Header=BB86_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB86_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB86_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB86_596:                             # %if.end2974
                                        #   in Loop: Header=BB86_416 Depth=2
	jmp	.LBB86_597
.LBB86_597:                             # %for.inc2975
                                        #   in Loop: Header=BB86_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_416
.LBB86_598:                             # %for.end2977
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_599:                             # %if.end2980
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB86_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB86_601:                             # %for.cond2985
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_603 Depth 3
                                        #         Child Loop BB86_614 Depth 4
                                        #         Child Loop BB86_633 Depth 4
                                        #           Child Loop BB86_635 Depth 5
                                        #         Child Loop BB86_642 Depth 4
                                        #         Child Loop BB86_677 Depth 4
                                        #           Child Loop BB86_679 Depth 5
                                        #         Child Loop BB86_701 Depth 4
                                        #           Child Loop BB86_703 Depth 5
                                        #             Child Loop BB86_705 Depth 6
                                        #         Child Loop BB86_713 Depth 4
                                        #           Child Loop BB86_715 Depth 5
                                        #         Child Loop BB86_723 Depth 4
                                        #           Child Loop BB86_725 Depth 5
                                        #       Child Loop BB86_745 Depth 3
                                        #         Child Loop BB86_747 Depth 4
                                        #           Child Loop BB86_749 Depth 5
                                        #       Child Loop BB86_757 Depth 3
                                        #         Child Loop BB86_759 Depth 4
                                        #       Child Loop BB86_766 Depth 3
                                        #         Child Loop BB86_768 Depth 4
                                        #       Child Loop BB86_778 Depth 3
                                        #         Child Loop BB86_780 Depth 4
                                        #       Child Loop BB86_786 Depth 3
                                        #       Child Loop BB86_791 Depth 3
                                        #         Child Loop BB86_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB86_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB86_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB86_603:                             # %for.cond2997
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_614 Depth 4
                                        #         Child Loop BB86_633 Depth 4
                                        #           Child Loop BB86_635 Depth 5
                                        #         Child Loop BB86_642 Depth 4
                                        #         Child Loop BB86_677 Depth 4
                                        #           Child Loop BB86_679 Depth 5
                                        #         Child Loop BB86_701 Depth 4
                                        #           Child Loop BB86_703 Depth 5
                                        #             Child Loop BB86_705 Depth 6
                                        #         Child Loop BB86_713 Depth 4
                                        #           Child Loop BB86_715 Depth 5
                                        #         Child Loop BB86_723 Depth 4
                                        #           Child Loop BB86_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB86_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB86_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB86_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB86_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB86_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB86_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB86_610
.LBB86_609:                             # %if.then3019
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB86_611
.LBB86_610:                             # %if.else3020
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB86_611:                             # %if.end3022
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB86_612:                             # %if.end3024
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB86_687
.LBB86_613:                             # %if.else3060
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB86_614:                             # %for.cond3061
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB86_614 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB86_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB86_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB86_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB86_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB86_630
.LBB86_618:                             # %if.then3078
                                        #   in Loop: Header=BB86_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB86_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB86_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_622
.LBB86_621:                             # %cond.false3088
                                        #   in Loop: Header=BB86_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_622:                             # %cond.end3091
                                        #   in Loop: Header=BB86_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB86_627
.LBB86_623:                             # %cond.false3095
                                        #   in Loop: Header=BB86_614 Depth=4
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB86_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB86_626
.LBB86_625:                             # %cond.false3102
                                        #   in Loop: Header=BB86_614 Depth=4
	movl	$1, %eax
	jmp	.LBB86_626
.LBB86_626:                             # %cond.end3103
                                        #   in Loop: Header=BB86_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_627:                             # %cond.end3108
                                        #   in Loop: Header=BB86_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB86_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB86_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB86_629:                             # %if.end3121
                                        #   in Loop: Header=BB86_614 Depth=4
	jmp	.LBB86_630
.LBB86_630:                             # %if.end3122
                                        #   in Loop: Header=BB86_614 Depth=4
	jmp	.LBB86_631
.LBB86_631:                             # %for.inc3123
                                        #   in Loop: Header=BB86_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB86_614
.LBB86_632:                             # %for.end3125
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	$0, -24(%rbp)
.LBB86_633:                             # %for.cond3126
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB86_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB86_633 Depth=4
	movl	$0, -20(%rbp)
.LBB86_635:                             # %for.cond3130
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        #         Parent Loop BB86_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB86_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB86_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB86_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_635
.LBB86_638:                             # %for.end3187
                                        #   in Loop: Header=BB86_633 Depth=4
	jmp	.LBB86_639
.LBB86_639:                             # %for.inc3188
                                        #   in Loop: Header=BB86_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_633
.LBB86_640:                             # %for.end3190
                                        #   in Loop: Header=BB86_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB86_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB86_642:                             # %for.cond3193
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB86_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB86_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB86_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB86_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_647
.LBB86_646:                             # %cond.false3210
                                        #   in Loop: Header=BB86_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_647:                             # %cond.end3213
                                        #   in Loop: Header=BB86_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB86_652
.LBB86_648:                             # %cond.false3217
                                        #   in Loop: Header=BB86_642 Depth=4
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB86_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB86_651
.LBB86_650:                             # %cond.false3224
                                        #   in Loop: Header=BB86_642 Depth=4
	movl	$1, %eax
	jmp	.LBB86_651
.LBB86_651:                             # %cond.end3225
                                        #   in Loop: Header=BB86_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_652:                             # %cond.end3230
                                        #   in Loop: Header=BB86_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB86_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB86_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB86_654:                             # %if.end3243
                                        #   in Loop: Header=BB86_642 Depth=4
	jmp	.LBB86_655
.LBB86_655:                             # %for.inc3244
                                        #   in Loop: Header=BB86_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB86_642
.LBB86_656:                             # %for.end3246
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB86_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB86_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB86_660
.LBB86_659:                             # %cond.false3256
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_660:                             # %cond.end3259
                                        #   in Loop: Header=BB86_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB86_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB86_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB86_663
.LBB86_662:                             # %cond.false3269
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB86_663:                             # %cond.end3271
                                        #   in Loop: Header=BB86_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB86_668
.LBB86_664:                             # %cond.false3276
                                        #   in Loop: Header=BB86_603 Depth=3
	vmovsd	.LCPI86_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB86_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB86_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB86_667
.LBB86_666:                             # %cond.false3283
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	$1, %eax
	jmp	.LBB86_667
.LBB86_667:                             # %cond.end3284
                                        #   in Loop: Header=BB86_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB86_668:                             # %cond.end3289
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB86_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB86_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB86_676
.LBB86_671:                             # %if.else3299
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB86_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB86_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB86_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB86_675
.LBB86_674:                             # %if.else3306
                                        #   in Loop: Header=BB86_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB86_675:                             # %if.end3307
                                        #   in Loop: Header=BB86_603 Depth=3
	jmp	.LBB86_676
.LBB86_676:                             # %if.end3308
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	$0, -24(%rbp)
.LBB86_677:                             # %for.cond3309
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB86_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB86_677 Depth=4
	movl	$0, -20(%rbp)
.LBB86_679:                             # %for.cond3313
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        #         Parent Loop BB86_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB86_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB86_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB86_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_679
.LBB86_682:                             # %for.end3349
                                        #   in Loop: Header=BB86_677 Depth=4
	jmp	.LBB86_683
.LBB86_683:                             # %for.inc3350
                                        #   in Loop: Header=BB86_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_677
.LBB86_684:                             # %for.end3352
                                        #   in Loop: Header=BB86_603 Depth=3
	jmp	.LBB86_686
.LBB86_685:                             # %if.else3353
                                        #   in Loop: Header=BB86_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB86_686:                             # %if.end3354
                                        #   in Loop: Header=BB86_603 Depth=3
	jmp	.LBB86_687
.LBB86_687:                             # %if.end3355
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB86_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB86_695
.LBB86_689:                             # %if.else3360
                                        #   in Loop: Header=BB86_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB86_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB86_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB86_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB86_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB86_693
.LBB86_692:                             # %cond.false3374
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB86_693:                             # %cond.end3379
                                        #   in Loop: Header=BB86_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB86_694:                             # %if.end3385
                                        #   in Loop: Header=BB86_603 Depth=3
	jmp	.LBB86_695
.LBB86_695:                             # %if.end3386
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB86_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB86_699
.LBB86_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB86_732
.LBB86_699:                             # %if.then3398
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB86_701:                             # %for.cond3422
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_703 Depth 5
                                        #             Child Loop BB86_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB86_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB86_701 Depth=4
	movl	$0, -24(%rbp)
.LBB86_703:                             # %for.cond3426
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        #         Parent Loop BB86_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB86_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB86_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB86_703 Depth=5
	movl	$0, -20(%rbp)
.LBB86_705:                             # %for.cond3430
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        #         Parent Loop BB86_701 Depth=4
                                        #           Parent Loop BB86_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB86_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB86_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB86_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_705
.LBB86_708:                             # %for.end3453
                                        #   in Loop: Header=BB86_703 Depth=5
	jmp	.LBB86_709
.LBB86_709:                             # %for.inc3454
                                        #   in Loop: Header=BB86_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_703
.LBB86_710:                             # %for.end3456
                                        #   in Loop: Header=BB86_701 Depth=4
	jmp	.LBB86_711
.LBB86_711:                             # %for.inc3457
                                        #   in Loop: Header=BB86_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_701
.LBB86_712:                             # %for.end3459
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_713:                             # %for.cond3460
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB86_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_715:                             # %for.cond3465
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        #         Parent Loop BB86_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB86_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB86_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_715
.LBB86_718:                             # %for.end3494
                                        #   in Loop: Header=BB86_713 Depth=4
	jmp	.LBB86_719
.LBB86_719:                             # %for.inc3495
                                        #   in Loop: Header=BB86_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_713
.LBB86_720:                             # %for.end3497
                                        #   in Loop: Header=BB86_603 Depth=3
	jmp	.LBB86_721
.LBB86_721:                             # %if.end3498
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_723:                             # %for.cond3502
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB86_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_725:                             # %for.cond3507
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_603 Depth=3
                                        #         Parent Loop BB86_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB86_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB86_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_725
.LBB86_728:                             # %for.end3562
                                        #   in Loop: Header=BB86_723 Depth=4
	jmp	.LBB86_729
.LBB86_729:                             # %for.inc3563
                                        #   in Loop: Header=BB86_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_723
.LBB86_730:                             # %for.end3565
                                        #   in Loop: Header=BB86_603 Depth=3
	jmp	.LBB86_731
.LBB86_731:                             # %if.end3566
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB86_732:                             # %if.end3567
                                        #   in Loop: Header=BB86_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB86_733:                             # %if.end3568
                                        #   in Loop: Header=BB86_603 Depth=3
	jmp	.LBB86_734
.LBB86_734:                             # %for.inc3569
                                        #   in Loop: Header=BB86_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB86_603
.LBB86_735:                             # %for.end3571
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB86_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB86_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB86_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB86_739
.LBB86_738:                             # %cond.true3588
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB86_740
.LBB86_739:                             # %cond.false3589
                                        #   in Loop: Header=BB86_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB86_740
.LBB86_740:                             # %cond.end3590
                                        #   in Loop: Header=BB86_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB86_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB86_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB86_743
.LBB86_742:                             # %cond.true3599
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB86_744
.LBB86_743:                             # %cond.false3600
                                        #   in Loop: Header=BB86_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB86_744
.LBB86_744:                             # %cond.end3601
                                        #   in Loop: Header=BB86_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB86_745:                             # %for.cond3619
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_747 Depth 4
                                        #           Child Loop BB86_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB86_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB86_745 Depth=3
	movl	$0, -24(%rbp)
.LBB86_747:                             # %for.cond3623
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB86_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB86_747 Depth=4
	movl	$0, -20(%rbp)
.LBB86_749:                             # %for.cond3627
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_745 Depth=3
                                        #         Parent Loop BB86_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB86_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB86_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB86_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_749
.LBB86_752:                             # %for.end3650
                                        #   in Loop: Header=BB86_747 Depth=4
	jmp	.LBB86_753
.LBB86_753:                             # %for.inc3651
                                        #   in Loop: Header=BB86_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_747
.LBB86_754:                             # %for.end3653
                                        #   in Loop: Header=BB86_745 Depth=3
	jmp	.LBB86_755
.LBB86_755:                             # %for.inc3654
                                        #   in Loop: Header=BB86_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_745
.LBB86_756:                             # %for.end3656
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_757:                             # %for.cond3657
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB86_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_759:                             # %for.cond3662
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB86_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB86_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_759
.LBB86_762:                             # %for.end3691
                                        #   in Loop: Header=BB86_757 Depth=3
	jmp	.LBB86_763
.LBB86_763:                             # %for.inc3692
                                        #   in Loop: Header=BB86_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_757
.LBB86_764:                             # %for.end3694
                                        #   in Loop: Header=BB86_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_766:                             # %for.cond3698
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB86_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_768:                             # %for.cond3703
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB86_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB86_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_768
.LBB86_771:                             # %for.end3758
                                        #   in Loop: Header=BB86_766 Depth=3
	jmp	.LBB86_772
.LBB86_772:                             # %for.inc3759
                                        #   in Loop: Header=BB86_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_766
.LBB86_773:                             # %for.end3761
                                        #   in Loop: Header=BB86_601 Depth=2
	jmp	.LBB86_774
.LBB86_774:                             # %if.end3762
                                        #   in Loop: Header=BB86_601 Depth=2
	jmp	.LBB86_775
.LBB86_775:                             # %if.end3763
                                        #   in Loop: Header=BB86_601 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB86_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB86_777:                             # %if.end3769
                                        #   in Loop: Header=BB86_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_778:                             # %for.cond3781
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB86_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_780:                             # %for.cond3786
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB86_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB86_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_780
.LBB86_783:                             # %for.end3797
                                        #   in Loop: Header=BB86_778 Depth=3
	jmp	.LBB86_784
.LBB86_784:                             # %for.inc3798
                                        #   in Loop: Header=BB86_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_778
.LBB86_785:                             # %for.end3800
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_786:                             # %for.cond3802
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB86_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB86_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_786
.LBB86_789:                             # %for.end3811
                                        #   in Loop: Header=BB86_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB86_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_791:                             # %for.cond3819
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB86_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_793:                             # %for.cond3824
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_601 Depth=2
                                        #       Parent Loop BB86_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB86_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB86_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_793
.LBB86_796:                             # %for.end3844
                                        #   in Loop: Header=BB86_791 Depth=3
	jmp	.LBB86_797
.LBB86_797:                             # %for.inc3845
                                        #   in Loop: Header=BB86_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_791
.LBB86_798:                             # %for.end3847
                                        #   in Loop: Header=BB86_601 Depth=2
	jmp	.LBB86_799
.LBB86_799:                             # %if.end3848
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB86_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_601
.LBB86_801:                             # %for.end3860
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_802
.LBB86_802:                             # %if.end3861
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB86_803:                             # %for.cond3862
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB86_803 Depth=2
	movl	$0, -24(%rbp)
.LBB86_805:                             # %for.cond3866
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB86_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB86_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_805
.LBB86_808:                             # %for.end3890
                                        #   in Loop: Header=BB86_803 Depth=2
	jmp	.LBB86_809
.LBB86_809:                             # %for.inc3891
                                        #   in Loop: Header=BB86_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_803
.LBB86_810:                             # %for.end3893
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB86_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB86_825
.LBB86_813:                             # %if.then3902
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB86_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB86_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_822
.LBB86_816:                             # %if.else3910
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB86_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB86_821
.LBB86_818:                             # %if.else3915
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB86_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_820:                             # %if.end3922
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_821
.LBB86_821:                             # %if.end3923
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_822
.LBB86_822:                             # %if.end3924
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_824
.LBB86_823:                             # %if.else3925
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_824:                             # %if.end3927
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_825
.LBB86_825:                             # %if.end3928
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_827
.LBB86_826:                             # %if.else3929
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB86_827:                             # %if.end3930
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB86_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB86_830
.LBB86_829:                             # %if.then3938
                                        #   in Loop: Header=BB86_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB86_830:                             # %if.end3939
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_832
.LBB86_831:                             # %if.else3940
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB86_832:                             # %if.end3941
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB86_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB86_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB86_171 Depth=1
	leaq	-272(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-304(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB86_835:                             # %for.cond3949
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_853 Depth 3
                                        #         Child Loop BB86_908 Depth 4
                                        #           Child Loop BB86_911 Depth 5
                                        #             Child Loop BB86_913 Depth 6
                                        #           Child Loop BB86_920 Depth 5
                                        #             Child Loop BB86_922 Depth 6
                                        #         Child Loop BB86_955 Depth 4
                                        #           Child Loop BB86_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB86_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB86_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB86_846
.LBB86_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB86_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB86_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB86_846
.LBB86_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB86_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB86_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB86_846
.LBB86_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB86_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB86_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB86_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB86_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB86_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB86_835 Depth=2
	cmpl	$0, -304(%rbp)
	jne	.LBB86_847
.LBB86_846:                             # %if.then3982
                                        #   in Loop: Header=BB86_835 Depth=2
	jmp	.LBB86_976
.LBB86_847:                             # %if.end3983
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB86_835 Depth=2
	movl	$11, -316(%rbp)
	jmp	.LBB86_850
.LBB86_849:                             # %if.else3987
                                        #   in Loop: Header=BB86_835 Depth=2
	movl	$8, -316(%rbp)
.LBB86_850:                             # %if.end3988
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB86_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB86_852:                             # %if.end3994
                                        #   in Loop: Header=BB86_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB86_853:                             # %for.cond3995
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_908 Depth 4
                                        #           Child Loop BB86_911 Depth 5
                                        #             Child Loop BB86_913 Depth 6
                                        #           Child Loop BB86_920 Depth 5
                                        #             Child Loop BB86_922 Depth 6
                                        #         Child Loop BB86_955 Depth 4
                                        #           Child Loop BB86_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB86_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB86_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB86_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB86_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB86_857:                             # %if.end4010
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB86_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB86_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB86_866
.LBB86_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB86_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB86_866
.LBB86_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB86_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB86_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB86_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -304(%rbp)
	jne	.LBB86_867
.LBB86_866:                             # %if.then4032
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_974
.LBB86_867:                             # %if.end4033
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_869
.LBB86_868:                             # %if.else4034
                                        #   in Loop: Header=BB86_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB86_869:                             # %if.end4037
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB86_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB86_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB86_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB86_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB86_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB86_877:                             # %if.end4066
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_878
.LBB86_878:                             # %if.end4067
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB86_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB86_880:                             # %if.end4072
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB86_881:                             # %if.end4074
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB86_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB86_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB86_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB86_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB86_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB86_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB86_887:                             # %if.end4092
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_888
.LBB86_888:                             # %if.end4093
                                        #   in Loop: Header=BB86_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB86_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB86_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB86_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB86_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_902
.LBB86_893:                             # %if.else4110
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB86_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB86_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB86_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_901
.LBB86_897:                             # %if.else4120
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB86_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB86_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB86_900:                             # %if.end4128
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_901
.LBB86_901:                             # %if.end4129
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_902
.LBB86_902:                             # %if.end4130
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_903
.LBB86_903:                             # %if.end4131
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB86_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB86_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB86_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB86_947
.LBB86_907:                             # %if.then4146
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_908
.LBB86_908:                             # %while.body
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_835 Depth=2
                                        #       Parent Loop BB86_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_911 Depth 5
                                        #             Child Loop BB86_913 Depth 6
                                        #           Child Loop BB86_920 Depth 5
                                        #             Child Loop BB86_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB86_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB86_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB86_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB86_908 Depth=4
	movl	$0, -20(%rbp)
.LBB86_911:                             # %for.cond4153
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_835 Depth=2
                                        #       Parent Loop BB86_853 Depth=3
                                        #         Parent Loop BB86_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB86_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB86_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB86_911 Depth=5
	movl	$0, -24(%rbp)
.LBB86_913:                             # %for.cond4157
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_835 Depth=2
                                        #       Parent Loop BB86_853 Depth=3
                                        #         Parent Loop BB86_908 Depth=4
                                        #           Parent Loop BB86_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB86_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB86_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB86_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_913
.LBB86_916:                             # %for.end4182
                                        #   in Loop: Header=BB86_911 Depth=5
	jmp	.LBB86_917
.LBB86_917:                             # %for.inc4183
                                        #   in Loop: Header=BB86_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_911
.LBB86_918:                             # %for.end4185
                                        #   in Loop: Header=BB86_908 Depth=4
	jmp	.LBB86_928
.LBB86_919:                             # %if.else4186
                                        #   in Loop: Header=BB86_908 Depth=4
	movl	$0, -20(%rbp)
.LBB86_920:                             # %for.cond4187
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_835 Depth=2
                                        #       Parent Loop BB86_853 Depth=3
                                        #         Parent Loop BB86_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB86_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB86_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB86_920 Depth=5
	movl	$0, -24(%rbp)
.LBB86_922:                             # %for.cond4191
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_835 Depth=2
                                        #       Parent Loop BB86_853 Depth=3
                                        #         Parent Loop BB86_908 Depth=4
                                        #           Parent Loop BB86_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB86_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB86_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB86_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_922
.LBB86_925:                             # %for.end4215
                                        #   in Loop: Header=BB86_920 Depth=5
	jmp	.LBB86_926
.LBB86_926:                             # %for.inc4216
                                        #   in Loop: Header=BB86_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_920
.LBB86_927:                             # %for.end4218
                                        #   in Loop: Header=BB86_908 Depth=4
	jmp	.LBB86_928
.LBB86_928:                             # %if.end4219
                                        #   in Loop: Header=BB86_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB86_929:                             # %if.end4220
                                        #   in Loop: Header=BB86_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB86_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB86_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB86_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB86_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB86_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB86_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB86_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB86_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB86_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB86_908 Depth=4
	jmp	.LBB86_908
.LBB86_935:                             # %if.else4236
                                        #   in Loop: Header=BB86_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB86_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB86_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB86_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB86_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB86_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB86_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB86_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB86_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_934
.LBB86_940:                             # %if.else4250
                                        #   in Loop: Header=BB86_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB86_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB86_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB86_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB86_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB86_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB86_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_934
.LBB86_944:                             # %if.else4262
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB86_946
.LBB86_945:                             # %if.else4264
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_946
.LBB86_946:                             # %while.end
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_947
.LBB86_947:                             # %if.end4265
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB86_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB86_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB86_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB86_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB86_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB86_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB86_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	$0, -20(%rbp)
.LBB86_955:                             # %for.cond4288
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_835 Depth=2
                                        #       Parent Loop BB86_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB86_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB86_955 Depth=4
	movl	$0, -24(%rbp)
.LBB86_957:                             # %for.cond4292
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_835 Depth=2
                                        #       Parent Loop BB86_853 Depth=3
                                        #         Parent Loop BB86_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB86_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB86_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB86_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_957
.LBB86_960:                             # %for.end4316
                                        #   in Loop: Header=BB86_955 Depth=4
	jmp	.LBB86_961
.LBB86_961:                             # %for.inc4317
                                        #   in Loop: Header=BB86_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_955
.LBB86_962:                             # %for.end4319
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB86_963:                             # %if.end4320
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_964
.LBB86_964:                             # %if.end4321
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_965
.LBB86_965:                             # %if.end4322
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB86_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB86_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB86_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB86_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB86_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB86_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB86_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB86_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB86_972:                             # %if.end4356
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_973
.LBB86_973:                             # %if.end4357
                                        #   in Loop: Header=BB86_853 Depth=3
	jmp	.LBB86_974
.LBB86_974:                             # %for.inc4358
                                        #   in Loop: Header=BB86_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB86_853
.LBB86_975:                             # %for.end4360
                                        #   in Loop: Header=BB86_835 Depth=2
	jmp	.LBB86_976
.LBB86_976:                             # %for.inc4361
                                        #   in Loop: Header=BB86_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB86_835
.LBB86_977:                             # %for.end4364
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1082
.LBB86_978:                             # %if.else4365
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB86_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB86_980:                             # %if.end4371
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB86_981:                             # %for.cond4372
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1014 Depth 3
                                        #         Child Loop BB86_1017 Depth 4
                                        #           Child Loop BB86_1019 Depth 5
                                        #         Child Loop BB86_1026 Depth 4
                                        #           Child Loop BB86_1028 Depth 5
                                        #       Child Loop BB86_1061 Depth 3
                                        #         Child Loop BB86_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB86_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB86_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB86_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB86_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB86_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB86_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB86_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB86_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB86_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB86_990:                             # %if.end4407
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_991
.LBB86_991:                             # %if.end4408
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB86_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB86_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB86_993:                             # %if.end4413
                                        #   in Loop: Header=BB86_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB86_994:                             # %if.end4415
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB86_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB86_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB86_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB86_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_1008
.LBB86_999:                             # %if.else4433
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB86_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB86_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB86_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_1007
.LBB86_1003:                            # %if.else4443
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB86_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB86_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB86_1006:                            # %if.end4451
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1007
.LBB86_1007:                            # %if.end4452
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1008
.LBB86_1008:                            # %if.end4453
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1009
.LBB86_1009:                            # %if.end4454
                                        #   in Loop: Header=BB86_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB86_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB86_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB86_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB86_1053
.LBB86_1013:                            # %if.then4470
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1014
.LBB86_1014:                            # %while.body4471
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_1017 Depth 4
                                        #           Child Loop BB86_1019 Depth 5
                                        #         Child Loop BB86_1026 Depth 4
                                        #           Child Loop BB86_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB86_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB86_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB86_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB86_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB86_1017:                            # %for.cond4478
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_981 Depth=2
                                        #       Parent Loop BB86_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB86_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB86_1019:                            # %for.cond4482
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_981 Depth=2
                                        #       Parent Loop BB86_1014 Depth=3
                                        #         Parent Loop BB86_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB86_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB86_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1019
.LBB86_1022:                            # %for.end4507
                                        #   in Loop: Header=BB86_1017 Depth=4
	jmp	.LBB86_1023
.LBB86_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB86_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1017
.LBB86_1024:                            # %for.end4510
                                        #   in Loop: Header=BB86_1014 Depth=3
	jmp	.LBB86_1034
.LBB86_1025:                            # %if.else4511
                                        #   in Loop: Header=BB86_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB86_1026:                            # %for.cond4512
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_981 Depth=2
                                        #       Parent Loop BB86_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB86_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB86_1028:                            # %for.cond4516
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_981 Depth=2
                                        #       Parent Loop BB86_1014 Depth=3
                                        #         Parent Loop BB86_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB86_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB86_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1028
.LBB86_1031:                            # %for.end4540
                                        #   in Loop: Header=BB86_1026 Depth=4
	jmp	.LBB86_1032
.LBB86_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB86_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1026
.LBB86_1033:                            # %for.end4543
                                        #   in Loop: Header=BB86_1014 Depth=3
	jmp	.LBB86_1034
.LBB86_1034:                            # %if.end4544
                                        #   in Loop: Header=BB86_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB86_1035:                            # %if.end4545
                                        #   in Loop: Header=BB86_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB86_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB86_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB86_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB86_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB86_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB86_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB86_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB86_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB86_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB86_1014 Depth=3
	jmp	.LBB86_1014
.LBB86_1041:                            # %if.else4561
                                        #   in Loop: Header=BB86_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB86_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB86_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB86_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB86_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB86_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB86_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB86_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB86_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_1040
.LBB86_1046:                            # %if.else4575
                                        #   in Loop: Header=BB86_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB86_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB86_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB86_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB86_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB86_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB86_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_1040
.LBB86_1050:                            # %if.else4587
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB86_1052
.LBB86_1051:                            # %if.else4589
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1052
.LBB86_1052:                            # %while.end4590
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1053
.LBB86_1053:                            # %if.end4591
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB86_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB86_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB86_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB86_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB86_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB86_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB86_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB86_981 Depth=2
	movl	$0, -20(%rbp)
.LBB86_1061:                            # %for.cond4615
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB86_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB86_1063:                            # %for.cond4619
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_981 Depth=2
                                        #       Parent Loop BB86_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB86_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB86_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1063
.LBB86_1066:                            # %for.end4643
                                        #   in Loop: Header=BB86_1061 Depth=3
	jmp	.LBB86_1067
.LBB86_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB86_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1061
.LBB86_1068:                            # %for.end4646
                                        #   in Loop: Header=BB86_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB86_1069:                            # %if.end4647
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1070
.LBB86_1070:                            # %if.end4648
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1071
.LBB86_1071:                            # %if.end4649
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB86_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB86_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB86_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB86_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB86_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB86_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB86_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB86_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB86_1078:                            # %if.end4683
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1079
.LBB86_1079:                            # %if.end4684
                                        #   in Loop: Header=BB86_981 Depth=2
	jmp	.LBB86_1080
.LBB86_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB86_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB86_981
.LBB86_1081:                            # %for.end4687
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1082
.LBB86_1082:                            # %if.end4688
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1284
.LBB86_1083:                            # %if.else4689
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -308(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB86_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB86_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB86_1085:                            # %if.end4695
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB86_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB86_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB86_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB86_1090
	jmp	.LBB86_1089
.LBB86_1089:                            # %if.then4702
                                        #   in Loop: Header=BB86_171 Depth=1
	subl	$2, %eax
	je	.LBB86_1097
	jmp	.LBB86_1098
.LBB86_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB86_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB86_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB86_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB86_1095
.LBB86_1094:                            # %if.then4716
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_1096
.LBB86_1095:                            # %if.else4717
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB86_1096:                            # %if.end4718
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1099
.LBB86_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_1099
.LBB86_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB86_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1101
.LBB86_1100:                            # %if.else4722
                                        #   in Loop: Header=BB86_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB86_1101:                            # %if.end4724
                                        #   in Loop: Header=BB86_171 Depth=1
	vmovsd	.LCPI86_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI86_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB86_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB86_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB86_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB86_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_1110
.LBB86_1106:                            # %if.else4743
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB86_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB86_1109
.LBB86_1108:                            # %if.else4748
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_1109:                            # %if.end4750
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1110
.LBB86_1110:                            # %if.end4751
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1112
.LBB86_1111:                            # %if.else4752
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_1112:                            # %if.end4754
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -20(%rbp)
.LBB86_1113:                            # %for.cond4755
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB86_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB86_1115:                            # %for.cond4759
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB86_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB86_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1115
.LBB86_1118:                            # %for.end4785
                                        #   in Loop: Header=BB86_1113 Depth=2
	jmp	.LBB86_1119
.LBB86_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB86_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1113
.LBB86_1120:                            # %for.end4788
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB86_1122
.LBB86_1121:                            # %if.else4789
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB86_1122:                            # %if.end4792
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1123
.LBB86_1123:                            # %if.end4793
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB86_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB86_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -20(%rbp)
.LBB86_1127:                            # %for.cond4806
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1129 Depth 3
                                        #         Child Loop BB86_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB86_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB86_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB86_1129:                            # %for.cond4810
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB86_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB86_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB86_1131:                            # %for.cond4814
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1127 Depth=2
                                        #       Parent Loop BB86_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB86_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB86_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB86_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB86_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB86_1134:                            # %if.end4826
                                        #   in Loop: Header=BB86_1131 Depth=4
	jmp	.LBB86_1135
.LBB86_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB86_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_1131
.LBB86_1136:                            # %for.end4829
                                        #   in Loop: Header=BB86_1129 Depth=3
	jmp	.LBB86_1137
.LBB86_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB86_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1129
.LBB86_1138:                            # %for.end4832
                                        #   in Loop: Header=BB86_1127 Depth=2
	jmp	.LBB86_1139
.LBB86_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB86_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1127
.LBB86_1140:                            # %for.end4835
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB86_1141:                            # %for.cond4840
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB86_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB86_1143:                            # %for.cond4844
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB86_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB86_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1143
.LBB86_1146:                            # %for.end4877
                                        #   in Loop: Header=BB86_1141 Depth=2
	jmp	.LBB86_1147
.LBB86_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB86_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1141
.LBB86_1148:                            # %for.end4880
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1149
.LBB86_1149:                            # %if.end4881
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB86_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB86_1151:                            # %if.end4889
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -24(%rbp)
.LBB86_1152:                            # %for.cond4890
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB86_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB86_1154:                            # %for.cond4894
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB86_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB86_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1154
.LBB86_1157:                            # %for.end4913
                                        #   in Loop: Header=BB86_1152 Depth=2
	jmp	.LBB86_1158
.LBB86_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB86_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1152
.LBB86_1159:                            # %for.end4916
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -20(%rbp)
.LBB86_1160:                            # %for.cond4917
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB86_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB86_1162:                            # %for.cond4921
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB86_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB86_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1162
.LBB86_1165:                            # %for.end4947
                                        #   in Loop: Header=BB86_1160 Depth=2
	jmp	.LBB86_1166
.LBB86_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB86_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1160
.LBB86_1167:                            # %for.end4950
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB86_1169
.LBB86_1168:                            # %if.else4952
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB86_1169:                            # %if.end4954
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1170
.LBB86_1170:                            # %if.end4955
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB86_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB86_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -20(%rbp)
.LBB86_1174:                            # %for.cond4968
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1176 Depth 3
                                        #         Child Loop BB86_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB86_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB86_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB86_1176:                            # %for.cond4972
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB86_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB86_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB86_1178:                            # %for.cond4976
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1174 Depth=2
                                        #       Parent Loop BB86_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB86_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB86_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB86_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB86_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB86_1181:                            # %if.end4988
                                        #   in Loop: Header=BB86_1178 Depth=4
	jmp	.LBB86_1182
.LBB86_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB86_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_1178
.LBB86_1183:                            # %for.end4991
                                        #   in Loop: Header=BB86_1176 Depth=3
	jmp	.LBB86_1184
.LBB86_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB86_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1176
.LBB86_1185:                            # %for.end4994
                                        #   in Loop: Header=BB86_1174 Depth=2
	jmp	.LBB86_1186
.LBB86_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB86_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1174
.LBB86_1187:                            # %for.end4997
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
.LBB86_1188:                            # %if.end5002
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB86_1189:                            # %for.cond5004
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB86_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB86_1191:                            # %for.cond5008
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB86_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB86_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1191
.LBB86_1194:                            # %for.end5034
                                        #   in Loop: Header=BB86_1189 Depth=2
	jmp	.LBB86_1195
.LBB86_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB86_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1189
.LBB86_1196:                            # %for.end5037
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB86_1198
.LBB86_1197:                            # %if.else5039
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB86_1198:                            # %if.end5043
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1199
.LBB86_1199:                            # %if.end5044
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB86_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB86_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -20(%rbp)
.LBB86_1202:                            # %for.cond5053
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB86_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB86_1204:                            # %for.cond5057
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB86_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB86_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1204
.LBB86_1207:                            # %for.end5084
                                        #   in Loop: Header=BB86_1202 Depth=2
	jmp	.LBB86_1208
.LBB86_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB86_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1202
.LBB86_1209:                            # %for.end5087
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -24(%rbp)
.LBB86_1211:                            # %for.cond5091
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB86_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB86_1213:                            # %for.cond5095
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB86_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movl	-220(%rbp), %eax
	subl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-224(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB86_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1213
.LBB86_1216:                            # %for.end5194
                                        #   in Loop: Header=BB86_1211 Depth=2
	jmp	.LBB86_1217
.LBB86_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB86_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1211
.LBB86_1218:                            # %for.end5197
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1219
.LBB86_1219:                            # %if.end5198
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -24(%rbp)
.LBB86_1221:                            # %for.cond5204
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB86_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB86_1223:                            # %for.cond5208
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB86_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB86_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1223
.LBB86_1226:                            # %for.end5232
                                        #   in Loop: Header=BB86_1221 Depth=2
	jmp	.LBB86_1227
.LBB86_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB86_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1221
.LBB86_1228:                            # %for.end5235
                                        #   in Loop: Header=BB86_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB86_1229:                            # %for.cond5237
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB86_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB86_1231:                            # %for.cond5241
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB86_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB86_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1231
.LBB86_1234:                            # %for.end5265
                                        #   in Loop: Header=BB86_1229 Depth=2
	jmp	.LBB86_1235
.LBB86_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB86_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1229
.LBB86_1236:                            # %for.end5268
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB86_1237:                            # %for.cond5270
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB86_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB86_1239:                            # %for.cond5274
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB86_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB86_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1239
.LBB86_1242:                            # %for.end5289
                                        #   in Loop: Header=BB86_1237 Depth=2
	jmp	.LBB86_1243
.LBB86_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB86_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1237
.LBB86_1244:                            # %for.end5292
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB86_1245:                            # %for.cond5296
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB86_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB86_1247:                            # %for.cond5300
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -224(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movl	-188(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -220(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-188(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB86_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB86_1251
.LBB86_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB86_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB86_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB86_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB86_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB86_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB86_1257
.LBB86_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%eax, %eax
	movl	-188(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB86_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB86_1256
.LBB86_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB86_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB86_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB86_1247 Depth=3
.LBB86_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB86_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB86_1260
.LBB86_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB86_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB86_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB86_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB86_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB86_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB86_1266
.LBB86_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB86_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB86_1265
.LBB86_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB86_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB86_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB86_1247 Depth=3
.LBB86_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB86_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB86_1269
.LBB86_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB86_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB86_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB86_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB86_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB86_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB86_1275
.LBB86_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB86_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB86_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB86_1274
.LBB86_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB86_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB86_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB86_1247 Depth=3
.LBB86_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB86_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB86_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1247
.LBB86_1277:                            # %for.end5546
                                        #   in Loop: Header=BB86_1245 Depth=2
	jmp	.LBB86_1278
.LBB86_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB86_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1245
.LBB86_1279:                            # %for.end5549
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1280
.LBB86_1280:                            # %if.end5550
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1282
.LBB86_1281:                            # %if.else5551
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB86_1282:                            # %if.end5554
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1283
.LBB86_1283:                            # %if.end5555
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1284
.LBB86_1284:                            # %if.end5556
                                        #   in Loop: Header=BB86_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB86_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB86_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB86_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB86_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB86_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB86_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -256(%rbp)
.LBB86_1289:                            # %if.end5574
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_1290
.LBB86_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB86_171
.LBB86_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB86_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB86_1295
.LBB86_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB86_1299
.LBB86_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB86_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB86_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB86_1298:                            # %if.end5597
	jmp	.LBB86_1299
.LBB86_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB86_1395
.LBB86_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB86_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB86_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB86_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB86_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB86_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB86_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB86_1308:                            # %for.cond5623
                                        #   Parent Loop BB86_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB86_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB86_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_1308
.LBB86_1311:                            # %for.end5639
                                        #   in Loop: Header=BB86_1306 Depth=1
	jmp	.LBB86_1312
.LBB86_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB86_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1306
.LBB86_1313:                            # %for.end5642
	jmp	.LBB86_1370
.LBB86_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB86_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB86_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB86_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB86_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB86_1318:                            # %for.cond5651
                                        #   Parent Loop BB86_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB86_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB86_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB86_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_1318
.LBB86_1321:                            # %for.end5680
                                        #   in Loop: Header=BB86_1316 Depth=1
	jmp	.LBB86_1322
.LBB86_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB86_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1316
.LBB86_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB86_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB86_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB86_1326:                            # %for.cond5688
                                        #   Parent Loop BB86_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB86_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB86_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1326
.LBB86_1329:                            # %for.end5707
                                        #   in Loop: Header=BB86_1324 Depth=1
	jmp	.LBB86_1330
.LBB86_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB86_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1324
.LBB86_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB86_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB86_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB86_1335:                            # %for.cond5718
                                        #   Parent Loop BB86_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB86_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB86_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1335
.LBB86_1338:                            # %for.end5752
                                        #   in Loop: Header=BB86_1333 Depth=1
	jmp	.LBB86_1339
.LBB86_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB86_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1333
.LBB86_1340:                            # %for.end5755
	jmp	.LBB86_1341
.LBB86_1341:                            # %if.end5756
	jmp	.LBB86_1342
.LBB86_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB86_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB86_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB86_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB86_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB86_1347:                            # %for.cond5772
                                        #   Parent Loop BB86_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB86_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB86_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB86_1347
.LBB86_1350:                            # %for.end5788
                                        #   in Loop: Header=BB86_1345 Depth=1
	jmp	.LBB86_1351
.LBB86_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB86_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1345
.LBB86_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB86_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB86_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB86_1356
# %bb.1355:                             # %if.then5800
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB86_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB86_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB86_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB86_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB86_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB86_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB86_1362:                            # %for.cond5816
                                        #   Parent Loop BB86_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB86_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB86_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB86_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1362
.LBB86_1365:                            # %for.end5842
                                        #   in Loop: Header=BB86_1360 Depth=1
	jmp	.LBB86_1366
.LBB86_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB86_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_1360
.LBB86_1367:                            # %for.end5845
	jmp	.LBB86_1368
.LBB86_1368:                            # %if.end5846
	jmp	.LBB86_1369
.LBB86_1369:                            # %if.end5847
	jmp	.LBB86_1370
.LBB86_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB86_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB86_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB86_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB86_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB86_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -284(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB86_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB86_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB86_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB86_1382
.LBB86_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB86_1382
# %bb.1381:                             # %if.then5884
	leaq	-284(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB86_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB86_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB86_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB86_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB86_1392
.LBB86_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB86_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB86_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB86_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB86_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB86_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB86_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB86_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB86_1394:                            # %if.end5973
	jmp	.LBB86_1395
.LBB86_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB86_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB86_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB86_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB86_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB86_1401
.LBB86_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB86_1402
.LBB86_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB86_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB86_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB86_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB86_1406
.LBB86_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB86_1406:                            # %if.end6019
	jmp	.LBB86_1407
.LBB86_1407:                            # %if.end6020
	jmp	.LBB86_1408
.LBB86_1408:                            # %if.end6021
	jmp	.LBB86_1409
.LBB86_1409:                            # %if.end6022
	jmp	.LBB86_1410
.LBB86_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB86_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB86_1413
.LBB86_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB86_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB86_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB86_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB86_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB86_1420
	jmp	.LBB86_1428
.LBB86_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB86_1428
	jmp	.LBB86_1420
.LBB86_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB86_1420
	jmp	.LBB86_1428
.LBB86_1420:                            # %land.lhs.true6050
	movq	-448(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB86_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB86_1425
	jmp	.LBB86_1428
.LBB86_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_1424
# %bb.1423:                             # %cond.true6058
	movq	-448(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB86_1428
	jmp	.LBB86_1425
.LBB86_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB86_1425
	jmp	.LBB86_1428
.LBB86_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-280(%rbp), %eax
	je	.LBB86_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB86_1427:                            # %if.end6068
	jmp	.LBB86_1428
.LBB86_1428:                            # %if.end6069
	jmp	.LBB86_1429
.LBB86_1429:                            # %if.end6070
	jmp	.LBB86_1430
.LBB86_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB86_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB86_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB86_1452
.LBB86_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB86_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -256(%rbp)
	jne	.LBB86_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB86_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB86_1437:                            # %lor.end6142
.LBB86_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB86_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB86_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB86_1441:                            # %lor.end6166
.LBB86_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB86_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB86_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB86_1445:                            # %lor.end6191
.LBB86_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB86_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB86_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB86_1449:                            # %lor.end6216
.LBB86_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB86_1451:                            # %if.end6232
	jmp	.LBB86_1452
.LBB86_1452:                            # %if.end6233
	jmp	.LBB86_1464
.LBB86_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB86_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB86_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB86_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB86_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB86_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB86_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB86_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB86_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB86_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB86_1463:                            # %if.end6319
	jmp	.LBB86_1464
.LBB86_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB86_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB86_1466:                            # %if.end6327
	cmpl	$580197076, -404(%rbp)  # imm = 0x22951AD4
	jne	.LBB86_1468
.LBB86_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_1467
.Lfunc_end86:
	.size	encode_one_macroblock.57, .Lfunc_end86-encode_one_macroblock.57
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.58 # -- Begin function Intra16x16_Mode_Decision.58
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.58,@function
Intra16x16_Mode_Decision.58:            # @Intra16x16_Mode_Decision.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$418115536, -56(%rbp)   # imm = 0x18EBEFD0
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB87_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB87_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB87_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB87_4 Depth=1
	movl	$0, -8(%rbp)
.LBB87_6:                               # %for.cond4
                                        #   Parent Loop BB87_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB87_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB87_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB87_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_6
.LBB87_9:                               # %for.end
                                        #   in Loop: Header=BB87_4 Depth=1
	jmp	.LBB87_10
.LBB87_10:                              # %for.inc87
                                        #   in Loop: Header=BB87_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_4
.LBB87_11:                              # %for.end89
	jmp	.LBB87_12
.LBB87_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB87_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB87_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB87_14 Depth=1
	movl	$0, -8(%rbp)
.LBB87_16:                              # %for.cond99
                                        #   Parent Loop BB87_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB87_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB87_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB87_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_16
.LBB87_19:                              # %for.end123
                                        #   in Loop: Header=BB87_14 Depth=1
	jmp	.LBB87_20
.LBB87_20:                              # %for.inc124
                                        #   in Loop: Header=BB87_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_14
.LBB87_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB87_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB87_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB87_22 Depth=1
	movl	$0, -8(%rbp)
.LBB87_24:                              # %for.cond132
                                        #   Parent Loop BB87_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB87_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB87_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB87_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_24
.LBB87_27:                              # %for.end156
                                        #   in Loop: Header=BB87_22 Depth=1
	jmp	.LBB87_28
.LBB87_28:                              # %for.inc157
                                        #   in Loop: Header=BB87_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_22
.LBB87_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB87_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB87_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB87_30 Depth=1
	movl	$0, -8(%rbp)
.LBB87_32:                              # %for.cond165
                                        #   Parent Loop BB87_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB87_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB87_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB87_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_32
.LBB87_35:                              # %for.end180
                                        #   in Loop: Header=BB87_30 Depth=1
	jmp	.LBB87_36
.LBB87_36:                              # %for.inc181
                                        #   in Loop: Header=BB87_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_30
.LBB87_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB87_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB87_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB87_38 Depth=1
	movl	$0, -8(%rbp)
.LBB87_40:                              # %for.cond190
                                        #   Parent Loop BB87_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB87_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -24(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -32(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB87_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_44
.LBB87_43:                              # %cond.false
                                        #   in Loop: Header=BB87_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB87_44:                              # %cond.end
                                        #   in Loop: Header=BB87_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB87_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB87_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB87_50
.LBB87_46:                              # %cond.false246
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_49
.LBB87_48:                              # %cond.false260
                                        #   in Loop: Header=BB87_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB87_49:                              # %cond.end271
                                        #   in Loop: Header=BB87_40 Depth=2
.LBB87_50:                              # %cond.end273
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB87_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB87_53
.LBB87_52:                              # %cond.false295
                                        #   in Loop: Header=BB87_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB87_53:                              # %cond.end305
                                        #   in Loop: Header=BB87_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB87_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB87_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_59
.LBB87_55:                              # %cond.false311
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_58
.LBB87_57:                              # %cond.false324
                                        #   in Loop: Header=BB87_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB87_58:                              # %cond.end334
                                        #   in Loop: Header=BB87_40 Depth=2
.LBB87_59:                              # %cond.end336
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB87_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB87_62
.LBB87_61:                              # %cond.false359
                                        #   in Loop: Header=BB87_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB87_62:                              # %cond.end370
                                        #   in Loop: Header=BB87_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB87_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB87_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB87_68
.LBB87_64:                              # %cond.false376
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB87_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_67
.LBB87_66:                              # %cond.false390
                                        #   in Loop: Header=BB87_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB87_67:                              # %cond.end401
                                        #   in Loop: Header=BB87_40 Depth=2
.LBB87_68:                              # %cond.end403
                                        #   in Loop: Header=BB87_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB87_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_40
.LBB87_70:                              # %for.end416
                                        #   in Loop: Header=BB87_38 Depth=1
	jmp	.LBB87_71
.LBB87_71:                              # %for.inc417
                                        #   in Loop: Header=BB87_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_38
.LBB87_72:                              # %for.end419
	jmp	.LBB87_73
.LBB87_73:                              # %if.end420
	cmpl	$418115536, -56(%rbp)   # imm = 0x18EBEFD0
	jne	.LBB87_75
.LBB87_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_74
.Lfunc_end87:
	.size	Intra16x16_Mode_Decision.58, .Lfunc_end87-Intra16x16_Mode_Decision.58
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.59       # -- Begin function UpdatePixelMap.59
	.p2align	4, 0x90
	.type	UpdatePixelMap.59,@function
UpdatePixelMap.59:                      # @UpdatePixelMap.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$494408544, -28(%rbp)   # imm = 0x1D781360
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB88_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB88_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB88_2 Depth=1
	movl	$0, -8(%rbp)
.LBB88_4:                               # %for.cond2
                                        #   Parent Loop BB88_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB88_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB88_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB88_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_4
.LBB88_7:                               # %for.end
                                        #   in Loop: Header=BB88_2 Depth=1
	jmp	.LBB88_8
.LBB88_8:                               # %for.inc7
                                        #   in Loop: Header=BB88_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_2
.LBB88_9:                               # %for.end9
	jmp	.LBB88_41
.LBB88_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB88_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_13 Depth 2
                                        #       Child Loop BB88_16 Depth 3
                                        #         Child Loop BB88_18 Depth 4
                                        #       Child Loop BB88_25 Depth 3
                                        #         Child Loop BB88_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB88_11 Depth=1
	movl	$0, -12(%rbp)
.LBB88_13:                              # %for.cond14
                                        #   Parent Loop BB88_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_16 Depth 3
                                        #         Child Loop BB88_18 Depth 4
                                        #       Child Loop BB88_25 Depth 3
                                        #         Child Loop BB88_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB88_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB88_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB88_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB88_16:                              # %for.cond27
                                        #   Parent Loop BB88_11 Depth=1
                                        #     Parent Loop BB88_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB88_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB88_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB88_18:                              # %for.cond31
                                        #   Parent Loop BB88_11 Depth=1
                                        #     Parent Loop BB88_13 Depth=2
                                        #       Parent Loop BB88_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB88_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB88_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB88_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_18
.LBB88_21:                              # %for.end40
                                        #   in Loop: Header=BB88_16 Depth=3
	jmp	.LBB88_22
.LBB88_22:                              # %for.inc41
                                        #   in Loop: Header=BB88_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_16
.LBB88_23:                              # %for.end43
                                        #   in Loop: Header=BB88_13 Depth=2
	jmp	.LBB88_36
.LBB88_24:                              # %if.else44
                                        #   in Loop: Header=BB88_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB88_25:                              # %for.cond46
                                        #   Parent Loop BB88_11 Depth=1
                                        #     Parent Loop BB88_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB88_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB88_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB88_27:                              # %for.cond50
                                        #   Parent Loop BB88_11 Depth=1
                                        #     Parent Loop BB88_13 Depth=2
                                        #       Parent Loop BB88_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB88_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB88_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB88_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB88_31
.LBB88_30:                              # %cond.false
                                        #   in Loop: Header=BB88_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB88_31:                              # %cond.end
                                        #   in Loop: Header=BB88_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB88_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_27
.LBB88_33:                              # %for.end76
                                        #   in Loop: Header=BB88_25 Depth=3
	jmp	.LBB88_34
.LBB88_34:                              # %for.inc77
                                        #   in Loop: Header=BB88_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_25
.LBB88_35:                              # %for.end79
                                        #   in Loop: Header=BB88_13 Depth=2
	jmp	.LBB88_36
.LBB88_36:                              # %if.end
                                        #   in Loop: Header=BB88_13 Depth=2
	jmp	.LBB88_37
.LBB88_37:                              # %for.inc80
                                        #   in Loop: Header=BB88_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_13
.LBB88_38:                              # %for.end82
                                        #   in Loop: Header=BB88_11 Depth=1
	jmp	.LBB88_39
.LBB88_39:                              # %for.inc83
                                        #   in Loop: Header=BB88_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_11
.LBB88_40:                              # %for.end85
	jmp	.LBB88_41
.LBB88_41:                              # %if.end86
	cmpl	$494408544, -28(%rbp)   # imm = 0x1D781360
	jne	.LBB88_43
.LBB88_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_42
.Lfunc_end88:
	.size	UpdatePixelMap.59, .Lfunc_end88-UpdatePixelMap.59
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.60 # -- Begin function SetModesAndRefframeForBlocks.60
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.60,@function
SetModesAndRefframeForBlocks.60:        # @SetModesAndRefframeForBlocks.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$537060569, -36(%rbp)   # imm = 0x2002E4D9
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB89_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB89_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB89_4
.LBB89_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB89_4
.LBB89_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB89_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB89_7
.LBB89_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB89_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB89_42
# %bb.8:                                # %if.end
	movq	.LJTI89_0(,%rax,8), %rax
	jmpq	*%rax
.LBB89_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB89_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB89_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB89_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB89_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB89_14
.LBB89_13:                              # %cond.false26
                                        #   in Loop: Header=BB89_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_14
.LBB89_14:                              # %cond.end27
                                        #   in Loop: Header=BB89_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB89_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_10
.LBB89_16:                              # %for.end
	jmp	.LBB89_43
.LBB89_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB89_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB89_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB89_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_18
.LBB89_21:                              # %for.end49
	jmp	.LBB89_43
.LBB89_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB89_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB89_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_23
.LBB89_26:                              # %for.end71
	jmp	.LBB89_43
.LBB89_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB89_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB89_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB89_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_28
.LBB89_31:                              # %for.end85
	jmp	.LBB89_43
.LBB89_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB89_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB89_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB89_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_33
.LBB89_36:                              # %for.end99
	jmp	.LBB89_43
.LBB89_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB89_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB89_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB89_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_38
.LBB89_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB89_43
.LBB89_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB89_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB89_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB89_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB89_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB89_70
.LBB89_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB89_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB89_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB89_49 Depth=1
	movl	$0, -4(%rbp)
.LBB89_51:                              # %for.cond131
                                        #   Parent Loop BB89_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB89_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB89_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB89_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB89_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB89_55
.LBB89_54:                              # %if.else174
                                        #   in Loop: Header=BB89_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB89_55:                              # %if.end195
                                        #   in Loop: Header=BB89_51 Depth=2
	jmp	.LBB89_56
.LBB89_56:                              # %for.inc196
                                        #   in Loop: Header=BB89_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_51
.LBB89_57:                              # %for.end198
                                        #   in Loop: Header=BB89_49 Depth=1
	jmp	.LBB89_58
.LBB89_58:                              # %for.inc199
                                        #   in Loop: Header=BB89_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_49
.LBB89_59:                              # %for.end201
	jmp	.LBB89_69
.LBB89_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB89_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB89_61 Depth=1
	movl	$0, -4(%rbp)
.LBB89_63:                              # %for.cond207
                                        #   Parent Loop BB89_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB89_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB89_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB89_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_63
.LBB89_66:                              # %for.end227
                                        #   in Loop: Header=BB89_61 Depth=1
	jmp	.LBB89_67
.LBB89_67:                              # %for.inc228
                                        #   in Loop: Header=BB89_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_61
.LBB89_68:                              # %for.end230
	jmp	.LBB89_69
.LBB89_69:                              # %if.end231
	jmp	.LBB89_127
.LBB89_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB89_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB89_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB89_72 Depth=1
	movl	$0, -4(%rbp)
.LBB89_74:                              # %for.cond239
                                        #   Parent Loop BB89_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB89_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB89_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB89_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB89_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB89_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB89_105
.LBB89_78:                              # %if.else298
                                        #   in Loop: Header=BB89_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB89_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB89_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB89_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB89_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB89_90
.LBB89_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB89_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB89_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB89_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB89_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB89_90
.LBB89_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB89_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB89_90
.LBB89_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB89_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB89_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB89_90
.LBB89_89:                              # %if.then356
                                        #   in Loop: Header=BB89_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB89_104
.LBB89_90:                              # %if.else377
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB89_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB89_96
.LBB89_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB89_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB89_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB89_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB89_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB89_96
.LBB89_95:                              # %cond.true404
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB89_97
.LBB89_96:                              # %cond.false410
                                        #   in Loop: Header=BB89_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB89_97
.LBB89_97:                              # %cond.end411
                                        #   in Loop: Header=BB89_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB89_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB89_102
.LBB89_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB89_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB89_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB89_102
.LBB89_101:                             # %cond.true448
                                        #   in Loop: Header=BB89_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB89_103
.LBB89_102:                             # %cond.false454
                                        #   in Loop: Header=BB89_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB89_103
.LBB89_103:                             # %cond.end455
                                        #   in Loop: Header=BB89_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB89_104:                             # %if.end468
                                        #   in Loop: Header=BB89_74 Depth=2
	jmp	.LBB89_105
.LBB89_105:                             # %if.end469
                                        #   in Loop: Header=BB89_74 Depth=2
	jmp	.LBB89_106
.LBB89_106:                             # %for.inc470
                                        #   in Loop: Header=BB89_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_74
.LBB89_107:                             # %for.end472
                                        #   in Loop: Header=BB89_72 Depth=1
	jmp	.LBB89_108
.LBB89_108:                             # %for.inc473
                                        #   in Loop: Header=BB89_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_72
.LBB89_109:                             # %for.end475
	jmp	.LBB89_126
.LBB89_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB89_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB89_111 Depth=1
	movl	$0, -4(%rbp)
.LBB89_113:                             # %for.cond481
                                        #   Parent Loop BB89_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB89_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB89_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB89_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB89_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB89_120
.LBB89_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB89_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB89_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB89_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB89_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB89_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB89_120
.LBB89_119:                             # %cond.true519
                                        #   in Loop: Header=BB89_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB89_121
.LBB89_120:                             # %cond.false525
                                        #   in Loop: Header=BB89_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB89_121
.LBB89_121:                             # %cond.end526
                                        #   in Loop: Header=BB89_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB89_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_113
.LBB89_123:                             # %for.end541
                                        #   in Loop: Header=BB89_111 Depth=1
	jmp	.LBB89_124
.LBB89_124:                             # %for.inc542
                                        #   in Loop: Header=BB89_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_111
.LBB89_125:                             # %for.end544
	jmp	.LBB89_126
.LBB89_126:                             # %if.end545
	jmp	.LBB89_127
.LBB89_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB89_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB89_128 Depth=1
	movl	$0, -4(%rbp)
.LBB89_130:                             # %for.cond551
                                        #   Parent Loop BB89_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB89_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB89_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB89_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB89_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB89_134
.LBB89_133:                             # %cond.false584
                                        #   in Loop: Header=BB89_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB89_134
.LBB89_134:                             # %cond.end585
                                        #   in Loop: Header=BB89_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB89_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_130
.LBB89_136:                             # %for.end598
                                        #   in Loop: Header=BB89_128 Depth=1
	jmp	.LBB89_137
.LBB89_137:                             # %for.inc599
                                        #   in Loop: Header=BB89_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_128
.LBB89_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB89_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB89_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB89_140 Depth=1
	movl	$0, -4(%rbp)
.LBB89_142:                             # %for.cond608
                                        #   Parent Loop BB89_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB89_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB89_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB89_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB89_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB89_146
.LBB89_145:                             # %cond.false642
                                        #   in Loop: Header=BB89_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB89_146
.LBB89_146:                             # %cond.end643
                                        #   in Loop: Header=BB89_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB89_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_142
.LBB89_148:                             # %for.end657
                                        #   in Loop: Header=BB89_140 Depth=1
	jmp	.LBB89_149
.LBB89_149:                             # %for.inc658
                                        #   in Loop: Header=BB89_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_140
.LBB89_150:                             # %for.end660
	jmp	.LBB89_151
.LBB89_151:                             # %if.end661
	cmpl	$537060569, -36(%rbp)   # imm = 0x2002E4D9
	jne	.LBB89_153
.LBB89_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_152
.Lfunc_end89:
	.size	SetModesAndRefframeForBlocks.60, .Lfunc_end89-SetModesAndRefframeForBlocks.60
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI89_0:
	.quad	.LBB89_9
	.quad	.LBB89_17
	.quad	.LBB89_17
	.quad	.LBB89_17
	.quad	.LBB89_42
	.quad	.LBB89_42
	.quad	.LBB89_42
	.quad	.LBB89_42
	.quad	.LBB89_22
	.quad	.LBB89_27
	.quad	.LBB89_32
	.quad	.LBB89_42
	.quad	.LBB89_42
	.quad	.LBB89_37
                                        # -- End function
	.text
	.globl	UpdatePixelMap.61       # -- Begin function UpdatePixelMap.61
	.p2align	4, 0x90
	.type	UpdatePixelMap.61,@function
UpdatePixelMap.61:                      # @UpdatePixelMap.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1458238084, -28(%rbp)  # imm = 0x56EAF284
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB90_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB90_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	$0, -8(%rbp)
.LBB90_4:                               # %for.cond2
                                        #   Parent Loop BB90_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB90_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB90_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB90_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_4
.LBB90_7:                               # %for.end
                                        #   in Loop: Header=BB90_2 Depth=1
	jmp	.LBB90_8
.LBB90_8:                               # %for.inc7
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_2
.LBB90_9:                               # %for.end9
	jmp	.LBB90_41
.LBB90_10:                              # %if.else
	movl	$0, -12(%rbp)
.LBB90_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_13 Depth 2
                                        #       Child Loop BB90_16 Depth 3
                                        #         Child Loop BB90_18 Depth 4
                                        #       Child Loop BB90_25 Depth 3
                                        #         Child Loop BB90_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB90_11 Depth=1
	movl	$0, -16(%rbp)
.LBB90_13:                              # %for.cond14
                                        #   Parent Loop BB90_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_16 Depth 3
                                        #         Child Loop BB90_18 Depth 4
                                        #       Child Loop BB90_25 Depth 3
                                        #         Child Loop BB90_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB90_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB90_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB90_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB90_16:                              # %for.cond27
                                        #   Parent Loop BB90_11 Depth=1
                                        #     Parent Loop BB90_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB90_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB90_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB90_18:                              # %for.cond31
                                        #   Parent Loop BB90_11 Depth=1
                                        #     Parent Loop BB90_13 Depth=2
                                        #       Parent Loop BB90_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB90_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB90_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_18
.LBB90_21:                              # %for.end40
                                        #   in Loop: Header=BB90_16 Depth=3
	jmp	.LBB90_22
.LBB90_22:                              # %for.inc41
                                        #   in Loop: Header=BB90_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_16
.LBB90_23:                              # %for.end43
                                        #   in Loop: Header=BB90_13 Depth=2
	jmp	.LBB90_36
.LBB90_24:                              # %if.else44
                                        #   in Loop: Header=BB90_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB90_25:                              # %for.cond46
                                        #   Parent Loop BB90_11 Depth=1
                                        #     Parent Loop BB90_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB90_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB90_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB90_27:                              # %for.cond50
                                        #   Parent Loop BB90_11 Depth=1
                                        #     Parent Loop BB90_13 Depth=2
                                        #       Parent Loop BB90_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB90_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB90_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB90_31
.LBB90_30:                              # %cond.false
                                        #   in Loop: Header=BB90_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB90_31:                              # %cond.end
                                        #   in Loop: Header=BB90_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB90_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_27
.LBB90_33:                              # %for.end76
                                        #   in Loop: Header=BB90_25 Depth=3
	jmp	.LBB90_34
.LBB90_34:                              # %for.inc77
                                        #   in Loop: Header=BB90_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_25
.LBB90_35:                              # %for.end79
                                        #   in Loop: Header=BB90_13 Depth=2
	jmp	.LBB90_36
.LBB90_36:                              # %if.end
                                        #   in Loop: Header=BB90_13 Depth=2
	jmp	.LBB90_37
.LBB90_37:                              # %for.inc80
                                        #   in Loop: Header=BB90_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_13
.LBB90_38:                              # %for.end82
                                        #   in Loop: Header=BB90_11 Depth=1
	jmp	.LBB90_39
.LBB90_39:                              # %for.inc83
                                        #   in Loop: Header=BB90_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_11
.LBB90_40:                              # %for.end85
	jmp	.LBB90_41
.LBB90_41:                              # %if.end86
	cmpl	$1458238084, -28(%rbp)  # imm = 0x56EAF284
	jne	.LBB90_43
.LBB90_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_42
.Lfunc_end90:
	.size	UpdatePixelMap.61, .Lfunc_end90-UpdatePixelMap.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.62
.LCPI91_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.62
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.62,@function
RDCost_for_8x8blocks.62:                # @RDCost_for_8x8blocks.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1961343387, -160(%rbp) # imm = 0x74E7B99B
	movq	%rdi, -144(%rbp)
	movq	%rsi, -184(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -124(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, -164(%rbp)
	je	.LBB91_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB91_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -116(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -120(%rbp)
	je	.LBB91_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB91_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -200(%rbp)
	jmp	.LBB91_139
.LBB91_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-184(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB91_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB91_8
.LBB91_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB91_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-124(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB91_19
.LBB91_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB91_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB91_13
.LBB91_12:                              # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB91_14
.LBB91_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB91_14
.LBB91_14:                              # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB91_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB91_17
.LBB91_16:                              # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB91_18
.LBB91_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB91_18
.LBB91_18:                              # %cond.end82
	movl	%eax, -172(%rbp)
	movq	-184(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-172(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-124(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB91_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB91_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB91_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_23 Depth 2
                                        #       Child Loop BB91_25 Depth 3
                                        #     Child Loop BB91_31 Depth 2
                                        #       Child Loop BB91_33 Depth 3
                                        #     Child Loop BB91_39 Depth 2
                                        #       Child Loop BB91_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB91_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB91_23:                              # %for.cond96
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB91_23 Depth=2
	movl	$0, -16(%rbp)
.LBB91_25:                              # %for.cond100
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB91_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB91_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_25
.LBB91_28:                              # %for.end
                                        #   in Loop: Header=BB91_23 Depth=2
	jmp	.LBB91_29
.LBB91_29:                              # %for.inc114
                                        #   in Loop: Header=BB91_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_23
.LBB91_30:                              # %for.end116
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB91_31:                              # %for.cond120
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB91_31 Depth=2
	movl	$0, -16(%rbp)
.LBB91_33:                              # %for.cond124
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB91_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB91_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_33
.LBB91_36:                              # %for.end152
                                        #   in Loop: Header=BB91_31 Depth=2
	jmp	.LBB91_37
.LBB91_37:                              # %for.inc153
                                        #   in Loop: Header=BB91_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_31
.LBB91_38:                              # %for.end155
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB91_39:                              # %for.cond159
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB91_39 Depth=2
	movl	$0, -16(%rbp)
.LBB91_41:                              # %for.cond163
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB91_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB91_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_41
.LBB91_44:                              # %for.end180
                                        #   in Loop: Header=BB91_39 Depth=2
	jmp	.LBB91_45
.LBB91_45:                              # %for.inc181
                                        #   in Loop: Header=BB91_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_39
.LBB91_46:                              # %for.end183
                                        #   in Loop: Header=BB91_21 Depth=1
	jmp	.LBB91_47
.LBB91_47:                              # %for.inc184
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB91_21
.LBB91_48:                              # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB91_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB91_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_51:                              # %for.cond192
                                        #   Parent Loop BB91_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -128(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-128(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-128(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB91_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_55
.LBB91_54:                              # %cond.false229
                                        #   in Loop: Header=BB91_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB91_55:                              # %cond.end235
                                        #   in Loop: Header=BB91_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB91_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB91_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB91_61
.LBB91_57:                              # %cond.false241
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB91_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_60
.LBB91_59:                              # %cond.false250
                                        #   in Loop: Header=BB91_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB91_60:                              # %cond.end256
                                        #   in Loop: Header=BB91_51 Depth=2
.LBB91_61:                              # %cond.end258
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB91_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB91_64
.LBB91_63:                              # %cond.false276
                                        #   in Loop: Header=BB91_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB91_64:                              # %cond.end282
                                        #   in Loop: Header=BB91_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB91_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB91_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_70
.LBB91_66:                              # %cond.false288
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB91_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_69
.LBB91_68:                              # %cond.false297
                                        #   in Loop: Header=BB91_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB91_69:                              # %cond.end303
                                        #   in Loop: Header=BB91_51 Depth=2
.LBB91_70:                              # %cond.end305
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB91_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB91_73
.LBB91_72:                              # %cond.false325
                                        #   in Loop: Header=BB91_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB91_73:                              # %cond.end331
                                        #   in Loop: Header=BB91_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB91_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB91_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB91_79
.LBB91_75:                              # %cond.false337
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB91_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB91_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_78
.LBB91_77:                              # %cond.false346
                                        #   in Loop: Header=BB91_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB91_78:                              # %cond.end352
                                        #   in Loop: Header=BB91_51 Depth=2
.LBB91_79:                              # %cond.end354
                                        #   in Loop: Header=BB91_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB91_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_51
.LBB91_81:                              # %for.end369
                                        #   in Loop: Header=BB91_49 Depth=1
	jmp	.LBB91_82
.LBB91_82:                              # %for.inc370
                                        #   in Loop: Header=BB91_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_49
.LBB91_83:                              # %for.end372
	jmp	.LBB91_84
.LBB91_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB91_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB91_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB91_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB91_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB91_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB91_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_92 Depth 2
                                        #       Child Loop BB91_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB91_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB91_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB91_92:                              # %for.cond395
                                        #   Parent Loop BB91_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB91_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_94:                              # %for.cond403
                                        #   Parent Loop BB91_90 Depth=1
                                        #     Parent Loop BB91_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB91_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB91_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_94
.LBB91_97:                              # %for.end429
                                        #   in Loop: Header=BB91_92 Depth=2
	jmp	.LBB91_98
.LBB91_98:                              # %for.inc430
                                        #   in Loop: Header=BB91_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_92
.LBB91_99:                              # %for.end432
                                        #   in Loop: Header=BB91_90 Depth=1
	jmp	.LBB91_100
.LBB91_100:                             # %for.inc433
                                        #   in Loop: Header=BB91_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB91_90
.LBB91_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB91_113
.LBB91_102:                             # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB91_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB91_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_105:                             # %for.cond447
                                        #   Parent Loop BB91_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB91_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB91_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB91_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB91_108:                             # %if.end524
                                        #   in Loop: Header=BB91_105 Depth=2
	jmp	.LBB91_109
.LBB91_109:                             # %for.inc525
                                        #   in Loop: Header=BB91_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_105
.LBB91_110:                             # %for.end527
                                        #   in Loop: Header=BB91_103 Depth=1
	jmp	.LBB91_111
.LBB91_111:                             # %for.inc528
                                        #   in Loop: Header=BB91_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_103
.LBB91_112:                             # %for.end530
	jmp	.LBB91_113
.LBB91_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_115
# %bb.114:                              # %if.then534
	movl	-116(%rbp), %edi
	movl	-156(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB91_116
.LBB91_115:                             # %if.else536
	movl	-116(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB91_116:                             # %if.end547
	cmpl	$0, -120(%rbp)
	jne	.LBB91_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB91_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB91_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB91_121
.LBB91_120:                             # %if.then560
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB91_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB91_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB91_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB91_126
.LBB91_125:                             # %if.then579
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB91_126:                             # %if.end583
	jmp	.LBB91_127
.LBB91_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB91_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB91_130
.LBB91_129:                             # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB91_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB91_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB91_133
.LBB91_132:                             # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB91_133:                             # %if.end612
	jmp	.LBB91_134
.LBB91_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB91_136
# %bb.135:                              # %if.then617
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -68(%rbp)
	movl	-40(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB91_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB91_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB91_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
.LBB91_139:                             # %return
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1961343387, -160(%rbp) # imm = 0x74E7B99B
	jne	.LBB91_141
.LBB91_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB91_140
.Lfunc_end91:
	.size	RDCost_for_8x8blocks.62, .Lfunc_end91-RDCost_for_8x8blocks.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.63
.LCPI92_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.63
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.63,@function
RDCost_for_8x8blocks.63:                # @RDCost_for_8x8blocks.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1215939627, -160(%rbp) # imm = 0x4879C42B
	movq	%rdi, -144(%rbp)
	movq	%rsi, -184(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -120(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	cmpl	$0, -168(%rbp)
	je	.LBB92_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB92_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -116(%rbp)
	je	.LBB92_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB92_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI92_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -192(%rbp)
	jmp	.LBB92_139
.LBB92_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-184(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB92_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB92_8
.LBB92_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB92_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-120(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB92_19
.LBB92_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB92_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB92_13
.LBB92_12:                              # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB92_14
.LBB92_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB92_14
.LBB92_14:                              # %cond.end71
	movl	%eax, -164(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB92_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB92_17
.LBB92_16:                              # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB92_18
.LBB92_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB92_18
.LBB92_18:                              # %cond.end82
	movl	%eax, -172(%rbp)
	movq	-184(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-164(%rbp), %r8d
	movl	-172(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-120(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB92_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB92_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB92_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_23 Depth 2
                                        #       Child Loop BB92_25 Depth 3
                                        #     Child Loop BB92_31 Depth 2
                                        #       Child Loop BB92_33 Depth 3
                                        #     Child Loop BB92_39 Depth 2
                                        #       Child Loop BB92_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB92_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB92_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB92_23:                              # %for.cond96
                                        #   Parent Loop BB92_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB92_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB92_23 Depth=2
	movl	$0, -12(%rbp)
.LBB92_25:                              # %for.cond100
                                        #   Parent Loop BB92_21 Depth=1
                                        #     Parent Loop BB92_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB92_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB92_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB92_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_25
.LBB92_28:                              # %for.end
                                        #   in Loop: Header=BB92_23 Depth=2
	jmp	.LBB92_29
.LBB92_29:                              # %for.inc114
                                        #   in Loop: Header=BB92_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_23
.LBB92_30:                              # %for.end116
                                        #   in Loop: Header=BB92_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB92_31:                              # %for.cond120
                                        #   Parent Loop BB92_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB92_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB92_31 Depth=2
	movl	$0, -12(%rbp)
.LBB92_33:                              # %for.cond124
                                        #   Parent Loop BB92_21 Depth=1
                                        #     Parent Loop BB92_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB92_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB92_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB92_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_33
.LBB92_36:                              # %for.end152
                                        #   in Loop: Header=BB92_31 Depth=2
	jmp	.LBB92_37
.LBB92_37:                              # %for.inc153
                                        #   in Loop: Header=BB92_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_31
.LBB92_38:                              # %for.end155
                                        #   in Loop: Header=BB92_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB92_39:                              # %for.cond159
                                        #   Parent Loop BB92_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB92_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB92_39 Depth=2
	movl	$0, -12(%rbp)
.LBB92_41:                              # %for.cond163
                                        #   Parent Loop BB92_21 Depth=1
                                        #     Parent Loop BB92_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB92_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB92_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB92_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_41
.LBB92_44:                              # %for.end180
                                        #   in Loop: Header=BB92_39 Depth=2
	jmp	.LBB92_45
.LBB92_45:                              # %for.inc181
                                        #   in Loop: Header=BB92_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_39
.LBB92_46:                              # %for.end183
                                        #   in Loop: Header=BB92_21 Depth=1
	jmp	.LBB92_47
.LBB92_47:                              # %for.inc184
                                        #   in Loop: Header=BB92_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB92_21
.LBB92_48:                              # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB92_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_51:                              # %for.cond192
                                        #   Parent Loop BB92_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -128(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-128(%rbp), %edx
	movl	%edx, -80(%rbp)
	movl	-128(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -72(%rbp)
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -88(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-72(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB92_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB92_55
.LBB92_54:                              # %cond.false229
                                        #   in Loop: Header=BB92_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB92_55:                              # %cond.end235
                                        #   in Loop: Header=BB92_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB92_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB92_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB92_61
.LBB92_57:                              # %cond.false241
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB92_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB92_60
.LBB92_59:                              # %cond.false250
                                        #   in Loop: Header=BB92_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB92_60:                              # %cond.end256
                                        #   in Loop: Header=BB92_51 Depth=2
.LBB92_61:                              # %cond.end258
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB92_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB92_64
.LBB92_63:                              # %cond.false276
                                        #   in Loop: Header=BB92_51 Depth=2
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB92_64:                              # %cond.end282
                                        #   in Loop: Header=BB92_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB92_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB92_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_70
.LBB92_66:                              # %cond.false288
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%eax, %eax
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB92_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB92_69
.LBB92_68:                              # %cond.false297
                                        #   in Loop: Header=BB92_51 Depth=2
	movl	-80(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB92_69:                              # %cond.end303
                                        #   in Loop: Header=BB92_51 Depth=2
.LBB92_70:                              # %cond.end305
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-88(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB92_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB92_73
.LBB92_72:                              # %cond.false325
                                        #   in Loop: Header=BB92_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB92_73:                              # %cond.end331
                                        #   in Loop: Header=BB92_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB92_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB92_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB92_79
.LBB92_75:                              # %cond.false337
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB92_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB92_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB92_78
.LBB92_77:                              # %cond.false346
                                        #   in Loop: Header=BB92_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB92_78:                              # %cond.end352
                                        #   in Loop: Header=BB92_51 Depth=2
.LBB92_79:                              # %cond.end354
                                        #   in Loop: Header=BB92_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB92_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_51
.LBB92_81:                              # %for.end369
                                        #   in Loop: Header=BB92_49 Depth=1
	jmp	.LBB92_82
.LBB92_82:                              # %for.inc370
                                        #   in Loop: Header=BB92_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_49
.LBB92_83:                              # %for.end372
	jmp	.LBB92_84
.LBB92_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB92_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_102
# %bb.89:                               # %if.then388
	movl	$0, -76(%rbp)
.LBB92_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_92 Depth 2
                                        #       Child Loop BB92_94 Depth 3
	movl	-76(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB92_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB92_90 Depth=1
	movl	-76(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_92:                              # %for.cond395
                                        #   Parent Loop BB92_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB92_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_94:                              # %for.cond403
                                        #   Parent Loop BB92_90 Depth=1
                                        #     Parent Loop BB92_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB92_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB92_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_94
.LBB92_97:                              # %for.end429
                                        #   in Loop: Header=BB92_92 Depth=2
	jmp	.LBB92_98
.LBB92_98:                              # %for.inc430
                                        #   in Loop: Header=BB92_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_92
.LBB92_99:                              # %for.end432
                                        #   in Loop: Header=BB92_90 Depth=1
	jmp	.LBB92_100
.LBB92_100:                             # %for.inc433
                                        #   in Loop: Header=BB92_90 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB92_90
.LBB92_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB92_113
.LBB92_102:                             # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB92_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_105:                             # %for.cond447
                                        #   Parent Loop BB92_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB92_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB92_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB92_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB92_108:                             # %if.end524
                                        #   in Loop: Header=BB92_105 Depth=2
	jmp	.LBB92_109
.LBB92_109:                             # %for.inc525
                                        #   in Loop: Header=BB92_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_105
.LBB92_110:                             # %for.end527
                                        #   in Loop: Header=BB92_103 Depth=1
	jmp	.LBB92_111
.LBB92_111:                             # %for.inc528
                                        #   in Loop: Header=BB92_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_103
.LBB92_112:                             # %for.end530
	jmp	.LBB92_113
.LBB92_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB92_115
# %bb.114:                              # %if.then534
	movl	-124(%rbp), %edi
	movl	-156(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB92_116
.LBB92_115:                             # %if.else536
	movl	-124(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB92_116:                             # %if.end547
	cmpl	$0, -116(%rbp)
	jne	.LBB92_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB92_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB92_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB92_121
.LBB92_120:                             # %if.then560
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB92_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB92_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB92_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB92_126
.LBB92_125:                             # %if.then579
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB92_126:                             # %if.end583
	jmp	.LBB92_127
.LBB92_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB92_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB92_130
.LBB92_129:                             # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB92_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB92_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB92_133
.LBB92_132:                             # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB92_133:                             # %if.end612
	jmp	.LBB92_134
.LBB92_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB92_136
# %bb.135:                              # %if.then617
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -68(%rbp)
	movl	-36(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB92_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB92_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB92_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
.LBB92_139:                             # %return
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1215939627, -160(%rbp) # imm = 0x4879C42B
	jne	.LBB92_141
.LBB92_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB92_140
.Lfunc_end92:
	.size	RDCost_for_8x8blocks.63, .Lfunc_end92-RDCost_for_8x8blocks.63
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.64 # -- Begin function set_stored_macroblock_parameters.64
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.64,@function
set_stored_macroblock_parameters.64:    # @set_stored_macroblock_parameters.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1106282250, -52(%rbp)  # imm = 0x41F0870A
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB93_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB93_4
.LBB93_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB93_4
.LBB93_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB93_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB93_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB93_5 Depth=1
	movl	$0, -4(%rbp)
.LBB93_7:                               # %for.cond9
                                        #   Parent Loop BB93_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB93_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB93_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-96(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB93_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB93_10:                              # %if.end
                                        #   in Loop: Header=BB93_7 Depth=2
	jmp	.LBB93_11
.LBB93_11:                              # %for.inc
                                        #   in Loop: Header=BB93_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_7
.LBB93_12:                              # %for.end
                                        #   in Loop: Header=BB93_5 Depth=1
	jmp	.LBB93_13
.LBB93_13:                              # %for.inc33
                                        #   in Loop: Header=BB93_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_5
.LBB93_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB93_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB93_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB93_16 Depth=1
	movl	$0, -4(%rbp)
.LBB93_18:                              # %for.cond43
                                        #   Parent Loop BB93_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB93_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB93_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB93_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB93_21:                              # %if.end92
                                        #   in Loop: Header=BB93_18 Depth=2
	jmp	.LBB93_22
.LBB93_22:                              # %for.inc93
                                        #   in Loop: Header=BB93_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_18
.LBB93_23:                              # %for.end95
                                        #   in Loop: Header=BB93_16 Depth=1
	jmp	.LBB93_24
.LBB93_24:                              # %for.inc96
                                        #   in Loop: Header=BB93_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_16
.LBB93_25:                              # %for.end98
	jmp	.LBB93_26
.LBB93_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB93_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_30 Depth 2
                                        #       Child Loop BB93_32 Depth 3
                                        #         Child Loop BB93_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB93_28 Depth=1
	movl	$0, -8(%rbp)
.LBB93_30:                              # %for.cond118
                                        #   Parent Loop BB93_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_32 Depth 3
                                        #         Child Loop BB93_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB93_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB93_30 Depth=2
	movl	$0, -12(%rbp)
.LBB93_32:                              # %for.cond122
                                        #   Parent Loop BB93_28 Depth=1
                                        #     Parent Loop BB93_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB93_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB93_32 Depth=3
	movl	$0, -28(%rbp)
.LBB93_34:                              # %for.cond126
                                        #   Parent Loop BB93_28 Depth=1
                                        #     Parent Loop BB93_30 Depth=2
                                        #       Parent Loop BB93_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB93_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB93_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB93_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_34
.LBB93_37:                              # %for.end150
                                        #   in Loop: Header=BB93_32 Depth=3
	jmp	.LBB93_38
.LBB93_38:                              # %for.inc151
                                        #   in Loop: Header=BB93_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_32
.LBB93_39:                              # %for.end153
                                        #   in Loop: Header=BB93_30 Depth=2
	jmp	.LBB93_40
.LBB93_40:                              # %for.inc154
                                        #   in Loop: Header=BB93_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_30
.LBB93_41:                              # %for.end156
                                        #   in Loop: Header=BB93_28 Depth=1
	jmp	.LBB93_42
.LBB93_42:                              # %for.inc157
                                        #   in Loop: Header=BB93_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_28
.LBB93_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB93_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_46 Depth 2
                                        #       Child Loop BB93_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB93_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB93_44 Depth=1
	movl	$0, -12(%rbp)
.LBB93_46:                              # %for.cond164
                                        #   Parent Loop BB93_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB93_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB93_46 Depth=2
	movl	$0, -28(%rbp)
.LBB93_48:                              # %for.cond168
                                        #   Parent Loop BB93_44 Depth=1
                                        #     Parent Loop BB93_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB93_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB93_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB93_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_48
.LBB93_51:                              # %for.end188
                                        #   in Loop: Header=BB93_46 Depth=2
	jmp	.LBB93_52
.LBB93_52:                              # %for.inc189
                                        #   in Loop: Header=BB93_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_46
.LBB93_53:                              # %for.end191
                                        #   in Loop: Header=BB93_44 Depth=1
	jmp	.LBB93_54
.LBB93_54:                              # %for.inc192
                                        #   in Loop: Header=BB93_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_44
.LBB93_55:                              # %for.end194
	jmp	.LBB93_56
.LBB93_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB93_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB93_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB93_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB93_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB93_60:                              # %if.end225
                                        #   in Loop: Header=BB93_57 Depth=1
	jmp	.LBB93_61
.LBB93_61:                              # %for.inc226
                                        #   in Loop: Header=BB93_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_57
.LBB93_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB93_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB93_65
.LBB93_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB93_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB93_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB93_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB93_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB93_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB93_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB93_74
.LBB93_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB93_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB93_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB93_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB93_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB93_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB93_78 Depth=1
	movl	$0, -4(%rbp)
.LBB93_80:                              # %for.cond276
                                        #   Parent Loop BB93_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB93_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_88
.LBB93_85:                              # %if.then299
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB93_87:                              # %if.end345
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_101
.LBB93_88:                              # %if.else346
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB93_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB93_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB93_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB93_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB93_94
.LBB93_93:                              # %cond.false368
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB93_94:                              # %cond.end369
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB93_96:                              # %if.end458
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_100
.LBB93_97:                              # %if.else459
                                        #   in Loop: Header=BB93_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB93_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB93_99:                              # %if.end578
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_100
.LBB93_100:                             # %if.end579
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_101
.LBB93_101:                             # %if.end580
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB93_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_108
.LBB93_105:                             # %if.then602
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB93_107:                             # %if.end654
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_108
.LBB93_108:                             # %if.end655
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_109
.LBB93_109:                             # %for.inc656
                                        #   in Loop: Header=BB93_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_80
.LBB93_110:                             # %for.end658
                                        #   in Loop: Header=BB93_78 Depth=1
	jmp	.LBB93_111
.LBB93_111:                             # %for.inc659
                                        #   in Loop: Header=BB93_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_78
.LBB93_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB93_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB93_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB93_114 Depth=1
	movl	$0, -4(%rbp)
.LBB93_116:                             # %for.cond668
                                        #   Parent Loop BB93_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB93_124
.LBB93_121:                             # %if.then693
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB93_123:                             # %if.end745
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_137
.LBB93_124:                             # %if.else746
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB93_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB93_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB93_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB93_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB93_130
.LBB93_129:                             # %cond.false770
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB93_130:                             # %cond.end772
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB93_132:                             # %if.end862
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_136
.LBB93_133:                             # %if.else863
                                        #   in Loop: Header=BB93_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB93_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB93_135:                             # %if.end983
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_136
.LBB93_136:                             # %if.end984
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_137
.LBB93_137:                             # %if.end985
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_138
.LBB93_138:                             # %for.inc986
                                        #   in Loop: Header=BB93_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_116
.LBB93_139:                             # %for.end988
                                        #   in Loop: Header=BB93_114 Depth=1
	jmp	.LBB93_140
.LBB93_140:                             # %for.inc989
                                        #   in Loop: Header=BB93_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_114
.LBB93_141:                             # %for.end991
	jmp	.LBB93_142
.LBB93_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB93_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB93_144 Depth=1
	movl	$0, -8(%rbp)
.LBB93_146:                             # %for.cond1002
                                        #   Parent Loop BB93_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB93_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB93_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_146
.LBB93_149:                             # %for.end1030
                                        #   in Loop: Header=BB93_144 Depth=1
	jmp	.LBB93_150
.LBB93_150:                             # %for.inc1031
                                        #   in Loop: Header=BB93_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_144
.LBB93_151:                             # %for.end1033
	jmp	.LBB93_175
.LBB93_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB93_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB93_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB93_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB93_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB93_157:                             # %for.cond1049
                                        #   Parent Loop BB93_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB93_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB93_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_157
.LBB93_160:                             # %for.end1065
                                        #   in Loop: Header=BB93_155 Depth=1
	jmp	.LBB93_161
.LBB93_161:                             # %for.inc1066
                                        #   in Loop: Header=BB93_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_155
.LBB93_162:                             # %for.end1068
	jmp	.LBB93_174
.LBB93_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB93_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB93_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB93_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB93_167:                             # %for.cond1081
                                        #   Parent Loop BB93_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB93_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB93_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_167
.LBB93_170:                             # %for.end1101
                                        #   in Loop: Header=BB93_165 Depth=1
	jmp	.LBB93_171
.LBB93_171:                             # %for.inc1102
                                        #   in Loop: Header=BB93_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_165
.LBB93_172:                             # %for.end1104
	jmp	.LBB93_173
.LBB93_173:                             # %if.end1105
	jmp	.LBB93_174
.LBB93_174:                             # %if.end1106
	jmp	.LBB93_175
.LBB93_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB93_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB93_177 Depth=1
	movl	$0, -8(%rbp)
.LBB93_179:                             # %for.cond1116
                                        #   Parent Loop BB93_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB93_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB93_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_179
.LBB93_182:                             # %for.end1141
                                        #   in Loop: Header=BB93_177 Depth=1
	jmp	.LBB93_183
.LBB93_183:                             # %for.inc1142
                                        #   in Loop: Header=BB93_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_177
.LBB93_184:                             # %for.end1144
	jmp	.LBB93_185
.LBB93_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB93_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB93_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB93_189:                             # %for.cond1157
                                        #   Parent Loop BB93_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB93_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB93_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_189
.LBB93_192:                             # %for.end1181
                                        #   in Loop: Header=BB93_187 Depth=1
	jmp	.LBB93_193
.LBB93_193:                             # %for.inc1182
                                        #   in Loop: Header=BB93_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_187
.LBB93_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB93_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1106282250, -52(%rbp)  # imm = 0x41F0870A
	jne	.LBB93_197
.LBB93_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_196
.Lfunc_end93:
	.size	set_stored_macroblock_parameters.64, .Lfunc_end93-set_stored_macroblock_parameters.64
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.65 # -- Begin function StoreNewMotionVectorsBlock8x8.65
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.65,@function
StoreNewMotionVectorsBlock8x8.65:       # @StoreNewMotionVectorsBlock8x8.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1305617380, -72(%rbp)  # imm = 0x4DD223E4
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB94_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB94_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB94_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_4:                               # %for.cond6
                                        #   Parent Loop BB94_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB94_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB94_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_4
.LBB94_7:                               # %for.end
                                        #   in Loop: Header=BB94_2 Depth=1
	jmp	.LBB94_8
.LBB94_8:                               # %for.inc39
                                        #   in Loop: Header=BB94_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_2
.LBB94_9:                               # %for.end41
	jmp	.LBB94_61
.LBB94_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB94_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB94_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB94_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_14:                              # %for.cond46
                                        #   Parent Loop BB94_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB94_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB94_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_14
.LBB94_17:                              # %for.end119
                                        #   in Loop: Header=BB94_12 Depth=1
	jmp	.LBB94_18
.LBB94_18:                              # %for.inc120
                                        #   in Loop: Header=BB94_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_12
.LBB94_19:                              # %for.end122
	jmp	.LBB94_61
.LBB94_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB94_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB94_31
.LBB94_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB94_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB94_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_25:                              # %for.cond129
                                        #   Parent Loop BB94_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB94_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB94_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_25
.LBB94_28:                              # %for.end206
                                        #   in Loop: Header=BB94_23 Depth=1
	jmp	.LBB94_29
.LBB94_29:                              # %for.inc207
                                        #   in Loop: Header=BB94_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_23
.LBB94_30:                              # %for.end209
	jmp	.LBB94_40
.LBB94_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB94_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_34:                              # %for.cond214
                                        #   Parent Loop BB94_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB94_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB94_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_34
.LBB94_37:                              # %for.end235
                                        #   in Loop: Header=BB94_32 Depth=1
	jmp	.LBB94_38
.LBB94_38:                              # %for.inc236
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_32
.LBB94_39:                              # %for.end238
	jmp	.LBB94_40
.LBB94_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB94_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB94_51
.LBB94_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB94_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB94_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_45:                              # %for.cond247
                                        #   Parent Loop BB94_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB94_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB94_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_45
.LBB94_48:                              # %for.end324
                                        #   in Loop: Header=BB94_43 Depth=1
	jmp	.LBB94_49
.LBB94_49:                              # %for.inc325
                                        #   in Loop: Header=BB94_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_43
.LBB94_50:                              # %for.end327
	jmp	.LBB94_60
.LBB94_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB94_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB94_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_54:                              # %for.cond332
                                        #   Parent Loop BB94_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB94_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB94_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_54
.LBB94_57:                              # %for.end353
                                        #   in Loop: Header=BB94_52 Depth=1
	jmp	.LBB94_58
.LBB94_58:                              # %for.inc354
                                        #   in Loop: Header=BB94_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_52
.LBB94_59:                              # %for.end356
	jmp	.LBB94_60
.LBB94_60:                              # %if.end357
	jmp	.LBB94_61
.LBB94_61:                              # %if.end358
	cmpl	$1305617380, -72(%rbp)  # imm = 0x4DD223E4
	jne	.LBB94_63
.LBB94_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_62
.Lfunc_end94:
	.size	StoreNewMotionVectorsBlock8x8.65, .Lfunc_end94-StoreNewMotionVectorsBlock8x8.65
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.66    # -- Begin function RestoreMVBlock8x8.66
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.66,@function
RestoreMVBlock8x8.66:                   # @RestoreMVBlock8x8.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$958599366, -68(%rbp)   # imm = 0x392310C6
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB95_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB95_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB95_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB95_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB95_5:                               # %for.cond7
                                        #   Parent Loop BB95_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB95_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB95_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_5
.LBB95_8:                               # %for.end
                                        #   in Loop: Header=BB95_3 Depth=1
	jmp	.LBB95_9
.LBB95_9:                               # %for.inc76
                                        #   in Loop: Header=BB95_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_3
.LBB95_10:                              # %for.end78
	jmp	.LBB95_11
.LBB95_11:                              # %if.end
	jmp	.LBB95_46
.LBB95_12:                              # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB95_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB95_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB95_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB95_16:                              # %for.cond84
                                        #   Parent Loop BB95_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB95_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB95_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_16
.LBB95_19:                              # %for.end161
                                        #   in Loop: Header=BB95_14 Depth=1
	jmp	.LBB95_20
.LBB95_20:                              # %for.inc162
                                        #   in Loop: Header=BB95_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_14
.LBB95_21:                              # %for.end164
	jmp	.LBB95_45
.LBB95_22:                              # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB95_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB95_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB95_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB95_26:                              # %for.cond171
                                        #   Parent Loop BB95_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB95_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB95_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_26
.LBB95_29:                              # %for.end248
                                        #   in Loop: Header=BB95_24 Depth=1
	jmp	.LBB95_30
.LBB95_30:                              # %for.inc249
                                        #   in Loop: Header=BB95_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_24
.LBB95_31:                              # %for.end251
	jmp	.LBB95_44
.LBB95_32:                              # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB95_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB95_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB95_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB95_36:                              # %for.cond258
                                        #   Parent Loop BB95_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB95_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB95_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_36
.LBB95_39:                              # %for.end407
                                        #   in Loop: Header=BB95_34 Depth=1
	jmp	.LBB95_40
.LBB95_40:                              # %for.inc408
                                        #   in Loop: Header=BB95_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_34
.LBB95_41:                              # %for.end410
	jmp	.LBB95_43
.LBB95_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB95_43:                              # %if.end412
	jmp	.LBB95_44
.LBB95_44:                              # %if.end413
	jmp	.LBB95_45
.LBB95_45:                              # %if.end414
	jmp	.LBB95_46
.LBB95_46:                              # %if.end415
	cmpl	$958599366, -68(%rbp)   # imm = 0x392310C6
	jne	.LBB95_48
.LBB95_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_47
.Lfunc_end95:
	.size	RestoreMVBlock8x8.66, .Lfunc_end95-RestoreMVBlock8x8.66
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.67 # -- Begin function StoreNewMotionVectorsBlock8x8.67
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.67,@function
StoreNewMotionVectorsBlock8x8.67:       # @StoreNewMotionVectorsBlock8x8.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1365568910, -72(%rbp)  # imm = 0x5164ED8E
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB96_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_4:                               # %for.cond6
                                        #   Parent Loop BB96_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB96_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB96_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB96_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_4
.LBB96_7:                               # %for.end
                                        #   in Loop: Header=BB96_2 Depth=1
	jmp	.LBB96_8
.LBB96_8:                               # %for.inc39
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_2
.LBB96_9:                               # %for.end41
	jmp	.LBB96_61
.LBB96_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB96_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB96_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_14:                              # %for.cond46
                                        #   Parent Loop BB96_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB96_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB96_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB96_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_14
.LBB96_17:                              # %for.end119
                                        #   in Loop: Header=BB96_12 Depth=1
	jmp	.LBB96_18
.LBB96_18:                              # %for.inc120
                                        #   in Loop: Header=BB96_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_12
.LBB96_19:                              # %for.end122
	jmp	.LBB96_61
.LBB96_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB96_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB96_31
.LBB96_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB96_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_25:                              # %for.cond129
                                        #   Parent Loop BB96_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB96_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB96_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB96_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_25
.LBB96_28:                              # %for.end206
                                        #   in Loop: Header=BB96_23 Depth=1
	jmp	.LBB96_29
.LBB96_29:                              # %for.inc207
                                        #   in Loop: Header=BB96_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_23
.LBB96_30:                              # %for.end209
	jmp	.LBB96_40
.LBB96_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB96_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_34:                              # %for.cond214
                                        #   Parent Loop BB96_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB96_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB96_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB96_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_34
.LBB96_37:                              # %for.end235
                                        #   in Loop: Header=BB96_32 Depth=1
	jmp	.LBB96_38
.LBB96_38:                              # %for.inc236
                                        #   in Loop: Header=BB96_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_32
.LBB96_39:                              # %for.end238
	jmp	.LBB96_40
.LBB96_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB96_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB96_51
.LBB96_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_45:                              # %for.cond247
                                        #   Parent Loop BB96_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB96_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB96_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB96_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_45
.LBB96_48:                              # %for.end324
                                        #   in Loop: Header=BB96_43 Depth=1
	jmp	.LBB96_49
.LBB96_49:                              # %for.inc325
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_43
.LBB96_50:                              # %for.end327
	jmp	.LBB96_60
.LBB96_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_54:                              # %for.cond332
                                        #   Parent Loop BB96_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB96_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB96_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB96_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_54
.LBB96_57:                              # %for.end353
                                        #   in Loop: Header=BB96_52 Depth=1
	jmp	.LBB96_58
.LBB96_58:                              # %for.inc354
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_52
.LBB96_59:                              # %for.end356
	jmp	.LBB96_60
.LBB96_60:                              # %if.end357
	jmp	.LBB96_61
.LBB96_61:                              # %if.end358
	cmpl	$1365568910, -72(%rbp)  # imm = 0x5164ED8E
	jne	.LBB96_63
.LBB96_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_62
.Lfunc_end96:
	.size	StoreNewMotionVectorsBlock8x8.67, .Lfunc_end96-StoreNewMotionVectorsBlock8x8.67
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.68 # -- Begin function store_macroblock_parameters.68
	.p2align	4, 0x90
	.type	store_macroblock_parameters.68,@function
store_macroblock_parameters.68:         # @store_macroblock_parameters.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$697021996, -36(%rbp)   # imm = 0x298BB62C
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB97_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB97_3
.LBB97_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB97_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB97_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB97_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB97_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB97_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_4
.LBB97_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB97_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB97_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB97_10:                              # %for.cond20
                                        #   Parent Loop BB97_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB97_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB97_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_10
.LBB97_13:                              # %for.end39
                                        #   in Loop: Header=BB97_8 Depth=1
	jmp	.LBB97_14
.LBB97_14:                              # %for.inc40
                                        #   in Loop: Header=BB97_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_8
.LBB97_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB97_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB97_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB97_16 Depth=1
	movl	$0, -8(%rbp)
.LBB97_18:                              # %for.cond47
                                        #   Parent Loop BB97_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB97_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB97_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB97_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_18
.LBB97_21:                              # %for.end70
                                        #   in Loop: Header=BB97_16 Depth=1
	jmp	.LBB97_22
.LBB97_22:                              # %for.inc71
                                        #   in Loop: Header=BB97_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_16
.LBB97_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB97_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB97_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB97_24 Depth=1
	movl	$0, -4(%rbp)
.LBB97_26:                              # %for.cond78
                                        #   Parent Loop BB97_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB97_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB97_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB97_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_26
.LBB97_29:                              # %for.end94
                                        #   in Loop: Header=BB97_24 Depth=1
	jmp	.LBB97_30
.LBB97_30:                              # %for.inc95
                                        #   in Loop: Header=BB97_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_24
.LBB97_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB97_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB97_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB97_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB97_33 Depth=1
	movl	$0, -4(%rbp)
.LBB97_35:                              # %for.cond105
                                        #   Parent Loop BB97_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB97_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB97_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB97_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_35
.LBB97_38:                              # %for.end136
                                        #   in Loop: Header=BB97_33 Depth=1
	jmp	.LBB97_39
.LBB97_39:                              # %for.inc137
                                        #   in Loop: Header=BB97_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_33
.LBB97_40:                              # %for.end139
	jmp	.LBB97_41
.LBB97_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB97_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB97_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB97_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_46 Depth 2
                                        #       Child Loop BB97_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB97_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB97_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB97_46:                              # %for.cond152
                                        #   Parent Loop BB97_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB97_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB97_48:                              # %for.cond159
                                        #   Parent Loop BB97_44 Depth=1
                                        #     Parent Loop BB97_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB97_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB97_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_48
.LBB97_51:                              # %for.end179
                                        #   in Loop: Header=BB97_46 Depth=2
	jmp	.LBB97_52
.LBB97_52:                              # %for.inc180
                                        #   in Loop: Header=BB97_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_46
.LBB97_53:                              # %for.end182
                                        #   in Loop: Header=BB97_44 Depth=1
	jmp	.LBB97_54
.LBB97_54:                              # %for.inc183
                                        #   in Loop: Header=BB97_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_44
.LBB97_55:                              # %for.end185
	jmp	.LBB97_56
.LBB97_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB97_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB97_59
.LBB97_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB97_60
.LBB97_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB97_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB97_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB97_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB97_61 Depth=1
	movl	$0, -4(%rbp)
.LBB97_63:                              # %for.cond197
                                        #   Parent Loop BB97_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB97_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB97_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB97_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB97_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB97_66:                              # %if.end230
                                        #   in Loop: Header=BB97_63 Depth=2
	jmp	.LBB97_67
.LBB97_67:                              # %for.inc231
                                        #   in Loop: Header=BB97_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_63
.LBB97_68:                              # %for.end233
                                        #   in Loop: Header=BB97_61 Depth=1
	jmp	.LBB97_69
.LBB97_69:                              # %for.inc234
                                        #   in Loop: Header=BB97_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_61
.LBB97_70:                              # %for.end236
	cmpl	$697021996, -36(%rbp)   # imm = 0x298BB62C
	jne	.LBB97_72
.LBB97_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_71
.Lfunc_end97:
	.size	store_macroblock_parameters.68, .Lfunc_end97-store_macroblock_parameters.68
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.69 # -- Begin function CheckReliabilityOfRef.69
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.69,@function
CheckReliabilityOfRef.69:               # @CheckReliabilityOfRef.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1423590550, -104(%rbp) # imm = 0x54DA4496
	movl	%edi, -80(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB98_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB98_6
.LBB98_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB98_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB98_5
.LBB98_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB98_5
.LBB98_5:                               # %cond.end
.LBB98_6:                               # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB98_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB98_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB98_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB98_14
.LBB98_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB98_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB98_13
.LBB98_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB98_13
.LBB98_13:                              # %cond.end20
.LBB98_14:                              # %cond.end22
	movl	%edx, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB98_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB98_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB98_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_19 Depth 2
                                        #       Child Loop BB98_23 Depth 3
                                        #         Child Loop BB98_25 Depth 4
                                        #       Child Loop BB98_53 Depth 3
                                        #         Child Loop BB98_55 Depth 4
                                        #           Child Loop BB98_66 Depth 5
                                        #       Child Loop BB98_87 Depth 3
                                        #         Child Loop BB98_89 Depth 4
                                        #           Child Loop BB98_100 Depth 5
                                        #       Child Loop BB98_121 Depth 3
                                        #         Child Loop BB98_123 Depth 4
                                        #           Child Loop BB98_125 Depth 5
                                        #             Child Loop BB98_136 Depth 6
                                        #       Child Loop BB98_159 Depth 3
                                        #         Child Loop BB98_161 Depth 4
                                        #           Child Loop BB98_163 Depth 5
                                        #             Child Loop BB98_174 Depth 6
                                        #       Child Loop BB98_196 Depth 3
                                        #         Child Loop BB98_198 Depth 4
                                        #           Child Loop BB98_212 Depth 5
                                        #           Child Loop BB98_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB98_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB98_17 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB98_19:                              # %for.cond31
                                        #   Parent Loop BB98_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_23 Depth 3
                                        #         Child Loop BB98_25 Depth 4
                                        #       Child Loop BB98_53 Depth 3
                                        #         Child Loop BB98_55 Depth 4
                                        #           Child Loop BB98_66 Depth 5
                                        #       Child Loop BB98_87 Depth 3
                                        #         Child Loop BB98_89 Depth 4
                                        #           Child Loop BB98_100 Depth 5
                                        #       Child Loop BB98_121 Depth 3
                                        #         Child Loop BB98_123 Depth 4
                                        #           Child Loop BB98_125 Depth 5
                                        #             Child Loop BB98_136 Depth 6
                                        #       Child Loop BB98_159 Depth 3
                                        #         Child Loop BB98_161 Depth 4
                                        #           Child Loop BB98_163 Depth 5
                                        #             Child Loop BB98_174 Depth 6
                                        #       Child Loop BB98_196 Depth 3
                                        #         Child Loop BB98_198 Depth 4
                                        #           Child Loop BB98_212 Depth 5
                                        #           Child Loop BB98_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB98_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB98_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB98_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB98_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_23:                              # %for.cond75
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB98_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB98_23 Depth=3
	movl	$0, -16(%rbp)
.LBB98_25:                              # %for.cond79
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB98_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB98_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB98_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB98_29
.LBB98_28:                              # %cond.false87
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB98_29:                              # %cond.end89
                                        #   in Loop: Header=BB98_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB98_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB98_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_35
.LBB98_31:                              # %cond.false94
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB98_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB98_34
.LBB98_33:                              # %cond.false99
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB98_34:                              # %cond.end101
                                        #   in Loop: Header=BB98_25 Depth=4
.LBB98_35:                              # %cond.end103
                                        #   in Loop: Header=BB98_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB98_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB98_38
.LBB98_37:                              # %cond.false111
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB98_38:                              # %cond.end113
                                        #   in Loop: Header=BB98_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB98_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB98_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_44
.LBB98_40:                              # %cond.false118
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB98_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB98_43
.LBB98_42:                              # %cond.false123
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB98_43:                              # %cond.end125
                                        #   in Loop: Header=BB98_25 Depth=4
.LBB98_44:                              # %cond.end127
                                        #   in Loop: Header=BB98_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_46:                              # %if.end
                                        #   in Loop: Header=BB98_25 Depth=4
	jmp	.LBB98_47
.LBB98_47:                              # %for.inc
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_25
.LBB98_48:                              # %for.end
                                        #   in Loop: Header=BB98_23 Depth=3
	jmp	.LBB98_49
.LBB98_49:                              # %for.inc135
                                        #   in Loop: Header=BB98_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_23
.LBB98_50:                              # %for.end137
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_262
.LBB98_51:                              # %if.else
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB98_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_53:                              # %for.cond141
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_55 Depth 4
                                        #           Child Loop BB98_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB98_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB98_53 Depth=3
	movl	$0, -16(%rbp)
.LBB98_55:                              # %for.cond145
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB98_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB98_59
.LBB98_58:                              # %cond.false153
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_59:                              # %cond.end155
                                        #   in Loop: Header=BB98_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB98_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB98_65
.LBB98_61:                              # %cond.false160
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB98_64
.LBB98_63:                              # %cond.false165
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_64:                              # %cond.end167
                                        #   in Loop: Header=BB98_55 Depth=4
.LBB98_65:                              # %cond.end169
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB98_66:                              # %for.cond171
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_53 Depth=3
                                        #         Parent Loop BB98_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB98_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_70
.LBB98_69:                              # %cond.false180
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB98_70:                              # %cond.end183
                                        #   in Loop: Header=BB98_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB98_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_76
.LBB98_72:                              # %cond.false188
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_75
.LBB98_74:                              # %cond.false194
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB98_75:                              # %cond.end197
                                        #   in Loop: Header=BB98_66 Depth=5
.LBB98_76:                              # %cond.end199
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_78:                              # %if.end209
                                        #   in Loop: Header=BB98_66 Depth=5
	jmp	.LBB98_79
.LBB98_79:                              # %for.inc210
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_66
.LBB98_80:                              # %for.end212
                                        #   in Loop: Header=BB98_55 Depth=4
	jmp	.LBB98_81
.LBB98_81:                              # %for.inc213
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_55
.LBB98_82:                              # %for.end215
                                        #   in Loop: Header=BB98_53 Depth=3
	jmp	.LBB98_83
.LBB98_83:                              # %for.inc216
                                        #   in Loop: Header=BB98_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_53
.LBB98_84:                              # %for.end218
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_261
.LBB98_85:                              # %if.else219
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB98_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_87:                              # %for.cond223
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_89 Depth 4
                                        #           Child Loop BB98_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB98_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB98_87 Depth=3
	movl	$0, -16(%rbp)
.LBB98_89:                              # %for.cond227
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB98_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB98_93
.LBB98_92:                              # %cond.false235
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_93:                              # %cond.end237
                                        #   in Loop: Header=BB98_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB98_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB98_99
.LBB98_95:                              # %cond.false242
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB98_98
.LBB98_97:                              # %cond.false247
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_98:                              # %cond.end249
                                        #   in Loop: Header=BB98_89 Depth=4
.LBB98_99:                              # %cond.end251
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_100:                             # %for.cond253
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_87 Depth=3
                                        #         Parent Loop BB98_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_104
.LBB98_103:                             # %cond.false262
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_104:                             # %cond.end265
                                        #   in Loop: Header=BB98_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB98_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_110
.LBB98_106:                             # %cond.false270
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_109
.LBB98_108:                             # %cond.false276
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_109:                             # %cond.end279
                                        #   in Loop: Header=BB98_100 Depth=5
.LBB98_110:                             # %cond.end281
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_112:                             # %if.end291
                                        #   in Loop: Header=BB98_100 Depth=5
	jmp	.LBB98_113
.LBB98_113:                             # %for.inc292
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_100
.LBB98_114:                             # %for.end294
                                        #   in Loop: Header=BB98_89 Depth=4
	jmp	.LBB98_115
.LBB98_115:                             # %for.inc295
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_89
.LBB98_116:                             # %for.end297
                                        #   in Loop: Header=BB98_87 Depth=3
	jmp	.LBB98_117
.LBB98_117:                             # %for.inc298
                                        #   in Loop: Header=BB98_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_87
.LBB98_118:                             # %for.end300
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_260
.LBB98_119:                             # %if.else301
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB98_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_121:                             # %for.cond305
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_123 Depth 4
                                        #           Child Loop BB98_125 Depth 5
                                        #             Child Loop BB98_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB98_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB98_121 Depth=3
	movl	$0, -16(%rbp)
.LBB98_123:                             # %for.cond309
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_125 Depth 5
                                        #             Child Loop BB98_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB98_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB98_123 Depth=4
	movl	$-2, -20(%rbp)
.LBB98_125:                             # %for.cond313
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_121 Depth=3
                                        #         Parent Loop BB98_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_136 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB98_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_129
.LBB98_128:                             # %cond.false322
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_129:                             # %cond.end325
                                        #   in Loop: Header=BB98_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB98_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_135
.LBB98_131:                             # %cond.false330
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_134
.LBB98_133:                             # %cond.false336
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_134:                             # %cond.end339
                                        #   in Loop: Header=BB98_125 Depth=5
.LBB98_135:                             # %cond.end341
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB98_136:                             # %for.cond343
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_121 Depth=3
                                        #         Parent Loop BB98_123 Depth=4
                                        #           Parent Loop BB98_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB98_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB98_140
.LBB98_139:                             # %cond.false352
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_140:                             # %cond.end355
                                        #   in Loop: Header=BB98_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB98_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB98_146
.LBB98_142:                             # %cond.false360
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB98_145
.LBB98_144:                             # %cond.false366
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_145:                             # %cond.end369
                                        #   in Loop: Header=BB98_136 Depth=6
.LBB98_146:                             # %cond.end371
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_148:                             # %if.end381
                                        #   in Loop: Header=BB98_136 Depth=6
	jmp	.LBB98_149
.LBB98_149:                             # %for.inc382
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_136
.LBB98_150:                             # %for.end384
                                        #   in Loop: Header=BB98_125 Depth=5
	jmp	.LBB98_151
.LBB98_151:                             # %for.inc385
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_125
.LBB98_152:                             # %for.end387
                                        #   in Loop: Header=BB98_123 Depth=4
	jmp	.LBB98_153
.LBB98_153:                             # %for.inc388
                                        #   in Loop: Header=BB98_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_123
.LBB98_154:                             # %for.end390
                                        #   in Loop: Header=BB98_121 Depth=3
	jmp	.LBB98_155
.LBB98_155:                             # %for.inc391
                                        #   in Loop: Header=BB98_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_121
.LBB98_156:                             # %for.end393
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_259
.LBB98_157:                             # %if.else394
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB98_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_159:                             # %for.cond398
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_161 Depth 4
                                        #           Child Loop BB98_163 Depth 5
                                        #             Child Loop BB98_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB98_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB98_159 Depth=3
	movl	$0, -16(%rbp)
.LBB98_161:                             # %for.cond402
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_163 Depth 5
                                        #             Child Loop BB98_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB98_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB98_161 Depth=4
	movl	$-2, -32(%rbp)
.LBB98_163:                             # %for.cond406
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_159 Depth=3
                                        #         Parent Loop BB98_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_174 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB98_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_167
.LBB98_166:                             # %cond.false415
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_167:                             # %cond.end418
                                        #   in Loop: Header=BB98_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB98_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_173
.LBB98_169:                             # %cond.false423
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_172
.LBB98_171:                             # %cond.false429
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_172:                             # %cond.end432
                                        #   in Loop: Header=BB98_163 Depth=5
.LBB98_173:                             # %cond.end434
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_174:                             # %for.cond436
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_159 Depth=3
                                        #         Parent Loop BB98_161 Depth=4
                                        #           Parent Loop BB98_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB98_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB98_178
.LBB98_177:                             # %cond.false445
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_178:                             # %cond.end448
                                        #   in Loop: Header=BB98_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB98_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB98_184
.LBB98_180:                             # %cond.false453
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB98_183
.LBB98_182:                             # %cond.false459
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_183:                             # %cond.end462
                                        #   in Loop: Header=BB98_174 Depth=6
.LBB98_184:                             # %cond.end464
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_186:                             # %if.end474
                                        #   in Loop: Header=BB98_174 Depth=6
	jmp	.LBB98_187
.LBB98_187:                             # %for.inc475
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_174
.LBB98_188:                             # %for.end477
                                        #   in Loop: Header=BB98_163 Depth=5
	jmp	.LBB98_189
.LBB98_189:                             # %for.inc478
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_163
.LBB98_190:                             # %for.end480
                                        #   in Loop: Header=BB98_161 Depth=4
	jmp	.LBB98_191
.LBB98_191:                             # %for.inc481
                                        #   in Loop: Header=BB98_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_161
.LBB98_192:                             # %for.end483
                                        #   in Loop: Header=BB98_159 Depth=3
	jmp	.LBB98_193
.LBB98_193:                             # %for.inc484
                                        #   in Loop: Header=BB98_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_159
.LBB98_194:                             # %for.end486
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_258
.LBB98_195:                             # %if.else487
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_196:                             # %for.cond488
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_198 Depth 4
                                        #           Child Loop BB98_212 Depth 5
                                        #           Child Loop BB98_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB98_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB98_196 Depth=3
	movl	$0, -16(%rbp)
.LBB98_198:                             # %for.cond492
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_212 Depth 5
                                        #           Child Loop BB98_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB98_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB98_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB98_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB98_202
.LBB98_201:                             # %cond.false500
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB98_202:                             # %cond.end503
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB98_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB98_205
.LBB98_204:                             # %cond.false508
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-48(%rbp), %eax
.LBB98_205:                             # %cond.end509
                                        #   in Loop: Header=BB98_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB98_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB98_211
.LBB98_207:                             # %cond.false514
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB98_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB98_210
.LBB98_209:                             # %cond.false518
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-48(%rbp), %eax
.LBB98_210:                             # %cond.end519
                                        #   in Loop: Header=BB98_198 Depth=4
.LBB98_211:                             # %cond.end521
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB98_212:                             # %for.cond523
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_196 Depth=3
                                        #         Parent Loop BB98_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB98_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_216
.LBB98_215:                             # %cond.false532
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_216:                             # %cond.end535
                                        #   in Loop: Header=BB98_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB98_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_222
.LBB98_218:                             # %cond.false540
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_221
.LBB98_220:                             # %cond.false546
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_221:                             # %cond.end549
                                        #   in Loop: Header=BB98_212 Depth=5
.LBB98_222:                             # %cond.end551
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_224:                             # %if.end561
                                        #   in Loop: Header=BB98_212 Depth=5
	jmp	.LBB98_225
.LBB98_225:                             # %for.inc562
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_212
.LBB98_226:                             # %for.end564
                                        #   in Loop: Header=BB98_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB98_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB98_229
.LBB98_228:                             # %cond.false569
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB98_229:                             # %cond.end572
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB98_232
.LBB98_231:                             # %cond.false577
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-44(%rbp), %eax
.LBB98_232:                             # %cond.end578
                                        #   in Loop: Header=BB98_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB98_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB98_238
.LBB98_234:                             # %cond.false583
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB98_237
.LBB98_236:                             # %cond.false587
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-44(%rbp), %eax
.LBB98_237:                             # %cond.end588
                                        #   in Loop: Header=BB98_198 Depth=4
.LBB98_238:                             # %cond.end590
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_239:                             # %for.cond592
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_196 Depth=3
                                        #         Parent Loop BB98_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_243
.LBB98_242:                             # %cond.false601
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_243:                             # %cond.end604
                                        #   in Loop: Header=BB98_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB98_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_249
.LBB98_245:                             # %cond.false609
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_248
.LBB98_247:                             # %cond.false615
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_248:                             # %cond.end618
                                        #   in Loop: Header=BB98_239 Depth=5
.LBB98_249:                             # %cond.end620
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_251:                             # %if.end630
                                        #   in Loop: Header=BB98_239 Depth=5
	jmp	.LBB98_252
.LBB98_252:                             # %for.inc631
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_239
.LBB98_253:                             # %for.end633
                                        #   in Loop: Header=BB98_198 Depth=4
	jmp	.LBB98_254
.LBB98_254:                             # %for.inc634
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_198
.LBB98_255:                             # %for.end636
                                        #   in Loop: Header=BB98_196 Depth=3
	jmp	.LBB98_256
.LBB98_256:                             # %for.inc637
                                        #   in Loop: Header=BB98_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_196
.LBB98_257:                             # %for.end639
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_258
.LBB98_258:                             # %if.end640
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_259
.LBB98_259:                             # %if.end641
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_260
.LBB98_260:                             # %if.end642
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_261
.LBB98_261:                             # %if.end643
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_262
.LBB98_262:                             # %if.end644
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_263
.LBB98_263:                             # %for.inc645
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB98_19
.LBB98_264:                             # %for.end647
                                        #   in Loop: Header=BB98_17 Depth=1
	jmp	.LBB98_265
.LBB98_265:                             # %for.inc648
                                        #   in Loop: Header=BB98_17 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB98_17
.LBB98_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB98_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$1423590550, -104(%rbp) # imm = 0x54DA4496
	jne	.LBB98_269
.LBB98_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_268
.Lfunc_end98:
	.size	CheckReliabilityOfRef.69, .Lfunc_end98-CheckReliabilityOfRef.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.70
.LCPI99_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI99_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.70
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.70,@function
Mode_Decision_for_8x8IntraBlocks.70:    # @Mode_Decision_for_8x8IntraBlocks.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI99_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI99_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1349914844, -24(%rbp)  # imm = 0x507610DC
	movl	%edi, -20(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB99_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-20(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB99_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	$1, -16(%rbp)
.LBB99_4:                               # %if.end
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_1
.LBB99_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1349914844, -24(%rbp)  # imm = 0x507610DC
	jne	.LBB99_8
.LBB99_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_7
.Lfunc_end99:
	.size	Mode_Decision_for_8x8IntraBlocks.70, .Lfunc_end99-Mode_Decision_for_8x8IntraBlocks.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.71
.LCPI100_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI100_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.71
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.71,@function
Mode_Decision_for_8x8IntraBlocks.71:    # @Mode_Decision_for_8x8IntraBlocks.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI100_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI100_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1234185275, -20(%rbp)  # imm = 0x49902C3B
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB100_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB100_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	$1, -16(%rbp)
.LBB100_4:                              # %if.end
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_1
.LBB100_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1234185275, -20(%rbp)  # imm = 0x49902C3B
	jne	.LBB100_8
.LBB100_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_7
.Lfunc_end100:
	.size	Mode_Decision_for_8x8IntraBlocks.71, .Lfunc_end100-Mode_Decision_for_8x8IntraBlocks.71
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.72    # -- Begin function RestoreMVBlock8x8.72
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.72,@function
RestoreMVBlock8x8.72:                   # @RestoreMVBlock8x8.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1401145372, -68(%rbp)  # imm = 0x5383C81C
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB101_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB101_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB101_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB101_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_5:                              # %for.cond7
                                        #   Parent Loop BB101_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB101_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB101_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB101_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_5
.LBB101_8:                              # %for.end
                                        #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_9
.LBB101_9:                              # %for.inc76
                                        #   in Loop: Header=BB101_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_3
.LBB101_10:                             # %for.end78
	jmp	.LBB101_11
.LBB101_11:                             # %if.end
	jmp	.LBB101_46
.LBB101_12:                             # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB101_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB101_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB101_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_16:                             # %for.cond84
                                        #   Parent Loop BB101_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB101_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB101_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB101_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_16
.LBB101_19:                             # %for.end161
                                        #   in Loop: Header=BB101_14 Depth=1
	jmp	.LBB101_20
.LBB101_20:                             # %for.inc162
                                        #   in Loop: Header=BB101_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_14
.LBB101_21:                             # %for.end164
	jmp	.LBB101_45
.LBB101_22:                             # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB101_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB101_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB101_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_26:                             # %for.cond171
                                        #   Parent Loop BB101_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB101_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB101_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB101_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_26
.LBB101_29:                             # %for.end248
                                        #   in Loop: Header=BB101_24 Depth=1
	jmp	.LBB101_30
.LBB101_30:                             # %for.inc249
                                        #   in Loop: Header=BB101_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_24
.LBB101_31:                             # %for.end251
	jmp	.LBB101_44
.LBB101_32:                             # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB101_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB101_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB101_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_36:                             # %for.cond258
                                        #   Parent Loop BB101_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB101_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB101_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB101_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_36
.LBB101_39:                             # %for.end407
                                        #   in Loop: Header=BB101_34 Depth=1
	jmp	.LBB101_40
.LBB101_40:                             # %for.inc408
                                        #   in Loop: Header=BB101_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_34
.LBB101_41:                             # %for.end410
	jmp	.LBB101_43
.LBB101_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB101_43:                             # %if.end412
	jmp	.LBB101_44
.LBB101_44:                             # %if.end413
	jmp	.LBB101_45
.LBB101_45:                             # %if.end414
	jmp	.LBB101_46
.LBB101_46:                             # %if.end415
	cmpl	$1401145372, -68(%rbp)  # imm = 0x5383C81C
	jne	.LBB101_48
.LBB101_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_47
.Lfunc_end101:
	.size	RestoreMVBlock8x8.72, .Lfunc_end101-RestoreMVBlock8x8.72
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.73 # -- Begin function store_macroblock_parameters.73
	.p2align	4, 0x90
	.type	store_macroblock_parameters.73,@function
store_macroblock_parameters.73:         # @store_macroblock_parameters.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2041388860, -36(%rbp)  # imm = 0x79AD1F3C
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB102_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB102_3
.LBB102_2:                              # %if.else
	movl	$0, bi_pred_me
.LBB102_3:                              # %if.end
	movl	$0, -4(%rbp)
.LBB102_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB102_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB102_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB102_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_4
.LBB102_7:                              # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB102_8:                              # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB102_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB102_10:                             # %for.cond20
                                        #   Parent Loop BB102_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB102_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB102_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_10
.LBB102_13:                             # %for.end39
                                        #   in Loop: Header=BB102_8 Depth=1
	jmp	.LBB102_14
.LBB102_14:                             # %for.inc40
                                        #   in Loop: Header=BB102_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_8
.LBB102_15:                             # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB102_16:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB102_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB102_16 Depth=1
	movl	$0, -8(%rbp)
.LBB102_18:                             # %for.cond47
                                        #   Parent Loop BB102_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB102_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB102_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB102_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_18
.LBB102_21:                             # %for.end70
                                        #   in Loop: Header=BB102_16 Depth=1
	jmp	.LBB102_22
.LBB102_22:                             # %for.inc71
                                        #   in Loop: Header=BB102_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_16
.LBB102_23:                             # %for.end73
	movl	$0, -8(%rbp)
.LBB102_24:                             # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB102_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB102_24 Depth=1
	movl	$0, -4(%rbp)
.LBB102_26:                             # %for.cond78
                                        #   Parent Loop BB102_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB102_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB102_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB102_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_26
.LBB102_29:                             # %for.end94
                                        #   in Loop: Header=BB102_24 Depth=1
	jmp	.LBB102_30
.LBB102_30:                             # %for.inc95
                                        #   in Loop: Header=BB102_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_24
.LBB102_31:                             # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB102_33:                             # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB102_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB102_33 Depth=1
	movl	$0, -4(%rbp)
.LBB102_35:                             # %for.cond105
                                        #   Parent Loop BB102_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB102_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB102_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB102_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_35
.LBB102_38:                             # %for.end136
                                        #   in Loop: Header=BB102_33 Depth=1
	jmp	.LBB102_39
.LBB102_39:                             # %for.inc137
                                        #   in Loop: Header=BB102_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_33
.LBB102_40:                             # %for.end139
	jmp	.LBB102_41
.LBB102_41:                             # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB102_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB102_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB102_44:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_46 Depth 2
                                        #       Child Loop BB102_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB102_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB102_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB102_46:                             # %for.cond152
                                        #   Parent Loop BB102_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB102_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB102_48:                             # %for.cond159
                                        #   Parent Loop BB102_44 Depth=1
                                        #     Parent Loop BB102_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB102_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB102_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_48
.LBB102_51:                             # %for.end179
                                        #   in Loop: Header=BB102_46 Depth=2
	jmp	.LBB102_52
.LBB102_52:                             # %for.inc180
                                        #   in Loop: Header=BB102_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_46
.LBB102_53:                             # %for.end182
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_54
.LBB102_54:                             # %for.inc183
                                        #   in Loop: Header=BB102_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_44
.LBB102_55:                             # %for.end185
	jmp	.LBB102_56
.LBB102_56:                             # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB102_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB102_59
.LBB102_58:                             # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB102_60
.LBB102_59:                             # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB102_60:                             # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB102_61:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB102_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB102_61 Depth=1
	movl	$0, -4(%rbp)
.LBB102_63:                             # %for.cond197
                                        #   Parent Loop BB102_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB102_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB102_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB102_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB102_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB102_66:                             # %if.end230
                                        #   in Loop: Header=BB102_63 Depth=2
	jmp	.LBB102_67
.LBB102_67:                             # %for.inc231
                                        #   in Loop: Header=BB102_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_63
.LBB102_68:                             # %for.end233
                                        #   in Loop: Header=BB102_61 Depth=1
	jmp	.LBB102_69
.LBB102_69:                             # %for.inc234
                                        #   in Loop: Header=BB102_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_61
.LBB102_70:                             # %for.end236
	cmpl	$2041388860, -36(%rbp)  # imm = 0x79AD1F3C
	jne	.LBB102_72
.LBB102_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_72:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_71
.Lfunc_end102:
	.size	store_macroblock_parameters.73, .Lfunc_end102-store_macroblock_parameters.73
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.74 # -- Begin function StoreNewMotionVectorsBlock8x8.74
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.74,@function
StoreNewMotionVectorsBlock8x8.74:       # @StoreNewMotionVectorsBlock8x8.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$211118040, -72(%rbp)   # imm = 0xC9567D8
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB103_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_4:                              # %for.cond6
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB103_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc39
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end41
	jmp	.LBB103_61
.LBB103_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB103_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_12:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB103_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_14:                             # %for.cond46
                                        #   Parent Loop BB103_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB103_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_14
.LBB103_17:                             # %for.end119
                                        #   in Loop: Header=BB103_12 Depth=1
	jmp	.LBB103_18
.LBB103_18:                             # %for.inc120
                                        #   in Loop: Header=BB103_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_12
.LBB103_19:                             # %for.end122
	jmp	.LBB103_61
.LBB103_20:                             # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB103_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB103_31
.LBB103_22:                             # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_23:                             # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB103_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_25:                             # %for.cond129
                                        #   Parent Loop BB103_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB103_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB103_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB103_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_25
.LBB103_28:                             # %for.end206
                                        #   in Loop: Header=BB103_23 Depth=1
	jmp	.LBB103_29
.LBB103_29:                             # %for.inc207
                                        #   in Loop: Header=BB103_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_23
.LBB103_30:                             # %for.end209
	jmp	.LBB103_40
.LBB103_31:                             # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_32:                             # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB103_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_34:                             # %for.cond214
                                        #   Parent Loop BB103_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB103_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB103_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB103_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_34
.LBB103_37:                             # %for.end235
                                        #   in Loop: Header=BB103_32 Depth=1
	jmp	.LBB103_38
.LBB103_38:                             # %for.inc236
                                        #   in Loop: Header=BB103_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_32
.LBB103_39:                             # %for.end238
	jmp	.LBB103_40
.LBB103_40:                             # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB103_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB103_51
.LBB103_42:                             # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_43:                             # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB103_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_45:                             # %for.cond247
                                        #   Parent Loop BB103_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB103_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB103_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB103_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_45
.LBB103_48:                             # %for.end324
                                        #   in Loop: Header=BB103_43 Depth=1
	jmp	.LBB103_49
.LBB103_49:                             # %for.inc325
                                        #   in Loop: Header=BB103_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_43
.LBB103_50:                             # %for.end327
	jmp	.LBB103_60
.LBB103_51:                             # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_52:                             # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB103_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_54:                             # %for.cond332
                                        #   Parent Loop BB103_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB103_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB103_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB103_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_54
.LBB103_57:                             # %for.end353
                                        #   in Loop: Header=BB103_52 Depth=1
	jmp	.LBB103_58
.LBB103_58:                             # %for.inc354
                                        #   in Loop: Header=BB103_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_52
.LBB103_59:                             # %for.end356
	jmp	.LBB103_60
.LBB103_60:                             # %if.end357
	jmp	.LBB103_61
.LBB103_61:                             # %if.end358
	cmpl	$211118040, -72(%rbp)   # imm = 0xC9567D8
	jne	.LBB103_63
.LBB103_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_62
.Lfunc_end103:
	.size	StoreNewMotionVectorsBlock8x8.74, .Lfunc_end103-StoreNewMotionVectorsBlock8x8.74
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.75 # -- Begin function set_stored_macroblock_parameters.75
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.75,@function
set_stored_macroblock_parameters.75:    # @set_stored_macroblock_parameters.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$112865564, -52(%rbp)   # imm = 0x6BA311C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB104_4
.LBB104_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB104_4
.LBB104_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB104_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB104_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB104_5 Depth=1
	movl	$0, -4(%rbp)
.LBB104_7:                              # %for.cond9
                                        #   Parent Loop BB104_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB104_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB104_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-96(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB104_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB104_10:                             # %if.end
                                        #   in Loop: Header=BB104_7 Depth=2
	jmp	.LBB104_11
.LBB104_11:                             # %for.inc
                                        #   in Loop: Header=BB104_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_7
.LBB104_12:                             # %for.end
                                        #   in Loop: Header=BB104_5 Depth=1
	jmp	.LBB104_13
.LBB104_13:                             # %for.inc33
                                        #   in Loop: Header=BB104_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_5
.LBB104_14:                             # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB104_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB104_16:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB104_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB104_16 Depth=1
	movl	$0, -4(%rbp)
.LBB104_18:                             # %for.cond43
                                        #   Parent Loop BB104_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB104_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB104_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB104_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB104_21:                             # %if.end92
                                        #   in Loop: Header=BB104_18 Depth=2
	jmp	.LBB104_22
.LBB104_22:                             # %for.inc93
                                        #   in Loop: Header=BB104_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_18
.LBB104_23:                             # %for.end95
                                        #   in Loop: Header=BB104_16 Depth=1
	jmp	.LBB104_24
.LBB104_24:                             # %for.inc96
                                        #   in Loop: Header=BB104_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_16
.LBB104_25:                             # %for.end98
	jmp	.LBB104_26
.LBB104_26:                             # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB104_28:                             # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_30 Depth 2
                                        #       Child Loop BB104_32 Depth 3
                                        #         Child Loop BB104_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB104_28 Depth=1
	movl	$0, -8(%rbp)
.LBB104_30:                             # %for.cond118
                                        #   Parent Loop BB104_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_32 Depth 3
                                        #         Child Loop BB104_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB104_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB104_30 Depth=2
	movl	$0, -12(%rbp)
.LBB104_32:                             # %for.cond122
                                        #   Parent Loop BB104_28 Depth=1
                                        #     Parent Loop BB104_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB104_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB104_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB104_32 Depth=3
	movl	$0, -28(%rbp)
.LBB104_34:                             # %for.cond126
                                        #   Parent Loop BB104_28 Depth=1
                                        #     Parent Loop BB104_30 Depth=2
                                        #       Parent Loop BB104_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB104_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB104_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB104_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB104_34
.LBB104_37:                             # %for.end150
                                        #   in Loop: Header=BB104_32 Depth=3
	jmp	.LBB104_38
.LBB104_38:                             # %for.inc151
                                        #   in Loop: Header=BB104_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_32
.LBB104_39:                             # %for.end153
                                        #   in Loop: Header=BB104_30 Depth=2
	jmp	.LBB104_40
.LBB104_40:                             # %for.inc154
                                        #   in Loop: Header=BB104_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_30
.LBB104_41:                             # %for.end156
                                        #   in Loop: Header=BB104_28 Depth=1
	jmp	.LBB104_42
.LBB104_42:                             # %for.inc157
                                        #   in Loop: Header=BB104_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_28
.LBB104_43:                             # %for.end159
	movl	$0, -4(%rbp)
.LBB104_44:                             # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_46 Depth 2
                                        #       Child Loop BB104_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB104_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB104_44 Depth=1
	movl	$0, -12(%rbp)
.LBB104_46:                             # %for.cond164
                                        #   Parent Loop BB104_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB104_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB104_46 Depth=2
	movl	$0, -28(%rbp)
.LBB104_48:                             # %for.cond168
                                        #   Parent Loop BB104_44 Depth=1
                                        #     Parent Loop BB104_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB104_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB104_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB104_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB104_48
.LBB104_51:                             # %for.end188
                                        #   in Loop: Header=BB104_46 Depth=2
	jmp	.LBB104_52
.LBB104_52:                             # %for.inc189
                                        #   in Loop: Header=BB104_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_46
.LBB104_53:                             # %for.end191
                                        #   in Loop: Header=BB104_44 Depth=1
	jmp	.LBB104_54
.LBB104_54:                             # %for.inc192
                                        #   in Loop: Header=BB104_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_44
.LBB104_55:                             # %for.end194
	jmp	.LBB104_56
.LBB104_56:                             # %if.end195
	movl	$0, -4(%rbp)
.LBB104_57:                             # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB104_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB104_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB104_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB104_60:                             # %if.end225
                                        #   in Loop: Header=BB104_57 Depth=1
	jmp	.LBB104_61
.LBB104_61:                             # %for.inc226
                                        #   in Loop: Header=BB104_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_57
.LBB104_62:                             # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB104_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB104_65
.LBB104_64:                             # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB104_65:                             # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB104_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB104_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB104_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB104_69:                             # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB104_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB104_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB104_74
.LBB104_73:                             # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB104_74:                             # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB104_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB104_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB104_77:                             # %if.end271
	movl	$0, -8(%rbp)
.LBB104_78:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB104_78 Depth=1
	movl	$0, -4(%rbp)
.LBB104_80:                             # %for.cond276
                                        #   Parent Loop BB104_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB104_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB104_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB104_88
.LBB104_85:                             # %if.then299
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB104_87:                             # %if.end345
                                        #   in Loop: Header=BB104_80 Depth=2
	jmp	.LBB104_101
.LBB104_88:                             # %if.else346
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB104_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB104_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB104_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB104_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB104_94
.LBB104_93:                             # %cond.false368
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB104_94:                             # %cond.end369
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB104_96:                             # %if.end458
                                        #   in Loop: Header=BB104_80 Depth=2
	jmp	.LBB104_100
.LBB104_97:                             # %if.else459
                                        #   in Loop: Header=BB104_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB104_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB104_99:                             # %if.end578
                                        #   in Loop: Header=BB104_80 Depth=2
	jmp	.LBB104_100
.LBB104_100:                            # %if.end579
                                        #   in Loop: Header=BB104_80 Depth=2
	jmp	.LBB104_101
.LBB104_101:                            # %if.end580
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB104_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB104_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB104_108
.LBB104_105:                            # %if.then602
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB104_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB104_107:                            # %if.end654
                                        #   in Loop: Header=BB104_80 Depth=2
	jmp	.LBB104_108
.LBB104_108:                            # %if.end655
                                        #   in Loop: Header=BB104_80 Depth=2
	jmp	.LBB104_109
.LBB104_109:                            # %for.inc656
                                        #   in Loop: Header=BB104_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_80
.LBB104_110:                            # %for.end658
                                        #   in Loop: Header=BB104_78 Depth=1
	jmp	.LBB104_111
.LBB104_111:                            # %for.inc659
                                        #   in Loop: Header=BB104_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_78
.LBB104_112:                            # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB104_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB104_114:                            # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB104_114 Depth=1
	movl	$0, -4(%rbp)
.LBB104_116:                            # %for.cond668
                                        #   Parent Loop BB104_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB104_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB104_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB104_124
.LBB104_121:                            # %if.then693
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB104_123:                            # %if.end745
                                        #   in Loop: Header=BB104_116 Depth=2
	jmp	.LBB104_137
.LBB104_124:                            # %if.else746
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB104_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB104_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB104_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB104_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB104_130
.LBB104_129:                            # %cond.false770
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB104_130:                            # %cond.end772
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB104_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB104_132:                            # %if.end862
                                        #   in Loop: Header=BB104_116 Depth=2
	jmp	.LBB104_136
.LBB104_133:                            # %if.else863
                                        #   in Loop: Header=BB104_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB104_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB104_135:                            # %if.end983
                                        #   in Loop: Header=BB104_116 Depth=2
	jmp	.LBB104_136
.LBB104_136:                            # %if.end984
                                        #   in Loop: Header=BB104_116 Depth=2
	jmp	.LBB104_137
.LBB104_137:                            # %if.end985
                                        #   in Loop: Header=BB104_116 Depth=2
	jmp	.LBB104_138
.LBB104_138:                            # %for.inc986
                                        #   in Loop: Header=BB104_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_116
.LBB104_139:                            # %for.end988
                                        #   in Loop: Header=BB104_114 Depth=1
	jmp	.LBB104_140
.LBB104_140:                            # %for.inc989
                                        #   in Loop: Header=BB104_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_114
.LBB104_141:                            # %for.end991
	jmp	.LBB104_142
.LBB104_142:                            # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB104_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB104_144:                            # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB104_144 Depth=1
	movl	$0, -8(%rbp)
.LBB104_146:                            # %for.cond1002
                                        #   Parent Loop BB104_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB104_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB104_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_146
.LBB104_149:                            # %for.end1030
                                        #   in Loop: Header=BB104_144 Depth=1
	jmp	.LBB104_150
.LBB104_150:                            # %for.inc1031
                                        #   in Loop: Header=BB104_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_144
.LBB104_151:                            # %for.end1033
	jmp	.LBB104_175
.LBB104_152:                            # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB104_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB104_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB104_155:                            # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB104_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB104_157:                            # %for.cond1049
                                        #   Parent Loop BB104_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB104_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB104_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_157
.LBB104_160:                            # %for.end1065
                                        #   in Loop: Header=BB104_155 Depth=1
	jmp	.LBB104_161
.LBB104_161:                            # %for.inc1066
                                        #   in Loop: Header=BB104_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_155
.LBB104_162:                            # %for.end1068
	jmp	.LBB104_174
.LBB104_163:                            # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB104_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB104_165:                            # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB104_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB104_167:                            # %for.cond1081
                                        #   Parent Loop BB104_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB104_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB104_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_167
.LBB104_170:                            # %for.end1101
                                        #   in Loop: Header=BB104_165 Depth=1
	jmp	.LBB104_171
.LBB104_171:                            # %for.inc1102
                                        #   in Loop: Header=BB104_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_165
.LBB104_172:                            # %for.end1104
	jmp	.LBB104_173
.LBB104_173:                            # %if.end1105
	jmp	.LBB104_174
.LBB104_174:                            # %if.end1106
	jmp	.LBB104_175
.LBB104_175:                            # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB104_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB104_177:                            # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB104_177 Depth=1
	movl	$0, -8(%rbp)
.LBB104_179:                            # %for.cond1116
                                        #   Parent Loop BB104_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB104_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB104_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_179
.LBB104_182:                            # %for.end1141
                                        #   in Loop: Header=BB104_177 Depth=1
	jmp	.LBB104_183
.LBB104_183:                            # %for.inc1142
                                        #   in Loop: Header=BB104_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_177
.LBB104_184:                            # %for.end1144
	jmp	.LBB104_185
.LBB104_185:                            # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB104_187:                            # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB104_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB104_189:                            # %for.cond1157
                                        #   Parent Loop BB104_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB104_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB104_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_189
.LBB104_192:                            # %for.end1181
                                        #   in Loop: Header=BB104_187 Depth=1
	jmp	.LBB104_193
.LBB104_193:                            # %for.inc1182
                                        #   in Loop: Header=BB104_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_187
.LBB104_194:                            # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB104_195:                            # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$112865564, -52(%rbp)   # imm = 0x6BA311C
	jne	.LBB104_197
.LBB104_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_197:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_196
.Lfunc_end104:
	.size	set_stored_macroblock_parameters.75, .Lfunc_end104-set_stored_macroblock_parameters.75
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.76 # -- Begin function RDCost_for_4x4Blocks_Chroma.76
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.76,@function
RDCost_for_4x4Blocks_Chroma.76:         # @RDCost_for_4x4Blocks_Chroma.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1886985603, -60(%rbp)  # imm = 0x70791D83
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB105_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB105_3
.LBB105_2:                              # %if.else
	movl	$0, -28(%rbp)
.LBB105_3:                              # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB105_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB105_18
.LBB105_5:                              # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB105_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB105_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB105_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB105_8:                              # %land.end
                                        #   in Loop: Header=BB105_6 Depth=1
	testb	$1, %al
	jne	.LBB105_9
	jmp	.LBB105_17
.LBB105_9:                              # %for.body
                                        #   in Loop: Header=BB105_6 Depth=1
	movq	-104(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-88(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB105_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB105_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB105_12
.LBB105_11:                             # %if.else54
                                        #   in Loop: Header=BB105_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB105_12:                             # %if.end55
                                        #   in Loop: Header=BB105_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB105_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB105_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB105_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB105_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB105_15:                             # %lor.end
                                        #   in Loop: Header=BB105_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB105_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB105_6
.LBB105_17:                             # %for.end
	jmp	.LBB105_18
.LBB105_18:                             # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1886985603, -60(%rbp)  # imm = 0x70791D83
	jne	.LBB105_20
.LBB105_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_19
.Lfunc_end105:
	.size	RDCost_for_4x4Blocks_Chroma.76, .Lfunc_end105-RDCost_for_4x4Blocks_Chroma.76
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.77 # -- Begin function RDCost_for_4x4Blocks_Chroma.77
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.77,@function
RDCost_for_4x4Blocks_Chroma.77:         # @RDCost_for_4x4Blocks_Chroma.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1850236826, -56(%rbp)  # imm = 0x6E485F9A
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB106_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB106_3
.LBB106_2:                              # %if.else
	movl	$0, -32(%rbp)
.LBB106_3:                              # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB106_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB106_18
.LBB106_5:                              # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB106_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB106_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB106_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB106_8:                              # %land.end
                                        #   in Loop: Header=BB106_6 Depth=1
	testb	$1, %al
	jne	.LBB106_9
	jmp	.LBB106_17
.LBB106_9:                              # %for.body
                                        #   in Loop: Header=BB106_6 Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB106_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB106_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB106_12
.LBB106_11:                             # %if.else54
                                        #   in Loop: Header=BB106_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB106_12:                             # %if.end55
                                        #   in Loop: Header=BB106_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB106_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB106_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB106_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB106_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB106_15:                             # %lor.end
                                        #   in Loop: Header=BB106_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB106_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB106_6
.LBB106_17:                             # %for.end
	jmp	.LBB106_18
.LBB106_18:                             # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1850236826, -56(%rbp)  # imm = 0x6E485F9A
	jne	.LBB106_20
.LBB106_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_19
.Lfunc_end106:
	.size	RDCost_for_4x4Blocks_Chroma.77, .Lfunc_end106-RDCost_for_4x4Blocks_Chroma.77
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.78 # -- Begin function SetRefAndMotionVectors.78
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.78,@function
SetRefAndMotionVectors.78:              # @SetRefAndMotionVectors.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$745574094, -72(%rbp)   # imm = 0x2C708ECE
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB107_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB107_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB107_4
.LBB107_3:                              # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB107_5
.LBB107_4:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB107_5
.LBB107_5:                              # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB107_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB107_9
.LBB107_8:                              # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB107_9
.LBB107_9:                              # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB107_19
# %bb.10:                               # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_11:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB107_11 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_13:                             # %for.cond34
                                        #   Parent Loop BB107_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB107_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB107_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_13
.LBB107_16:                             # %for.end
                                        #   in Loop: Header=BB107_11 Depth=1
	jmp	.LBB107_17
.LBB107_17:                             # %for.inc117
                                        #   in Loop: Header=BB107_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_11
.LBB107_18:                             # %for.end119
	jmp	.LBB107_64
.LBB107_19:                             # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB107_29
# %bb.20:                               # %if.then121
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_21:                             # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB107_21 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_23:                             # %for.cond126
                                        #   Parent Loop BB107_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB107_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB107_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_23
.LBB107_26:                             # %for.end211
                                        #   in Loop: Header=BB107_21 Depth=1
	jmp	.LBB107_27
.LBB107_27:                             # %for.inc212
                                        #   in Loop: Header=BB107_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_21
.LBB107_28:                             # %for.end214
	jmp	.LBB107_64
.LBB107_29:                             # %if.else
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_30:                             # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB107_30 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_32:                             # %for.cond219
                                        #   Parent Loop BB107_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB107_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB107_35:                             # %if.end255
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB107_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB107_46
.LBB107_37:                             # %if.then261
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB107_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB107_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB107_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB107_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB107_43
.LBB107_42:                             # %cond.false274
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB107_43:                             # %cond.end275
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB107_45
.LBB107_44:                             # %if.else342
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB107_45:                             # %if.end424
                                        #   in Loop: Header=BB107_32 Depth=2
	jmp	.LBB107_47
.LBB107_46:                             # %if.else425
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB107_47:                             # %if.end468
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB107_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB107_58
.LBB107_49:                             # %if.then474
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB107_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB107_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB107_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB107_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB107_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB107_55
.LBB107_54:                             # %cond.false490
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB107_55:                             # %cond.end492
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB107_57
.LBB107_56:                             # %if.else559
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB107_57:                             # %if.end641
                                        #   in Loop: Header=BB107_32 Depth=2
	jmp	.LBB107_59
.LBB107_58:                             # %if.else642
                                        #   in Loop: Header=BB107_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB107_59:                             # %if.end685
                                        #   in Loop: Header=BB107_32 Depth=2
	jmp	.LBB107_60
.LBB107_60:                             # %for.inc686
                                        #   in Loop: Header=BB107_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_32
.LBB107_61:                             # %for.end688
                                        #   in Loop: Header=BB107_30 Depth=1
	jmp	.LBB107_62
.LBB107_62:                             # %for.inc689
                                        #   in Loop: Header=BB107_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_30
.LBB107_63:                             # %for.end691
	jmp	.LBB107_64
.LBB107_64:                             # %if.end692
	cmpl	$745574094, -72(%rbp)   # imm = 0x2C708ECE
	jne	.LBB107_66
.LBB107_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_66:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_65
.Lfunc_end107:
	.size	SetRefAndMotionVectors.78, .Lfunc_end107-SetRefAndMotionVectors.78
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.79 # -- Begin function CheckReliabilityOfRef.79
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.79,@function
CheckReliabilityOfRef.79:               # @CheckReliabilityOfRef.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$739417137, -104(%rbp)  # imm = 0x2C129C31
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB108_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB108_6
.LBB108_2:                              # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB108_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB108_5
.LBB108_4:                              # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB108_5
.LBB108_5:                              # %cond.end
.LBB108_6:                              # %cond.end6
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB108_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB108_8:                              # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB108_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB108_14
.LBB108_10:                             # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB108_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB108_13
.LBB108_12:                             # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB108_13
.LBB108_13:                             # %cond.end20
.LBB108_14:                             # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB108_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB108_16:                             # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB108_17:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_19 Depth 2
                                        #       Child Loop BB108_23 Depth 3
                                        #         Child Loop BB108_25 Depth 4
                                        #       Child Loop BB108_53 Depth 3
                                        #         Child Loop BB108_55 Depth 4
                                        #           Child Loop BB108_66 Depth 5
                                        #       Child Loop BB108_87 Depth 3
                                        #         Child Loop BB108_89 Depth 4
                                        #           Child Loop BB108_100 Depth 5
                                        #       Child Loop BB108_121 Depth 3
                                        #         Child Loop BB108_123 Depth 4
                                        #           Child Loop BB108_125 Depth 5
                                        #             Child Loop BB108_136 Depth 6
                                        #       Child Loop BB108_159 Depth 3
                                        #         Child Loop BB108_161 Depth 4
                                        #           Child Loop BB108_163 Depth 5
                                        #             Child Loop BB108_174 Depth 6
                                        #       Child Loop BB108_196 Depth 3
                                        #         Child Loop BB108_198 Depth 4
                                        #           Child Loop BB108_212 Depth 5
                                        #           Child Loop BB108_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB108_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB108_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB108_19:                             # %for.cond31
                                        #   Parent Loop BB108_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_23 Depth 3
                                        #         Child Loop BB108_25 Depth 4
                                        #       Child Loop BB108_53 Depth 3
                                        #         Child Loop BB108_55 Depth 4
                                        #           Child Loop BB108_66 Depth 5
                                        #       Child Loop BB108_87 Depth 3
                                        #         Child Loop BB108_89 Depth 4
                                        #           Child Loop BB108_100 Depth 5
                                        #       Child Loop BB108_121 Depth 3
                                        #         Child Loop BB108_123 Depth 4
                                        #           Child Loop BB108_125 Depth 5
                                        #             Child Loop BB108_136 Depth 6
                                        #       Child Loop BB108_159 Depth 3
                                        #         Child Loop BB108_161 Depth 4
                                        #           Child Loop BB108_163 Depth 5
                                        #             Child Loop BB108_174 Depth 6
                                        #       Child Loop BB108_196 Depth 3
                                        #         Child Loop BB108_198 Depth 4
                                        #           Child Loop BB108_212 Depth 5
                                        #           Child Loop BB108_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB108_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB108_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-32(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB108_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB108_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB108_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB108_19 Depth=2
	movl	$0, -16(%rbp)
.LBB108_23:                             # %for.cond75
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_25 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB108_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB108_23 Depth=3
	movl	$0, -12(%rbp)
.LBB108_25:                             # %for.cond79
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB108_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB108_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB108_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB108_29
.LBB108_28:                             # %cond.false87
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB108_29:                             # %cond.end89
                                        #   in Loop: Header=BB108_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB108_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB108_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB108_35
.LBB108_31:                             # %cond.false94
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB108_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB108_34
.LBB108_33:                             # %cond.false99
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB108_34:                             # %cond.end101
                                        #   in Loop: Header=BB108_25 Depth=4
.LBB108_35:                             # %cond.end103
                                        #   in Loop: Header=BB108_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB108_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB108_38
.LBB108_37:                             # %cond.false111
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB108_38:                             # %cond.end113
                                        #   in Loop: Header=BB108_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB108_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB108_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB108_44
.LBB108_40:                             # %cond.false118
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB108_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB108_43
.LBB108_42:                             # %cond.false123
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB108_43:                             # %cond.end125
                                        #   in Loop: Header=BB108_25 Depth=4
.LBB108_44:                             # %cond.end127
                                        #   in Loop: Header=BB108_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB108_267
.LBB108_46:                             # %if.end
                                        #   in Loop: Header=BB108_25 Depth=4
	jmp	.LBB108_47
.LBB108_47:                             # %for.inc
                                        #   in Loop: Header=BB108_25 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_48:                             # %for.end
                                        #   in Loop: Header=BB108_23 Depth=3
	jmp	.LBB108_49
.LBB108_49:                             # %for.inc135
                                        #   in Loop: Header=BB108_23 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_23
.LBB108_50:                             # %for.end137
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_262
.LBB108_51:                             # %if.else
                                        #   in Loop: Header=BB108_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB108_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB108_19 Depth=2
	movl	$0, -16(%rbp)
.LBB108_53:                             # %for.cond141
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_55 Depth 4
                                        #           Child Loop BB108_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB108_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB108_53 Depth=3
	movl	$0, -12(%rbp)
.LBB108_55:                             # %for.cond145
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB108_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB108_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB108_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB108_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB108_59
.LBB108_58:                             # %cond.false153
                                        #   in Loop: Header=BB108_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_59:                             # %cond.end155
                                        #   in Loop: Header=BB108_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB108_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB108_65
.LBB108_61:                             # %cond.false160
                                        #   in Loop: Header=BB108_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB108_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB108_64
.LBB108_63:                             # %cond.false165
                                        #   in Loop: Header=BB108_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_64:                             # %cond.end167
                                        #   in Loop: Header=BB108_55 Depth=4
.LBB108_65:                             # %cond.end169
                                        #   in Loop: Header=BB108_55 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB108_66:                             # %for.cond171
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_53 Depth=3
                                        #         Parent Loop BB108_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB108_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB108_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB108_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB108_70
.LBB108_69:                             # %cond.false180
                                        #   in Loop: Header=BB108_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_70:                             # %cond.end183
                                        #   in Loop: Header=BB108_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB108_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB108_76
.LBB108_72:                             # %cond.false188
                                        #   in Loop: Header=BB108_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB108_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB108_75
.LBB108_74:                             # %cond.false194
                                        #   in Loop: Header=BB108_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_75:                             # %cond.end197
                                        #   in Loop: Header=BB108_66 Depth=5
.LBB108_76:                             # %cond.end199
                                        #   in Loop: Header=BB108_66 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB108_267
.LBB108_78:                             # %if.end209
                                        #   in Loop: Header=BB108_66 Depth=5
	jmp	.LBB108_79
.LBB108_79:                             # %for.inc210
                                        #   in Loop: Header=BB108_66 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_66
.LBB108_80:                             # %for.end212
                                        #   in Loop: Header=BB108_55 Depth=4
	jmp	.LBB108_81
.LBB108_81:                             # %for.inc213
                                        #   in Loop: Header=BB108_55 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_55
.LBB108_82:                             # %for.end215
                                        #   in Loop: Header=BB108_53 Depth=3
	jmp	.LBB108_83
.LBB108_83:                             # %for.inc216
                                        #   in Loop: Header=BB108_53 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_53
.LBB108_84:                             # %for.end218
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_261
.LBB108_85:                             # %if.else219
                                        #   in Loop: Header=BB108_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB108_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB108_19 Depth=2
	movl	$0, -16(%rbp)
.LBB108_87:                             # %for.cond223
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_89 Depth 4
                                        #           Child Loop BB108_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB108_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB108_87 Depth=3
	movl	$0, -12(%rbp)
.LBB108_89:                             # %for.cond227
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB108_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB108_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB108_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB108_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB108_93
.LBB108_92:                             # %cond.false235
                                        #   in Loop: Header=BB108_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB108_93:                             # %cond.end237
                                        #   in Loop: Header=BB108_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB108_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB108_99
.LBB108_95:                             # %cond.false242
                                        #   in Loop: Header=BB108_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB108_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB108_98
.LBB108_97:                             # %cond.false247
                                        #   in Loop: Header=BB108_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB108_98:                             # %cond.end249
                                        #   in Loop: Header=BB108_89 Depth=4
.LBB108_99:                             # %cond.end251
                                        #   in Loop: Header=BB108_89 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB108_100:                            # %for.cond253
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_87 Depth=3
                                        #         Parent Loop BB108_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB108_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB108_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB108_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB108_104
.LBB108_103:                            # %cond.false262
                                        #   in Loop: Header=BB108_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_104:                            # %cond.end265
                                        #   in Loop: Header=BB108_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB108_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB108_110
.LBB108_106:                            # %cond.false270
                                        #   in Loop: Header=BB108_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB108_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB108_109
.LBB108_108:                            # %cond.false276
                                        #   in Loop: Header=BB108_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_109:                            # %cond.end279
                                        #   in Loop: Header=BB108_100 Depth=5
.LBB108_110:                            # %cond.end281
                                        #   in Loop: Header=BB108_100 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB108_267
.LBB108_112:                            # %if.end291
                                        #   in Loop: Header=BB108_100 Depth=5
	jmp	.LBB108_113
.LBB108_113:                            # %for.inc292
                                        #   in Loop: Header=BB108_100 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_100
.LBB108_114:                            # %for.end294
                                        #   in Loop: Header=BB108_89 Depth=4
	jmp	.LBB108_115
.LBB108_115:                            # %for.inc295
                                        #   in Loop: Header=BB108_89 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_89
.LBB108_116:                            # %for.end297
                                        #   in Loop: Header=BB108_87 Depth=3
	jmp	.LBB108_117
.LBB108_117:                            # %for.inc298
                                        #   in Loop: Header=BB108_87 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_87
.LBB108_118:                            # %for.end300
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_260
.LBB108_119:                            # %if.else301
                                        #   in Loop: Header=BB108_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB108_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB108_19 Depth=2
	movl	$0, -16(%rbp)
.LBB108_121:                            # %for.cond305
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_123 Depth 4
                                        #           Child Loop BB108_125 Depth 5
                                        #             Child Loop BB108_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB108_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB108_121 Depth=3
	movl	$0, -12(%rbp)
.LBB108_123:                            # %for.cond309
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB108_125 Depth 5
                                        #             Child Loop BB108_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB108_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB108_123 Depth=4
	movl	$-2, -24(%rbp)
.LBB108_125:                            # %for.cond313
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_121 Depth=3
                                        #         Parent Loop BB108_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB108_136 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB108_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB108_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB108_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB108_129
.LBB108_128:                            # %cond.false322
                                        #   in Loop: Header=BB108_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_129:                            # %cond.end325
                                        #   in Loop: Header=BB108_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB108_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB108_135
.LBB108_131:                            # %cond.false330
                                        #   in Loop: Header=BB108_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB108_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB108_134
.LBB108_133:                            # %cond.false336
                                        #   in Loop: Header=BB108_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_134:                            # %cond.end339
                                        #   in Loop: Header=BB108_125 Depth=5
.LBB108_135:                            # %cond.end341
                                        #   in Loop: Header=BB108_125 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB108_136:                            # %for.cond343
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_121 Depth=3
                                        #         Parent Loop BB108_123 Depth=4
                                        #           Parent Loop BB108_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB108_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB108_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB108_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB108_140
.LBB108_139:                            # %cond.false352
                                        #   in Loop: Header=BB108_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB108_140:                            # %cond.end355
                                        #   in Loop: Header=BB108_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB108_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB108_146
.LBB108_142:                            # %cond.false360
                                        #   in Loop: Header=BB108_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB108_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB108_145
.LBB108_144:                            # %cond.false366
                                        #   in Loop: Header=BB108_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB108_145:                            # %cond.end369
                                        #   in Loop: Header=BB108_136 Depth=6
.LBB108_146:                            # %cond.end371
                                        #   in Loop: Header=BB108_136 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB108_267
.LBB108_148:                            # %if.end381
                                        #   in Loop: Header=BB108_136 Depth=6
	jmp	.LBB108_149
.LBB108_149:                            # %for.inc382
                                        #   in Loop: Header=BB108_136 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_136
.LBB108_150:                            # %for.end384
                                        #   in Loop: Header=BB108_125 Depth=5
	jmp	.LBB108_151
.LBB108_151:                            # %for.inc385
                                        #   in Loop: Header=BB108_125 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_125
.LBB108_152:                            # %for.end387
                                        #   in Loop: Header=BB108_123 Depth=4
	jmp	.LBB108_153
.LBB108_153:                            # %for.inc388
                                        #   in Loop: Header=BB108_123 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_123
.LBB108_154:                            # %for.end390
                                        #   in Loop: Header=BB108_121 Depth=3
	jmp	.LBB108_155
.LBB108_155:                            # %for.inc391
                                        #   in Loop: Header=BB108_121 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_121
.LBB108_156:                            # %for.end393
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_259
.LBB108_157:                            # %if.else394
                                        #   in Loop: Header=BB108_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB108_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB108_19 Depth=2
	movl	$0, -16(%rbp)
.LBB108_159:                            # %for.cond398
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_161 Depth 4
                                        #           Child Loop BB108_163 Depth 5
                                        #             Child Loop BB108_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB108_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB108_159 Depth=3
	movl	$0, -12(%rbp)
.LBB108_161:                            # %for.cond402
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB108_163 Depth 5
                                        #             Child Loop BB108_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB108_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB108_161 Depth=4
	movl	$-2, -20(%rbp)
.LBB108_163:                            # %for.cond406
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_159 Depth=3
                                        #         Parent Loop BB108_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB108_174 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB108_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB108_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB108_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB108_167
.LBB108_166:                            # %cond.false415
                                        #   in Loop: Header=BB108_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB108_167:                            # %cond.end418
                                        #   in Loop: Header=BB108_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB108_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB108_173
.LBB108_169:                            # %cond.false423
                                        #   in Loop: Header=BB108_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB108_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB108_172
.LBB108_171:                            # %cond.false429
                                        #   in Loop: Header=BB108_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB108_172:                            # %cond.end432
                                        #   in Loop: Header=BB108_163 Depth=5
.LBB108_173:                            # %cond.end434
                                        #   in Loop: Header=BB108_163 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB108_174:                            # %for.cond436
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_159 Depth=3
                                        #         Parent Loop BB108_161 Depth=4
                                        #           Parent Loop BB108_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB108_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB108_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB108_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB108_178
.LBB108_177:                            # %cond.false445
                                        #   in Loop: Header=BB108_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_178:                            # %cond.end448
                                        #   in Loop: Header=BB108_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB108_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB108_184
.LBB108_180:                            # %cond.false453
                                        #   in Loop: Header=BB108_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB108_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB108_183
.LBB108_182:                            # %cond.false459
                                        #   in Loop: Header=BB108_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_183:                            # %cond.end462
                                        #   in Loop: Header=BB108_174 Depth=6
.LBB108_184:                            # %cond.end464
                                        #   in Loop: Header=BB108_174 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB108_267
.LBB108_186:                            # %if.end474
                                        #   in Loop: Header=BB108_174 Depth=6
	jmp	.LBB108_187
.LBB108_187:                            # %for.inc475
                                        #   in Loop: Header=BB108_174 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_174
.LBB108_188:                            # %for.end477
                                        #   in Loop: Header=BB108_163 Depth=5
	jmp	.LBB108_189
.LBB108_189:                            # %for.inc478
                                        #   in Loop: Header=BB108_163 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_163
.LBB108_190:                            # %for.end480
                                        #   in Loop: Header=BB108_161 Depth=4
	jmp	.LBB108_191
.LBB108_191:                            # %for.inc481
                                        #   in Loop: Header=BB108_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_161
.LBB108_192:                            # %for.end483
                                        #   in Loop: Header=BB108_159 Depth=3
	jmp	.LBB108_193
.LBB108_193:                            # %for.inc484
                                        #   in Loop: Header=BB108_159 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_159
.LBB108_194:                            # %for.end486
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_258
.LBB108_195:                            # %if.else487
                                        #   in Loop: Header=BB108_19 Depth=2
	movl	$0, -16(%rbp)
.LBB108_196:                            # %for.cond488
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_198 Depth 4
                                        #           Child Loop BB108_212 Depth 5
                                        #           Child Loop BB108_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB108_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB108_196 Depth=3
	movl	$0, -12(%rbp)
.LBB108_198:                            # %for.cond492
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB108_212 Depth 5
                                        #           Child Loop BB108_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB108_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB108_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB108_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB108_202
.LBB108_201:                            # %cond.false500
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB108_202:                            # %cond.end503
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB108_205
.LBB108_204:                            # %cond.false508
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-44(%rbp), %eax
.LBB108_205:                            # %cond.end509
                                        #   in Loop: Header=BB108_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB108_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB108_211
.LBB108_207:                            # %cond.false514
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB108_210
.LBB108_209:                            # %cond.false518
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-44(%rbp), %eax
.LBB108_210:                            # %cond.end519
                                        #   in Loop: Header=BB108_198 Depth=4
.LBB108_211:                            # %cond.end521
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB108_212:                            # %for.cond523
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_196 Depth=3
                                        #         Parent Loop BB108_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB108_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB108_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB108_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB108_216
.LBB108_215:                            # %cond.false532
                                        #   in Loop: Header=BB108_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB108_216:                            # %cond.end535
                                        #   in Loop: Header=BB108_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB108_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB108_222
.LBB108_218:                            # %cond.false540
                                        #   in Loop: Header=BB108_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB108_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB108_221
.LBB108_220:                            # %cond.false546
                                        #   in Loop: Header=BB108_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB108_221:                            # %cond.end549
                                        #   in Loop: Header=BB108_212 Depth=5
.LBB108_222:                            # %cond.end551
                                        #   in Loop: Header=BB108_212 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB108_267
.LBB108_224:                            # %if.end561
                                        #   in Loop: Header=BB108_212 Depth=5
	jmp	.LBB108_225
.LBB108_225:                            # %for.inc562
                                        #   in Loop: Header=BB108_212 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_212
.LBB108_226:                            # %for.end564
                                        #   in Loop: Header=BB108_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB108_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB108_229
.LBB108_228:                            # %cond.false569
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB108_229:                            # %cond.end572
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB108_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB108_232
.LBB108_231:                            # %cond.false577
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-48(%rbp), %eax
.LBB108_232:                            # %cond.end578
                                        #   in Loop: Header=BB108_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB108_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB108_238
.LBB108_234:                            # %cond.false583
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB108_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB108_237
.LBB108_236:                            # %cond.false587
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-48(%rbp), %eax
.LBB108_237:                            # %cond.end588
                                        #   in Loop: Header=BB108_198 Depth=4
.LBB108_238:                            # %cond.end590
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB108_239:                            # %for.cond592
                                        #   Parent Loop BB108_17 Depth=1
                                        #     Parent Loop BB108_19 Depth=2
                                        #       Parent Loop BB108_196 Depth=3
                                        #         Parent Loop BB108_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB108_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB108_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB108_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB108_243
.LBB108_242:                            # %cond.false601
                                        #   in Loop: Header=BB108_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_243:                            # %cond.end604
                                        #   in Loop: Header=BB108_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB108_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB108_249
.LBB108_245:                            # %cond.false609
                                        #   in Loop: Header=BB108_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB108_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB108_248
.LBB108_247:                            # %cond.false615
                                        #   in Loop: Header=BB108_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_248:                            # %cond.end618
                                        #   in Loop: Header=BB108_239 Depth=5
.LBB108_249:                            # %cond.end620
                                        #   in Loop: Header=BB108_239 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB108_267
.LBB108_251:                            # %if.end630
                                        #   in Loop: Header=BB108_239 Depth=5
	jmp	.LBB108_252
.LBB108_252:                            # %for.inc631
                                        #   in Loop: Header=BB108_239 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_239
.LBB108_253:                            # %for.end633
                                        #   in Loop: Header=BB108_198 Depth=4
	jmp	.LBB108_254
.LBB108_254:                            # %for.inc634
                                        #   in Loop: Header=BB108_198 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_198
.LBB108_255:                            # %for.end636
                                        #   in Loop: Header=BB108_196 Depth=3
	jmp	.LBB108_256
.LBB108_256:                            # %for.inc637
                                        #   in Loop: Header=BB108_196 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_196
.LBB108_257:                            # %for.end639
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_258
.LBB108_258:                            # %if.end640
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_259
.LBB108_259:                            # %if.end641
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_260
.LBB108_260:                            # %if.end642
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_261
.LBB108_261:                            # %if.end643
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_262
.LBB108_262:                            # %if.end644
                                        #   in Loop: Header=BB108_19 Depth=2
	jmp	.LBB108_263
.LBB108_263:                            # %for.inc645
                                        #   in Loop: Header=BB108_19 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB108_19
.LBB108_264:                            # %for.end647
                                        #   in Loop: Header=BB108_17 Depth=1
	jmp	.LBB108_265
.LBB108_265:                            # %for.inc648
                                        #   in Loop: Header=BB108_17 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB108_17
.LBB108_266:                            # %for.end650
	movl	$1, -56(%rbp)
.LBB108_267:                            # %return
	movl	-56(%rbp), %ebx
	cmpl	$739417137, -104(%rbp)  # imm = 0x2C129C31
	jne	.LBB108_269
.LBB108_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_269:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_268
.Lfunc_end108:
	.size	CheckReliabilityOfRef.79, .Lfunc_end108-CheckReliabilityOfRef.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.80
.LCPI109_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI109_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.80
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.80,@function
Mode_Decision_for_4x4IntraBlocks.80:    # @Mode_Decision_for_4x4IntraBlocks.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI109_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$321756620, -176(%rbp)  # imm = 0x132D9DCC
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -164(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -156(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB109_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB109_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB109_4
.LBB109_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB109_4
.LBB109_4:                              # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB109_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB109_7
.LBB109_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB109_7
.LBB109_7:                              # %cond.end31
	movl	%eax, -232(%rbp)
.LBB109_8:                              # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB109_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB109_11
.LBB109_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB109_11
.LBB109_11:                             # %cond.end42
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB109_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB109_14
.LBB109_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB109_14
.LBB109_14:                             # %cond.end55
	movl	%eax, -120(%rbp)
	cmpl	$0, -112(%rbp)
	jl	.LBB109_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -120(%rbp)
	jge	.LBB109_17
.LBB109_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB109_21
.LBB109_17:                             # %cond.false59
	movl	-112(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB109_19
# %bb.18:                               # %cond.true61
	movl	-112(%rbp), %eax
	jmp	.LBB109_20
.LBB109_19:                             # %cond.false62
	movl	-120(%rbp), %eax
.LBB109_20:                             # %cond.end63
.LBB109_21:                             # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-160(%rbp), %rdx
	leaq	-180(%rbp), %rcx
	leaq	-172(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB109_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_49 Depth 2
                                        #       Child Loop BB109_51 Depth 3
                                        #     Child Loop BB109_64 Depth 2
                                        #       Child Loop BB109_66 Depth 3
                                        #     Child Loop BB109_73 Depth 2
                                        #       Child Loop BB109_75 Depth 3
                                        #     Child Loop BB109_81 Depth 2
                                        #       Child Loop BB109_83 Depth 3
                                        #     Child Loop BB109_91 Depth 2
                                        #       Child Loop BB109_93 Depth 3
                                        #     Child Loop BB109_99 Depth 2
                                        #       Child Loop BB109_101 Depth 3
                                        #     Child Loop BB109_107 Depth 2
                                        #       Child Loop BB109_109 Depth 3
                                        #     Child Loop BB109_115 Depth 2
                                        #       Child Loop BB109_117 Depth 3
                                        #     Child Loop BB109_123 Depth 2
                                        #       Child Loop BB109_125 Depth 3
                                        #     Child Loop BB109_131 Depth 2
                                        #       Child Loop BB109_133 Depth 3
                                        #     Child Loop BB109_166 Depth 2
                                        #       Child Loop BB109_168 Depth 3
                                        #     Child Loop BB109_175 Depth 2
                                        #       Child Loop BB109_177 Depth 3
                                        #     Child Loop BB109_183 Depth 2
                                        #       Child Loop BB109_185 Depth 3
                                        #     Child Loop BB109_191 Depth 2
                                        #       Child Loop BB109_193 Depth 3
                                        #     Child Loop BB109_199 Depth 2
                                        #       Child Loop BB109_201 Depth 3
                                        #         Child Loop BB109_203 Depth 4
                                        #     Child Loop BB109_211 Depth 2
                                        #       Child Loop BB109_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB109_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB109_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB109_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB109_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB109_28
.LBB109_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$0, -180(%rbp)
	movb	$1, %al
	jne	.LBB109_32
.LBB109_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB109_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB109_31
.LBB109_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$0, -160(%rbp)
	movb	$1, %al
	jne	.LBB109_32
.LBB109_31:                             # %lor.rhs
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$0, -172(%rbp)
	setne	%al
.LBB109_32:                             # %lor.end
                                        #   in Loop: Header=BB109_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB109_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB109_46
.LBB109_34:                             # %if.then86
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB109_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB109_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB109_38
.LBB109_37:                             # %if.then92
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_223
.LBB109_38:                             # %if.end93
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB109_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB109_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB109_42
.LBB109_41:                             # %if.then99
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_223
.LBB109_42:                             # %if.end100
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB109_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB109_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_223
.LBB109_45:                             # %if.end105
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_46
.LBB109_46:                             # %if.end106
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	$0, -184(%rbp)
	je	.LBB109_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -116(%rbp)
.LBB109_49:                             # %for.cond111
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB109_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB109_49 Depth=2
	movl	$0, -12(%rbp)
.LBB109_51:                             # %for.cond114
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB109_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB109_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-116(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB109_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB109_51
.LBB109_54:                             # %for.end
                                        #   in Loop: Header=BB109_49 Depth=2
	jmp	.LBB109_55
.LBB109_55:                             # %for.inc133
                                        #   in Loop: Header=BB109_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_49
.LBB109_56:                             # %for.end135
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB109_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB109_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB109_59
.LBB109_58:                             # %cond.false139
                                        #   in Loop: Header=BB109_22 Depth=1
	vmovsd	.LCPI109_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_59:                             # %cond.end142
                                        #   in Loop: Header=BB109_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB109_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB109_61:                             # %if.end148
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_221
.LBB109_62:                             # %if.else
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB109_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
.LBB109_64:                             # %for.cond151
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB109_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB109_64 Depth=2
	movl	$0, -12(%rbp)
.LBB109_66:                             # %for.cond155
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB109_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB109_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB109_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_66
.LBB109_69:                             # %for.end194
                                        #   in Loop: Header=BB109_64 Depth=2
	jmp	.LBB109_70
.LBB109_70:                             # %for.inc195
                                        #   in Loop: Header=BB109_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_64
.LBB109_71:                             # %for.end197
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-108(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB109_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
.LBB109_73:                             # %for.cond202
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB109_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB109_73 Depth=2
	movl	$0, -12(%rbp)
.LBB109_75:                             # %for.cond206
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB109_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB109_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB109_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_75
.LBB109_78:                             # %for.end224
                                        #   in Loop: Header=BB109_73 Depth=2
	jmp	.LBB109_79
.LBB109_79:                             # %for.inc225
                                        #   in Loop: Header=BB109_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_73
.LBB109_80:                             # %for.end227
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -24(%rbp)
.LBB109_81:                             # %for.cond228
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB109_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB109_81 Depth=2
	movl	$0, -20(%rbp)
.LBB109_83:                             # %for.cond232
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB109_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB109_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB109_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_83
.LBB109_86:                             # %for.end249
                                        #   in Loop: Header=BB109_81 Depth=2
	jmp	.LBB109_87
.LBB109_87:                             # %for.inc250
                                        #   in Loop: Header=BB109_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_81
.LBB109_88:                             # %for.end252
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_89:                             # %if.end253
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB109_220
.LBB109_90:                             # %if.else254
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
.LBB109_91:                             # %for.cond255
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB109_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB109_91 Depth=2
	movl	$0, -12(%rbp)
.LBB109_93:                             # %for.cond259
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB109_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB109_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB109_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_93
.LBB109_96:                             # %for.end345
                                        #   in Loop: Header=BB109_91 Depth=2
	jmp	.LBB109_97
.LBB109_97:                             # %for.inc346
                                        #   in Loop: Header=BB109_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_91
.LBB109_98:                             # %for.end348
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
.LBB109_99:                             # %for.cond349
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB109_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB109_99 Depth=2
	movl	$0, -12(%rbp)
.LBB109_101:                            # %for.cond353
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB109_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB109_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB109_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_101
.LBB109_104:                            # %for.end368
                                        #   in Loop: Header=BB109_99 Depth=2
	jmp	.LBB109_105
.LBB109_105:                            # %for.inc369
                                        #   in Loop: Header=BB109_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_99
.LBB109_106:                            # %for.end371
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-108(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB109_107:                            # %for.cond374
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB109_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB109_107 Depth=2
	movl	$0, -12(%rbp)
.LBB109_109:                            # %for.cond378
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB109_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB109_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB109_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_109
.LBB109_112:                            # %for.end402
                                        #   in Loop: Header=BB109_107 Depth=2
	jmp	.LBB109_113
.LBB109_113:                            # %for.inc403
                                        #   in Loop: Header=BB109_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_107
.LBB109_114:                            # %for.end405
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB109_115:                            # %for.cond409
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB109_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB109_115 Depth=2
	movl	$0, -12(%rbp)
.LBB109_117:                            # %for.cond413
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB109_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB109_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB109_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_117
.LBB109_120:                            # %for.end437
                                        #   in Loop: Header=BB109_115 Depth=2
	jmp	.LBB109_121
.LBB109_121:                            # %for.inc438
                                        #   in Loop: Header=BB109_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_115
.LBB109_122:                            # %for.end440
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB109_123:                            # %for.cond444
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB109_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB109_123 Depth=2
	movl	$0, -12(%rbp)
.LBB109_125:                            # %for.cond448
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB109_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB109_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB109_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_125
.LBB109_128:                            # %for.end463
                                        #   in Loop: Header=BB109_123 Depth=2
	jmp	.LBB109_129
.LBB109_129:                            # %for.inc464
                                        #   in Loop: Header=BB109_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_123
.LBB109_130:                            # %for.end466
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
.LBB109_131:                            # %for.cond467
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB109_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB109_131 Depth=2
	movl	$0, -12(%rbp)
.LBB109_133:                            # %for.cond471
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB109_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB109_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_137
.LBB109_136:                            # %cond.false516
                                        #   in Loop: Header=BB109_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB109_137:                            # %cond.end529
                                        #   in Loop: Header=BB109_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB109_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB109_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_143
.LBB109_139:                            # %cond.false535
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_142
.LBB109_141:                            # %cond.false551
                                        #   in Loop: Header=BB109_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_142:                            # %cond.end564
                                        #   in Loop: Header=BB109_133 Depth=3
.LBB109_143:                            # %cond.end566
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB109_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_146
.LBB109_145:                            # %cond.false588
                                        #   in Loop: Header=BB109_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB109_146:                            # %cond.end598
                                        #   in Loop: Header=BB109_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB109_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB109_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_152
.LBB109_148:                            # %cond.false604
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_151
.LBB109_150:                            # %cond.false617
                                        #   in Loop: Header=BB109_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_151:                            # %cond.end627
                                        #   in Loop: Header=BB109_133 Depth=3
.LBB109_152:                            # %cond.end629
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB109_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_155
.LBB109_154:                            # %cond.false655
                                        #   in Loop: Header=BB109_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB109_155:                            # %cond.end668
                                        #   in Loop: Header=BB109_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB109_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB109_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_161
.LBB109_157:                            # %cond.false674
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB109_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_160
.LBB109_159:                            # %cond.false690
                                        #   in Loop: Header=BB109_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_160:                            # %cond.end703
                                        #   in Loop: Header=BB109_133 Depth=3
.LBB109_161:                            # %cond.end705
                                        #   in Loop: Header=BB109_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB109_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_133
.LBB109_163:                            # %for.end718
                                        #   in Loop: Header=BB109_131 Depth=2
	jmp	.LBB109_164
.LBB109_164:                            # %for.inc719
                                        #   in Loop: Header=BB109_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_131
.LBB109_165:                            # %for.end721
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB109_166:                            # %for.cond722
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB109_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB109_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_168:                            # %for.cond726
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB109_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB109_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_168
.LBB109_171:                            # %for.end831
                                        #   in Loop: Header=BB109_166 Depth=2
	jmp	.LBB109_172
.LBB109_172:                            # %for.inc832
                                        #   in Loop: Header=BB109_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_166
.LBB109_173:                            # %for.end834
                                        #   in Loop: Header=BB109_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB109_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
.LBB109_175:                            # %for.cond842
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB109_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB109_175 Depth=2
	movl	$0, -12(%rbp)
.LBB109_177:                            # %for.cond846
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB109_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB109_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB109_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_177
.LBB109_180:                            # %for.end865
                                        #   in Loop: Header=BB109_175 Depth=2
	jmp	.LBB109_181
.LBB109_181:                            # %for.inc866
                                        #   in Loop: Header=BB109_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_175
.LBB109_182:                            # %for.end868
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
.LBB109_183:                            # %for.cond869
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB109_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB109_183 Depth=2
	movl	$0, -12(%rbp)
.LBB109_185:                            # %for.cond873
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB109_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB109_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB109_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_185
.LBB109_188:                            # %for.end893
                                        #   in Loop: Header=BB109_183 Depth=2
	jmp	.LBB109_189
.LBB109_189:                            # %for.inc894
                                        #   in Loop: Header=BB109_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_183
.LBB109_190:                            # %for.end896
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -16(%rbp)
.LBB109_191:                            # %for.cond897
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB109_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB109_191 Depth=2
	movl	$0, -12(%rbp)
.LBB109_193:                            # %for.cond901
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB109_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB109_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB109_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_193
.LBB109_196:                            # %for.end921
                                        #   in Loop: Header=BB109_191 Depth=2
	jmp	.LBB109_197
.LBB109_197:                            # %for.inc922
                                        #   in Loop: Header=BB109_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_191
.LBB109_198:                            # %for.end924
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -12(%rbp)
.LBB109_199:                            # %for.cond925
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_201 Depth 3
                                        #         Child Loop BB109_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB109_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB109_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB109_201:                            # %for.cond985
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB109_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB109_201 Depth=3
	movl	$0, -20(%rbp)
.LBB109_203:                            # %for.cond989
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_199 Depth=2
                                        #       Parent Loop BB109_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB109_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB109_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB109_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_203
.LBB109_206:                            # %for.end1011
                                        #   in Loop: Header=BB109_201 Depth=3
	jmp	.LBB109_207
.LBB109_207:                            # %for.inc1012
                                        #   in Loop: Header=BB109_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_201
.LBB109_208:                            # %for.end1014
                                        #   in Loop: Header=BB109_199 Depth=2
	jmp	.LBB109_209
.LBB109_209:                            # %for.inc1015
                                        #   in Loop: Header=BB109_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_199
.LBB109_210:                            # %for.end1017
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -24(%rbp)
.LBB109_211:                            # %for.cond1018
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB109_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB109_211 Depth=2
	movl	$0, -20(%rbp)
.LBB109_213:                            # %for.cond1022
                                        #   Parent Loop BB109_22 Depth=1
                                        #     Parent Loop BB109_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB109_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB109_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB109_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_213
.LBB109_216:                            # %for.end1040
                                        #   in Loop: Header=BB109_211 Depth=2
	jmp	.LBB109_217
.LBB109_217:                            # %for.inc1041
                                        #   in Loop: Header=BB109_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_211
.LBB109_218:                            # %for.end1043
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_219:                            # %if.end1044
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_220
.LBB109_220:                            # %if.end1045
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_221
.LBB109_221:                            # %if.end1046
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_222
.LBB109_222:                            # %if.end1047
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_223
.LBB109_223:                            # %for.inc1048
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB109_22
.LBB109_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-164(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-156(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB109_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB109_230
.LBB109_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB109_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB109_229
.LBB109_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB109_229:                            # %cond.end1065
.LBB109_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB109_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB109_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB109_233 Depth=1
	movl	$0, -12(%rbp)
.LBB109_235:                            # %for.cond1087
                                        #   Parent Loop BB109_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB109_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB109_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB109_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_235
.LBB109_238:                            # %for.end1128
                                        #   in Loop: Header=BB109_233 Depth=1
	jmp	.LBB109_239
.LBB109_239:                            # %for.inc1129
                                        #   in Loop: Header=BB109_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_233
.LBB109_240:                            # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-168(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB109_317
.LBB109_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB109_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB109_242 Depth=1
	movl	$0, -12(%rbp)
.LBB109_244:                            # %for.cond1138
                                        #   Parent Loop BB109_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB109_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB109_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB109_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_244
.LBB109_247:                            # %for.end1226
                                        #   in Loop: Header=BB109_242 Depth=1
	jmp	.LBB109_248
.LBB109_248:                            # %for.inc1227
                                        #   in Loop: Header=BB109_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_242
.LBB109_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB109_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB109_250 Depth=1
	movl	$0, -12(%rbp)
.LBB109_252:                            # %for.cond1234
                                        #   Parent Loop BB109_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB109_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB109_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB109_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_252
.LBB109_255:                            # %for.end1249
                                        #   in Loop: Header=BB109_250 Depth=1
	jmp	.LBB109_256
.LBB109_256:                            # %for.inc1250
                                        #   in Loop: Header=BB109_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_250
.LBB109_257:                            # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-168(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB109_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB109_258 Depth=1
	movl	$0, -12(%rbp)
.LBB109_260:                            # %for.cond1258
                                        #   Parent Loop BB109_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB109_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB109_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB109_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_260
.LBB109_263:                            # %for.end1282
                                        #   in Loop: Header=BB109_258 Depth=1
	jmp	.LBB109_264
.LBB109_264:                            # %for.inc1283
                                        #   in Loop: Header=BB109_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_258
.LBB109_265:                            # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB109_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB109_266 Depth=1
	movl	$0, -12(%rbp)
.LBB109_268:                            # %for.cond1328
                                        #   Parent Loop BB109_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB109_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB109_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB109_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_268
.LBB109_271:                            # %for.end1352
                                        #   in Loop: Header=BB109_266 Depth=1
	jmp	.LBB109_272
.LBB109_272:                            # %for.inc1353
                                        #   in Loop: Header=BB109_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_266
.LBB109_273:                            # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB109_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB109_274 Depth=1
	movl	$0, -12(%rbp)
.LBB109_276:                            # %for.cond1398
                                        #   Parent Loop BB109_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB109_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB109_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB109_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_276
.LBB109_279:                            # %for.end1413
                                        #   in Loop: Header=BB109_274 Depth=1
	jmp	.LBB109_280
.LBB109_280:                            # %for.inc1414
                                        #   in Loop: Header=BB109_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_274
.LBB109_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB109_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB109_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB109_282 Depth=1
	movl	$0, -12(%rbp)
.LBB109_284:                            # %for.cond1421
                                        #   Parent Loop BB109_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB109_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB109_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_288
.LBB109_287:                            # %cond.false1467
                                        #   in Loop: Header=BB109_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB109_288:                            # %cond.end1480
                                        #   in Loop: Header=BB109_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB109_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB109_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_294
.LBB109_290:                            # %cond.false1486
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_293
.LBB109_292:                            # %cond.false1502
                                        #   in Loop: Header=BB109_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_293:                            # %cond.end1515
                                        #   in Loop: Header=BB109_284 Depth=2
.LBB109_294:                            # %cond.end1517
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB109_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB109_297
.LBB109_296:                            # %cond.false1541
                                        #   in Loop: Header=BB109_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB109_297:                            # %cond.end1551
                                        #   in Loop: Header=BB109_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB109_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB109_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_303
.LBB109_299:                            # %cond.false1557
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_302
.LBB109_301:                            # %cond.false1570
                                        #   in Loop: Header=BB109_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_302:                            # %cond.end1580
                                        #   in Loop: Header=BB109_284 Depth=2
.LBB109_303:                            # %cond.end1582
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB109_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB109_306
.LBB109_305:                            # %cond.false1608
                                        #   in Loop: Header=BB109_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB109_306:                            # %cond.end1621
                                        #   in Loop: Header=BB109_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB109_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB109_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_312
.LBB109_308:                            # %cond.false1627
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB109_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_311
.LBB109_310:                            # %cond.false1643
                                        #   in Loop: Header=BB109_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_311:                            # %cond.end1656
                                        #   in Loop: Header=BB109_284 Depth=2
.LBB109_312:                            # %cond.end1658
                                        #   in Loop: Header=BB109_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB109_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_284
.LBB109_314:                            # %for.end1671
                                        #   in Loop: Header=BB109_282 Depth=1
	jmp	.LBB109_315
.LBB109_315:                            # %for.inc1672
                                        #   in Loop: Header=BB109_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_282
.LBB109_316:                            # %for.end1674
	jmp	.LBB109_317
.LBB109_317:                            # %if.end1675
	jmp	.LBB109_367
.LBB109_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB109_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB109_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB109_319 Depth=1
	movl	$0, -12(%rbp)
.LBB109_321:                            # %for.cond1681
                                        #   Parent Loop BB109_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB109_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB109_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB109_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_321
.LBB109_324:                            # %for.end1700
                                        #   in Loop: Header=BB109_319 Depth=1
	jmp	.LBB109_325
.LBB109_325:                            # %for.inc1701
                                        #   in Loop: Header=BB109_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_319
.LBB109_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB109_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB109_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB109_328 Depth=1
	movl	$0, -12(%rbp)
.LBB109_330:                            # %for.cond1711
                                        #   Parent Loop BB109_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB109_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB109_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB109_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_330
.LBB109_333:                            # %for.end1731
                                        #   in Loop: Header=BB109_328 Depth=1
	jmp	.LBB109_334
.LBB109_334:                            # %for.inc1732
                                        #   in Loop: Header=BB109_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_328
.LBB109_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB109_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB109_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB109_336 Depth=1
	movl	$0, -12(%rbp)
.LBB109_338:                            # %for.cond1739
                                        #   Parent Loop BB109_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB109_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB109_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB109_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_338
.LBB109_341:                            # %for.end1759
                                        #   in Loop: Header=BB109_336 Depth=1
	jmp	.LBB109_342
.LBB109_342:                            # %for.inc1760
                                        #   in Loop: Header=BB109_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_336
.LBB109_343:                            # %for.end1762
	jmp	.LBB109_344
.LBB109_344:                            # %if.end1763
	movl	$0, -24(%rbp)
.LBB109_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB109_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB109_345 Depth=1
	movl	$0, -20(%rbp)
.LBB109_347:                            # %for.cond1768
                                        #   Parent Loop BB109_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB109_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB109_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB109_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_347
.LBB109_350:                            # %for.end1800
                                        #   in Loop: Header=BB109_345 Depth=1
	jmp	.LBB109_351
.LBB109_351:                            # %for.inc1801
                                        #   in Loop: Header=BB109_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_345
.LBB109_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB109_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_356 Depth 2
                                        #       Child Loop BB109_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB109_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB109_354 Depth=1
	movl	$0, -24(%rbp)
.LBB109_356:                            # %for.cond1811
                                        #   Parent Loop BB109_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB109_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB109_356 Depth=2
	movl	$0, -20(%rbp)
.LBB109_358:                            # %for.cond1815
                                        #   Parent Loop BB109_354 Depth=1
                                        #     Parent Loop BB109_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB109_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB109_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB109_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_358
.LBB109_361:                            # %for.end1837
                                        #   in Loop: Header=BB109_356 Depth=2
	jmp	.LBB109_362
.LBB109_362:                            # %for.inc1838
                                        #   in Loop: Header=BB109_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_356
.LBB109_363:                            # %for.end1840
                                        #   in Loop: Header=BB109_354 Depth=1
	jmp	.LBB109_364
.LBB109_364:                            # %for.inc1841
                                        #   in Loop: Header=BB109_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_354
.LBB109_365:                            # %for.end1843
	jmp	.LBB109_366
.LBB109_366:                            # %if.end1844
	jmp	.LBB109_367
.LBB109_367:                            # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$321756620, -176(%rbp)  # imm = 0x132D9DCC
	jne	.LBB109_369
.LBB109_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_368
.Lfunc_end109:
	.size	Mode_Decision_for_4x4IntraBlocks.80, .Lfunc_end109-Mode_Decision_for_4x4IntraBlocks.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.81
.LCPI110_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI110_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.81
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.81,@function
Mode_Decision_for_4x4IntraBlocks.81:    # @Mode_Decision_for_4x4IntraBlocks.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI110_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$821895623, -164(%rbp)  # imm = 0x30FD21C7
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -168(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -184(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB110_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB110_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_4
.LBB110_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB110_4
.LBB110_4:                              # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB110_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_7
.LBB110_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB110_7
.LBB110_7:                              # %cond.end31
	movl	%eax, -232(%rbp)
.LBB110_8:                              # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB110_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_11
.LBB110_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_11
.LBB110_11:                             # %cond.end42
	movl	%eax, -120(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB110_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_14
.LBB110_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_14
.LBB110_14:                             # %cond.end55
	movl	%eax, -116(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB110_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -116(%rbp)
	jge	.LBB110_17
.LBB110_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB110_21
.LBB110_17:                             # %cond.false59
	movl	-120(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB110_19
# %bb.18:                               # %cond.true61
	movl	-120(%rbp), %eax
	jmp	.LBB110_20
.LBB110_19:                             # %cond.false62
	movl	-116(%rbp), %eax
.LBB110_20:                             # %cond.end63
.LBB110_21:                             # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-156(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	leaq	-176(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB110_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_49 Depth 2
                                        #       Child Loop BB110_51 Depth 3
                                        #     Child Loop BB110_64 Depth 2
                                        #       Child Loop BB110_66 Depth 3
                                        #     Child Loop BB110_73 Depth 2
                                        #       Child Loop BB110_75 Depth 3
                                        #     Child Loop BB110_81 Depth 2
                                        #       Child Loop BB110_83 Depth 3
                                        #     Child Loop BB110_91 Depth 2
                                        #       Child Loop BB110_93 Depth 3
                                        #     Child Loop BB110_99 Depth 2
                                        #       Child Loop BB110_101 Depth 3
                                        #     Child Loop BB110_107 Depth 2
                                        #       Child Loop BB110_109 Depth 3
                                        #     Child Loop BB110_115 Depth 2
                                        #       Child Loop BB110_117 Depth 3
                                        #     Child Loop BB110_123 Depth 2
                                        #       Child Loop BB110_125 Depth 3
                                        #     Child Loop BB110_131 Depth 2
                                        #       Child Loop BB110_133 Depth 3
                                        #     Child Loop BB110_166 Depth 2
                                        #       Child Loop BB110_168 Depth 3
                                        #     Child Loop BB110_175 Depth 2
                                        #       Child Loop BB110_177 Depth 3
                                        #     Child Loop BB110_183 Depth 2
                                        #       Child Loop BB110_185 Depth 3
                                        #     Child Loop BB110_191 Depth 2
                                        #       Child Loop BB110_193 Depth 3
                                        #     Child Loop BB110_199 Depth 2
                                        #       Child Loop BB110_201 Depth 3
                                        #         Child Loop BB110_203 Depth 4
                                        #     Child Loop BB110_211 Depth 2
                                        #       Child Loop BB110_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB110_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB110_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB110_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB110_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB110_28
.LBB110_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -172(%rbp)
	movb	$1, %al
	jne	.LBB110_32
.LBB110_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB110_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB110_31
.LBB110_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -156(%rbp)
	movb	$1, %al
	jne	.LBB110_32
.LBB110_31:                             # %lor.rhs
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -176(%rbp)
	setne	%al
.LBB110_32:                             # %lor.end
                                        #   in Loop: Header=BB110_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB110_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB110_46
.LBB110_34:                             # %if.then86
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB110_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB110_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB110_38
.LBB110_37:                             # %if.then92
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_38:                             # %if.end93
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB110_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB110_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB110_42
.LBB110_41:                             # %if.then99
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_42:                             # %if.end100
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB110_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB110_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_45:                             # %if.end105
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_46
.LBB110_46:                             # %if.end106
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -180(%rbp)
	je	.LBB110_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB110_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -108(%rbp)
.LBB110_49:                             # %for.cond111
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB110_49 Depth=2
	movl	$0, -12(%rbp)
.LBB110_51:                             # %for.cond114
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB110_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-108(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB110_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB110_51
.LBB110_54:                             # %for.end
                                        #   in Loop: Header=BB110_49 Depth=2
	jmp	.LBB110_55
.LBB110_55:                             # %for.inc133
                                        #   in Loop: Header=BB110_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_49
.LBB110_56:                             # %for.end135
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB110_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB110_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB110_59
.LBB110_58:                             # %cond.false139
                                        #   in Loop: Header=BB110_22 Depth=1
	vmovsd	.LCPI110_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB110_59:                             # %cond.end142
                                        #   in Loop: Header=BB110_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB110_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB110_61:                             # %if.end148
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_221
.LBB110_62:                             # %if.else
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB110_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_64:                             # %for.cond151
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB110_64 Depth=2
	movl	$0, -12(%rbp)
.LBB110_66:                             # %for.cond155
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB110_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB110_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_66
.LBB110_69:                             # %for.end194
                                        #   in Loop: Header=BB110_64 Depth=2
	jmp	.LBB110_70
.LBB110_70:                             # %for.inc195
                                        #   in Loop: Header=BB110_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_64
.LBB110_71:                             # %for.end197
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_73:                             # %for.cond202
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB110_73 Depth=2
	movl	$0, -12(%rbp)
.LBB110_75:                             # %for.cond206
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB110_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB110_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_75
.LBB110_78:                             # %for.end224
                                        #   in Loop: Header=BB110_73 Depth=2
	jmp	.LBB110_79
.LBB110_79:                             # %for.inc225
                                        #   in Loop: Header=BB110_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_73
.LBB110_80:                             # %for.end227
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -24(%rbp)
.LBB110_81:                             # %for.cond228
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB110_81 Depth=2
	movl	$0, -20(%rbp)
.LBB110_83:                             # %for.cond232
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB110_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB110_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_83
.LBB110_86:                             # %for.end249
                                        #   in Loop: Header=BB110_81 Depth=2
	jmp	.LBB110_87
.LBB110_87:                             # %for.inc250
                                        #   in Loop: Header=BB110_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_81
.LBB110_88:                             # %for.end252
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB110_89:                             # %if.end253
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB110_220
.LBB110_90:                             # %if.else254
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_91:                             # %for.cond255
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB110_91 Depth=2
	movl	$0, -12(%rbp)
.LBB110_93:                             # %for.cond259
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB110_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB110_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_93
.LBB110_96:                             # %for.end345
                                        #   in Loop: Header=BB110_91 Depth=2
	jmp	.LBB110_97
.LBB110_97:                             # %for.inc346
                                        #   in Loop: Header=BB110_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_91
.LBB110_98:                             # %for.end348
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_99:                             # %for.cond349
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB110_99 Depth=2
	movl	$0, -12(%rbp)
.LBB110_101:                            # %for.cond353
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB110_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB110_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_101
.LBB110_104:                            # %for.end368
                                        #   in Loop: Header=BB110_99 Depth=2
	jmp	.LBB110_105
.LBB110_105:                            # %for.inc369
                                        #   in Loop: Header=BB110_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_99
.LBB110_106:                            # %for.end371
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB110_107:                            # %for.cond374
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB110_107 Depth=2
	movl	$0, -12(%rbp)
.LBB110_109:                            # %for.cond378
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB110_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB110_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_109
.LBB110_112:                            # %for.end402
                                        #   in Loop: Header=BB110_107 Depth=2
	jmp	.LBB110_113
.LBB110_113:                            # %for.inc403
                                        #   in Loop: Header=BB110_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_107
.LBB110_114:                            # %for.end405
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB110_115:                            # %for.cond409
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB110_115 Depth=2
	movl	$0, -12(%rbp)
.LBB110_117:                            # %for.cond413
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB110_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB110_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_117
.LBB110_120:                            # %for.end437
                                        #   in Loop: Header=BB110_115 Depth=2
	jmp	.LBB110_121
.LBB110_121:                            # %for.inc438
                                        #   in Loop: Header=BB110_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_115
.LBB110_122:                            # %for.end440
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB110_123:                            # %for.cond444
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB110_123 Depth=2
	movl	$0, -12(%rbp)
.LBB110_125:                            # %for.cond448
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB110_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB110_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_125
.LBB110_128:                            # %for.end463
                                        #   in Loop: Header=BB110_123 Depth=2
	jmp	.LBB110_129
.LBB110_129:                            # %for.inc464
                                        #   in Loop: Header=BB110_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_123
.LBB110_130:                            # %for.end466
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_131:                            # %for.cond467
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB110_131 Depth=2
	movl	$0, -12(%rbp)
.LBB110_133:                            # %for.cond471
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB110_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_137
.LBB110_136:                            # %cond.false516
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB110_137:                            # %cond.end529
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB110_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_143
.LBB110_139:                            # %cond.false535
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_142
.LBB110_141:                            # %cond.false551
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_142:                            # %cond.end564
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_143:                            # %cond.end566
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB110_146
.LBB110_145:                            # %cond.false588
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_146:                            # %cond.end598
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB110_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB110_152
.LBB110_148:                            # %cond.false604
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_151
.LBB110_150:                            # %cond.false617
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_151:                            # %cond.end627
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_152:                            # %cond.end629
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB110_155
.LBB110_154:                            # %cond.false655
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_155:                            # %cond.end668
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB110_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_161
.LBB110_157:                            # %cond.false674
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_160
.LBB110_159:                            # %cond.false690
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_160:                            # %cond.end703
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_161:                            # %cond.end705
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_133
.LBB110_163:                            # %for.end718
                                        #   in Loop: Header=BB110_131 Depth=2
	jmp	.LBB110_164
.LBB110_164:                            # %for.inc719
                                        #   in Loop: Header=BB110_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_131
.LBB110_165:                            # %for.end721
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB110_166:                            # %for.cond722
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB110_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB110_168:                            # %for.cond726
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB110_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB110_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_168
.LBB110_171:                            # %for.end831
                                        #   in Loop: Header=BB110_166 Depth=2
	jmp	.LBB110_172
.LBB110_172:                            # %for.inc832
                                        #   in Loop: Header=BB110_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_166
.LBB110_173:                            # %for.end834
                                        #   in Loop: Header=BB110_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_175:                            # %for.cond842
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB110_175 Depth=2
	movl	$0, -12(%rbp)
.LBB110_177:                            # %for.cond846
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB110_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB110_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_177
.LBB110_180:                            # %for.end865
                                        #   in Loop: Header=BB110_175 Depth=2
	jmp	.LBB110_181
.LBB110_181:                            # %for.inc866
                                        #   in Loop: Header=BB110_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_175
.LBB110_182:                            # %for.end868
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_183:                            # %for.cond869
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB110_183 Depth=2
	movl	$0, -12(%rbp)
.LBB110_185:                            # %for.cond873
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB110_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB110_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_185
.LBB110_188:                            # %for.end893
                                        #   in Loop: Header=BB110_183 Depth=2
	jmp	.LBB110_189
.LBB110_189:                            # %for.inc894
                                        #   in Loop: Header=BB110_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_183
.LBB110_190:                            # %for.end896
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_191:                            # %for.cond897
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB110_191 Depth=2
	movl	$0, -12(%rbp)
.LBB110_193:                            # %for.cond901
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB110_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB110_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_193
.LBB110_196:                            # %for.end921
                                        #   in Loop: Header=BB110_191 Depth=2
	jmp	.LBB110_197
.LBB110_197:                            # %for.inc922
                                        #   in Loop: Header=BB110_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_191
.LBB110_198:                            # %for.end924
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -12(%rbp)
.LBB110_199:                            # %for.cond925
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_201 Depth 3
                                        #         Child Loop BB110_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB110_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB110_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB110_201:                            # %for.cond985
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB110_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB110_201 Depth=3
	movl	$0, -20(%rbp)
.LBB110_203:                            # %for.cond989
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_199 Depth=2
                                        #       Parent Loop BB110_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB110_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB110_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB110_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_203
.LBB110_206:                            # %for.end1011
                                        #   in Loop: Header=BB110_201 Depth=3
	jmp	.LBB110_207
.LBB110_207:                            # %for.inc1012
                                        #   in Loop: Header=BB110_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_201
.LBB110_208:                            # %for.end1014
                                        #   in Loop: Header=BB110_199 Depth=2
	jmp	.LBB110_209
.LBB110_209:                            # %for.inc1015
                                        #   in Loop: Header=BB110_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_199
.LBB110_210:                            # %for.end1017
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -24(%rbp)
.LBB110_211:                            # %for.cond1018
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB110_211 Depth=2
	movl	$0, -20(%rbp)
.LBB110_213:                            # %for.cond1022
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB110_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB110_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_213
.LBB110_216:                            # %for.end1040
                                        #   in Loop: Header=BB110_211 Depth=2
	jmp	.LBB110_217
.LBB110_217:                            # %for.inc1041
                                        #   in Loop: Header=BB110_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_211
.LBB110_218:                            # %for.end1043
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB110_219:                            # %if.end1044
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_220
.LBB110_220:                            # %if.end1045
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_221
.LBB110_221:                            # %if.end1046
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_222
.LBB110_222:                            # %if.end1047
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_223:                            # %for.inc1048
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB110_22
.LBB110_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-168(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-184(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB110_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_230
.LBB110_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB110_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB110_229
.LBB110_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB110_229:                            # %cond.end1065
.LBB110_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB110_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB110_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB110_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB110_233 Depth=1
	movl	$0, -12(%rbp)
.LBB110_235:                            # %for.cond1087
                                        #   Parent Loop BB110_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB110_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB110_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_235
.LBB110_238:                            # %for.end1128
                                        #   in Loop: Header=BB110_233 Depth=1
	jmp	.LBB110_239
.LBB110_239:                            # %for.inc1129
                                        #   in Loop: Header=BB110_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_233
.LBB110_240:                            # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-160(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB110_317
.LBB110_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB110_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB110_242 Depth=1
	movl	$0, -12(%rbp)
.LBB110_244:                            # %for.cond1138
                                        #   Parent Loop BB110_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB110_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB110_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_244
.LBB110_247:                            # %for.end1226
                                        #   in Loop: Header=BB110_242 Depth=1
	jmp	.LBB110_248
.LBB110_248:                            # %for.inc1227
                                        #   in Loop: Header=BB110_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_242
.LBB110_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB110_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB110_250 Depth=1
	movl	$0, -12(%rbp)
.LBB110_252:                            # %for.cond1234
                                        #   Parent Loop BB110_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB110_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB110_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_252
.LBB110_255:                            # %for.end1249
                                        #   in Loop: Header=BB110_250 Depth=1
	jmp	.LBB110_256
.LBB110_256:                            # %for.inc1250
                                        #   in Loop: Header=BB110_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_250
.LBB110_257:                            # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-160(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB110_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB110_258 Depth=1
	movl	$0, -12(%rbp)
.LBB110_260:                            # %for.cond1258
                                        #   Parent Loop BB110_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB110_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB110_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_260
.LBB110_263:                            # %for.end1282
                                        #   in Loop: Header=BB110_258 Depth=1
	jmp	.LBB110_264
.LBB110_264:                            # %for.inc1283
                                        #   in Loop: Header=BB110_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_258
.LBB110_265:                            # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB110_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB110_266 Depth=1
	movl	$0, -12(%rbp)
.LBB110_268:                            # %for.cond1328
                                        #   Parent Loop BB110_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB110_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB110_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_268
.LBB110_271:                            # %for.end1352
                                        #   in Loop: Header=BB110_266 Depth=1
	jmp	.LBB110_272
.LBB110_272:                            # %for.inc1353
                                        #   in Loop: Header=BB110_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_266
.LBB110_273:                            # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB110_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB110_274 Depth=1
	movl	$0, -12(%rbp)
.LBB110_276:                            # %for.cond1398
                                        #   Parent Loop BB110_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB110_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB110_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_276
.LBB110_279:                            # %for.end1413
                                        #   in Loop: Header=BB110_274 Depth=1
	jmp	.LBB110_280
.LBB110_280:                            # %for.inc1414
                                        #   in Loop: Header=BB110_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_274
.LBB110_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB110_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB110_282 Depth=1
	movl	$0, -12(%rbp)
.LBB110_284:                            # %for.cond1421
                                        #   Parent Loop BB110_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB110_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_288
.LBB110_287:                            # %cond.false1467
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB110_288:                            # %cond.end1480
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB110_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_294
.LBB110_290:                            # %cond.false1486
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_293
.LBB110_292:                            # %cond.false1502
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_293:                            # %cond.end1515
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_294:                            # %cond.end1517
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_297
.LBB110_296:                            # %cond.false1541
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_297:                            # %cond.end1551
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB110_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB110_303
.LBB110_299:                            # %cond.false1557
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_302
.LBB110_301:                            # %cond.false1570
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_302:                            # %cond.end1580
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_303:                            # %cond.end1582
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_306
.LBB110_305:                            # %cond.false1608
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_306:                            # %cond.end1621
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB110_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_312
.LBB110_308:                            # %cond.false1627
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_311
.LBB110_310:                            # %cond.false1643
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_311:                            # %cond.end1656
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_312:                            # %cond.end1658
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_284
.LBB110_314:                            # %for.end1671
                                        #   in Loop: Header=BB110_282 Depth=1
	jmp	.LBB110_315
.LBB110_315:                            # %for.inc1672
                                        #   in Loop: Header=BB110_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_282
.LBB110_316:                            # %for.end1674
	jmp	.LBB110_317
.LBB110_317:                            # %if.end1675
	jmp	.LBB110_367
.LBB110_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB110_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB110_319 Depth=1
	movl	$0, -12(%rbp)
.LBB110_321:                            # %for.cond1681
                                        #   Parent Loop BB110_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB110_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB110_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_321
.LBB110_324:                            # %for.end1700
                                        #   in Loop: Header=BB110_319 Depth=1
	jmp	.LBB110_325
.LBB110_325:                            # %for.inc1701
                                        #   in Loop: Header=BB110_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_319
.LBB110_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB110_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB110_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB110_328 Depth=1
	movl	$0, -12(%rbp)
.LBB110_330:                            # %for.cond1711
                                        #   Parent Loop BB110_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB110_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB110_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_330
.LBB110_333:                            # %for.end1731
                                        #   in Loop: Header=BB110_328 Depth=1
	jmp	.LBB110_334
.LBB110_334:                            # %for.inc1732
                                        #   in Loop: Header=BB110_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_328
.LBB110_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB110_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB110_336 Depth=1
	movl	$0, -12(%rbp)
.LBB110_338:                            # %for.cond1739
                                        #   Parent Loop BB110_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB110_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB110_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_338
.LBB110_341:                            # %for.end1759
                                        #   in Loop: Header=BB110_336 Depth=1
	jmp	.LBB110_342
.LBB110_342:                            # %for.inc1760
                                        #   in Loop: Header=BB110_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_336
.LBB110_343:                            # %for.end1762
	jmp	.LBB110_344
.LBB110_344:                            # %if.end1763
	movl	$0, -24(%rbp)
.LBB110_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB110_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB110_345 Depth=1
	movl	$0, -20(%rbp)
.LBB110_347:                            # %for.cond1768
                                        #   Parent Loop BB110_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB110_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB110_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB110_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_347
.LBB110_350:                            # %for.end1800
                                        #   in Loop: Header=BB110_345 Depth=1
	jmp	.LBB110_351
.LBB110_351:                            # %for.inc1801
                                        #   in Loop: Header=BB110_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_345
.LBB110_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB110_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB110_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_356 Depth 2
                                        #       Child Loop BB110_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB110_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB110_354 Depth=1
	movl	$0, -24(%rbp)
.LBB110_356:                            # %for.cond1811
                                        #   Parent Loop BB110_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB110_356 Depth=2
	movl	$0, -20(%rbp)
.LBB110_358:                            # %for.cond1815
                                        #   Parent Loop BB110_354 Depth=1
                                        #     Parent Loop BB110_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB110_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB110_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_358
.LBB110_361:                            # %for.end1837
                                        #   in Loop: Header=BB110_356 Depth=2
	jmp	.LBB110_362
.LBB110_362:                            # %for.inc1838
                                        #   in Loop: Header=BB110_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_356
.LBB110_363:                            # %for.end1840
                                        #   in Loop: Header=BB110_354 Depth=1
	jmp	.LBB110_364
.LBB110_364:                            # %for.inc1841
                                        #   in Loop: Header=BB110_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_354
.LBB110_365:                            # %for.end1843
	jmp	.LBB110_366
.LBB110_366:                            # %if.end1844
	jmp	.LBB110_367
.LBB110_367:                            # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$821895623, -164(%rbp)  # imm = 0x30FD21C7
	jne	.LBB110_369
.LBB110_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_368
.Lfunc_end110:
	.size	Mode_Decision_for_4x4IntraBlocks.81, .Lfunc_end110-Mode_Decision_for_4x4IntraBlocks.81
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.82 # -- Begin function set_stored_macroblock_parameters.82
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.82,@function
set_stored_macroblock_parameters.82:    # @set_stored_macroblock_parameters.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$2112210913, -52(%rbp)  # imm = 0x7DE5C7E1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB111_4
.LBB111_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB111_4
.LBB111_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB111_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB111_5 Depth=1
	movl	$0, -4(%rbp)
.LBB111_7:                              # %for.cond9
                                        #   Parent Loop BB111_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB111_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-104(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB111_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB111_10:                             # %if.end
                                        #   in Loop: Header=BB111_7 Depth=2
	jmp	.LBB111_11
.LBB111_11:                             # %for.inc
                                        #   in Loop: Header=BB111_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_7
.LBB111_12:                             # %for.end
                                        #   in Loop: Header=BB111_5 Depth=1
	jmp	.LBB111_13
.LBB111_13:                             # %for.inc33
                                        #   in Loop: Header=BB111_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_5
.LBB111_14:                             # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB111_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB111_16:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB111_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB111_16 Depth=1
	movl	$0, -4(%rbp)
.LBB111_18:                             # %for.cond43
                                        #   Parent Loop BB111_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB111_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB111_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB111_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB111_21:                             # %if.end92
                                        #   in Loop: Header=BB111_18 Depth=2
	jmp	.LBB111_22
.LBB111_22:                             # %for.inc93
                                        #   in Loop: Header=BB111_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_18
.LBB111_23:                             # %for.end95
                                        #   in Loop: Header=BB111_16 Depth=1
	jmp	.LBB111_24
.LBB111_24:                             # %for.inc96
                                        #   in Loop: Header=BB111_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_16
.LBB111_25:                             # %for.end98
	jmp	.LBB111_26
.LBB111_26:                             # %if.end99
	movq	cofAC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB111_28:                             # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_30 Depth 2
                                        #       Child Loop BB111_32 Depth 3
                                        #         Child Loop BB111_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB111_28 Depth=1
	movl	$0, -8(%rbp)
.LBB111_30:                             # %for.cond118
                                        #   Parent Loop BB111_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_32 Depth 3
                                        #         Child Loop BB111_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB111_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB111_30 Depth=2
	movl	$0, -12(%rbp)
.LBB111_32:                             # %for.cond122
                                        #   Parent Loop BB111_28 Depth=1
                                        #     Parent Loop BB111_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB111_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB111_32 Depth=3
	movl	$0, -28(%rbp)
.LBB111_34:                             # %for.cond126
                                        #   Parent Loop BB111_28 Depth=1
                                        #     Parent Loop BB111_30 Depth=2
                                        #       Parent Loop BB111_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB111_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB111_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB111_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB111_34
.LBB111_37:                             # %for.end150
                                        #   in Loop: Header=BB111_32 Depth=3
	jmp	.LBB111_38
.LBB111_38:                             # %for.inc151
                                        #   in Loop: Header=BB111_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_32
.LBB111_39:                             # %for.end153
                                        #   in Loop: Header=BB111_30 Depth=2
	jmp	.LBB111_40
.LBB111_40:                             # %for.inc154
                                        #   in Loop: Header=BB111_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_30
.LBB111_41:                             # %for.end156
                                        #   in Loop: Header=BB111_28 Depth=1
	jmp	.LBB111_42
.LBB111_42:                             # %for.inc157
                                        #   in Loop: Header=BB111_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_28
.LBB111_43:                             # %for.end159
	movl	$0, -4(%rbp)
.LBB111_44:                             # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_46 Depth 2
                                        #       Child Loop BB111_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB111_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB111_44 Depth=1
	movl	$0, -12(%rbp)
.LBB111_46:                             # %for.cond164
                                        #   Parent Loop BB111_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB111_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB111_46 Depth=2
	movl	$0, -28(%rbp)
.LBB111_48:                             # %for.cond168
                                        #   Parent Loop BB111_44 Depth=1
                                        #     Parent Loop BB111_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB111_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB111_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB111_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB111_48
.LBB111_51:                             # %for.end188
                                        #   in Loop: Header=BB111_46 Depth=2
	jmp	.LBB111_52
.LBB111_52:                             # %for.inc189
                                        #   in Loop: Header=BB111_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_46
.LBB111_53:                             # %for.end191
                                        #   in Loop: Header=BB111_44 Depth=1
	jmp	.LBB111_54
.LBB111_54:                             # %for.inc192
                                        #   in Loop: Header=BB111_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_44
.LBB111_55:                             # %for.end194
	jmp	.LBB111_56
.LBB111_56:                             # %if.end195
	movl	$0, -4(%rbp)
.LBB111_57:                             # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB111_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB111_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB111_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB111_60:                             # %if.end225
                                        #   in Loop: Header=BB111_57 Depth=1
	jmp	.LBB111_61
.LBB111_61:                             # %for.inc226
                                        #   in Loop: Header=BB111_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_57
.LBB111_62:                             # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB111_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB111_65
.LBB111_64:                             # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB111_65:                             # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB111_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB111_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB111_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB111_69:                             # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB111_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB111_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB111_74
.LBB111_73:                             # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB111_74:                             # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB111_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB111_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB111_77:                             # %if.end271
	movl	$0, -8(%rbp)
.LBB111_78:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB111_78 Depth=1
	movl	$0, -4(%rbp)
.LBB111_80:                             # %for.cond276
                                        #   Parent Loop BB111_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB111_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB111_88
.LBB111_85:                             # %if.then299
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB111_87:                             # %if.end345
                                        #   in Loop: Header=BB111_80 Depth=2
	jmp	.LBB111_101
.LBB111_88:                             # %if.else346
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB111_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB111_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB111_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB111_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB111_94
.LBB111_93:                             # %cond.false368
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB111_94:                             # %cond.end369
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB111_96:                             # %if.end458
                                        #   in Loop: Header=BB111_80 Depth=2
	jmp	.LBB111_100
.LBB111_97:                             # %if.else459
                                        #   in Loop: Header=BB111_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB111_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB111_99:                             # %if.end578
                                        #   in Loop: Header=BB111_80 Depth=2
	jmp	.LBB111_100
.LBB111_100:                            # %if.end579
                                        #   in Loop: Header=BB111_80 Depth=2
	jmp	.LBB111_101
.LBB111_101:                            # %if.end580
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB111_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB111_108
.LBB111_105:                            # %if.then602
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB111_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB111_107:                            # %if.end654
                                        #   in Loop: Header=BB111_80 Depth=2
	jmp	.LBB111_108
.LBB111_108:                            # %if.end655
                                        #   in Loop: Header=BB111_80 Depth=2
	jmp	.LBB111_109
.LBB111_109:                            # %for.inc656
                                        #   in Loop: Header=BB111_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_80
.LBB111_110:                            # %for.end658
                                        #   in Loop: Header=BB111_78 Depth=1
	jmp	.LBB111_111
.LBB111_111:                            # %for.inc659
                                        #   in Loop: Header=BB111_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_78
.LBB111_112:                            # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB111_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB111_114:                            # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB111_114 Depth=1
	movl	$0, -4(%rbp)
.LBB111_116:                            # %for.cond668
                                        #   Parent Loop BB111_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB111_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB111_124
.LBB111_121:                            # %if.then693
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB111_123:                            # %if.end745
                                        #   in Loop: Header=BB111_116 Depth=2
	jmp	.LBB111_137
.LBB111_124:                            # %if.else746
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB111_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB111_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB111_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB111_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB111_130
.LBB111_129:                            # %cond.false770
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB111_130:                            # %cond.end772
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB111_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB111_132:                            # %if.end862
                                        #   in Loop: Header=BB111_116 Depth=2
	jmp	.LBB111_136
.LBB111_133:                            # %if.else863
                                        #   in Loop: Header=BB111_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB111_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB111_135:                            # %if.end983
                                        #   in Loop: Header=BB111_116 Depth=2
	jmp	.LBB111_136
.LBB111_136:                            # %if.end984
                                        #   in Loop: Header=BB111_116 Depth=2
	jmp	.LBB111_137
.LBB111_137:                            # %if.end985
                                        #   in Loop: Header=BB111_116 Depth=2
	jmp	.LBB111_138
.LBB111_138:                            # %for.inc986
                                        #   in Loop: Header=BB111_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_116
.LBB111_139:                            # %for.end988
                                        #   in Loop: Header=BB111_114 Depth=1
	jmp	.LBB111_140
.LBB111_140:                            # %for.inc989
                                        #   in Loop: Header=BB111_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_114
.LBB111_141:                            # %for.end991
	jmp	.LBB111_142
.LBB111_142:                            # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB111_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB111_144:                            # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB111_144 Depth=1
	movl	$0, -8(%rbp)
.LBB111_146:                            # %for.cond1002
                                        #   Parent Loop BB111_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB111_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB111_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_146
.LBB111_149:                            # %for.end1030
                                        #   in Loop: Header=BB111_144 Depth=1
	jmp	.LBB111_150
.LBB111_150:                            # %for.inc1031
                                        #   in Loop: Header=BB111_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_144
.LBB111_151:                            # %for.end1033
	jmp	.LBB111_175
.LBB111_152:                            # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB111_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB111_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB111_155:                            # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB111_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB111_157:                            # %for.cond1049
                                        #   Parent Loop BB111_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB111_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB111_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_157
.LBB111_160:                            # %for.end1065
                                        #   in Loop: Header=BB111_155 Depth=1
	jmp	.LBB111_161
.LBB111_161:                            # %for.inc1066
                                        #   in Loop: Header=BB111_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_155
.LBB111_162:                            # %for.end1068
	jmp	.LBB111_174
.LBB111_163:                            # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB111_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB111_165:                            # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB111_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB111_167:                            # %for.cond1081
                                        #   Parent Loop BB111_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB111_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB111_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_167
.LBB111_170:                            # %for.end1101
                                        #   in Loop: Header=BB111_165 Depth=1
	jmp	.LBB111_171
.LBB111_171:                            # %for.inc1102
                                        #   in Loop: Header=BB111_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_165
.LBB111_172:                            # %for.end1104
	jmp	.LBB111_173
.LBB111_173:                            # %if.end1105
	jmp	.LBB111_174
.LBB111_174:                            # %if.end1106
	jmp	.LBB111_175
.LBB111_175:                            # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB111_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB111_177:                            # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB111_177 Depth=1
	movl	$0, -8(%rbp)
.LBB111_179:                            # %for.cond1116
                                        #   Parent Loop BB111_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB111_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB111_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_179
.LBB111_182:                            # %for.end1141
                                        #   in Loop: Header=BB111_177 Depth=1
	jmp	.LBB111_183
.LBB111_183:                            # %for.inc1142
                                        #   in Loop: Header=BB111_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_177
.LBB111_184:                            # %for.end1144
	jmp	.LBB111_185
.LBB111_185:                            # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB111_187:                            # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB111_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB111_189:                            # %for.cond1157
                                        #   Parent Loop BB111_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB111_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB111_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_189
.LBB111_192:                            # %for.end1181
                                        #   in Loop: Header=BB111_187 Depth=1
	jmp	.LBB111_193
.LBB111_193:                            # %for.inc1182
                                        #   in Loop: Header=BB111_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_187
.LBB111_194:                            # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB111_195:                            # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$2112210913, -52(%rbp)  # imm = 0x7DE5C7E1
	jne	.LBB111_197
.LBB111_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_197:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_196
.Lfunc_end111:
	.size	set_stored_macroblock_parameters.82, .Lfunc_end111-set_stored_macroblock_parameters.82
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.83
.LCPI112_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI112_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.83
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.83,@function
Mode_Decision_for_4x4IntraBlocks.83:    # @Mode_Decision_for_4x4IntraBlocks.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI112_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1224188524, -160(%rbp) # imm = 0x48F7A26C
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -164(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB112_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB112_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB112_4
.LBB112_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB112_4
.LBB112_4:                              # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB112_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB112_7
.LBB112_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB112_7
.LBB112_7:                              # %cond.end31
	movl	%eax, -208(%rbp)
.LBB112_8:                              # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB112_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB112_11
.LBB112_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_11
.LBB112_11:                             # %cond.end42
	movl	%eax, -120(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB112_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB112_14
.LBB112_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_14
.LBB112_14:                             # %cond.end55
	movl	%eax, -108(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB112_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -108(%rbp)
	jge	.LBB112_17
.LBB112_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB112_21
.LBB112_17:                             # %cond.false59
	movl	-120(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB112_19
# %bb.18:                               # %cond.true61
	movl	-120(%rbp), %eax
	jmp	.LBB112_20
.LBB112_19:                             # %cond.false62
	movl	-108(%rbp), %eax
.LBB112_20:                             # %cond.end63
.LBB112_21:                             # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-180(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	leaq	-172(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB112_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_49 Depth 2
                                        #       Child Loop BB112_51 Depth 3
                                        #     Child Loop BB112_64 Depth 2
                                        #       Child Loop BB112_66 Depth 3
                                        #     Child Loop BB112_73 Depth 2
                                        #       Child Loop BB112_75 Depth 3
                                        #     Child Loop BB112_81 Depth 2
                                        #       Child Loop BB112_83 Depth 3
                                        #     Child Loop BB112_91 Depth 2
                                        #       Child Loop BB112_93 Depth 3
                                        #     Child Loop BB112_99 Depth 2
                                        #       Child Loop BB112_101 Depth 3
                                        #     Child Loop BB112_107 Depth 2
                                        #       Child Loop BB112_109 Depth 3
                                        #     Child Loop BB112_115 Depth 2
                                        #       Child Loop BB112_117 Depth 3
                                        #     Child Loop BB112_123 Depth 2
                                        #       Child Loop BB112_125 Depth 3
                                        #     Child Loop BB112_131 Depth 2
                                        #       Child Loop BB112_133 Depth 3
                                        #     Child Loop BB112_166 Depth 2
                                        #       Child Loop BB112_168 Depth 3
                                        #     Child Loop BB112_175 Depth 2
                                        #       Child Loop BB112_177 Depth 3
                                        #     Child Loop BB112_183 Depth 2
                                        #       Child Loop BB112_185 Depth 3
                                        #     Child Loop BB112_191 Depth 2
                                        #       Child Loop BB112_193 Depth 3
                                        #     Child Loop BB112_199 Depth 2
                                        #       Child Loop BB112_201 Depth 3
                                        #         Child Loop BB112_203 Depth 4
                                        #     Child Loop BB112_211 Depth 2
                                        #       Child Loop BB112_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB112_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB112_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB112_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB112_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB112_28
.LBB112_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$0, -168(%rbp)
	movb	$1, %al
	jne	.LBB112_32
.LBB112_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB112_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB112_31
.LBB112_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$0, -180(%rbp)
	movb	$1, %al
	jne	.LBB112_32
.LBB112_31:                             # %lor.rhs
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$0, -172(%rbp)
	setne	%al
.LBB112_32:                             # %lor.end
                                        #   in Loop: Header=BB112_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB112_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB112_46
.LBB112_34:                             # %if.then86
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB112_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB112_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB112_38
.LBB112_37:                             # %if.then92
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_223
.LBB112_38:                             # %if.end93
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB112_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB112_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB112_42
.LBB112_41:                             # %if.then99
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_223
.LBB112_42:                             # %if.end100
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB112_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB112_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_223
.LBB112_45:                             # %if.end105
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_46
.LBB112_46:                             # %if.end106
                                        #   in Loop: Header=BB112_22 Depth=1
	cmpl	$0, -156(%rbp)
	je	.LBB112_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB112_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -112(%rbp)
.LBB112_49:                             # %for.cond111
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB112_49 Depth=2
	movl	$0, -12(%rbp)
.LBB112_51:                             # %for.cond114
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB112_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB112_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB112_51
.LBB112_54:                             # %for.end
                                        #   in Loop: Header=BB112_49 Depth=2
	jmp	.LBB112_55
.LBB112_55:                             # %for.inc133
                                        #   in Loop: Header=BB112_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_49
.LBB112_56:                             # %for.end135
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB112_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB112_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_59
.LBB112_58:                             # %cond.false139
                                        #   in Loop: Header=BB112_22 Depth=1
	vmovsd	.LCPI112_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB112_59:                             # %cond.end142
                                        #   in Loop: Header=BB112_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB112_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB112_61:                             # %if.end148
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_221
.LBB112_62:                             # %if.else
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB112_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
.LBB112_64:                             # %for.cond151
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB112_64 Depth=2
	movl	$0, -12(%rbp)
.LBB112_66:                             # %for.cond155
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB112_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB112_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_66
.LBB112_69:                             # %for.end194
                                        #   in Loop: Header=BB112_64 Depth=2
	jmp	.LBB112_70
.LBB112_70:                             # %for.inc195
                                        #   in Loop: Header=BB112_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_64
.LBB112_71:                             # %for.end197
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB112_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
.LBB112_73:                             # %for.cond202
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB112_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB112_73 Depth=2
	movl	$0, -12(%rbp)
.LBB112_75:                             # %for.cond206
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB112_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB112_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB112_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_75
.LBB112_78:                             # %for.end224
                                        #   in Loop: Header=BB112_73 Depth=2
	jmp	.LBB112_79
.LBB112_79:                             # %for.inc225
                                        #   in Loop: Header=BB112_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_73
.LBB112_80:                             # %for.end227
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -24(%rbp)
.LBB112_81:                             # %for.cond228
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB112_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB112_81 Depth=2
	movl	$0, -20(%rbp)
.LBB112_83:                             # %for.cond232
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB112_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB112_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB112_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_83
.LBB112_86:                             # %for.end249
                                        #   in Loop: Header=BB112_81 Depth=2
	jmp	.LBB112_87
.LBB112_87:                             # %for.inc250
                                        #   in Loop: Header=BB112_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_81
.LBB112_88:                             # %for.end252
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB112_89:                             # %if.end253
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB112_220
.LBB112_90:                             # %if.else254
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
.LBB112_91:                             # %for.cond255
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB112_91 Depth=2
	movl	$0, -12(%rbp)
.LBB112_93:                             # %for.cond259
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB112_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB112_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_93
.LBB112_96:                             # %for.end345
                                        #   in Loop: Header=BB112_91 Depth=2
	jmp	.LBB112_97
.LBB112_97:                             # %for.inc346
                                        #   in Loop: Header=BB112_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_91
.LBB112_98:                             # %for.end348
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
.LBB112_99:                             # %for.cond349
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB112_99 Depth=2
	movl	$0, -12(%rbp)
.LBB112_101:                            # %for.cond353
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB112_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB112_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_101
.LBB112_104:                            # %for.end368
                                        #   in Loop: Header=BB112_99 Depth=2
	jmp	.LBB112_105
.LBB112_105:                            # %for.inc369
                                        #   in Loop: Header=BB112_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_99
.LBB112_106:                            # %for.end371
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB112_107:                            # %for.cond374
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB112_107 Depth=2
	movl	$0, -12(%rbp)
.LBB112_109:                            # %for.cond378
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB112_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB112_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_109
.LBB112_112:                            # %for.end402
                                        #   in Loop: Header=BB112_107 Depth=2
	jmp	.LBB112_113
.LBB112_113:                            # %for.inc403
                                        #   in Loop: Header=BB112_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_107
.LBB112_114:                            # %for.end405
                                        #   in Loop: Header=BB112_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB112_115:                            # %for.cond409
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB112_115 Depth=2
	movl	$0, -12(%rbp)
.LBB112_117:                            # %for.cond413
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB112_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB112_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_117
.LBB112_120:                            # %for.end437
                                        #   in Loop: Header=BB112_115 Depth=2
	jmp	.LBB112_121
.LBB112_121:                            # %for.inc438
                                        #   in Loop: Header=BB112_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_115
.LBB112_122:                            # %for.end440
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB112_123:                            # %for.cond444
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB112_123 Depth=2
	movl	$0, -12(%rbp)
.LBB112_125:                            # %for.cond448
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB112_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB112_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_125
.LBB112_128:                            # %for.end463
                                        #   in Loop: Header=BB112_123 Depth=2
	jmp	.LBB112_129
.LBB112_129:                            # %for.inc464
                                        #   in Loop: Header=BB112_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_123
.LBB112_130:                            # %for.end466
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
.LBB112_131:                            # %for.cond467
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB112_131 Depth=2
	movl	$0, -12(%rbp)
.LBB112_133:                            # %for.cond471
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB112_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB112_137
.LBB112_136:                            # %cond.false516
                                        #   in Loop: Header=BB112_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB112_137:                            # %cond.end529
                                        #   in Loop: Header=BB112_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB112_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB112_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB112_143
.LBB112_139:                            # %cond.false535
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB112_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB112_142
.LBB112_141:                            # %cond.false551
                                        #   in Loop: Header=BB112_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB112_142:                            # %cond.end564
                                        #   in Loop: Header=BB112_133 Depth=3
.LBB112_143:                            # %cond.end566
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB112_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB112_146
.LBB112_145:                            # %cond.false588
                                        #   in Loop: Header=BB112_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB112_146:                            # %cond.end598
                                        #   in Loop: Header=BB112_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB112_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB112_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_152
.LBB112_148:                            # %cond.false604
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB112_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB112_151
.LBB112_150:                            # %cond.false617
                                        #   in Loop: Header=BB112_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB112_151:                            # %cond.end627
                                        #   in Loop: Header=BB112_133 Depth=3
.LBB112_152:                            # %cond.end629
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB112_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB112_155
.LBB112_154:                            # %cond.false655
                                        #   in Loop: Header=BB112_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB112_155:                            # %cond.end668
                                        #   in Loop: Header=BB112_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB112_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB112_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB112_161
.LBB112_157:                            # %cond.false674
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB112_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB112_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB112_160
.LBB112_159:                            # %cond.false690
                                        #   in Loop: Header=BB112_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB112_160:                            # %cond.end703
                                        #   in Loop: Header=BB112_133 Depth=3
.LBB112_161:                            # %cond.end705
                                        #   in Loop: Header=BB112_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB112_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_133
.LBB112_163:                            # %for.end718
                                        #   in Loop: Header=BB112_131 Depth=2
	jmp	.LBB112_164
.LBB112_164:                            # %for.inc719
                                        #   in Loop: Header=BB112_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_131
.LBB112_165:                            # %for.end721
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB112_166:                            # %for.cond722
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB112_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB112_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB112_168:                            # %for.cond726
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB112_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB112_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_168
.LBB112_171:                            # %for.end831
                                        #   in Loop: Header=BB112_166 Depth=2
	jmp	.LBB112_172
.LBB112_172:                            # %for.inc832
                                        #   in Loop: Header=BB112_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_166
.LBB112_173:                            # %for.end834
                                        #   in Loop: Header=BB112_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-96(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB112_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
.LBB112_175:                            # %for.cond842
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB112_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB112_175 Depth=2
	movl	$0, -12(%rbp)
.LBB112_177:                            # %for.cond846
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB112_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB112_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB112_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_177
.LBB112_180:                            # %for.end865
                                        #   in Loop: Header=BB112_175 Depth=2
	jmp	.LBB112_181
.LBB112_181:                            # %for.inc866
                                        #   in Loop: Header=BB112_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_175
.LBB112_182:                            # %for.end868
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
.LBB112_183:                            # %for.cond869
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB112_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB112_183 Depth=2
	movl	$0, -12(%rbp)
.LBB112_185:                            # %for.cond873
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB112_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB112_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB112_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_185
.LBB112_188:                            # %for.end893
                                        #   in Loop: Header=BB112_183 Depth=2
	jmp	.LBB112_189
.LBB112_189:                            # %for.inc894
                                        #   in Loop: Header=BB112_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_183
.LBB112_190:                            # %for.end896
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -16(%rbp)
.LBB112_191:                            # %for.cond897
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB112_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB112_191 Depth=2
	movl	$0, -12(%rbp)
.LBB112_193:                            # %for.cond901
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB112_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB112_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB112_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_193
.LBB112_196:                            # %for.end921
                                        #   in Loop: Header=BB112_191 Depth=2
	jmp	.LBB112_197
.LBB112_197:                            # %for.inc922
                                        #   in Loop: Header=BB112_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_191
.LBB112_198:                            # %for.end924
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -12(%rbp)
.LBB112_199:                            # %for.cond925
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_201 Depth 3
                                        #         Child Loop BB112_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB112_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB112_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB112_201:                            # %for.cond985
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB112_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB112_201 Depth=3
	movl	$0, -20(%rbp)
.LBB112_203:                            # %for.cond989
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_199 Depth=2
                                        #       Parent Loop BB112_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB112_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB112_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB112_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_203
.LBB112_206:                            # %for.end1011
                                        #   in Loop: Header=BB112_201 Depth=3
	jmp	.LBB112_207
.LBB112_207:                            # %for.inc1012
                                        #   in Loop: Header=BB112_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_201
.LBB112_208:                            # %for.end1014
                                        #   in Loop: Header=BB112_199 Depth=2
	jmp	.LBB112_209
.LBB112_209:                            # %for.inc1015
                                        #   in Loop: Header=BB112_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_199
.LBB112_210:                            # %for.end1017
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	$0, -24(%rbp)
.LBB112_211:                            # %for.cond1018
                                        #   Parent Loop BB112_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB112_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB112_211 Depth=2
	movl	$0, -20(%rbp)
.LBB112_213:                            # %for.cond1022
                                        #   Parent Loop BB112_22 Depth=1
                                        #     Parent Loop BB112_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB112_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB112_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB112_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_213
.LBB112_216:                            # %for.end1040
                                        #   in Loop: Header=BB112_211 Depth=2
	jmp	.LBB112_217
.LBB112_217:                            # %for.inc1041
                                        #   in Loop: Header=BB112_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_211
.LBB112_218:                            # %for.end1043
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB112_219:                            # %if.end1044
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_220
.LBB112_220:                            # %if.end1045
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_221
.LBB112_221:                            # %if.end1046
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_222
.LBB112_222:                            # %if.end1047
                                        #   in Loop: Header=BB112_22 Depth=1
	jmp	.LBB112_223
.LBB112_223:                            # %for.inc1048
                                        #   in Loop: Header=BB112_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB112_22
.LBB112_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-184(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-164(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB112_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_230
.LBB112_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB112_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB112_229
.LBB112_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB112_229:                            # %cond.end1065
.LBB112_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB112_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB112_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB112_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB112_233 Depth=1
	movl	$0, -12(%rbp)
.LBB112_235:                            # %for.cond1087
                                        #   Parent Loop BB112_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB112_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB112_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB112_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_235
.LBB112_238:                            # %for.end1128
                                        #   in Loop: Header=BB112_233 Depth=1
	jmp	.LBB112_239
.LBB112_239:                            # %for.inc1129
                                        #   in Loop: Header=BB112_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_233
.LBB112_240:                            # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-176(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	jmp	.LBB112_317
.LBB112_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB112_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB112_242 Depth=1
	movl	$0, -12(%rbp)
.LBB112_244:                            # %for.cond1138
                                        #   Parent Loop BB112_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB112_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB112_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB112_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_244
.LBB112_247:                            # %for.end1226
                                        #   in Loop: Header=BB112_242 Depth=1
	jmp	.LBB112_248
.LBB112_248:                            # %for.inc1227
                                        #   in Loop: Header=BB112_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_242
.LBB112_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB112_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB112_250 Depth=1
	movl	$0, -12(%rbp)
.LBB112_252:                            # %for.cond1234
                                        #   Parent Loop BB112_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB112_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB112_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB112_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_252
.LBB112_255:                            # %for.end1249
                                        #   in Loop: Header=BB112_250 Depth=1
	jmp	.LBB112_256
.LBB112_256:                            # %for.inc1250
                                        #   in Loop: Header=BB112_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_250
.LBB112_257:                            # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-176(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB112_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB112_258 Depth=1
	movl	$0, -12(%rbp)
.LBB112_260:                            # %for.cond1258
                                        #   Parent Loop BB112_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB112_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB112_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB112_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_260
.LBB112_263:                            # %for.end1282
                                        #   in Loop: Header=BB112_258 Depth=1
	jmp	.LBB112_264
.LBB112_264:                            # %for.inc1283
                                        #   in Loop: Header=BB112_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_258
.LBB112_265:                            # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB112_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB112_266 Depth=1
	movl	$0, -12(%rbp)
.LBB112_268:                            # %for.cond1328
                                        #   Parent Loop BB112_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB112_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB112_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB112_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_268
.LBB112_271:                            # %for.end1352
                                        #   in Loop: Header=BB112_266 Depth=1
	jmp	.LBB112_272
.LBB112_272:                            # %for.inc1353
                                        #   in Loop: Header=BB112_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_266
.LBB112_273:                            # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB112_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB112_274 Depth=1
	movl	$0, -12(%rbp)
.LBB112_276:                            # %for.cond1398
                                        #   Parent Loop BB112_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB112_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB112_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB112_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_276
.LBB112_279:                            # %for.end1413
                                        #   in Loop: Header=BB112_274 Depth=1
	jmp	.LBB112_280
.LBB112_280:                            # %for.inc1414
                                        #   in Loop: Header=BB112_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_274
.LBB112_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB112_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB112_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB112_282 Depth=1
	movl	$0, -12(%rbp)
.LBB112_284:                            # %for.cond1421
                                        #   Parent Loop BB112_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB112_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB112_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB112_288
.LBB112_287:                            # %cond.false1467
                                        #   in Loop: Header=BB112_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB112_288:                            # %cond.end1480
                                        #   in Loop: Header=BB112_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB112_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB112_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB112_294
.LBB112_290:                            # %cond.false1486
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB112_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB112_293
.LBB112_292:                            # %cond.false1502
                                        #   in Loop: Header=BB112_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB112_293:                            # %cond.end1515
                                        #   in Loop: Header=BB112_284 Depth=2
.LBB112_294:                            # %cond.end1517
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB112_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB112_297
.LBB112_296:                            # %cond.false1541
                                        #   in Loop: Header=BB112_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB112_297:                            # %cond.end1551
                                        #   in Loop: Header=BB112_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB112_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB112_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB112_303
.LBB112_299:                            # %cond.false1557
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB112_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB112_302
.LBB112_301:                            # %cond.false1570
                                        #   in Loop: Header=BB112_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB112_302:                            # %cond.end1580
                                        #   in Loop: Header=BB112_284 Depth=2
.LBB112_303:                            # %cond.end1582
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB112_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB112_306
.LBB112_305:                            # %cond.false1608
                                        #   in Loop: Header=BB112_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB112_306:                            # %cond.end1621
                                        #   in Loop: Header=BB112_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB112_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB112_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB112_312
.LBB112_308:                            # %cond.false1627
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB112_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB112_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB112_311
.LBB112_310:                            # %cond.false1643
                                        #   in Loop: Header=BB112_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB112_311:                            # %cond.end1656
                                        #   in Loop: Header=BB112_284 Depth=2
.LBB112_312:                            # %cond.end1658
                                        #   in Loop: Header=BB112_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB112_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_284
.LBB112_314:                            # %for.end1671
                                        #   in Loop: Header=BB112_282 Depth=1
	jmp	.LBB112_315
.LBB112_315:                            # %for.inc1672
                                        #   in Loop: Header=BB112_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_282
.LBB112_316:                            # %for.end1674
	jmp	.LBB112_317
.LBB112_317:                            # %if.end1675
	jmp	.LBB112_367
.LBB112_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB112_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB112_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB112_319 Depth=1
	movl	$0, -12(%rbp)
.LBB112_321:                            # %for.cond1681
                                        #   Parent Loop BB112_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB112_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB112_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB112_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_321
.LBB112_324:                            # %for.end1700
                                        #   in Loop: Header=BB112_319 Depth=1
	jmp	.LBB112_325
.LBB112_325:                            # %for.inc1701
                                        #   in Loop: Header=BB112_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_319
.LBB112_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB112_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB112_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB112_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB112_328 Depth=1
	movl	$0, -12(%rbp)
.LBB112_330:                            # %for.cond1711
                                        #   Parent Loop BB112_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB112_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB112_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB112_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_330
.LBB112_333:                            # %for.end1731
                                        #   in Loop: Header=BB112_328 Depth=1
	jmp	.LBB112_334
.LBB112_334:                            # %for.inc1732
                                        #   in Loop: Header=BB112_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_328
.LBB112_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB112_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB112_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB112_336 Depth=1
	movl	$0, -12(%rbp)
.LBB112_338:                            # %for.cond1739
                                        #   Parent Loop BB112_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB112_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB112_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB112_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_338
.LBB112_341:                            # %for.end1759
                                        #   in Loop: Header=BB112_336 Depth=1
	jmp	.LBB112_342
.LBB112_342:                            # %for.inc1760
                                        #   in Loop: Header=BB112_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_336
.LBB112_343:                            # %for.end1762
	jmp	.LBB112_344
.LBB112_344:                            # %if.end1763
	movl	$0, -24(%rbp)
.LBB112_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB112_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB112_345 Depth=1
	movl	$0, -20(%rbp)
.LBB112_347:                            # %for.cond1768
                                        #   Parent Loop BB112_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB112_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB112_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB112_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_347
.LBB112_350:                            # %for.end1800
                                        #   in Loop: Header=BB112_345 Depth=1
	jmp	.LBB112_351
.LBB112_351:                            # %for.inc1801
                                        #   in Loop: Header=BB112_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_345
.LBB112_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB112_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB112_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_356 Depth 2
                                        #       Child Loop BB112_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB112_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB112_354 Depth=1
	movl	$0, -24(%rbp)
.LBB112_356:                            # %for.cond1811
                                        #   Parent Loop BB112_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB112_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB112_356 Depth=2
	movl	$0, -20(%rbp)
.LBB112_358:                            # %for.cond1815
                                        #   Parent Loop BB112_354 Depth=1
                                        #     Parent Loop BB112_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB112_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB112_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB112_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_358
.LBB112_361:                            # %for.end1837
                                        #   in Loop: Header=BB112_356 Depth=2
	jmp	.LBB112_362
.LBB112_362:                            # %for.inc1838
                                        #   in Loop: Header=BB112_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_356
.LBB112_363:                            # %for.end1840
                                        #   in Loop: Header=BB112_354 Depth=1
	jmp	.LBB112_364
.LBB112_364:                            # %for.inc1841
                                        #   in Loop: Header=BB112_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_354
.LBB112_365:                            # %for.end1843
	jmp	.LBB112_366
.LBB112_366:                            # %if.end1844
	jmp	.LBB112_367
.LBB112_367:                            # %if.end1845
	movl	-92(%rbp), %ebx
	cmpl	$1224188524, -160(%rbp) # imm = 0x48F7A26C
	jne	.LBB112_369
.LBB112_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_368
.Lfunc_end112:
	.size	Mode_Decision_for_4x4IntraBlocks.83, .Lfunc_end112-Mode_Decision_for_4x4IntraBlocks.83
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.84       # -- Begin function UpdatePixelMap.84
	.p2align	4, 0x90
	.type	UpdatePixelMap.84,@function
UpdatePixelMap.84:                      # @UpdatePixelMap.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$689810867, -28(%rbp)   # imm = 0x291DADB3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB113_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB113_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB113_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB113_2 Depth=1
	movl	$0, -4(%rbp)
.LBB113_4:                              # %for.cond2
                                        #   Parent Loop BB113_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB113_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB113_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB113_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_4
.LBB113_7:                              # %for.end
                                        #   in Loop: Header=BB113_2 Depth=1
	jmp	.LBB113_8
.LBB113_8:                              # %for.inc7
                                        #   in Loop: Header=BB113_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_2
.LBB113_9:                              # %for.end9
	jmp	.LBB113_41
.LBB113_10:                             # %if.else
	movl	$0, -12(%rbp)
.LBB113_11:                             # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_13 Depth 2
                                        #       Child Loop BB113_16 Depth 3
                                        #         Child Loop BB113_18 Depth 4
                                        #       Child Loop BB113_25 Depth 3
                                        #         Child Loop BB113_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB113_11 Depth=1
	movl	$0, -16(%rbp)
.LBB113_13:                             # %for.cond14
                                        #   Parent Loop BB113_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_16 Depth 3
                                        #         Child Loop BB113_18 Depth 4
                                        #       Child Loop BB113_25 Depth 3
                                        #         Child Loop BB113_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB113_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB113_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB113_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB113_16:                             # %for.cond27
                                        #   Parent Loop BB113_11 Depth=1
                                        #     Parent Loop BB113_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB113_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB113_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB113_18:                             # %for.cond31
                                        #   Parent Loop BB113_11 Depth=1
                                        #     Parent Loop BB113_13 Depth=2
                                        #       Parent Loop BB113_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB113_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB113_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB113_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_18
.LBB113_21:                             # %for.end40
                                        #   in Loop: Header=BB113_16 Depth=3
	jmp	.LBB113_22
.LBB113_22:                             # %for.inc41
                                        #   in Loop: Header=BB113_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_16
.LBB113_23:                             # %for.end43
                                        #   in Loop: Header=BB113_13 Depth=2
	jmp	.LBB113_36
.LBB113_24:                             # %if.else44
                                        #   in Loop: Header=BB113_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB113_25:                             # %for.cond46
                                        #   Parent Loop BB113_11 Depth=1
                                        #     Parent Loop BB113_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB113_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB113_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB113_27:                             # %for.cond50
                                        #   Parent Loop BB113_11 Depth=1
                                        #     Parent Loop BB113_13 Depth=2
                                        #       Parent Loop BB113_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB113_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB113_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB113_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB113_31
.LBB113_30:                             # %cond.false
                                        #   in Loop: Header=BB113_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB113_31:                             # %cond.end
                                        #   in Loop: Header=BB113_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB113_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_27
.LBB113_33:                             # %for.end76
                                        #   in Loop: Header=BB113_25 Depth=3
	jmp	.LBB113_34
.LBB113_34:                             # %for.inc77
                                        #   in Loop: Header=BB113_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_25
.LBB113_35:                             # %for.end79
                                        #   in Loop: Header=BB113_13 Depth=2
	jmp	.LBB113_36
.LBB113_36:                             # %if.end
                                        #   in Loop: Header=BB113_13 Depth=2
	jmp	.LBB113_37
.LBB113_37:                             # %for.inc80
                                        #   in Loop: Header=BB113_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_13
.LBB113_38:                             # %for.end82
                                        #   in Loop: Header=BB113_11 Depth=1
	jmp	.LBB113_39
.LBB113_39:                             # %for.inc83
                                        #   in Loop: Header=BB113_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_11
.LBB113_40:                             # %for.end85
	jmp	.LBB113_41
.LBB113_41:                             # %if.end86
	cmpl	$689810867, -28(%rbp)   # imm = 0x291DADB3
	jne	.LBB113_43
.LBB113_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_42
.Lfunc_end113:
	.size	UpdatePixelMap.84, .Lfunc_end113-UpdatePixelMap.84
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.85    # -- Begin function RestoreMVBlock8x8.85
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.85,@function
RestoreMVBlock8x8.85:                   # @RestoreMVBlock8x8.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$464199258, -68(%rbp)   # imm = 0x1BAB1E5A
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB114_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB114_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB114_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_5:                              # %for.cond7
                                        #   Parent Loop BB114_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB114_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB114_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_5
.LBB114_8:                              # %for.end
                                        #   in Loop: Header=BB114_3 Depth=1
	jmp	.LBB114_9
.LBB114_9:                              # %for.inc76
                                        #   in Loop: Header=BB114_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_3
.LBB114_10:                             # %for.end78
	jmp	.LBB114_11
.LBB114_11:                             # %if.end
	jmp	.LBB114_46
.LBB114_12:                             # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB114_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB114_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_16:                             # %for.cond84
                                        #   Parent Loop BB114_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB114_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB114_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_16
.LBB114_19:                             # %for.end161
                                        #   in Loop: Header=BB114_14 Depth=1
	jmp	.LBB114_20
.LBB114_20:                             # %for.inc162
                                        #   in Loop: Header=BB114_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_14
.LBB114_21:                             # %for.end164
	jmp	.LBB114_45
.LBB114_22:                             # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB114_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB114_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_26:                             # %for.cond171
                                        #   Parent Loop BB114_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB114_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB114_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_26
.LBB114_29:                             # %for.end248
                                        #   in Loop: Header=BB114_24 Depth=1
	jmp	.LBB114_30
.LBB114_30:                             # %for.inc249
                                        #   in Loop: Header=BB114_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_24
.LBB114_31:                             # %for.end251
	jmp	.LBB114_44
.LBB114_32:                             # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB114_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB114_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_36:                             # %for.cond258
                                        #   Parent Loop BB114_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB114_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB114_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_36
.LBB114_39:                             # %for.end407
                                        #   in Loop: Header=BB114_34 Depth=1
	jmp	.LBB114_40
.LBB114_40:                             # %for.inc408
                                        #   in Loop: Header=BB114_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_34
.LBB114_41:                             # %for.end410
	jmp	.LBB114_43
.LBB114_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB114_43:                             # %if.end412
	jmp	.LBB114_44
.LBB114_44:                             # %if.end413
	jmp	.LBB114_45
.LBB114_45:                             # %if.end414
	jmp	.LBB114_46
.LBB114_46:                             # %if.end415
	cmpl	$464199258, -68(%rbp)   # imm = 0x1BAB1E5A
	jne	.LBB114_48
.LBB114_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_47
.Lfunc_end114:
	.size	RestoreMVBlock8x8.85, .Lfunc_end114-RestoreMVBlock8x8.85
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.86 # -- Begin function SetModesAndRefframeForBlocks.86
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.86,@function
SetModesAndRefframeForBlocks.86:        # @SetModesAndRefframeForBlocks.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$482001966, -36(%rbp)   # imm = 0x1CBAC42E
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB115_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB115_4
.LBB115_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB115_4
.LBB115_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB115_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB115_7
.LBB115_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB115_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB115_42
# %bb.8:                                # %if.end
	movq	.LJTI115_0(,%rax,8), %rax
	jmpq	*%rax
.LBB115_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB115_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB115_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB115_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB115_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB115_14
.LBB115_13:                             # %cond.false26
                                        #   in Loop: Header=BB115_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_14
.LBB115_14:                             # %cond.end27
                                        #   in Loop: Header=BB115_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB115_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_10
.LBB115_16:                             # %for.end
	jmp	.LBB115_43
.LBB115_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB115_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB115_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB115_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_18
.LBB115_21:                             # %for.end49
	jmp	.LBB115_43
.LBB115_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB115_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB115_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB115_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_23
.LBB115_26:                             # %for.end71
	jmp	.LBB115_43
.LBB115_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB115_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB115_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB115_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_28
.LBB115_31:                             # %for.end85
	jmp	.LBB115_43
.LBB115_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB115_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB115_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB115_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_33
.LBB115_36:                             # %for.end99
	jmp	.LBB115_43
.LBB115_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB115_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB115_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB115_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_38
.LBB115_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB115_43
.LBB115_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB115_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB115_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB115_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB115_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB115_70
.LBB115_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB115_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB115_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB115_49 Depth=1
	movl	$0, -4(%rbp)
.LBB115_51:                             # %for.cond131
                                        #   Parent Loop BB115_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB115_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB115_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB115_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB115_55
.LBB115_54:                             # %if.else174
                                        #   in Loop: Header=BB115_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB115_55:                             # %if.end195
                                        #   in Loop: Header=BB115_51 Depth=2
	jmp	.LBB115_56
.LBB115_56:                             # %for.inc196
                                        #   in Loop: Header=BB115_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_51
.LBB115_57:                             # %for.end198
                                        #   in Loop: Header=BB115_49 Depth=1
	jmp	.LBB115_58
.LBB115_58:                             # %for.inc199
                                        #   in Loop: Header=BB115_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_49
.LBB115_59:                             # %for.end201
	jmp	.LBB115_69
.LBB115_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB115_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB115_61 Depth=1
	movl	$0, -4(%rbp)
.LBB115_63:                             # %for.cond207
                                        #   Parent Loop BB115_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB115_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB115_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_63
.LBB115_66:                             # %for.end227
                                        #   in Loop: Header=BB115_61 Depth=1
	jmp	.LBB115_67
.LBB115_67:                             # %for.inc228
                                        #   in Loop: Header=BB115_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_61
.LBB115_68:                             # %for.end230
	jmp	.LBB115_69
.LBB115_69:                             # %if.end231
	jmp	.LBB115_127
.LBB115_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB115_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB115_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB115_72 Depth=1
	movl	$0, -4(%rbp)
.LBB115_74:                             # %for.cond239
                                        #   Parent Loop BB115_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB115_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB115_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB115_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB115_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB115_105
.LBB115_78:                             # %if.else298
                                        #   in Loop: Header=BB115_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB115_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB115_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB115_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB115_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB115_90
.LBB115_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB115_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB115_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB115_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB115_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB115_90
.LBB115_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB115_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB115_90
.LBB115_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB115_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB115_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB115_90
.LBB115_89:                             # %if.then356
                                        #   in Loop: Header=BB115_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB115_104
.LBB115_90:                             # %if.else377
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB115_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB115_96
.LBB115_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB115_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB115_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB115_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB115_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB115_96
.LBB115_95:                             # %cond.true404
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB115_97
.LBB115_96:                             # %cond.false410
                                        #   in Loop: Header=BB115_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_97
.LBB115_97:                             # %cond.end411
                                        #   in Loop: Header=BB115_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB115_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB115_102
.LBB115_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB115_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB115_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB115_102
.LBB115_101:                            # %cond.true448
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB115_103
.LBB115_102:                            # %cond.false454
                                        #   in Loop: Header=BB115_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_103
.LBB115_103:                            # %cond.end455
                                        #   in Loop: Header=BB115_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB115_104:                            # %if.end468
                                        #   in Loop: Header=BB115_74 Depth=2
	jmp	.LBB115_105
.LBB115_105:                            # %if.end469
                                        #   in Loop: Header=BB115_74 Depth=2
	jmp	.LBB115_106
.LBB115_106:                            # %for.inc470
                                        #   in Loop: Header=BB115_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_74
.LBB115_107:                            # %for.end472
                                        #   in Loop: Header=BB115_72 Depth=1
	jmp	.LBB115_108
.LBB115_108:                            # %for.inc473
                                        #   in Loop: Header=BB115_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_72
.LBB115_109:                            # %for.end475
	jmp	.LBB115_126
.LBB115_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB115_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB115_111 Depth=1
	movl	$0, -4(%rbp)
.LBB115_113:                            # %for.cond481
                                        #   Parent Loop BB115_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB115_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB115_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB115_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB115_120
.LBB115_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB115_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB115_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB115_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB115_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB115_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB115_120
.LBB115_119:                            # %cond.true519
                                        #   in Loop: Header=BB115_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB115_121
.LBB115_120:                            # %cond.false525
                                        #   in Loop: Header=BB115_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_121
.LBB115_121:                            # %cond.end526
                                        #   in Loop: Header=BB115_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB115_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_113
.LBB115_123:                            # %for.end541
                                        #   in Loop: Header=BB115_111 Depth=1
	jmp	.LBB115_124
.LBB115_124:                            # %for.inc542
                                        #   in Loop: Header=BB115_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_111
.LBB115_125:                            # %for.end544
	jmp	.LBB115_126
.LBB115_126:                            # %if.end545
	jmp	.LBB115_127
.LBB115_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB115_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB115_128 Depth=1
	movl	$0, -4(%rbp)
.LBB115_130:                            # %for.cond551
                                        #   Parent Loop BB115_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB115_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB115_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB115_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB115_134
.LBB115_133:                            # %cond.false584
                                        #   in Loop: Header=BB115_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB115_134
.LBB115_134:                            # %cond.end585
                                        #   in Loop: Header=BB115_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB115_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_130
.LBB115_136:                            # %for.end598
                                        #   in Loop: Header=BB115_128 Depth=1
	jmp	.LBB115_137
.LBB115_137:                            # %for.inc599
                                        #   in Loop: Header=BB115_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_128
.LBB115_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB115_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB115_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB115_140 Depth=1
	movl	$0, -4(%rbp)
.LBB115_142:                            # %for.cond608
                                        #   Parent Loop BB115_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB115_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB115_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB115_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB115_146
.LBB115_145:                            # %cond.false642
                                        #   in Loop: Header=BB115_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB115_146
.LBB115_146:                            # %cond.end643
                                        #   in Loop: Header=BB115_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB115_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_142
.LBB115_148:                            # %for.end657
                                        #   in Loop: Header=BB115_140 Depth=1
	jmp	.LBB115_149
.LBB115_149:                            # %for.inc658
                                        #   in Loop: Header=BB115_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_140
.LBB115_150:                            # %for.end660
	jmp	.LBB115_151
.LBB115_151:                            # %if.end661
	cmpl	$482001966, -36(%rbp)   # imm = 0x1CBAC42E
	jne	.LBB115_153
.LBB115_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_152
.Lfunc_end115:
	.size	SetModesAndRefframeForBlocks.86, .Lfunc_end115-SetModesAndRefframeForBlocks.86
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI115_0:
	.quad	.LBB115_9
	.quad	.LBB115_17
	.quad	.LBB115_17
	.quad	.LBB115_17
	.quad	.LBB115_42
	.quad	.LBB115_42
	.quad	.LBB115_42
	.quad	.LBB115_42
	.quad	.LBB115_22
	.quad	.LBB115_27
	.quad	.LBB115_32
	.quad	.LBB115_42
	.quad	.LBB115_42
	.quad	.LBB115_37
                                        # -- End function
	.text
	.globl	SetCoeffAndReconstruction8x8.87 # -- Begin function SetCoeffAndReconstruction8x8.87
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.87,@function
SetCoeffAndReconstruction8x8.87:        # @SetCoeffAndReconstruction8x8.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$405189231, -36(%rbp)   # imm = 0x1826B26F
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB116_4
.LBB116_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB116_4
.LBB116_4:                              # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB116_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB116_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB116_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB116_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_6
.LBB116_9:                              # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB116_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB116_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB116_11 Depth=1
	movl	$0, -4(%rbp)
.LBB116_13:                             # %for.cond20
                                        #   Parent Loop BB116_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB116_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB116_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_13
.LBB116_16:                             # %for.end52
                                        #   in Loop: Header=BB116_11 Depth=1
	jmp	.LBB116_17
.LBB116_17:                             # %for.inc53
                                        #   in Loop: Header=BB116_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_11
.LBB116_18:                             # %for.end55
	jmp	.LBB116_28
.LBB116_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB116_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB116_20 Depth=1
	movl	$0, -4(%rbp)
.LBB116_22:                             # %for.cond60
                                        #   Parent Loop BB116_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB116_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB116_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_22
.LBB116_25:                             # %for.end86
                                        #   in Loop: Header=BB116_20 Depth=1
	jmp	.LBB116_26
.LBB116_26:                             # %for.inc87
                                        #   in Loop: Header=BB116_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_20
.LBB116_27:                             # %for.end89
	jmp	.LBB116_28
.LBB116_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB116_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB116_29 Depth=1
	movl	$0, -4(%rbp)
.LBB116_31:                             # %for.cond94
                                        #   Parent Loop BB116_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB116_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB116_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB116_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB116_35
.LBB116_34:                             # %cond.false127
                                        #   in Loop: Header=BB116_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB116_35
.LBB116_35:                             # %cond.end128
                                        #   in Loop: Header=BB116_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB116_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_31
.LBB116_37:                             # %for.end141
                                        #   in Loop: Header=BB116_29 Depth=1
	jmp	.LBB116_38
.LBB116_38:                             # %for.inc142
                                        #   in Loop: Header=BB116_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_29
.LBB116_39:                             # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB116_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB116_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB116_41 Depth=1
	movl	$0, -4(%rbp)
.LBB116_43:                             # %for.cond151
                                        #   Parent Loop BB116_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB116_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB116_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB116_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB116_47
.LBB116_46:                             # %cond.false185
                                        #   in Loop: Header=BB116_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB116_47
.LBB116_47:                             # %cond.end186
                                        #   in Loop: Header=BB116_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB116_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_43
.LBB116_49:                             # %for.end200
                                        #   in Loop: Header=BB116_41 Depth=1
	jmp	.LBB116_50
.LBB116_50:                             # %for.inc201
                                        #   in Loop: Header=BB116_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_41
.LBB116_51:                             # %for.end203
	jmp	.LBB116_52
.LBB116_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB116_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_55 Depth 2
                                        #       Child Loop BB116_57 Depth 3
                                        #         Child Loop BB116_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB116_53 Depth=1
	movl	$0, -12(%rbp)
.LBB116_55:                             # %for.cond209
                                        #   Parent Loop BB116_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_57 Depth 3
                                        #         Child Loop BB116_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB116_55 Depth=2
	movl	$0, -8(%rbp)
.LBB116_57:                             # %for.cond213
                                        #   Parent Loop BB116_53 Depth=1
                                        #     Parent Loop BB116_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB116_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB116_57 Depth=3
	movl	$0, -4(%rbp)
.LBB116_59:                             # %for.cond217
                                        #   Parent Loop BB116_53 Depth=1
                                        #     Parent Loop BB116_55 Depth=2
                                        #       Parent Loop BB116_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB116_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB116_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB116_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_59
.LBB116_62:                             # %for.end239
                                        #   in Loop: Header=BB116_57 Depth=3
	jmp	.LBB116_63
.LBB116_63:                             # %for.inc240
                                        #   in Loop: Header=BB116_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_57
.LBB116_64:                             # %for.end242
                                        #   in Loop: Header=BB116_55 Depth=2
	jmp	.LBB116_65
.LBB116_65:                             # %for.inc243
                                        #   in Loop: Header=BB116_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_55
.LBB116_66:                             # %for.end245
                                        #   in Loop: Header=BB116_53 Depth=1
	jmp	.LBB116_67
.LBB116_67:                             # %for.inc246
                                        #   in Loop: Header=BB116_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_53
.LBB116_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB116_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB116_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB116_83
.LBB116_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB116_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB116_72 Depth=1
	movl	$0, -4(%rbp)
.LBB116_74:                             # %for.cond262
                                        #   Parent Loop BB116_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB116_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_78
.LBB116_77:                             # %if.else278
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB116_78:                             # %if.end283
                                        #   in Loop: Header=BB116_74 Depth=2
	jmp	.LBB116_79
.LBB116_79:                             # %for.inc284
                                        #   in Loop: Header=BB116_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_74
.LBB116_80:                             # %for.end286
                                        #   in Loop: Header=BB116_72 Depth=1
	jmp	.LBB116_81
.LBB116_81:                             # %for.inc287
                                        #   in Loop: Header=BB116_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_72
.LBB116_82:                             # %for.end289
	jmp	.LBB116_95
.LBB116_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB116_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB116_84 Depth=1
	movl	$0, -4(%rbp)
.LBB116_86:                             # %for.cond297
                                        #   Parent Loop BB116_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB116_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB116_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_90
.LBB116_89:                             # %if.else317
                                        #   in Loop: Header=BB116_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB116_90:                             # %if.end326
                                        #   in Loop: Header=BB116_86 Depth=2
	jmp	.LBB116_91
.LBB116_91:                             # %for.inc327
                                        #   in Loop: Header=BB116_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_86
.LBB116_92:                             # %for.end329
                                        #   in Loop: Header=BB116_84 Depth=1
	jmp	.LBB116_93
.LBB116_93:                             # %for.inc330
                                        #   in Loop: Header=BB116_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_84
.LBB116_94:                             # %for.end332
	jmp	.LBB116_95
.LBB116_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB116_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB116_96 Depth=1
	movl	$0, -4(%rbp)
.LBB116_98:                             # %for.cond338
                                        #   Parent Loop BB116_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB116_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB116_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_98
.LBB116_101:                            # %for.end384
                                        #   in Loop: Header=BB116_96 Depth=1
	jmp	.LBB116_102
.LBB116_102:                            # %for.inc385
                                        #   in Loop: Header=BB116_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_96
.LBB116_103:                            # %for.end387
	jmp	.LBB116_157
.LBB116_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB116_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_107 Depth 2
                                        #       Child Loop BB116_109 Depth 3
                                        #         Child Loop BB116_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB116_105 Depth=1
	movl	$0, -12(%rbp)
.LBB116_107:                            # %for.cond394
                                        #   Parent Loop BB116_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_109 Depth 3
                                        #         Child Loop BB116_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB116_107 Depth=2
	movl	$0, -8(%rbp)
.LBB116_109:                            # %for.cond398
                                        #   Parent Loop BB116_105 Depth=1
                                        #     Parent Loop BB116_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB116_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB116_109 Depth=3
	movl	$0, -4(%rbp)
.LBB116_111:                            # %for.cond402
                                        #   Parent Loop BB116_105 Depth=1
                                        #     Parent Loop BB116_107 Depth=2
                                        #       Parent Loop BB116_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB116_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB116_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB116_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_111
.LBB116_114:                            # %for.end425
                                        #   in Loop: Header=BB116_109 Depth=3
	jmp	.LBB116_115
.LBB116_115:                            # %for.inc426
                                        #   in Loop: Header=BB116_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_109
.LBB116_116:                            # %for.end428
                                        #   in Loop: Header=BB116_107 Depth=2
	jmp	.LBB116_117
.LBB116_117:                            # %for.inc429
                                        #   in Loop: Header=BB116_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_107
.LBB116_118:                            # %for.end431
                                        #   in Loop: Header=BB116_105 Depth=1
	jmp	.LBB116_119
.LBB116_119:                            # %for.inc432
                                        #   in Loop: Header=BB116_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_105
.LBB116_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB116_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB116_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB116_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB116_136
.LBB116_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB116_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB116_125 Depth=1
	movl	$0, -4(%rbp)
.LBB116_127:                            # %for.cond458
                                        #   Parent Loop BB116_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB116_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB116_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_131
.LBB116_130:                            # %if.else478
                                        #   in Loop: Header=BB116_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB116_131:                            # %if.end483
                                        #   in Loop: Header=BB116_127 Depth=2
	jmp	.LBB116_132
.LBB116_132:                            # %for.inc484
                                        #   in Loop: Header=BB116_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_127
.LBB116_133:                            # %for.end486
                                        #   in Loop: Header=BB116_125 Depth=1
	jmp	.LBB116_134
.LBB116_134:                            # %for.inc487
                                        #   in Loop: Header=BB116_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_125
.LBB116_135:                            # %for.end489
	jmp	.LBB116_148
.LBB116_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB116_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB116_137 Depth=1
	movl	$0, -4(%rbp)
.LBB116_139:                            # %for.cond498
                                        #   Parent Loop BB116_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB116_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB116_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_143
.LBB116_142:                            # %if.else518
                                        #   in Loop: Header=BB116_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB116_143:                            # %if.end527
                                        #   in Loop: Header=BB116_139 Depth=2
	jmp	.LBB116_144
.LBB116_144:                            # %for.inc528
                                        #   in Loop: Header=BB116_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_139
.LBB116_145:                            # %for.end530
                                        #   in Loop: Header=BB116_137 Depth=1
	jmp	.LBB116_146
.LBB116_146:                            # %for.inc531
                                        #   in Loop: Header=BB116_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_137
.LBB116_147:                            # %for.end533
	jmp	.LBB116_148
.LBB116_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB116_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB116_149 Depth=1
	movl	$0, -4(%rbp)
.LBB116_151:                            # %for.cond539
                                        #   Parent Loop BB116_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB116_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB116_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_151
.LBB116_154:                            # %for.end585
                                        #   in Loop: Header=BB116_149 Depth=1
	jmp	.LBB116_155
.LBB116_155:                            # %for.inc586
                                        #   in Loop: Header=BB116_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_149
.LBB116_156:                            # %for.end588
	jmp	.LBB116_157
.LBB116_157:                            # %if.end589
	cmpl	$405189231, -36(%rbp)   # imm = 0x1826B26F
	jne	.LBB116_159
.LBB116_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_158
.Lfunc_end116:
	.size	SetCoeffAndReconstruction8x8.87, .Lfunc_end116-SetCoeffAndReconstruction8x8.87
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.88 # -- Begin function Intra16x16_Mode_Decision.88
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.88,@function
Intra16x16_Mode_Decision.88:            # @Intra16x16_Mode_Decision.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2108531019, -56(%rbp)  # imm = 0x7DADA14B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB117_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB117_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB117_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB117_4 Depth=1
	movl	$0, -4(%rbp)
.LBB117_6:                              # %for.cond4
                                        #   Parent Loop BB117_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB117_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB117_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_6
.LBB117_9:                              # %for.end
                                        #   in Loop: Header=BB117_4 Depth=1
	jmp	.LBB117_10
.LBB117_10:                             # %for.inc87
                                        #   in Loop: Header=BB117_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_4
.LBB117_11:                             # %for.end89
	jmp	.LBB117_12
.LBB117_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB117_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB117_14 Depth=1
	movl	$0, -4(%rbp)
.LBB117_16:                             # %for.cond99
                                        #   Parent Loop BB117_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB117_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB117_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_16
.LBB117_19:                             # %for.end123
                                        #   in Loop: Header=BB117_14 Depth=1
	jmp	.LBB117_20
.LBB117_20:                             # %for.inc124
                                        #   in Loop: Header=BB117_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_14
.LBB117_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB117_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB117_22 Depth=1
	movl	$0, -4(%rbp)
.LBB117_24:                             # %for.cond132
                                        #   Parent Loop BB117_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB117_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB117_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_24
.LBB117_27:                             # %for.end156
                                        #   in Loop: Header=BB117_22 Depth=1
	jmp	.LBB117_28
.LBB117_28:                             # %for.inc157
                                        #   in Loop: Header=BB117_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_22
.LBB117_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB117_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB117_30 Depth=1
	movl	$0, -4(%rbp)
.LBB117_32:                             # %for.cond165
                                        #   Parent Loop BB117_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB117_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_32
.LBB117_35:                             # %for.end180
                                        #   in Loop: Header=BB117_30 Depth=1
	jmp	.LBB117_36
.LBB117_36:                             # %for.inc181
                                        #   in Loop: Header=BB117_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_30
.LBB117_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB117_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB117_38 Depth=1
	movl	$0, -4(%rbp)
.LBB117_40:                             # %for.cond190
                                        #   Parent Loop BB117_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -28(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -32(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB117_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB117_44
.LBB117_43:                             # %cond.false
                                        #   in Loop: Header=BB117_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB117_44:                             # %cond.end
                                        #   in Loop: Header=BB117_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB117_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB117_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB117_50
.LBB117_46:                             # %cond.false246
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB117_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB117_49
.LBB117_48:                             # %cond.false260
                                        #   in Loop: Header=BB117_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB117_49:                             # %cond.end271
                                        #   in Loop: Header=BB117_40 Depth=2
.LBB117_50:                             # %cond.end273
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB117_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB117_53
.LBB117_52:                             # %cond.false295
                                        #   in Loop: Header=BB117_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB117_53:                             # %cond.end305
                                        #   in Loop: Header=BB117_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB117_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB117_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB117_59
.LBB117_55:                             # %cond.false311
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB117_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB117_58
.LBB117_57:                             # %cond.false324
                                        #   in Loop: Header=BB117_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB117_58:                             # %cond.end334
                                        #   in Loop: Header=BB117_40 Depth=2
.LBB117_59:                             # %cond.end336
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB117_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB117_62
.LBB117_61:                             # %cond.false359
                                        #   in Loop: Header=BB117_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB117_62:                             # %cond.end370
                                        #   in Loop: Header=BB117_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB117_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB117_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB117_68
.LBB117_64:                             # %cond.false376
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB117_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB117_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB117_67
.LBB117_66:                             # %cond.false390
                                        #   in Loop: Header=BB117_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB117_67:                             # %cond.end401
                                        #   in Loop: Header=BB117_40 Depth=2
.LBB117_68:                             # %cond.end403
                                        #   in Loop: Header=BB117_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-24(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-20(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB117_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_40
.LBB117_70:                             # %for.end416
                                        #   in Loop: Header=BB117_38 Depth=1
	jmp	.LBB117_71
.LBB117_71:                             # %for.inc417
                                        #   in Loop: Header=BB117_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_38
.LBB117_72:                             # %for.end419
	jmp	.LBB117_73
.LBB117_73:                             # %if.end420
	cmpl	$2108531019, -56(%rbp)  # imm = 0x7DADA14B
	jne	.LBB117_75
.LBB117_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_74
.Lfunc_end117:
	.size	Intra16x16_Mode_Decision.88, .Lfunc_end117-Intra16x16_Mode_Decision.88
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.89 # -- Begin function CheckReliabilityOfRef.89
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.89,@function
CheckReliabilityOfRef.89:               # @CheckReliabilityOfRef.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2090567964, -104(%rbp) # imm = 0x7C9B891C
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB118_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB118_6
.LBB118_2:                              # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB118_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB118_5
.LBB118_4:                              # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB118_5
.LBB118_5:                              # %cond.end
.LBB118_6:                              # %cond.end6
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB118_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB118_8:                              # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB118_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB118_14
.LBB118_10:                             # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB118_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB118_13
.LBB118_12:                             # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB118_13
.LBB118_13:                             # %cond.end20
.LBB118_14:                             # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB118_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB118_16:                             # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB118_17:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_19 Depth 2
                                        #       Child Loop BB118_23 Depth 3
                                        #         Child Loop BB118_25 Depth 4
                                        #       Child Loop BB118_53 Depth 3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
                                        #       Child Loop BB118_87 Depth 3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
                                        #       Child Loop BB118_121 Depth 3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
                                        #       Child Loop BB118_159 Depth 3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
                                        #       Child Loop BB118_196 Depth 3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB118_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB118_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB118_19:                             # %for.cond31
                                        #   Parent Loop BB118_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_23 Depth 3
                                        #         Child Loop BB118_25 Depth 4
                                        #       Child Loop BB118_53 Depth 3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
                                        #       Child Loop BB118_87 Depth 3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
                                        #       Child Loop BB118_121 Depth 3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
                                        #       Child Loop BB118_159 Depth 3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
                                        #       Child Loop BB118_196 Depth 3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB118_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB118_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-32(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB118_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB118_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_23:                             # %for.cond75
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB118_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB118_23 Depth=3
	movl	$0, -16(%rbp)
.LBB118_25:                             # %for.cond79
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB118_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB118_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB118_29
.LBB118_28:                             # %cond.false87
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB118_29:                             # %cond.end89
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB118_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB118_35
.LBB118_31:                             # %cond.false94
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB118_34
.LBB118_33:                             # %cond.false99
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB118_34:                             # %cond.end101
                                        #   in Loop: Header=BB118_25 Depth=4
.LBB118_35:                             # %cond.end103
                                        #   in Loop: Header=BB118_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB118_38
.LBB118_37:                             # %cond.false111
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB118_38:                             # %cond.end113
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB118_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB118_44
.LBB118_40:                             # %cond.false118
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB118_43
.LBB118_42:                             # %cond.false123
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB118_43:                             # %cond.end125
                                        #   in Loop: Header=BB118_25 Depth=4
.LBB118_44:                             # %cond.end127
                                        #   in Loop: Header=BB118_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_46:                             # %if.end
                                        #   in Loop: Header=BB118_25 Depth=4
	jmp	.LBB118_47
.LBB118_47:                             # %for.inc
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_25
.LBB118_48:                             # %for.end
                                        #   in Loop: Header=BB118_23 Depth=3
	jmp	.LBB118_49
.LBB118_49:                             # %for.inc135
                                        #   in Loop: Header=BB118_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_23
.LBB118_50:                             # %for.end137
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_262
.LBB118_51:                             # %if.else
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB118_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_53:                             # %for.cond141
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB118_53 Depth=3
	movl	$0, -16(%rbp)
.LBB118_55:                             # %for.cond145
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_59
.LBB118_58:                             # %cond.false153
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_59:                             # %cond.end155
                                        #   in Loop: Header=BB118_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB118_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_65
.LBB118_61:                             # %cond.false160
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_64
.LBB118_63:                             # %cond.false165
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_64:                             # %cond.end167
                                        #   in Loop: Header=BB118_55 Depth=4
.LBB118_65:                             # %cond.end169
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB118_66:                             # %for.cond171
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_53 Depth=3
                                        #         Parent Loop BB118_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB118_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_70
.LBB118_69:                             # %cond.false180
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB118_70:                             # %cond.end183
                                        #   in Loop: Header=BB118_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB118_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_76
.LBB118_72:                             # %cond.false188
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_75
.LBB118_74:                             # %cond.false194
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB118_75:                             # %cond.end197
                                        #   in Loop: Header=BB118_66 Depth=5
.LBB118_76:                             # %cond.end199
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_78:                             # %if.end209
                                        #   in Loop: Header=BB118_66 Depth=5
	jmp	.LBB118_79
.LBB118_79:                             # %for.inc210
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_66
.LBB118_80:                             # %for.end212
                                        #   in Loop: Header=BB118_55 Depth=4
	jmp	.LBB118_81
.LBB118_81:                             # %for.inc213
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_55
.LBB118_82:                             # %for.end215
                                        #   in Loop: Header=BB118_53 Depth=3
	jmp	.LBB118_83
.LBB118_83:                             # %for.inc216
                                        #   in Loop: Header=BB118_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_53
.LBB118_84:                             # %for.end218
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_261
.LBB118_85:                             # %if.else219
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB118_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_87:                             # %for.cond223
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB118_87 Depth=3
	movl	$0, -16(%rbp)
.LBB118_89:                             # %for.cond227
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_93
.LBB118_92:                             # %cond.false235
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_93:                             # %cond.end237
                                        #   in Loop: Header=BB118_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB118_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_99
.LBB118_95:                             # %cond.false242
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_98
.LBB118_97:                             # %cond.false247
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_98:                             # %cond.end249
                                        #   in Loop: Header=BB118_89 Depth=4
.LBB118_99:                             # %cond.end251
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB118_100:                            # %for.cond253
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_87 Depth=3
                                        #         Parent Loop BB118_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB118_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_104
.LBB118_103:                            # %cond.false262
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_104:                            # %cond.end265
                                        #   in Loop: Header=BB118_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB118_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_110
.LBB118_106:                            # %cond.false270
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_109
.LBB118_108:                            # %cond.false276
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_109:                            # %cond.end279
                                        #   in Loop: Header=BB118_100 Depth=5
.LBB118_110:                            # %cond.end281
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_112:                            # %if.end291
                                        #   in Loop: Header=BB118_100 Depth=5
	jmp	.LBB118_113
.LBB118_113:                            # %for.inc292
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_100
.LBB118_114:                            # %for.end294
                                        #   in Loop: Header=BB118_89 Depth=4
	jmp	.LBB118_115
.LBB118_115:                            # %for.inc295
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_89
.LBB118_116:                            # %for.end297
                                        #   in Loop: Header=BB118_87 Depth=3
	jmp	.LBB118_117
.LBB118_117:                            # %for.inc298
                                        #   in Loop: Header=BB118_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_87
.LBB118_118:                            # %for.end300
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_260
.LBB118_119:                            # %if.else301
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB118_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_121:                            # %for.cond305
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB118_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB118_121 Depth=3
	movl	$0, -16(%rbp)
.LBB118_123:                            # %for.cond309
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB118_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB118_123 Depth=4
	movl	$-2, -28(%rbp)
.LBB118_125:                            # %for.cond313
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        #         Parent Loop BB118_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB118_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_129
.LBB118_128:                            # %cond.false322
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_129:                            # %cond.end325
                                        #   in Loop: Header=BB118_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB118_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_135
.LBB118_131:                            # %cond.false330
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_134
.LBB118_133:                            # %cond.false336
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_134:                            # %cond.end339
                                        #   in Loop: Header=BB118_125 Depth=5
.LBB118_135:                            # %cond.end341
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB118_136:                            # %for.cond343
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        #         Parent Loop BB118_123 Depth=4
                                        #           Parent Loop BB118_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB118_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB118_140
.LBB118_139:                            # %cond.false352
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_140:                            # %cond.end355
                                        #   in Loop: Header=BB118_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB118_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB118_146
.LBB118_142:                            # %cond.false360
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB118_145
.LBB118_144:                            # %cond.false366
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_145:                            # %cond.end369
                                        #   in Loop: Header=BB118_136 Depth=6
.LBB118_146:                            # %cond.end371
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_148:                            # %if.end381
                                        #   in Loop: Header=BB118_136 Depth=6
	jmp	.LBB118_149
.LBB118_149:                            # %for.inc382
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_136
.LBB118_150:                            # %for.end384
                                        #   in Loop: Header=BB118_125 Depth=5
	jmp	.LBB118_151
.LBB118_151:                            # %for.inc385
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_125
.LBB118_152:                            # %for.end387
                                        #   in Loop: Header=BB118_123 Depth=4
	jmp	.LBB118_153
.LBB118_153:                            # %for.inc388
                                        #   in Loop: Header=BB118_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_123
.LBB118_154:                            # %for.end390
                                        #   in Loop: Header=BB118_121 Depth=3
	jmp	.LBB118_155
.LBB118_155:                            # %for.inc391
                                        #   in Loop: Header=BB118_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_121
.LBB118_156:                            # %for.end393
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_259
.LBB118_157:                            # %if.else394
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB118_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_159:                            # %for.cond398
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB118_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB118_159 Depth=3
	movl	$0, -16(%rbp)
.LBB118_161:                            # %for.cond402
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB118_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB118_161 Depth=4
	movl	$-2, -24(%rbp)
.LBB118_163:                            # %for.cond406
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        #         Parent Loop BB118_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB118_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_167
.LBB118_166:                            # %cond.false415
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_167:                            # %cond.end418
                                        #   in Loop: Header=BB118_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB118_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_173
.LBB118_169:                            # %cond.false423
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_172
.LBB118_171:                            # %cond.false429
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_172:                            # %cond.end432
                                        #   in Loop: Header=BB118_163 Depth=5
.LBB118_173:                            # %cond.end434
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB118_174:                            # %for.cond436
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        #         Parent Loop BB118_161 Depth=4
                                        #           Parent Loop BB118_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB118_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB118_178
.LBB118_177:                            # %cond.false445
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_178:                            # %cond.end448
                                        #   in Loop: Header=BB118_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB118_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB118_184
.LBB118_180:                            # %cond.false453
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB118_183
.LBB118_182:                            # %cond.false459
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_183:                            # %cond.end462
                                        #   in Loop: Header=BB118_174 Depth=6
.LBB118_184:                            # %cond.end464
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_186:                            # %if.end474
                                        #   in Loop: Header=BB118_174 Depth=6
	jmp	.LBB118_187
.LBB118_187:                            # %for.inc475
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_174
.LBB118_188:                            # %for.end477
                                        #   in Loop: Header=BB118_163 Depth=5
	jmp	.LBB118_189
.LBB118_189:                            # %for.inc478
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_163
.LBB118_190:                            # %for.end480
                                        #   in Loop: Header=BB118_161 Depth=4
	jmp	.LBB118_191
.LBB118_191:                            # %for.inc481
                                        #   in Loop: Header=BB118_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_161
.LBB118_192:                            # %for.end483
                                        #   in Loop: Header=BB118_159 Depth=3
	jmp	.LBB118_193
.LBB118_193:                            # %for.inc484
                                        #   in Loop: Header=BB118_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_159
.LBB118_194:                            # %for.end486
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_258
.LBB118_195:                            # %if.else487
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_196:                            # %for.cond488
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB118_196 Depth=3
	movl	$0, -16(%rbp)
.LBB118_198:                            # %for.cond492
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB118_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB118_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB118_202
.LBB118_201:                            # %cond.false500
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB118_202:                            # %cond.end503
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_205
.LBB118_204:                            # %cond.false508
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-44(%rbp), %eax
.LBB118_205:                            # %cond.end509
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_211
.LBB118_207:                            # %cond.false514
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_210
.LBB118_209:                            # %cond.false518
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-44(%rbp), %eax
.LBB118_210:                            # %cond.end519
                                        #   in Loop: Header=BB118_198 Depth=4
.LBB118_211:                            # %cond.end521
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB118_212:                            # %for.cond523
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        #         Parent Loop BB118_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB118_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_216
.LBB118_215:                            # %cond.false532
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_216:                            # %cond.end535
                                        #   in Loop: Header=BB118_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB118_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_222
.LBB118_218:                            # %cond.false540
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_221
.LBB118_220:                            # %cond.false546
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_221:                            # %cond.end549
                                        #   in Loop: Header=BB118_212 Depth=5
.LBB118_222:                            # %cond.end551
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_224:                            # %if.end561
                                        #   in Loop: Header=BB118_212 Depth=5
	jmp	.LBB118_225
.LBB118_225:                            # %for.inc562
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_212
.LBB118_226:                            # %for.end564
                                        #   in Loop: Header=BB118_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB118_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB118_229
.LBB118_228:                            # %cond.false569
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB118_229:                            # %cond.end572
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_232
.LBB118_231:                            # %cond.false577
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-48(%rbp), %eax
.LBB118_232:                            # %cond.end578
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_238
.LBB118_234:                            # %cond.false583
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_237
.LBB118_236:                            # %cond.false587
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-48(%rbp), %eax
.LBB118_237:                            # %cond.end588
                                        #   in Loop: Header=BB118_198 Depth=4
.LBB118_238:                            # %cond.end590
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB118_239:                            # %for.cond592
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        #         Parent Loop BB118_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB118_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_243
.LBB118_242:                            # %cond.false601
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_243:                            # %cond.end604
                                        #   in Loop: Header=BB118_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB118_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_249
.LBB118_245:                            # %cond.false609
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_248
.LBB118_247:                            # %cond.false615
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_248:                            # %cond.end618
                                        #   in Loop: Header=BB118_239 Depth=5
.LBB118_249:                            # %cond.end620
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_251:                            # %if.end630
                                        #   in Loop: Header=BB118_239 Depth=5
	jmp	.LBB118_252
.LBB118_252:                            # %for.inc631
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_239
.LBB118_253:                            # %for.end633
                                        #   in Loop: Header=BB118_198 Depth=4
	jmp	.LBB118_254
.LBB118_254:                            # %for.inc634
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_198
.LBB118_255:                            # %for.end636
                                        #   in Loop: Header=BB118_196 Depth=3
	jmp	.LBB118_256
.LBB118_256:                            # %for.inc637
                                        #   in Loop: Header=BB118_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_196
.LBB118_257:                            # %for.end639
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_258
.LBB118_258:                            # %if.end640
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_259
.LBB118_259:                            # %if.end641
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_260
.LBB118_260:                            # %if.end642
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_261
.LBB118_261:                            # %if.end643
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_262
.LBB118_262:                            # %if.end644
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_263
.LBB118_263:                            # %for.inc645
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB118_19
.LBB118_264:                            # %for.end647
                                        #   in Loop: Header=BB118_17 Depth=1
	jmp	.LBB118_265
.LBB118_265:                            # %for.inc648
                                        #   in Loop: Header=BB118_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB118_17
.LBB118_266:                            # %for.end650
	movl	$1, -56(%rbp)
.LBB118_267:                            # %return
	movl	-56(%rbp), %ebx
	cmpl	$2090567964, -104(%rbp) # imm = 0x7C9B891C
	jne	.LBB118_269
.LBB118_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_269:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_268
.Lfunc_end118:
	.size	CheckReliabilityOfRef.89, .Lfunc_end118-CheckReliabilityOfRef.89
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.90 # -- Begin function RDCost_for_4x4IntraBlocks.90
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.90,@function
RDCost_for_4x4IntraBlocks.90:           # @RDCost_for_4x4IntraBlocks.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$935974795, -76(%rbp)   # imm = 0x37C9D78B
	movq	%rdi, -144(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -68(%rbp)
	movl	-48(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-68(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB119_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB119_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB119_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB119_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB119_4:                              # %for.cond15
                                        #   Parent Loop BB119_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB119_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-72(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-152(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB119_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_4
.LBB119_7:                              # %for.end
                                        #   in Loop: Header=BB119_2 Depth=1
	jmp	.LBB119_8
.LBB119_8:                              # %for.inc33
                                        #   in Loop: Header=BB119_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_2
.LBB119_9:                              # %for.end35
	jmp	.LBB119_10
.LBB119_10:                             # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB119_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_16
.LBB119_12:                             # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB119_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB119_15
.LBB119_14:                             # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB119_15:                             # %cond.end
.LBB119_16:                             # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB119_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB119_18:                             # %if.end50
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB119_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB119_21
.LBB119_20:                             # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB119_21:                             # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB119_23
# %bb.22:                               # %if.then66
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_24
.LBB119_23:                             # %if.else69
	movl	-20(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_24:                             # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB119_27
.LBB119_26:                             # %if.else81
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB119_27:                             # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$935974795, -76(%rbp)   # imm = 0x37C9D78B
	jne	.LBB119_29
.LBB119_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB119_28
.Lfunc_end119:
	.size	RDCost_for_4x4IntraBlocks.90, .Lfunc_end119-RDCost_for_4x4IntraBlocks.90
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.91 # -- Begin function GetBestTransformP8x8.91
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.91,@function
GetBestTransformP8x8.91:                # @GetBestTransformP8x8.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$2072145543, -64(%rbp)  # imm = 0x7B826E87
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB120_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB120_25
.LBB120_2:                              # %if.end
	movl	$0, -28(%rbp)
.LBB120_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_5 Depth 2
                                        #       Child Loop BB120_7 Depth 3
                                        #         Child Loop BB120_9 Depth 4
                                        #           Child Loop BB120_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB120_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB120_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_5:                              # %for.cond3
                                        #   Parent Loop BB120_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_7 Depth 3
                                        #         Child Loop BB120_9 Depth 4
                                        #           Child Loop BB120_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB120_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_7:                              # %for.cond7
                                        #   Parent Loop BB120_3 Depth=1
                                        #     Parent Loop BB120_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_9 Depth 4
                                        #           Child Loop BB120_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB120_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB120_9:                              # %for.cond12
                                        #   Parent Loop BB120_3 Depth=1
                                        #     Parent Loop BB120_5 Depth=2
                                        #       Parent Loop BB120_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB120_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB120_9 Depth=4
	movl	$0, -16(%rbp)
.LBB120_11:                             # %for.cond15
                                        #   Parent Loop BB120_3 Depth=1
                                        #     Parent Loop BB120_5 Depth=2
                                        #       Parent Loop BB120_7 Depth=3
                                        #         Parent Loop BB120_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB120_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB120_11 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB120_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB120_11
.LBB120_14:                             # %for.end
                                        #   in Loop: Header=BB120_9 Depth=4
	jmp	.LBB120_15
.LBB120_15:                             # %for.inc51
                                        #   in Loop: Header=BB120_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_9
.LBB120_16:                             # %for.end53
                                        #   in Loop: Header=BB120_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB120_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_7
.LBB120_18:                             # %for.end57
                                        #   in Loop: Header=BB120_5 Depth=2
	jmp	.LBB120_19
.LBB120_19:                             # %for.inc58
                                        #   in Loop: Header=BB120_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_5
.LBB120_20:                             # %for.end60
                                        #   in Loop: Header=BB120_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB120_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB120_3
.LBB120_22:                             # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB120_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB120_25
.LBB120_24:                             # %if.else
	movl	$0, -44(%rbp)
.LBB120_25:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$2072145543, -64(%rbp)  # imm = 0x7B826E87
	jne	.LBB120_27
.LBB120_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_26
.Lfunc_end120:
	.size	GetBestTransformP8x8.91, .Lfunc_end120-GetBestTransformP8x8.91
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.92 # -- Begin function SetModesAndRefframeForBlocks.92
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.92,@function
SetModesAndRefframeForBlocks.92:        # @SetModesAndRefframeForBlocks.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1277767238, -36(%rbp)  # imm = 0x4C292E46
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB121_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB121_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB121_4
.LBB121_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB121_4
.LBB121_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB121_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB121_7
.LBB121_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB121_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB121_42
# %bb.8:                                # %if.end
	movq	.LJTI121_0(,%rax,8), %rax
	jmpq	*%rax
.LBB121_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB121_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB121_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB121_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB121_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB121_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB121_14
.LBB121_13:                             # %cond.false26
                                        #   in Loop: Header=BB121_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB121_14
.LBB121_14:                             # %cond.end27
                                        #   in Loop: Header=BB121_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB121_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_10
.LBB121_16:                             # %for.end
	jmp	.LBB121_43
.LBB121_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB121_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB121_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB121_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB121_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_18
.LBB121_21:                             # %for.end49
	jmp	.LBB121_43
.LBB121_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB121_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB121_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB121_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB121_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_23
.LBB121_26:                             # %for.end71
	jmp	.LBB121_43
.LBB121_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB121_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB121_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB121_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB121_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_28
.LBB121_31:                             # %for.end85
	jmp	.LBB121_43
.LBB121_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB121_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB121_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB121_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB121_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_33
.LBB121_36:                             # %for.end99
	jmp	.LBB121_43
.LBB121_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB121_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB121_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB121_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB121_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_38
.LBB121_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_43
.LBB121_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB121_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB121_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB121_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB121_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB121_70
.LBB121_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB121_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB121_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB121_49 Depth=1
	movl	$0, -4(%rbp)
.LBB121_51:                             # %for.cond131
                                        #   Parent Loop BB121_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB121_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB121_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB121_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB121_55
.LBB121_54:                             # %if.else174
                                        #   in Loop: Header=BB121_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB121_55:                             # %if.end195
                                        #   in Loop: Header=BB121_51 Depth=2
	jmp	.LBB121_56
.LBB121_56:                             # %for.inc196
                                        #   in Loop: Header=BB121_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_51
.LBB121_57:                             # %for.end198
                                        #   in Loop: Header=BB121_49 Depth=1
	jmp	.LBB121_58
.LBB121_58:                             # %for.inc199
                                        #   in Loop: Header=BB121_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_49
.LBB121_59:                             # %for.end201
	jmp	.LBB121_69
.LBB121_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB121_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB121_61 Depth=1
	movl	$0, -4(%rbp)
.LBB121_63:                             # %for.cond207
                                        #   Parent Loop BB121_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB121_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB121_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_63
.LBB121_66:                             # %for.end227
                                        #   in Loop: Header=BB121_61 Depth=1
	jmp	.LBB121_67
.LBB121_67:                             # %for.inc228
                                        #   in Loop: Header=BB121_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_61
.LBB121_68:                             # %for.end230
	jmp	.LBB121_69
.LBB121_69:                             # %if.end231
	jmp	.LBB121_127
.LBB121_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB121_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB121_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB121_72 Depth=1
	movl	$0, -4(%rbp)
.LBB121_74:                             # %for.cond239
                                        #   Parent Loop BB121_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB121_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB121_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB121_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB121_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB121_105
.LBB121_78:                             # %if.else298
                                        #   in Loop: Header=BB121_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB121_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB121_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB121_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB121_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB121_90
.LBB121_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB121_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB121_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB121_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB121_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB121_90
.LBB121_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB121_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB121_90
.LBB121_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB121_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB121_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB121_90
.LBB121_89:                             # %if.then356
                                        #   in Loop: Header=BB121_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB121_104
.LBB121_90:                             # %if.else377
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB121_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB121_96
.LBB121_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB121_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB121_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB121_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB121_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB121_96
.LBB121_95:                             # %cond.true404
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB121_97
.LBB121_96:                             # %cond.false410
                                        #   in Loop: Header=BB121_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB121_97
.LBB121_97:                             # %cond.end411
                                        #   in Loop: Header=BB121_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB121_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB121_102
.LBB121_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB121_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB121_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB121_102
.LBB121_101:                            # %cond.true448
                                        #   in Loop: Header=BB121_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB121_103
.LBB121_102:                            # %cond.false454
                                        #   in Loop: Header=BB121_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB121_103
.LBB121_103:                            # %cond.end455
                                        #   in Loop: Header=BB121_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB121_104:                            # %if.end468
                                        #   in Loop: Header=BB121_74 Depth=2
	jmp	.LBB121_105
.LBB121_105:                            # %if.end469
                                        #   in Loop: Header=BB121_74 Depth=2
	jmp	.LBB121_106
.LBB121_106:                            # %for.inc470
                                        #   in Loop: Header=BB121_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_74
.LBB121_107:                            # %for.end472
                                        #   in Loop: Header=BB121_72 Depth=1
	jmp	.LBB121_108
.LBB121_108:                            # %for.inc473
                                        #   in Loop: Header=BB121_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_72
.LBB121_109:                            # %for.end475
	jmp	.LBB121_126
.LBB121_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB121_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB121_111 Depth=1
	movl	$0, -4(%rbp)
.LBB121_113:                            # %for.cond481
                                        #   Parent Loop BB121_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB121_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB121_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB121_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB121_120
.LBB121_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB121_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB121_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB121_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB121_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB121_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB121_120
.LBB121_119:                            # %cond.true519
                                        #   in Loop: Header=BB121_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB121_121
.LBB121_120:                            # %cond.false525
                                        #   in Loop: Header=BB121_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB121_121
.LBB121_121:                            # %cond.end526
                                        #   in Loop: Header=BB121_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB121_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_113
.LBB121_123:                            # %for.end541
                                        #   in Loop: Header=BB121_111 Depth=1
	jmp	.LBB121_124
.LBB121_124:                            # %for.inc542
                                        #   in Loop: Header=BB121_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_111
.LBB121_125:                            # %for.end544
	jmp	.LBB121_126
.LBB121_126:                            # %if.end545
	jmp	.LBB121_127
.LBB121_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB121_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB121_128 Depth=1
	movl	$0, -4(%rbp)
.LBB121_130:                            # %for.cond551
                                        #   Parent Loop BB121_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB121_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB121_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB121_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB121_134
.LBB121_133:                            # %cond.false584
                                        #   in Loop: Header=BB121_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB121_134
.LBB121_134:                            # %cond.end585
                                        #   in Loop: Header=BB121_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB121_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_130
.LBB121_136:                            # %for.end598
                                        #   in Loop: Header=BB121_128 Depth=1
	jmp	.LBB121_137
.LBB121_137:                            # %for.inc599
                                        #   in Loop: Header=BB121_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_128
.LBB121_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB121_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB121_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB121_140 Depth=1
	movl	$0, -4(%rbp)
.LBB121_142:                            # %for.cond608
                                        #   Parent Loop BB121_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB121_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB121_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB121_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB121_146
.LBB121_145:                            # %cond.false642
                                        #   in Loop: Header=BB121_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB121_146
.LBB121_146:                            # %cond.end643
                                        #   in Loop: Header=BB121_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB121_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_142
.LBB121_148:                            # %for.end657
                                        #   in Loop: Header=BB121_140 Depth=1
	jmp	.LBB121_149
.LBB121_149:                            # %for.inc658
                                        #   in Loop: Header=BB121_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_140
.LBB121_150:                            # %for.end660
	jmp	.LBB121_151
.LBB121_151:                            # %if.end661
	cmpl	$1277767238, -36(%rbp)  # imm = 0x4C292E46
	jne	.LBB121_153
.LBB121_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_152
.Lfunc_end121:
	.size	SetModesAndRefframeForBlocks.92, .Lfunc_end121-SetModesAndRefframeForBlocks.92
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI121_0:
	.quad	.LBB121_9
	.quad	.LBB121_17
	.quad	.LBB121_17
	.quad	.LBB121_17
	.quad	.LBB121_42
	.quad	.LBB121_42
	.quad	.LBB121_42
	.quad	.LBB121_42
	.quad	.LBB121_22
	.quad	.LBB121_27
	.quad	.LBB121_32
	.quad	.LBB121_42
	.quad	.LBB121_42
	.quad	.LBB121_37
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.93
.LCPI122_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.93
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.93,@function
RDCost_for_8x8blocks.93:                # @RDCost_for_8x8blocks.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$189020233, -156(%rbp)  # imm = 0xB443849
	movq	%rdi, -144(%rbp)
	movq	%rsi, -192(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -128(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	cmpl	$0, -168(%rbp)
	je	.LBB122_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB122_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -116(%rbp)
	je	.LBB122_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI122_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -184(%rbp)
	jmp	.LBB122_139
.LBB122_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-192(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB122_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB122_8
.LBB122_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB122_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-128(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB122_19
.LBB122_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB122_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_13
.LBB122_12:                             # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB122_14
.LBB122_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB122_14
.LBB122_14:                             # %cond.end71
	movl	%eax, -160(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB122_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_17
.LBB122_16:                             # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB122_18
.LBB122_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB122_18
.LBB122_18:                             # %cond.end82
	movl	%eax, -172(%rbp)
	movq	-192(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-160(%rbp), %r8d
	movl	-172(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-128(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB122_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB122_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB122_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_23 Depth 2
                                        #       Child Loop BB122_25 Depth 3
                                        #     Child Loop BB122_31 Depth 2
                                        #       Child Loop BB122_33 Depth 3
                                        #     Child Loop BB122_39 Depth 2
                                        #       Child Loop BB122_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB122_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB122_23:                             # %for.cond96
                                        #   Parent Loop BB122_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB122_23 Depth=2
	movl	$0, -12(%rbp)
.LBB122_25:                             # %for.cond100
                                        #   Parent Loop BB122_21 Depth=1
                                        #     Parent Loop BB122_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB122_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB122_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_25
.LBB122_28:                             # %for.end
                                        #   in Loop: Header=BB122_23 Depth=2
	jmp	.LBB122_29
.LBB122_29:                             # %for.inc114
                                        #   in Loop: Header=BB122_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_23
.LBB122_30:                             # %for.end116
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB122_31:                             # %for.cond120
                                        #   Parent Loop BB122_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB122_31 Depth=2
	movl	$0, -12(%rbp)
.LBB122_33:                             # %for.cond124
                                        #   Parent Loop BB122_21 Depth=1
                                        #     Parent Loop BB122_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB122_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB122_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_33
.LBB122_36:                             # %for.end152
                                        #   in Loop: Header=BB122_31 Depth=2
	jmp	.LBB122_37
.LBB122_37:                             # %for.inc153
                                        #   in Loop: Header=BB122_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_31
.LBB122_38:                             # %for.end155
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB122_39:                             # %for.cond159
                                        #   Parent Loop BB122_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB122_39 Depth=2
	movl	$0, -12(%rbp)
.LBB122_41:                             # %for.cond163
                                        #   Parent Loop BB122_21 Depth=1
                                        #     Parent Loop BB122_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB122_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB122_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_41
.LBB122_44:                             # %for.end180
                                        #   in Loop: Header=BB122_39 Depth=2
	jmp	.LBB122_45
.LBB122_45:                             # %for.inc181
                                        #   in Loop: Header=BB122_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_39
.LBB122_46:                             # %for.end183
                                        #   in Loop: Header=BB122_21 Depth=1
	jmp	.LBB122_47
.LBB122_47:                             # %for.inc184
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB122_21
.LBB122_48:                             # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB122_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_51:                             # %for.cond192
                                        #   Parent Loop BB122_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-124(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -68(%rbp)
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -84(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-68(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB122_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_55
.LBB122_54:                             # %cond.false229
                                        #   in Loop: Header=BB122_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB122_55:                             # %cond.end235
                                        #   in Loop: Header=BB122_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB122_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB122_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_61
.LBB122_57:                             # %cond.false241
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB122_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_60
.LBB122_59:                             # %cond.false250
                                        #   in Loop: Header=BB122_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB122_60:                             # %cond.end256
                                        #   in Loop: Header=BB122_51 Depth=2
.LBB122_61:                             # %cond.end258
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB122_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_64
.LBB122_63:                             # %cond.false276
                                        #   in Loop: Header=BB122_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB122_64:                             # %cond.end282
                                        #   in Loop: Header=BB122_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB122_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB122_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB122_70
.LBB122_66:                             # %cond.false288
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_69
.LBB122_68:                             # %cond.false297
                                        #   in Loop: Header=BB122_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB122_69:                             # %cond.end303
                                        #   in Loop: Header=BB122_51 Depth=2
.LBB122_70:                             # %cond.end305
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-84(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB122_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_73
.LBB122_72:                             # %cond.false325
                                        #   in Loop: Header=BB122_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB122_73:                             # %cond.end331
                                        #   in Loop: Header=BB122_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB122_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB122_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_79
.LBB122_75:                             # %cond.false337
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB122_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_78
.LBB122_77:                             # %cond.false346
                                        #   in Loop: Header=BB122_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB122_78:                             # %cond.end352
                                        #   in Loop: Header=BB122_51 Depth=2
.LBB122_79:                             # %cond.end354
                                        #   in Loop: Header=BB122_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB122_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_51
.LBB122_81:                             # %for.end369
                                        #   in Loop: Header=BB122_49 Depth=1
	jmp	.LBB122_82
.LBB122_82:                             # %for.inc370
                                        #   in Loop: Header=BB122_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_49
.LBB122_83:                             # %for.end372
	jmp	.LBB122_84
.LBB122_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB122_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB122_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB122_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB122_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB122_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB122_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_92 Depth 2
                                        #       Child Loop BB122_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB122_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB122_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_92:                             # %for.cond395
                                        #   Parent Loop BB122_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB122_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_94:                             # %for.cond403
                                        #   Parent Loop BB122_90 Depth=1
                                        #     Parent Loop BB122_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB122_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB122_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_94
.LBB122_97:                             # %for.end429
                                        #   in Loop: Header=BB122_92 Depth=2
	jmp	.LBB122_98
.LBB122_98:                             # %for.inc430
                                        #   in Loop: Header=BB122_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_92
.LBB122_99:                             # %for.end432
                                        #   in Loop: Header=BB122_90 Depth=1
	jmp	.LBB122_100
.LBB122_100:                            # %for.inc433
                                        #   in Loop: Header=BB122_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB122_90
.LBB122_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB122_113
.LBB122_102:                            # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB122_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_105:                            # %for.cond447
                                        #   Parent Loop BB122_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB122_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB122_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB122_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB122_108:                            # %if.end524
                                        #   in Loop: Header=BB122_105 Depth=2
	jmp	.LBB122_109
.LBB122_109:                            # %for.inc525
                                        #   in Loop: Header=BB122_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_105
.LBB122_110:                            # %for.end527
                                        #   in Loop: Header=BB122_103 Depth=1
	jmp	.LBB122_111
.LBB122_111:                            # %for.inc528
                                        #   in Loop: Header=BB122_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_103
.LBB122_112:                            # %for.end530
	jmp	.LBB122_113
.LBB122_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB122_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-164(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-164(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_116
.LBB122_115:                            # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB122_116:                            # %if.end547
	cmpl	$0, -116(%rbp)
	jne	.LBB122_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB122_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB122_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_121
.LBB122_120:                            # %if.then560
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB122_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB122_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB122_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_126
.LBB122_125:                            # %if.then579
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_126:                            # %if.end583
	jmp	.LBB122_127
.LBB122_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB122_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_130
.LBB122_129:                            # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB122_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_133
.LBB122_132:                            # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_133:                            # %if.end612
	jmp	.LBB122_134
.LBB122_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB122_136
# %bb.135:                              # %if.then617
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-40(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_136:                            # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB122_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
.LBB122_139:                            # %return
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$189020233, -156(%rbp)  # imm = 0xB443849
	jne	.LBB122_141
.LBB122_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB122_140
.Lfunc_end122:
	.size	RDCost_for_8x8blocks.93, .Lfunc_end122-RDCost_for_8x8blocks.93
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.94 # -- Begin function SetCoeffAndReconstruction8x8.94
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.94,@function
SetCoeffAndReconstruction8x8.94:        # @SetCoeffAndReconstruction8x8.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1081996604, -40(%rbp)  # imm = 0x407DF53C
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB123_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB123_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB123_4
.LBB123_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB123_4
.LBB123_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB123_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB123_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB123_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB123_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB123_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_6
.LBB123_9:                              # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB123_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB123_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB123_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB123_11 Depth=1
	movl	$0, -4(%rbp)
.LBB123_13:                             # %for.cond20
                                        #   Parent Loop BB123_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB123_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB123_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB123_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_13
.LBB123_16:                             # %for.end52
                                        #   in Loop: Header=BB123_11 Depth=1
	jmp	.LBB123_17
.LBB123_17:                             # %for.inc53
                                        #   in Loop: Header=BB123_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_11
.LBB123_18:                             # %for.end55
	jmp	.LBB123_28
.LBB123_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB123_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB123_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB123_20 Depth=1
	movl	$0, -4(%rbp)
.LBB123_22:                             # %for.cond60
                                        #   Parent Loop BB123_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB123_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB123_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB123_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_22
.LBB123_25:                             # %for.end86
                                        #   in Loop: Header=BB123_20 Depth=1
	jmp	.LBB123_26
.LBB123_26:                             # %for.inc87
                                        #   in Loop: Header=BB123_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_20
.LBB123_27:                             # %for.end89
	jmp	.LBB123_28
.LBB123_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB123_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB123_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB123_29 Depth=1
	movl	$0, -4(%rbp)
.LBB123_31:                             # %for.cond94
                                        #   Parent Loop BB123_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB123_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB123_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB123_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB123_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB123_35
.LBB123_34:                             # %cond.false127
                                        #   in Loop: Header=BB123_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB123_35
.LBB123_35:                             # %cond.end128
                                        #   in Loop: Header=BB123_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB123_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_31
.LBB123_37:                             # %for.end141
                                        #   in Loop: Header=BB123_29 Depth=1
	jmp	.LBB123_38
.LBB123_38:                             # %for.inc142
                                        #   in Loop: Header=BB123_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_29
.LBB123_39:                             # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB123_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB123_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB123_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB123_41 Depth=1
	movl	$0, -4(%rbp)
.LBB123_43:                             # %for.cond151
                                        #   Parent Loop BB123_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB123_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB123_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB123_47
.LBB123_46:                             # %cond.false185
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB123_47
.LBB123_47:                             # %cond.end186
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB123_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_43
.LBB123_49:                             # %for.end200
                                        #   in Loop: Header=BB123_41 Depth=1
	jmp	.LBB123_50
.LBB123_50:                             # %for.inc201
                                        #   in Loop: Header=BB123_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_41
.LBB123_51:                             # %for.end203
	jmp	.LBB123_52
.LBB123_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB123_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_55 Depth 2
                                        #       Child Loop BB123_57 Depth 3
                                        #         Child Loop BB123_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB123_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB123_53 Depth=1
	movl	$0, -12(%rbp)
.LBB123_55:                             # %for.cond209
                                        #   Parent Loop BB123_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_57 Depth 3
                                        #         Child Loop BB123_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB123_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB123_55 Depth=2
	movl	$0, -8(%rbp)
.LBB123_57:                             # %for.cond213
                                        #   Parent Loop BB123_53 Depth=1
                                        #     Parent Loop BB123_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB123_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB123_57 Depth=3
	movl	$0, -4(%rbp)
.LBB123_59:                             # %for.cond217
                                        #   Parent Loop BB123_53 Depth=1
                                        #     Parent Loop BB123_55 Depth=2
                                        #       Parent Loop BB123_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB123_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB123_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB123_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_59
.LBB123_62:                             # %for.end239
                                        #   in Loop: Header=BB123_57 Depth=3
	jmp	.LBB123_63
.LBB123_63:                             # %for.inc240
                                        #   in Loop: Header=BB123_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_57
.LBB123_64:                             # %for.end242
                                        #   in Loop: Header=BB123_55 Depth=2
	jmp	.LBB123_65
.LBB123_65:                             # %for.inc243
                                        #   in Loop: Header=BB123_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_55
.LBB123_66:                             # %for.end245
                                        #   in Loop: Header=BB123_53 Depth=1
	jmp	.LBB123_67
.LBB123_67:                             # %for.inc246
                                        #   in Loop: Header=BB123_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_53
.LBB123_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB123_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB123_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB123_83
.LBB123_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB123_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB123_72 Depth=1
	movl	$0, -4(%rbp)
.LBB123_74:                             # %for.cond262
                                        #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB123_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB123_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_78
.LBB123_77:                             # %if.else278
                                        #   in Loop: Header=BB123_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB123_78:                             # %if.end283
                                        #   in Loop: Header=BB123_74 Depth=2
	jmp	.LBB123_79
.LBB123_79:                             # %for.inc284
                                        #   in Loop: Header=BB123_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_74
.LBB123_80:                             # %for.end286
                                        #   in Loop: Header=BB123_72 Depth=1
	jmp	.LBB123_81
.LBB123_81:                             # %for.inc287
                                        #   in Loop: Header=BB123_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_72
.LBB123_82:                             # %for.end289
	jmp	.LBB123_95
.LBB123_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB123_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB123_84 Depth=1
	movl	$0, -4(%rbp)
.LBB123_86:                             # %for.cond297
                                        #   Parent Loop BB123_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB123_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB123_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_90
.LBB123_89:                             # %if.else317
                                        #   in Loop: Header=BB123_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB123_90:                             # %if.end326
                                        #   in Loop: Header=BB123_86 Depth=2
	jmp	.LBB123_91
.LBB123_91:                             # %for.inc327
                                        #   in Loop: Header=BB123_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_86
.LBB123_92:                             # %for.end329
                                        #   in Loop: Header=BB123_84 Depth=1
	jmp	.LBB123_93
.LBB123_93:                             # %for.inc330
                                        #   in Loop: Header=BB123_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_84
.LBB123_94:                             # %for.end332
	jmp	.LBB123_95
.LBB123_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB123_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB123_96 Depth=1
	movl	$0, -4(%rbp)
.LBB123_98:                             # %for.cond338
                                        #   Parent Loop BB123_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB123_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB123_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_98
.LBB123_101:                            # %for.end384
                                        #   in Loop: Header=BB123_96 Depth=1
	jmp	.LBB123_102
.LBB123_102:                            # %for.inc385
                                        #   in Loop: Header=BB123_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_96
.LBB123_103:                            # %for.end387
	jmp	.LBB123_157
.LBB123_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB123_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_107 Depth 2
                                        #       Child Loop BB123_109 Depth 3
                                        #         Child Loop BB123_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB123_105 Depth=1
	movl	$0, -12(%rbp)
.LBB123_107:                            # %for.cond394
                                        #   Parent Loop BB123_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_109 Depth 3
                                        #         Child Loop BB123_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB123_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB123_107 Depth=2
	movl	$0, -8(%rbp)
.LBB123_109:                            # %for.cond398
                                        #   Parent Loop BB123_105 Depth=1
                                        #     Parent Loop BB123_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB123_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB123_109 Depth=3
	movl	$0, -4(%rbp)
.LBB123_111:                            # %for.cond402
                                        #   Parent Loop BB123_105 Depth=1
                                        #     Parent Loop BB123_107 Depth=2
                                        #       Parent Loop BB123_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB123_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB123_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB123_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_111
.LBB123_114:                            # %for.end425
                                        #   in Loop: Header=BB123_109 Depth=3
	jmp	.LBB123_115
.LBB123_115:                            # %for.inc426
                                        #   in Loop: Header=BB123_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_109
.LBB123_116:                            # %for.end428
                                        #   in Loop: Header=BB123_107 Depth=2
	jmp	.LBB123_117
.LBB123_117:                            # %for.inc429
                                        #   in Loop: Header=BB123_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_107
.LBB123_118:                            # %for.end431
                                        #   in Loop: Header=BB123_105 Depth=1
	jmp	.LBB123_119
.LBB123_119:                            # %for.inc432
                                        #   in Loop: Header=BB123_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_105
.LBB123_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB123_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB123_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB123_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB123_136
.LBB123_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB123_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB123_125 Depth=1
	movl	$0, -4(%rbp)
.LBB123_127:                            # %for.cond458
                                        #   Parent Loop BB123_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB123_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB123_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_131
.LBB123_130:                            # %if.else478
                                        #   in Loop: Header=BB123_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB123_131:                            # %if.end483
                                        #   in Loop: Header=BB123_127 Depth=2
	jmp	.LBB123_132
.LBB123_132:                            # %for.inc484
                                        #   in Loop: Header=BB123_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_127
.LBB123_133:                            # %for.end486
                                        #   in Loop: Header=BB123_125 Depth=1
	jmp	.LBB123_134
.LBB123_134:                            # %for.inc487
                                        #   in Loop: Header=BB123_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_125
.LBB123_135:                            # %for.end489
	jmp	.LBB123_148
.LBB123_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB123_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB123_137 Depth=1
	movl	$0, -4(%rbp)
.LBB123_139:                            # %for.cond498
                                        #   Parent Loop BB123_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB123_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB123_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_143
.LBB123_142:                            # %if.else518
                                        #   in Loop: Header=BB123_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB123_143:                            # %if.end527
                                        #   in Loop: Header=BB123_139 Depth=2
	jmp	.LBB123_144
.LBB123_144:                            # %for.inc528
                                        #   in Loop: Header=BB123_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_139
.LBB123_145:                            # %for.end530
                                        #   in Loop: Header=BB123_137 Depth=1
	jmp	.LBB123_146
.LBB123_146:                            # %for.inc531
                                        #   in Loop: Header=BB123_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_137
.LBB123_147:                            # %for.end533
	jmp	.LBB123_148
.LBB123_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB123_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB123_149 Depth=1
	movl	$0, -4(%rbp)
.LBB123_151:                            # %for.cond539
                                        #   Parent Loop BB123_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB123_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB123_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_151
.LBB123_154:                            # %for.end585
                                        #   in Loop: Header=BB123_149 Depth=1
	jmp	.LBB123_155
.LBB123_155:                            # %for.inc586
                                        #   in Loop: Header=BB123_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_149
.LBB123_156:                            # %for.end588
	jmp	.LBB123_157
.LBB123_157:                            # %if.end589
	cmpl	$1081996604, -40(%rbp)  # imm = 0x407DF53C
	jne	.LBB123_159
.LBB123_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_158
.Lfunc_end123:
	.size	SetCoeffAndReconstruction8x8.94, .Lfunc_end123-SetCoeffAndReconstruction8x8.94
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.95 # -- Begin function GetBestTransformP8x8.95
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.95,@function
GetBestTransformP8x8.95:                # @GetBestTransformP8x8.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$216868729, -64(%rbp)   # imm = 0xCED2779
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB124_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB124_25
.LBB124_2:                              # %if.end
	movl	$0, -28(%rbp)
.LBB124_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_5 Depth 2
                                        #       Child Loop BB124_7 Depth 3
                                        #         Child Loop BB124_9 Depth 4
                                        #           Child Loop BB124_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB124_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB124_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_5:                              # %for.cond3
                                        #   Parent Loop BB124_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_7 Depth 3
                                        #         Child Loop BB124_9 Depth 4
                                        #           Child Loop BB124_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB124_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_7:                              # %for.cond7
                                        #   Parent Loop BB124_3 Depth=1
                                        #     Parent Loop BB124_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_9 Depth 4
                                        #           Child Loop BB124_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB124_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB124_9:                              # %for.cond12
                                        #   Parent Loop BB124_3 Depth=1
                                        #     Parent Loop BB124_5 Depth=2
                                        #       Parent Loop BB124_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB124_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB124_9 Depth=4
	movl	$0, -16(%rbp)
.LBB124_11:                             # %for.cond15
                                        #   Parent Loop BB124_3 Depth=1
                                        #     Parent Loop BB124_5 Depth=2
                                        #       Parent Loop BB124_7 Depth=3
                                        #         Parent Loop BB124_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB124_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB124_11 Depth=5
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB124_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB124_11
.LBB124_14:                             # %for.end
                                        #   in Loop: Header=BB124_9 Depth=4
	jmp	.LBB124_15
.LBB124_15:                             # %for.inc51
                                        #   in Loop: Header=BB124_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_9
.LBB124_16:                             # %for.end53
                                        #   in Loop: Header=BB124_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB124_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_7
.LBB124_18:                             # %for.end57
                                        #   in Loop: Header=BB124_5 Depth=2
	jmp	.LBB124_19
.LBB124_19:                             # %for.inc58
                                        #   in Loop: Header=BB124_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_5
.LBB124_20:                             # %for.end60
                                        #   in Loop: Header=BB124_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB124_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB124_3
.LBB124_22:                             # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB124_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB124_25
.LBB124_24:                             # %if.else
	movl	$0, -44(%rbp)
.LBB124_25:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$216868729, -64(%rbp)   # imm = 0xCED2779
	jne	.LBB124_27
.LBB124_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_26
.Lfunc_end124:
	.size	GetBestTransformP8x8.95, .Lfunc_end124-GetBestTransformP8x8.95
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.96      # -- Begin function StoreMVBlock8x8.96
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.96,@function
StoreMVBlock8x8.96:                     # @StoreMVBlock8x8.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1665051368, -68(%rbp)  # imm = 0x633EAAE8
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB125_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB125_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB125_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB125_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_5:                              # %for.cond7
                                        #   Parent Loop BB125_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB125_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB125_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB125_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_5
.LBB125_8:                              # %for.end
                                        #   in Loop: Header=BB125_3 Depth=1
	jmp	.LBB125_9
.LBB125_9:                              # %for.inc76
                                        #   in Loop: Header=BB125_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_3
.LBB125_10:                             # %for.end78
	jmp	.LBB125_11
.LBB125_11:                             # %if.end
	jmp	.LBB125_46
.LBB125_12:                             # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB125_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB125_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB125_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_16:                             # %for.cond84
                                        #   Parent Loop BB125_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB125_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB125_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB125_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_16
.LBB125_19:                             # %for.end161
                                        #   in Loop: Header=BB125_14 Depth=1
	jmp	.LBB125_20
.LBB125_20:                             # %for.inc162
                                        #   in Loop: Header=BB125_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_14
.LBB125_21:                             # %for.end164
	jmp	.LBB125_45
.LBB125_22:                             # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB125_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB125_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB125_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_26:                             # %for.cond171
                                        #   Parent Loop BB125_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB125_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB125_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB125_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_26
.LBB125_29:                             # %for.end248
                                        #   in Loop: Header=BB125_24 Depth=1
	jmp	.LBB125_30
.LBB125_30:                             # %for.inc249
                                        #   in Loop: Header=BB125_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_24
.LBB125_31:                             # %for.end251
	jmp	.LBB125_44
.LBB125_32:                             # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB125_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB125_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB125_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_36:                             # %for.cond258
                                        #   Parent Loop BB125_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB125_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB125_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB125_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_36
.LBB125_39:                             # %for.end407
                                        #   in Loop: Header=BB125_34 Depth=1
	jmp	.LBB125_40
.LBB125_40:                             # %for.inc408
                                        #   in Loop: Header=BB125_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_34
.LBB125_41:                             # %for.end410
	jmp	.LBB125_43
.LBB125_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB125_43:                             # %if.end412
	jmp	.LBB125_44
.LBB125_44:                             # %if.end413
	jmp	.LBB125_45
.LBB125_45:                             # %if.end414
	jmp	.LBB125_46
.LBB125_46:                             # %if.end415
	cmpl	$1665051368, -68(%rbp)  # imm = 0x633EAAE8
	jne	.LBB125_48
.LBB125_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_47
.Lfunc_end125:
	.size	StoreMVBlock8x8.96, .Lfunc_end125-StoreMVBlock8x8.96
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.97 # -- Begin function set_mbaff_parameters.97
	.p2align	4, 0x90
	.type	set_mbaff_parameters.97,@function
set_mbaff_parameters.97:                # @set_mbaff_parameters.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$38185261, -36(%rbp)    # imm = 0x246A92D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB126_2
# %bb.1:                                # %if.then
	jmp	.LBB126_82
.LBB126_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB126_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB126_3 Depth=1
	movl	$0, -4(%rbp)
.LBB126_5:                              # %for.cond3
                                        #   Parent Loop BB126_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB126_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB126_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_5
.LBB126_8:                              # %for.end
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_9
.LBB126_9:                              # %for.inc17
                                        #   in Loop: Header=BB126_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_3
.LBB126_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB126_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB126_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB126_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB126_12 Depth=1
	movl	$0, -4(%rbp)
.LBB126_14:                             # %for.cond27
                                        #   Parent Loop BB126_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB126_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB126_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB126_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_14
.LBB126_17:                             # %for.end60
                                        #   in Loop: Header=BB126_12 Depth=1
	jmp	.LBB126_18
.LBB126_18:                             # %for.inc61
                                        #   in Loop: Header=BB126_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_12
.LBB126_19:                             # %for.end63
	jmp	.LBB126_20
.LBB126_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB126_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB126_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB126_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB126_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_26 Depth 2
                                        #       Child Loop BB126_28 Depth 3
                                        #         Child Loop BB126_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB126_24 Depth=1
	movl	$0, -8(%rbp)
.LBB126_26:                             # %for.cond84
                                        #   Parent Loop BB126_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_28 Depth 3
                                        #         Child Loop BB126_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB126_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB126_26 Depth=2
	movl	$0, -12(%rbp)
.LBB126_28:                             # %for.cond88
                                        #   Parent Loop BB126_24 Depth=1
                                        #     Parent Loop BB126_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB126_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB126_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB126_28 Depth=3
	movl	$0, -16(%rbp)
.LBB126_30:                             # %for.cond92
                                        #   Parent Loop BB126_24 Depth=1
                                        #     Parent Loop BB126_26 Depth=2
                                        #       Parent Loop BB126_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB126_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB126_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB126_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_30
.LBB126_33:                             # %for.end115
                                        #   in Loop: Header=BB126_28 Depth=3
	jmp	.LBB126_34
.LBB126_34:                             # %for.inc116
                                        #   in Loop: Header=BB126_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_28
.LBB126_35:                             # %for.end118
                                        #   in Loop: Header=BB126_26 Depth=2
	jmp	.LBB126_36
.LBB126_36:                             # %for.inc119
                                        #   in Loop: Header=BB126_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_26
.LBB126_37:                             # %for.end121
                                        #   in Loop: Header=BB126_24 Depth=1
	jmp	.LBB126_38
.LBB126_38:                             # %for.inc122
                                        #   in Loop: Header=BB126_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_24
.LBB126_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB126_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_42 Depth 2
                                        #       Child Loop BB126_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB126_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB126_40 Depth=1
	movl	$0, -12(%rbp)
.LBB126_42:                             # %for.cond129
                                        #   Parent Loop BB126_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB126_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB126_42 Depth=2
	movl	$0, -16(%rbp)
.LBB126_44:                             # %for.cond133
                                        #   Parent Loop BB126_40 Depth=1
                                        #     Parent Loop BB126_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB126_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB126_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB126_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_44
.LBB126_47:                             # %for.end152
                                        #   in Loop: Header=BB126_42 Depth=2
	jmp	.LBB126_48
.LBB126_48:                             # %for.inc153
                                        #   in Loop: Header=BB126_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_42
.LBB126_49:                             # %for.end155
                                        #   in Loop: Header=BB126_40 Depth=1
	jmp	.LBB126_50
.LBB126_50:                             # %for.inc156
                                        #   in Loop: Header=BB126_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_40
.LBB126_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB126_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB126_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB126_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB126_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_52
.LBB126_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB126_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB126_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB126_56 Depth=1
	movl	$0, -4(%rbp)
.LBB126_58:                             # %for.cond180
                                        #   Parent Loop BB126_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB126_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB126_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB126_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_58
.LBB126_61:                             # %for.end198
                                        #   in Loop: Header=BB126_56 Depth=1
	jmp	.LBB126_62
.LBB126_62:                             # %for.inc199
                                        #   in Loop: Header=BB126_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_56
.LBB126_63:                             # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB126_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB126_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB126_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB126_65 Depth=1
	movl	$0, -4(%rbp)
.LBB126_67:                             # %for.cond208
                                        #   Parent Loop BB126_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB126_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB126_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB126_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_67
.LBB126_70:                             # %for.end230
                                        #   in Loop: Header=BB126_65 Depth=1
	jmp	.LBB126_71
.LBB126_71:                             # %for.inc231
                                        #   in Loop: Header=BB126_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_65
.LBB126_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB126_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB126_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB126_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB126_76:                             # %for.cond244
                                        #   Parent Loop BB126_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB126_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB126_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_76
.LBB126_79:                             # %for.end267
                                        #   in Loop: Header=BB126_74 Depth=1
	jmp	.LBB126_80
.LBB126_80:                             # %for.inc268
                                        #   in Loop: Header=BB126_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_74
.LBB126_81:                             # %for.end270.loopexit
	jmp	.LBB126_82
.LBB126_82:                             # %for.end270
	cmpl	$38185261, -36(%rbp)    # imm = 0x246A92D
	jne	.LBB126_84
.LBB126_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_83
.Lfunc_end126:
	.size	set_mbaff_parameters.97, .Lfunc_end126-set_mbaff_parameters.97
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.98 # -- Begin function set_mbaff_parameters.98
	.p2align	4, 0x90
	.type	set_mbaff_parameters.98,@function
set_mbaff_parameters.98:                # @set_mbaff_parameters.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1113259156, -32(%rbp)  # imm = 0x425AFC94
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB127_2
# %bb.1:                                # %if.then
	jmp	.LBB127_82
.LBB127_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB127_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB127_3 Depth=1
	movl	$0, -4(%rbp)
.LBB127_5:                              # %for.cond3
                                        #   Parent Loop BB127_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB127_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB127_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_5
.LBB127_8:                              # %for.end
                                        #   in Loop: Header=BB127_3 Depth=1
	jmp	.LBB127_9
.LBB127_9:                              # %for.inc17
                                        #   in Loop: Header=BB127_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_3
.LBB127_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB127_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB127_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB127_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB127_12 Depth=1
	movl	$0, -4(%rbp)
.LBB127_14:                             # %for.cond27
                                        #   Parent Loop BB127_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB127_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB127_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB127_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_14
.LBB127_17:                             # %for.end60
                                        #   in Loop: Header=BB127_12 Depth=1
	jmp	.LBB127_18
.LBB127_18:                             # %for.inc61
                                        #   in Loop: Header=BB127_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_12
.LBB127_19:                             # %for.end63
	jmp	.LBB127_20
.LBB127_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB127_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB127_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB127_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB127_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_26 Depth 2
                                        #       Child Loop BB127_28 Depth 3
                                        #         Child Loop BB127_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB127_24 Depth=1
	movl	$0, -8(%rbp)
.LBB127_26:                             # %for.cond84
                                        #   Parent Loop BB127_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_28 Depth 3
                                        #         Child Loop BB127_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB127_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB127_26 Depth=2
	movl	$0, -12(%rbp)
.LBB127_28:                             # %for.cond88
                                        #   Parent Loop BB127_24 Depth=1
                                        #     Parent Loop BB127_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB127_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB127_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB127_28 Depth=3
	movl	$0, -16(%rbp)
.LBB127_30:                             # %for.cond92
                                        #   Parent Loop BB127_24 Depth=1
                                        #     Parent Loop BB127_26 Depth=2
                                        #       Parent Loop BB127_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB127_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB127_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB127_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_30
.LBB127_33:                             # %for.end115
                                        #   in Loop: Header=BB127_28 Depth=3
	jmp	.LBB127_34
.LBB127_34:                             # %for.inc116
                                        #   in Loop: Header=BB127_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_28
.LBB127_35:                             # %for.end118
                                        #   in Loop: Header=BB127_26 Depth=2
	jmp	.LBB127_36
.LBB127_36:                             # %for.inc119
                                        #   in Loop: Header=BB127_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_26
.LBB127_37:                             # %for.end121
                                        #   in Loop: Header=BB127_24 Depth=1
	jmp	.LBB127_38
.LBB127_38:                             # %for.inc122
                                        #   in Loop: Header=BB127_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_24
.LBB127_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB127_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_42 Depth 2
                                        #       Child Loop BB127_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB127_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB127_40 Depth=1
	movl	$0, -12(%rbp)
.LBB127_42:                             # %for.cond129
                                        #   Parent Loop BB127_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB127_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB127_42 Depth=2
	movl	$0, -16(%rbp)
.LBB127_44:                             # %for.cond133
                                        #   Parent Loop BB127_40 Depth=1
                                        #     Parent Loop BB127_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB127_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB127_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB127_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_44
.LBB127_47:                             # %for.end152
                                        #   in Loop: Header=BB127_42 Depth=2
	jmp	.LBB127_48
.LBB127_48:                             # %for.inc153
                                        #   in Loop: Header=BB127_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_42
.LBB127_49:                             # %for.end155
                                        #   in Loop: Header=BB127_40 Depth=1
	jmp	.LBB127_50
.LBB127_50:                             # %for.inc156
                                        #   in Loop: Header=BB127_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_40
.LBB127_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB127_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB127_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB127_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB127_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_52
.LBB127_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB127_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB127_56 Depth=1
	movl	$0, -4(%rbp)
.LBB127_58:                             # %for.cond180
                                        #   Parent Loop BB127_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB127_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB127_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_58
.LBB127_61:                             # %for.end198
                                        #   in Loop: Header=BB127_56 Depth=1
	jmp	.LBB127_62
.LBB127_62:                             # %for.inc199
                                        #   in Loop: Header=BB127_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_56
.LBB127_63:                             # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB127_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB127_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB127_65 Depth=1
	movl	$0, -4(%rbp)
.LBB127_67:                             # %for.cond208
                                        #   Parent Loop BB127_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB127_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB127_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_67
.LBB127_70:                             # %for.end230
                                        #   in Loop: Header=BB127_65 Depth=1
	jmp	.LBB127_71
.LBB127_71:                             # %for.inc231
                                        #   in Loop: Header=BB127_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_65
.LBB127_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB127_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB127_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB127_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB127_76:                             # %for.cond244
                                        #   Parent Loop BB127_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB127_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB127_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_76
.LBB127_79:                             # %for.end267
                                        #   in Loop: Header=BB127_74 Depth=1
	jmp	.LBB127_80
.LBB127_80:                             # %for.inc268
                                        #   in Loop: Header=BB127_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_74
.LBB127_81:                             # %for.end270.loopexit
	jmp	.LBB127_82
.LBB127_82:                             # %for.end270
	cmpl	$1113259156, -32(%rbp)  # imm = 0x425AFC94
	jne	.LBB127_84
.LBB127_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_83
.Lfunc_end127:
	.size	set_mbaff_parameters.98, .Lfunc_end127-set_mbaff_parameters.98
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.99      # -- Begin function StoreMVBlock8x8.99
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.99,@function
StoreMVBlock8x8.99:                     # @StoreMVBlock8x8.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1604061190, -68(%rbp)  # imm = 0x5F9C0806
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB128_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB128_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB128_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB128_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB128_5:                              # %for.cond7
                                        #   Parent Loop BB128_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB128_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB128_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_5
.LBB128_8:                              # %for.end
                                        #   in Loop: Header=BB128_3 Depth=1
	jmp	.LBB128_9
.LBB128_9:                              # %for.inc76
                                        #   in Loop: Header=BB128_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_3
.LBB128_10:                             # %for.end78
	jmp	.LBB128_11
.LBB128_11:                             # %if.end
	jmp	.LBB128_46
.LBB128_12:                             # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB128_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB128_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB128_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB128_16:                             # %for.cond84
                                        #   Parent Loop BB128_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB128_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB128_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_16
.LBB128_19:                             # %for.end161
                                        #   in Loop: Header=BB128_14 Depth=1
	jmp	.LBB128_20
.LBB128_20:                             # %for.inc162
                                        #   in Loop: Header=BB128_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_14
.LBB128_21:                             # %for.end164
	jmp	.LBB128_45
.LBB128_22:                             # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB128_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB128_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB128_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB128_26:                             # %for.cond171
                                        #   Parent Loop BB128_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB128_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB128_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_26
.LBB128_29:                             # %for.end248
                                        #   in Loop: Header=BB128_24 Depth=1
	jmp	.LBB128_30
.LBB128_30:                             # %for.inc249
                                        #   in Loop: Header=BB128_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_24
.LBB128_31:                             # %for.end251
	jmp	.LBB128_44
.LBB128_32:                             # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB128_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB128_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB128_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB128_36:                             # %for.cond258
                                        #   Parent Loop BB128_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB128_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB128_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_36
.LBB128_39:                             # %for.end407
                                        #   in Loop: Header=BB128_34 Depth=1
	jmp	.LBB128_40
.LBB128_40:                             # %for.inc408
                                        #   in Loop: Header=BB128_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_34
.LBB128_41:                             # %for.end410
	jmp	.LBB128_43
.LBB128_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB128_43:                             # %if.end412
	jmp	.LBB128_44
.LBB128_44:                             # %if.end413
	jmp	.LBB128_45
.LBB128_45:                             # %if.end414
	jmp	.LBB128_46
.LBB128_46:                             # %if.end415
	cmpl	$1604061190, -68(%rbp)  # imm = 0x5F9C0806
	jne	.LBB128_48
.LBB128_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_47
.Lfunc_end128:
	.size	StoreMVBlock8x8.99, .Lfunc_end128-StoreMVBlock8x8.99
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.100     # -- Begin function StoreMVBlock8x8.100
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.100,@function
StoreMVBlock8x8.100:                    # @StoreMVBlock8x8.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1627010981, -68(%rbp)  # imm = 0x60FA37A5
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB129_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB129_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB129_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB129_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_5:                              # %for.cond7
                                        #   Parent Loop BB129_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB129_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB129_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB129_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_5
.LBB129_8:                              # %for.end
                                        #   in Loop: Header=BB129_3 Depth=1
	jmp	.LBB129_9
.LBB129_9:                              # %for.inc76
                                        #   in Loop: Header=BB129_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_3
.LBB129_10:                             # %for.end78
	jmp	.LBB129_11
.LBB129_11:                             # %if.end
	jmp	.LBB129_46
.LBB129_12:                             # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB129_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB129_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB129_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_16:                             # %for.cond84
                                        #   Parent Loop BB129_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB129_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB129_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB129_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_16
.LBB129_19:                             # %for.end161
                                        #   in Loop: Header=BB129_14 Depth=1
	jmp	.LBB129_20
.LBB129_20:                             # %for.inc162
                                        #   in Loop: Header=BB129_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_14
.LBB129_21:                             # %for.end164
	jmp	.LBB129_45
.LBB129_22:                             # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB129_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB129_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB129_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_26:                             # %for.cond171
                                        #   Parent Loop BB129_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB129_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB129_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB129_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_26
.LBB129_29:                             # %for.end248
                                        #   in Loop: Header=BB129_24 Depth=1
	jmp	.LBB129_30
.LBB129_30:                             # %for.inc249
                                        #   in Loop: Header=BB129_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_24
.LBB129_31:                             # %for.end251
	jmp	.LBB129_44
.LBB129_32:                             # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB129_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB129_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB129_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_36:                             # %for.cond258
                                        #   Parent Loop BB129_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB129_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB129_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB129_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_36
.LBB129_39:                             # %for.end407
                                        #   in Loop: Header=BB129_34 Depth=1
	jmp	.LBB129_40
.LBB129_40:                             # %for.inc408
                                        #   in Loop: Header=BB129_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_34
.LBB129_41:                             # %for.end410
	jmp	.LBB129_43
.LBB129_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB129_43:                             # %if.end412
	jmp	.LBB129_44
.LBB129_44:                             # %if.end413
	jmp	.LBB129_45
.LBB129_45:                             # %if.end414
	jmp	.LBB129_46
.LBB129_46:                             # %if.end415
	cmpl	$1627010981, -68(%rbp)  # imm = 0x60FA37A5
	jne	.LBB129_48
.LBB129_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_47
.Lfunc_end129:
	.size	StoreMVBlock8x8.100, .Lfunc_end129-StoreMVBlock8x8.100
	.cfi_endproc
                                        # -- End function
	.type	cofDC,@object           # @cofDC
	.bss
	.globl	cofDC
	.p2align	3
cofDC:
	.quad	0
	.size	cofDC, 8

	.type	cofAC,@object           # @cofAC
	.globl	cofAC
	.p2align	3
cofAC:
	.quad	0
	.size	cofAC, 8

	.type	cofAC8x8,@object        # @cofAC8x8
	.globl	cofAC8x8
	.p2align	3
cofAC8x8:
	.quad	0
	.size	cofAC8x8, 8

	.type	cofAC4x4intern,@object  # @cofAC4x4intern
	.globl	cofAC4x4intern
	.p2align	3
cofAC4x4intern:
	.quad	0
	.size	cofAC4x4intern, 8

	.type	cofAC_8x8ts,@object     # @cofAC_8x8ts
	.globl	cofAC_8x8ts
	.p2align	3
cofAC_8x8ts:
	.quad	0
	.size	cofAC_8x8ts, 8

	.type	cs_mb,@object           # @cs_mb
	.globl	cs_mb
	.p2align	3
cs_mb:
	.quad	0
	.size	cs_mb, 8

	.type	cs_b8,@object           # @cs_b8
	.globl	cs_b8
	.p2align	3
cs_b8:
	.quad	0
	.size	cs_b8, 8

	.type	cs_cm,@object           # @cs_cm
	.globl	cs_cm
	.p2align	3
cs_cm:
	.quad	0
	.size	cs_cm, 8

	.type	cs_imb,@object          # @cs_imb
	.globl	cs_imb
	.p2align	3
cs_imb:
	.quad	0
	.size	cs_imb, 8

	.type	cs_ib8,@object          # @cs_ib8
	.globl	cs_ib8
	.p2align	3
cs_ib8:
	.quad	0
	.size	cs_ib8, 8

	.type	cs_ib4,@object          # @cs_ib4
	.globl	cs_ib4
	.p2align	3
cs_ib4:
	.quad	0
	.size	cs_ib4, 8

	.type	cs_pc,@object           # @cs_pc
	.globl	cs_pc
	.p2align	3
cs_pc:
	.quad	0
	.size	cs_pc, 8

	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	cofAC4x4,@object        # @cofAC4x4
	.globl	cofAC4x4
	.p2align	3
cofAC4x4:
	.quad	0
	.size	cofAC4x4, 8

	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	cofAC4x4_chroma,@object # @cofAC4x4_chroma
	.comm	cofAC4x4_chroma,288,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp8x8,@object          # @cbp8x8
	.comm	cbp8x8,4,4
	.type	best8x8pdir,@object     # @best8x8pdir
	.comm	best8x8pdir,120,16
	.type	best8x8mode,@object     # @best8x8mode
	.comm	best8x8mode,8,2
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Unsupported mode in SetModesAndRefframeForBlocks!\n"
	.size	.L.str, 51

	.type	best8x8fwref,@object    # @best8x8fwref
	.comm	best8x8fwref,120,16
	.type	best8x8bwref,@object    # @best8x8bwref
	.comm	best8x8bwref,120,16
	.type	part8x8mode,@object     # @part8x8mode
	.comm	part8x8mode,16,16
	.type	part8x8pdir,@object     # @part8x8pdir
	.comm	part8x8pdir,8,2
	.type	part8x8fwref,@object    # @part8x8fwref
	.comm	part8x8fwref,8,2
	.type	part8x8bwref,@object    # @part8x8bwref
	.comm	part8x8bwref,8,2
	.type	cnt_nonz8_8x8ts,@object # @cnt_nonz8_8x8ts
	.comm	cnt_nonz8_8x8ts,4,4
	.type	mpr_8x8ts,@object       # @mpr_8x8ts
	.comm	mpr_8x8ts,512,16
	.type	cbp8_8x8ts,@object      # @cbp8_8x8ts
	.comm	cbp8_8x8ts,4,4
	.type	cbp_blk8_8x8ts,@object  # @cbp_blk8_8x8ts
	.comm	cbp_blk8_8x8ts,8,8
	.type	rec_mbY_8x8ts,@object   # @rec_mbY_8x8ts
	.comm	rec_mbY_8x8ts,512,16
	.type	rec_resG_8x8ts,@object  # @rec_resG_8x8ts
	.comm	rec_resG_8x8ts,1024,16
	.type	mprRGB_8x8ts,@object    # @mprRGB_8x8ts
	.comm	mprRGB_8x8ts,3072,16
	.type	resTrans_R_8x8ts,@object # @resTrans_R_8x8ts
	.comm	resTrans_R_8x8ts,1024,16
	.type	resTrans_B_8x8ts,@object # @resTrans_B_8x8ts
	.comm	resTrans_B_8x8ts,1024,16
	.type	cnt_nonz_8x8,@object    # @cnt_nonz_8x8
	.comm	cnt_nonz_8x8,4,4
	.type	mpr8x8,@object          # @mpr8x8
	.comm	mpr8x8,512,16
	.type	cbp_blk8x8,@object      # @cbp_blk8x8
	.comm	cbp_blk8x8,4,4
	.type	rec_mbY8x8,@object      # @rec_mbY8x8
	.comm	rec_mbY8x8,512,16
	.type	rec_resG_8x8,@object    # @rec_resG_8x8
	.comm	rec_resG_8x8,1024,16
	.type	mprRGB_8x8,@object      # @mprRGB_8x8
	.comm	mprRGB_8x8,3072,16
	.type	resTrans_R_8x8,@object  # @resTrans_R_8x8
	.comm	resTrans_R_8x8,1024,16
	.type	resTrans_B_8x8,@object  # @resTrans_B_8x8
	.comm	resTrans_B_8x8,1024,16
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"invalid direction mode"
	.size	.L.str.1, 23

	.type	pred,@object            # @pred
	.local	pred
	.comm	pred,1024,16
	.type	best_mode,@object       # @best_mode
	.comm	best_mode,4,4
	.type	best_c_imode,@object    # @best_c_imode
	.comm	best_c_imode,4,4
	.type	best_i16offset,@object  # @best_i16offset
	.comm	best_i16offset,4,4
	.type	bi_pred_me,@object      # @bi_pred_me
	.comm	bi_pred_me,4,4
	.type	b8mode,@object          # @b8mode
	.comm	b8mode,8,2
	.type	b8pdir,@object          # @b8pdir
	.comm	b8pdir,8,2
	.type	b4_ipredmode,@object    # @b4_ipredmode
	.comm	b4_ipredmode,64,16
	.type	b4_intra_pred_modes,@object # @b4_intra_pred_modes
	.comm	b4_intra_pred_modes,64,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	rec_mbY,@object         # @rec_mbY
	.comm	rec_mbY,512,16
	.type	rec_mbU,@object         # @rec_mbU
	.comm	rec_mbU,512,16
	.type	rec_mbV,@object         # @rec_mbV
	.comm	rec_mbV,512,16
	.type	cbp,@object             # @cbp
	.comm	cbp,4,4
	.type	cbp_blk,@object         # @cbp_blk
	.comm	cbp_blk,8,8
	.type	luma_transform_size_8x8_flag,@object # @luma_transform_size_8x8_flag
	.comm	luma_transform_size_8x8_flag,4,4
	.type	frefframe,@object       # @frefframe
	.comm	frefframe,32,16
	.type	brefframe,@object       # @brefframe
	.comm	brefframe,32,16
	.type	all_mv8x8,@object       # @all_mv8x8
	.comm	all_mv8x8,256,16
	.type	pred_mv8x8,@object      # @pred_mv8x8
	.comm	pred_mv8x8,256,16
	.type	encode_one_macroblock.b8_mode_table,@object # @encode_one_macroblock.b8_mode_table
	.section	.rodata,"a",@progbits
	.p2align	4
encode_one_macroblock.b8_mode_table:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	0                       # 0x0
	.size	encode_one_macroblock.b8_mode_table, 24

	.type	encode_one_macroblock.mb_mode_table,@object # @encode_one_macroblock.mb_mode_table
	.p2align	4
encode_one_macroblock.mb_mode_table:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table, 32

	.type	encode_one_macroblock.mb_mode_table_RCT,@object # @encode_one_macroblock.mb_mode_table_RCT
	.p2align	4
encode_one_macroblock.mb_mode_table_RCT:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table_RCT, 44

	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	cost8_8x8ts,@object     # @cost8_8x8ts
	.comm	cost8_8x8ts,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	temp_imgU,@object       # @temp_imgU
	.comm	temp_imgU,512,16
	.type	temp_imgV,@object       # @temp_imgV
	.comm	temp_imgV,512,16
	.type	temp_imgY,@object       # @temp_imgY
	.comm	temp_imgY,512,16
	.type	DELTA_QP,@object        # @DELTA_QP
	.comm	DELTA_QP,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	DELTA_QP2,@object       # @DELTA_QP2
	.comm	DELTA_QP2,4,4
	.type	QP2,@object             # @QP2
	.comm	QP2,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	best_transform_size,@object # @best_transform_size
	.comm	best_transform_size,16,16
	.type	NoMbPartLessThan8x8Flag,@object # @NoMbPartLessThan8x8Flag
	.comm	NoMbPartLessThan8x8Flag,4,4
	.type	mv8x8,@object           # @mv8x8
	.comm	mv8x8,128,16
	.type	ref8x8,@object          # @ref8x8
	.comm	ref8x8,64,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
