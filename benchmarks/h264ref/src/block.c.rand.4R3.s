	.text
	.file	"block.c"
	.globl	intrapred_luma          # -- Begin function intrapred_luma
	.p2align	4, 0x90
	.type	intrapred_luma,@function
intrapred_luma:                         # @intrapred_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_5
# %bb.1:                                # %func_intrapred_luma.9
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_intrapred_luma.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_intrapred_luma.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_intrapred_luma.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
	jmp	.LBB0_4
.Lfunc_end0:
	.size	intrapred_luma, .Lfunc_end0-intrapred_luma
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16    # -- Begin function intrapred_luma_16x16
	.p2align	4, 0x90
	.type	intrapred_luma_16x16,@function
intrapred_luma_16x16:                   # @intrapred_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_5
# %bb.1:                                # %func_intrapred_luma_16x16.3
	callq	intrapred_luma_16x16.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_intrapred_luma_16x16.21
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_intrapred_luma_16x16.34
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_intrapred_luma_16x16.35
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
	jmp	.LBB1_4
.Lfunc_end1:
	.size	intrapred_luma_16x16, .Lfunc_end1-intrapred_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16          # -- Begin function dct_luma_16x16
	.p2align	4, 0x90
	.type	dct_luma_16x16,@function
dct_luma_16x16:                         # @dct_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_dct_luma_16x16.11
	movl	%ebx, %edi
	callq	dct_luma_16x16.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_dct_luma_16x16.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_dct_luma_16x16.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_dct_luma_16x16.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	dct_luma_16x16, .Lfunc_end2-dct_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma                # -- Begin function dct_luma
	.p2align	4, 0x90
	.type	dct_luma,@function
dct_luma:                               # @dct_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_dct_luma.2
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.2
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_dct_luma.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.18
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_dct_luma.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.25
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_dct_luma.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.28
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	dct_luma, .Lfunc_end3-dct_luma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma              # -- Begin function dct_chroma
	.p2align	4, 0x90
	.type	dct_chroma,@function
dct_chroma:                             # @dct_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_dct_chroma.4
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_dct_chroma.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_dct_chroma.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_dct_chroma.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	dct_chroma, .Lfunc_end4-dct_chroma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4           # -- Begin function dct_chroma4x4
	.p2align	4, 0x90
	.type	dct_chroma4x4,@function
dct_chroma4x4:                          # @dct_chroma4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_dct_chroma4x4.6
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_dct_chroma4x4.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_dct_chroma4x4.14
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_dct_chroma4x4.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	dct_chroma4x4, .Lfunc_end5-dct_chroma4x4
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC           # -- Begin function dct_chroma_DC
	.p2align	4, 0x90
	.type	dct_chroma_DC,@function
dct_chroma_DC:                          # @dct_chroma_DC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_dct_chroma_DC.8
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_dct_chroma_DC.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_dct_chroma_DC.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_dct_chroma_DC.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	dct_chroma_DC, .Lfunc_end6-dct_chroma_DC
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_sp             # -- Begin function dct_luma_sp
	.p2align	4, 0x90
	.type	dct_luma_sp,@function
dct_luma_sp:                            # @dct_luma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_dct_luma_sp.5
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_dct_luma_sp.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_dct_luma_sp.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_dct_luma_sp.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	dct_luma_sp, .Lfunc_end7-dct_luma_sp
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_sp           # -- Begin function dct_chroma_sp
	.p2align	4, 0x90
	.type	dct_chroma_sp,@function
dct_chroma_sp:                          # @dct_chroma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_dct_chroma_sp.27
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_dct_chroma_sp.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_dct_chroma_sp.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_dct_chroma_sp.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	dct_chroma_sp, .Lfunc_end8-dct_chroma_sp
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp            # -- Begin function copyblock_sp
	.p2align	4, 0x90
	.type	copyblock_sp,@function
copyblock_sp:                           # @copyblock_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_copyblock_sp.1
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_copyblock_sp.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_copyblock_sp.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_copyblock_sp.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	copyblock_sp, .Lfunc_end9-copyblock_sp
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.1          # -- Begin function copyblock_sp.1
	.p2align	4, 0x90
	.type	copyblock_sp.1,@function
copyblock_sp.1:                         # @copyblock_sp.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$693367321, -88(%rbp)   # imm = 0x2953F219
	movl	%edi, -80(%rbp)
	movl	%esi, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -68(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_3:                               # %for.cond4
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB10_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB10_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_3
.LBB10_6:                               # %for.end
                                        #   in Loop: Header=BB10_1 Depth=1
	jmp	.LBB10_7
.LBB10_7:                               # %for.inc17
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_1
.LBB10_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB10_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB10_9 Depth=1
	movl	$0, -8(%rbp)
.LBB10_11:                              # %for.cond24
                                        #   Parent Loop BB10_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB10_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB10_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB10_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_11
.LBB10_14:                              # %for.end53
                                        #   in Loop: Header=BB10_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB10_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_9
.LBB10_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB10_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB10_17 Depth=1
	movl	$0, -4(%rbp)
.LBB10_19:                              # %for.cond86
                                        #   Parent Loop BB10_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB10_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB10_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB10_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_19
.LBB10_22:                              # %for.end115
                                        #   in Loop: Header=BB10_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB10_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_17
.LBB10_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB10_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	$0, -8(%rbp)
.LBB10_27:                              # %for.cond149
                                        #   Parent Loop BB10_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB10_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_27
.LBB10_30:                              # %for.end184
                                        #   in Loop: Header=BB10_25 Depth=1
	jmp	.LBB10_31
.LBB10_31:                              # %for.inc185
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_25
.LBB10_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB10_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_35 Depth 2
                                        #     Child Loop BB10_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB10_33 Depth=1
	movl	$0, -8(%rbp)
.LBB10_35:                              # %for.cond192
                                        #   Parent Loop BB10_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB10_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB10_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_35
.LBB10_38:                              # %for.end205
                                        #   in Loop: Header=BB10_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB10_39:                              # %for.cond224
                                        #   Parent Loop BB10_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB10_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB10_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB10_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_39
.LBB10_42:                              # %for.end251
                                        #   in Loop: Header=BB10_33 Depth=1
	jmp	.LBB10_43
.LBB10_43:                              # %for.inc252
                                        #   in Loop: Header=BB10_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_33
.LBB10_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB10_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_47 Depth 2
                                        #     Child Loop BB10_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB10_45 Depth=1
	movl	$0, -4(%rbp)
.LBB10_47:                              # %for.cond259
                                        #   Parent Loop BB10_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB10_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB10_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_47
.LBB10_50:                              # %for.end272
                                        #   in Loop: Header=BB10_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB10_51:                              # %for.cond291
                                        #   Parent Loop BB10_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB10_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB10_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB10_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB10_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB10_55
.LBB10_54:                              # %cond.false
                                        #   in Loop: Header=BB10_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB10_55:                              # %cond.end
                                        #   in Loop: Header=BB10_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB10_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB10_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_61
.LBB10_57:                              # %cond.false316
                                        #   in Loop: Header=BB10_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB10_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB10_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB10_60
.LBB10_59:                              # %cond.false327
                                        #   in Loop: Header=BB10_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB10_60:                              # %cond.end335
                                        #   in Loop: Header=BB10_51 Depth=2
.LBB10_61:                              # %cond.end337
                                        #   in Loop: Header=BB10_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB10_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB10_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB10_64
.LBB10_63:                              # %cond.false355
                                        #   in Loop: Header=BB10_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB10_64:                              # %cond.end363
                                        #   in Loop: Header=BB10_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB10_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB10_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_70
.LBB10_66:                              # %cond.false369
                                        #   in Loop: Header=BB10_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB10_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB10_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB10_69
.LBB10_68:                              # %cond.false380
                                        #   in Loop: Header=BB10_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB10_69:                              # %cond.end388
                                        #   in Loop: Header=BB10_51 Depth=2
.LBB10_70:                              # %cond.end390
                                        #   in Loop: Header=BB10_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB10_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_51
.LBB10_72:                              # %for.end399
                                        #   in Loop: Header=BB10_45 Depth=1
	jmp	.LBB10_73
.LBB10_73:                              # %for.inc400
                                        #   in Loop: Header=BB10_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_45
.LBB10_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB10_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB10_75 Depth=1
	movl	$0, -8(%rbp)
.LBB10_77:                              # %for.cond407
                                        #   Parent Loop BB10_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB10_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB10_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_77
.LBB10_80:                              # %for.end427
                                        #   in Loop: Header=BB10_75 Depth=1
	jmp	.LBB10_81
.LBB10_81:                              # %for.inc428
                                        #   in Loop: Header=BB10_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_75
.LBB10_82:                              # %for.end430
	cmpl	$693367321, -88(%rbp)   # imm = 0x2953F219
	jne	.LBB10_84
.LBB10_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_83
.Lfunc_end10:
	.size	copyblock_sp.1, .Lfunc_end10-copyblock_sp.1
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.2              # -- Begin function dct_luma.2
	.p2align	4, 0x90
	.type	dct_luma.2,@function
dct_luma.2:                             # @dct_luma.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$859965828, -148(%rbp)  # imm = 0x33420984
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB11_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB11_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB11_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB11_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_5:                               # %land.end32
                                        #   in Loop: Header=BB11_3 Depth=1
	testb	$1, %al
	jne	.LBB11_6
	jmp	.LBB11_12
.LBB11_6:                               # %for.body
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	$0, -16(%rbp)
.LBB11_7:                               # %for.cond34
                                        #   Parent Loop BB11_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB11_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB11_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB11_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_7
.LBB11_10:                              # %for.end
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_3
.LBB11_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB11_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB11_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB11_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_15:                              # %land.end101
                                        #   in Loop: Header=BB11_13 Depth=1
	testb	$1, %al
	jne	.LBB11_16
	jmp	.LBB11_22
.LBB11_16:                              # %for.body103
                                        #   in Loop: Header=BB11_13 Depth=1
	movl	$0, -12(%rbp)
.LBB11_17:                              # %for.cond104
                                        #   Parent Loop BB11_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB11_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB11_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB11_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_17
.LBB11_20:                              # %for.end136
                                        #   in Loop: Header=BB11_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB11_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_13
.LBB11_22:                              # %for.end169
	movl	$0, -116(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -88(%rbp)
.LBB11_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB11_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB11_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB11_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB11_28
.LBB11_27:                              # %if.then
                                        #   in Loop: Header=BB11_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_29
.LBB11_28:                              # %if.else
                                        #   in Loop: Header=BB11_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB11_29:                              # %if.end
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB11_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB11_35
.LBB11_31:                              # %if.else199
                                        #   in Loop: Header=BB11_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB11_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB11_34
.LBB11_33:                              # %if.else223
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB11_34:                              # %if.end245
                                        #   in Loop: Header=BB11_23 Depth=1
	jmp	.LBB11_35
.LBB11_35:                              # %if.end246
                                        #   in Loop: Header=BB11_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB11_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	$1, -116(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB11_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB11_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB11_39
.LBB11_38:                              # %if.then254
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB11_40
.LBB11_39:                              # %if.else256
                                        #   in Loop: Header=BB11_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB11_40:                              # %if.end263
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB11_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB11_52
.LBB11_42:                              # %if.else283
                                        #   in Loop: Header=BB11_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB11_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB11_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB11_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB11_46
.LBB11_45:                              # %if.else301
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB11_46:                              # %if.end314
                                        #   in Loop: Header=BB11_23 Depth=1
	jmp	.LBB11_51
.LBB11_47:                              # %if.else315
                                        #   in Loop: Header=BB11_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB11_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB11_50
.LBB11_49:                              # %if.else328
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB11_50:                              # %if.end338
                                        #   in Loop: Header=BB11_23 Depth=1
	jmp	.LBB11_51
.LBB11_51:                              # %if.end339
                                        #   in Loop: Header=BB11_23 Depth=1
	jmp	.LBB11_52
.LBB11_52:                              # %if.end340
                                        #   in Loop: Header=BB11_23 Depth=1
	jmp	.LBB11_53
.LBB11_53:                              # %if.end341
                                        #   in Loop: Header=BB11_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB11_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB11_55:                              # %if.end349
                                        #   in Loop: Header=BB11_23 Depth=1
	jmp	.LBB11_56
.LBB11_56:                              # %for.inc350
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB11_23
.LBB11_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB11_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_62 Depth 2
                                        #     Child Loop BB11_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB11_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB11_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_60:                              # %land.end361
                                        #   in Loop: Header=BB11_58 Depth=1
	testb	$1, %al
	jne	.LBB11_61
	jmp	.LBB11_71
.LBB11_61:                              # %for.body363
                                        #   in Loop: Header=BB11_58 Depth=1
	movl	$0, -16(%rbp)
.LBB11_62:                              # %for.cond364
                                        #   Parent Loop BB11_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB11_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB11_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_62
.LBB11_65:                              # %for.end377
                                        #   in Loop: Header=BB11_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB11_66:                              # %for.cond396
                                        #   Parent Loop BB11_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB11_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB11_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB11_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_66
.LBB11_69:                              # %for.end423
                                        #   in Loop: Header=BB11_58 Depth=1
	jmp	.LBB11_70
.LBB11_70:                              # %for.inc424
                                        #   in Loop: Header=BB11_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_58
.LBB11_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB11_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_76 Depth 2
                                        #     Child Loop BB11_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB11_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB11_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_74:                              # %land.end433
                                        #   in Loop: Header=BB11_72 Depth=1
	testb	$1, %al
	jne	.LBB11_75
	jmp	.LBB11_109
.LBB11_75:                              # %for.body435
                                        #   in Loop: Header=BB11_72 Depth=1
	movl	$0, -12(%rbp)
.LBB11_76:                              # %for.cond436
                                        #   Parent Loop BB11_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB11_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB11_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB11_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_76
.LBB11_79:                              # %for.end449
                                        #   in Loop: Header=BB11_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB11_80:                              # %for.cond468
                                        #   Parent Loop BB11_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB11_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB11_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB11_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB11_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB11_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB11_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB11_85
.LBB11_84:                              # %cond.false
                                        #   in Loop: Header=BB11_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB11_85:                              # %cond.end
                                        #   in Loop: Header=BB11_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB11_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB11_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB11_91
.LBB11_87:                              # %cond.false518
                                        #   in Loop: Header=BB11_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB11_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB11_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_90
.LBB11_89:                              # %cond.false540
                                        #   in Loop: Header=BB11_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB11_90:                              # %cond.end559
                                        #   in Loop: Header=BB11_80 Depth=2
.LBB11_91:                              # %cond.end561
                                        #   in Loop: Header=BB11_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB11_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB11_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB11_94
.LBB11_93:                              # %cond.false592
                                        #   in Loop: Header=BB11_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB11_94:                              # %cond.end611
                                        #   in Loop: Header=BB11_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB11_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB11_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB11_100
.LBB11_96:                              # %cond.false618
                                        #   in Loop: Header=BB11_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB11_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB11_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_99
.LBB11_98:                              # %cond.false640
                                        #   in Loop: Header=BB11_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB11_99:                              # %cond.end659
                                        #   in Loop: Header=BB11_80 Depth=2
.LBB11_100:                             # %cond.end661
                                        #   in Loop: Header=BB11_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB11_105
.LBB11_101:                             # %if.else669
                                        #   in Loop: Header=BB11_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB11_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB11_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB11_104
.LBB11_103:                             # %if.else692
                                        #   in Loop: Header=BB11_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB11_104:                             # %if.end717
                                        #   in Loop: Header=BB11_80 Depth=2
	jmp	.LBB11_105
.LBB11_105:                             # %if.end718
                                        #   in Loop: Header=BB11_80 Depth=2
	jmp	.LBB11_106
.LBB11_106:                             # %for.inc719
                                        #   in Loop: Header=BB11_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_80
.LBB11_107:                             # %for.end721
                                        #   in Loop: Header=BB11_72 Depth=1
	jmp	.LBB11_108
.LBB11_108:                             # %for.inc722
                                        #   in Loop: Header=BB11_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_72
.LBB11_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB11_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB11_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB11_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB11_111 Depth=1
	movl	$0, -16(%rbp)
.LBB11_113:                             # %for.cond732
                                        #   Parent Loop BB11_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB11_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB11_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB11_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB11_117
.LBB11_116:                             # %if.else761
                                        #   in Loop: Header=BB11_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB11_117:                             # %if.end779
                                        #   in Loop: Header=BB11_113 Depth=2
	jmp	.LBB11_118
.LBB11_118:                             # %for.inc780
                                        #   in Loop: Header=BB11_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_113
.LBB11_119:                             # %for.end782
                                        #   in Loop: Header=BB11_111 Depth=1
	jmp	.LBB11_120
.LBB11_120:                             # %for.inc783
                                        #   in Loop: Header=BB11_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_111
.LBB11_121:                             # %for.end785
	jmp	.LBB11_122
.LBB11_122:                             # %if.end786
	movl	-116(%rbp), %ebx
	cmpl	$859965828, -148(%rbp)  # imm = 0x33420984
	jne	.LBB11_124
.LBB11_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_123
.Lfunc_end11:
	.size	dct_luma.2, .Lfunc_end11-dct_luma.2
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.3  # -- Begin function intrapred_luma_16x16.3
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.3,@function
intrapred_luma_16x16.3:                 # @intrapred_luma_16x16.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$165674660, -92(%rbp)   # imm = 0x9DFFEA4
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB12_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_1
.LBB12_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB12_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB12_20
.LBB12_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB12_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB12_9
.LBB12_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB12_9
.LBB12_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB12_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB12_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB12_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB12_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB12_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB12_14
.LBB12_13:                              # %cond.false23
                                        #   in Loop: Header=BB12_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_14
.LBB12_14:                              # %cond.end24
                                        #   in Loop: Header=BB12_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB12_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_10
.LBB12_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB12_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB12_19
.LBB12_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB12_19
.LBB12_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB12_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB12_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB12_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB12_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB12_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB12_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB12_24:                              # %if.end51
                                        #   in Loop: Header=BB12_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB12_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB12_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB12_26:                              # %if.end68
                                        #   in Loop: Header=BB12_21 Depth=1
	jmp	.LBB12_27
.LBB12_27:                              # %for.inc69
                                        #   in Loop: Header=BB12_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_21
.LBB12_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB12_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB12_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB12_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB12_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB12_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB12_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB12_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB12_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB12_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB12_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB12_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB12_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB12_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB12_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB12_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB12_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB12_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB12_44:                              # %if.end114
                                        #   in Loop: Header=BB12_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB12_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB12_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB12_46:                              # %if.end133
                                        #   in Loop: Header=BB12_41 Depth=1
	jmp	.LBB12_47
.LBB12_47:                              # %for.inc134
                                        #   in Loop: Header=BB12_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_41
.LBB12_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB12_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB12_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB12_49 Depth=1
	movl	$0, -4(%rbp)
.LBB12_51:                              # %for.cond141
                                        #   Parent Loop BB12_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB12_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB12_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB12_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_51
.LBB12_54:                              # %for.end173
                                        #   in Loop: Header=BB12_49 Depth=1
	jmp	.LBB12_55
.LBB12_55:                              # %for.inc174
                                        #   in Loop: Header=BB12_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_49
.LBB12_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB12_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB12_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB12_60
.LBB12_59:                              # %if.then181
	jmp	.LBB12_85
.LBB12_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB12_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB12_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB12_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB12_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB12_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB12_65
.LBB12_64:                              # %if.else210
                                        #   in Loop: Header=BB12_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB12_65:                              # %if.end232
                                        #   in Loop: Header=BB12_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB12_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_61
.LBB12_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB12_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB12_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB12_68 Depth=1
	movl	$0, -4(%rbp)
.LBB12_70:                              # %for.cond293
                                        #   Parent Loop BB12_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB12_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB12_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB12_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_74
.LBB12_73:                              # %cond.false309
                                        #   in Loop: Header=BB12_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_74:                              # %cond.end318
                                        #   in Loop: Header=BB12_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB12_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB12_80
.LBB12_76:                              # %cond.false323
                                        #   in Loop: Header=BB12_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB12_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_79
.LBB12_78:                              # %cond.false337
                                        #   in Loop: Header=BB12_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_79:                              # %cond.end346
                                        #   in Loop: Header=BB12_70 Depth=2
.LBB12_80:                              # %cond.end348
                                        #   in Loop: Header=BB12_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB12_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_70
.LBB12_82:                              # %for.end359
                                        #   in Loop: Header=BB12_68 Depth=1
	jmp	.LBB12_83
.LBB12_83:                              # %for.inc360
                                        #   in Loop: Header=BB12_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_68
.LBB12_84:                              # %for.end362.loopexit
	jmp	.LBB12_85
.LBB12_85:                              # %for.end362
	cmpl	$165674660, -92(%rbp)   # imm = 0x9DFFEA4
	jne	.LBB12_87
.LBB12_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_86
.Lfunc_end12:
	.size	intrapred_luma_16x16.3, .Lfunc_end12-intrapred_luma_16x16.3
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.4            # -- Begin function dct_chroma.4
	.p2align	4, 0x90
	.type	dct_chroma.4,@function
dct_chroma.4:                           # @dct_chroma.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1353207049, -380(%rbp) # imm = 0x50A84D09
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB13_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB13_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB13_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB13_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB13_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB13_11
.LBB13_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB13_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB13_10
.LBB13_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB13_10:                              # %cond.end
.LBB13_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB13_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB13_14
.LBB13_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB13_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB13_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB13_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB13_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_19 Depth 2
                                        #       Child Loop BB13_21 Depth 3
                                        #         Child Loop BB13_25 Depth 4
                                        #       Child Loop BB13_31 Depth 3
                                        #         Child Loop BB13_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB13_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	$0, -28(%rbp)
.LBB13_19:                              # %for.cond56
                                        #   Parent Loop BB13_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_21 Depth 3
                                        #         Child Loop BB13_25 Depth 4
                                        #       Child Loop BB13_31 Depth 3
                                        #         Child Loop BB13_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	$0, -12(%rbp)
.LBB13_21:                              # %for.cond60
                                        #   Parent Loop BB13_17 Depth=1
                                        #     Parent Loop BB13_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB13_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB13_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_23:                              # %land.end64
                                        #   in Loop: Header=BB13_21 Depth=3
	testb	$1, %al
	jne	.LBB13_24
	jmp	.LBB13_30
.LBB13_24:                              # %for.body66
                                        #   in Loop: Header=BB13_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB13_25:                              # %for.cond68
                                        #   Parent Loop BB13_17 Depth=1
                                        #     Parent Loop BB13_19 Depth=2
                                        #       Parent Loop BB13_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB13_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB13_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB13_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_25
.LBB13_28:                              # %for.end
                                        #   in Loop: Header=BB13_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB13_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_21
.LBB13_30:                              # %for.end141
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	$0, -16(%rbp)
.LBB13_31:                              # %for.cond142
                                        #   Parent Loop BB13_17 Depth=1
                                        #     Parent Loop BB13_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB13_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB13_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_33:                              # %land.end148
                                        #   in Loop: Header=BB13_31 Depth=3
	testb	$1, %al
	jne	.LBB13_34
	jmp	.LBB13_40
.LBB13_34:                              # %for.body150
                                        #   in Loop: Header=BB13_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB13_35:                              # %for.cond152
                                        #   Parent Loop BB13_17 Depth=1
                                        #     Parent Loop BB13_19 Depth=2
                                        #       Parent Loop BB13_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB13_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB13_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB13_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_35
.LBB13_38:                              # %for.end189
                                        #   in Loop: Header=BB13_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB13_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_31
.LBB13_40:                              # %for.end230
                                        #   in Loop: Header=BB13_19 Depth=2
	jmp	.LBB13_41
.LBB13_41:                              # %for.inc231
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB13_19
.LBB13_42:                              # %for.end233
                                        #   in Loop: Header=BB13_17 Depth=1
	jmp	.LBB13_43
.LBB13_43:                              # %for.inc234
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_17
.LBB13_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB13_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB13_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB13_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB13_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB13_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_50
.LBB13_49:                              # %if.else
                                        #   in Loop: Header=BB13_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB13_50:                              # %if.end349
                                        #   in Loop: Header=BB13_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB13_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB13_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB13_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB13_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB13_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB13_54:                              # %if.end359
                                        #   in Loop: Header=BB13_46 Depth=1
	jmp	.LBB13_55
.LBB13_55:                              # %if.end360
                                        #   in Loop: Header=BB13_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB13_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB13_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	$1, %eax
	jmp	.LBB13_59
.LBB13_58:                              # %cond.false370
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-136(%rbp), %eax
.LBB13_59:                              # %cond.end371
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB13_60:                              # %if.end384
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_46
.LBB13_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB13_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB13_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB13_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB13_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB13_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB13_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB13_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB13_68
.LBB13_67:                              # %if.else447
                                        #   in Loop: Header=BB13_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB13_68:                              # %if.end461
                                        #   in Loop: Header=BB13_63 Depth=1
	jmp	.LBB13_73
.LBB13_69:                              # %if.else462
                                        #   in Loop: Header=BB13_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB13_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB13_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB13_72
.LBB13_71:                              # %if.else479
                                        #   in Loop: Header=BB13_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB13_72:                              # %if.end493
                                        #   in Loop: Header=BB13_63 Depth=1
	jmp	.LBB13_73
.LBB13_73:                              # %if.end494
                                        #   in Loop: Header=BB13_63 Depth=1
	jmp	.LBB13_74
.LBB13_74:                              # %for.inc495
                                        #   in Loop: Header=BB13_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_63
.LBB13_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB13_213
.LBB13_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB13_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB13_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB13_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB13_78 Depth=1
	movl	$0, -16(%rbp)
.LBB13_80:                              # %for.cond523
                                        #   Parent Loop BB13_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB13_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB13_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_80
.LBB13_83:                              # %for.end541
                                        #   in Loop: Header=BB13_78 Depth=1
	jmp	.LBB13_84
.LBB13_84:                              # %for.inc542
                                        #   in Loop: Header=BB13_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_78
.LBB13_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB13_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB13_86 Depth=1
	movl	$0, -12(%rbp)
.LBB13_88:                              # %for.cond605
                                        #   Parent Loop BB13_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB13_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB13_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_88
.LBB13_91:                              # %for.end634
                                        #   in Loop: Header=BB13_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB13_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_86
.LBB13_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB13_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB13_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB13_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB13_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB13_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_98
.LBB13_97:                              # %if.else700
                                        #   in Loop: Header=BB13_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB13_98:                              # %if.end723
                                        #   in Loop: Header=BB13_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB13_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB13_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	$1, %eax
	jmp	.LBB13_102
.LBB13_101:                             # %cond.false735
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	-136(%rbp), %eax
.LBB13_102:                             # %cond.end736
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB13_103:                             # %if.end748
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_94
.LBB13_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB13_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_108 Depth 2
                                        #     Child Loop BB13_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB13_106 Depth=1
	movl	$0, -12(%rbp)
.LBB13_108:                             # %for.cond823
                                        #   Parent Loop BB13_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB13_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB13_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_108
.LBB13_111:                             # %for.end835
                                        #   in Loop: Header=BB13_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB13_112:                             # %for.cond852
                                        #   Parent Loop BB13_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB13_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB13_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB13_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB13_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB13_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB13_117
.LBB13_116:                             # %if.else915
                                        #   in Loop: Header=BB13_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB13_117:                             # %if.end968
                                        #   in Loop: Header=BB13_112 Depth=2
	jmp	.LBB13_122
.LBB13_118:                             # %if.else969
                                        #   in Loop: Header=BB13_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB13_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB13_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB13_121
.LBB13_120:                             # %if.else1019
                                        #   in Loop: Header=BB13_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB13_121:                             # %if.end1066
                                        #   in Loop: Header=BB13_112 Depth=2
	jmp	.LBB13_122
.LBB13_122:                             # %if.end1067
                                        #   in Loop: Header=BB13_112 Depth=2
	jmp	.LBB13_123
.LBB13_123:                             # %for.inc1068
                                        #   in Loop: Header=BB13_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_112
.LBB13_124:                             # %for.end1070
                                        #   in Loop: Header=BB13_106 Depth=1
	jmp	.LBB13_125
.LBB13_125:                             # %for.inc1071
                                        #   in Loop: Header=BB13_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_106
.LBB13_126:                             # %for.end1073
	jmp	.LBB13_212
.LBB13_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB13_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB13_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB13_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB13_129 Depth=1
	movl	$0, -16(%rbp)
.LBB13_131:                             # %for.cond1083
                                        #   Parent Loop BB13_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB13_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB13_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_131
.LBB13_134:                             # %for.end1101
                                        #   in Loop: Header=BB13_129 Depth=1
	jmp	.LBB13_135
.LBB13_135:                             # %for.inc1102
                                        #   in Loop: Header=BB13_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_129
.LBB13_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB13_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB13_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB13_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_139:                             # %land.end1111
                                        #   in Loop: Header=BB13_137 Depth=1
	testb	$1, %al
	jne	.LBB13_140
	jmp	.LBB13_146
.LBB13_140:                             # %for.body1113
                                        #   in Loop: Header=BB13_137 Depth=1
	movl	$0, -16(%rbp)
.LBB13_141:                             # %for.cond1114
                                        #   Parent Loop BB13_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB13_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB13_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_141
.LBB13_144:                             # %for.end1143
                                        #   in Loop: Header=BB13_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB13_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_137
.LBB13_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB13_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB13_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB13_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_149:                             # %land.end1177
                                        #   in Loop: Header=BB13_147 Depth=1
	testb	$1, %al
	jne	.LBB13_150
	jmp	.LBB13_156
.LBB13_150:                             # %for.body1179
                                        #   in Loop: Header=BB13_147 Depth=1
	movl	$0, -12(%rbp)
.LBB13_151:                             # %for.cond1180
                                        #   Parent Loop BB13_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB13_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB13_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_151
.LBB13_154:                             # %for.end1209
                                        #   in Loop: Header=BB13_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB13_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_147
.LBB13_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB13_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB13_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB13_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB13_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB13_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB13_164
.LBB13_160:                             # %if.else1261
                                        #   in Loop: Header=BB13_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB13_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB13_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_163
.LBB13_162:                             # %if.else1287
                                        #   in Loop: Header=BB13_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB13_163:                             # %if.end1310
                                        #   in Loop: Header=BB13_157 Depth=1
	jmp	.LBB13_164
.LBB13_164:                             # %if.end1311
                                        #   in Loop: Header=BB13_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB13_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB13_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	$1, %eax
	jmp	.LBB13_168
.LBB13_167:                             # %cond.false1322
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-136(%rbp), %eax
.LBB13_168:                             # %cond.end1323
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB13_169:                             # %if.end1335
                                        #   in Loop: Header=BB13_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB13_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB13_171:                             # %if.end1347
                                        #   in Loop: Header=BB13_157 Depth=1
	jmp	.LBB13_172
.LBB13_172:                             # %for.inc1348
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_157
.LBB13_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB13_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_178 Depth 2
                                        #     Child Loop BB13_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB13_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB13_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_176:                             # %land.end1359
                                        #   in Loop: Header=BB13_174 Depth=1
	testb	$1, %al
	jne	.LBB13_177
	jmp	.LBB13_187
.LBB13_177:                             # %for.body1361
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	$0, -16(%rbp)
.LBB13_178:                             # %for.cond1362
                                        #   Parent Loop BB13_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB13_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB13_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_178
.LBB13_181:                             # %for.end1374
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB13_182:                             # %for.cond1391
                                        #   Parent Loop BB13_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB13_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB13_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_182
.LBB13_185:                             # %for.end1416
                                        #   in Loop: Header=BB13_174 Depth=1
	jmp	.LBB13_186
.LBB13_186:                             # %for.inc1417
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_174
.LBB13_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB13_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_192 Depth 2
                                        #     Child Loop BB13_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB13_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB13_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_190:                             # %land.end1426
                                        #   in Loop: Header=BB13_188 Depth=1
	testb	$1, %al
	jne	.LBB13_191
	jmp	.LBB13_210
.LBB13_191:                             # %for.body1428
                                        #   in Loop: Header=BB13_188 Depth=1
	movl	$0, -12(%rbp)
.LBB13_192:                             # %for.cond1429
                                        #   Parent Loop BB13_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB13_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB13_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_192
.LBB13_195:                             # %for.end1441
                                        #   in Loop: Header=BB13_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB13_196:                             # %for.cond1458
                                        #   Parent Loop BB13_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB13_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB13_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB13_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB13_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB13_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB13_201
.LBB13_200:                             # %if.else1521
                                        #   in Loop: Header=BB13_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB13_201:                             # %if.end1574
                                        #   in Loop: Header=BB13_196 Depth=2
	jmp	.LBB13_206
.LBB13_202:                             # %if.else1575
                                        #   in Loop: Header=BB13_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB13_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB13_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB13_205
.LBB13_204:                             # %if.else1625
                                        #   in Loop: Header=BB13_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB13_205:                             # %if.end1672
                                        #   in Loop: Header=BB13_196 Depth=2
	jmp	.LBB13_206
.LBB13_206:                             # %if.end1673
                                        #   in Loop: Header=BB13_196 Depth=2
	jmp	.LBB13_207
.LBB13_207:                             # %for.inc1674
                                        #   in Loop: Header=BB13_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_196
.LBB13_208:                             # %for.end1676
                                        #   in Loop: Header=BB13_188 Depth=1
	jmp	.LBB13_209
.LBB13_209:                             # %for.inc1677
                                        #   in Loop: Header=BB13_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_188
.LBB13_210:                             # %for.end1679
	jmp	.LBB13_211
.LBB13_211:                             # %if.end1680
	jmp	.LBB13_212
.LBB13_212:                             # %if.end1681
	jmp	.LBB13_213
.LBB13_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB13_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_216 Depth 2
                                        #       Child Loop BB13_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB13_214 Depth=1
	movl	$0, -112(%rbp)
.LBB13_216:                             # %for.cond1689
                                        #   Parent Loop BB13_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB13_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB13_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB13_218:                             # %for.cond1722
                                        #   Parent Loop BB13_214 Depth=1
                                        #     Parent Loop BB13_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB13_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB13_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_223
.LBB13_222:                             # %if.then1731
                                        #   in Loop: Header=BB13_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_224
.LBB13_223:                             # %if.else1740
                                        #   in Loop: Header=BB13_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB13_224:                             # %if.end1749
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB13_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB13_230
.LBB13_226:                             # %if.else1761
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB13_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_229
.LBB13_228:                             # %if.else1792
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB13_229:                             # %if.end1820
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_230
.LBB13_230:                             # %if.end1821
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB13_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB13_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB13_234
.LBB13_233:                             # %if.then1839
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB13_235
.LBB13_234:                             # %if.else1841
                                        #   in Loop: Header=BB13_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB13_235:                             # %if.end1848
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB13_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB13_247
.LBB13_237:                             # %if.else1872
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB13_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB13_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB13_241
.LBB13_240:                             # %if.else1893
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB13_241:                             # %if.end1908
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_246
.LBB13_242:                             # %if.else1909
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB13_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB13_245
.LBB13_244:                             # %if.else1924
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB13_245:                             # %if.end1936
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_246
.LBB13_246:                             # %if.end1937
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_247
.LBB13_247:                             # %if.end1938
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_248
.LBB13_248:                             # %if.end1939
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB13_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB13_250:                             # %if.end1949
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_251
.LBB13_251:                             # %for.inc1950
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_218
.LBB13_252:                             # %for.end1952
                                        #   in Loop: Header=BB13_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB13_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB13_216
.LBB13_254:                             # %for.end1957
                                        #   in Loop: Header=BB13_214 Depth=1
	jmp	.LBB13_255
.LBB13_255:                             # %for.inc1958
                                        #   in Loop: Header=BB13_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB13_214
.LBB13_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB13_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB13_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB13_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_261 Depth 2
                                        #       Child Loop BB13_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB13_259 Depth=1
	movl	$0, -112(%rbp)
.LBB13_261:                             # %for.cond1972
                                        #   Parent Loop BB13_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB13_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB13_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB13_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB13_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB13_264:                             # %if.end2016
                                        #   in Loop: Header=BB13_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB13_265:                             # %for.cond2018
                                        #   Parent Loop BB13_259 Depth=1
                                        #     Parent Loop BB13_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB13_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB13_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB13_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB13_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB13_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_270
.LBB13_269:                             # %if.then2030
                                        #   in Loop: Header=BB13_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_271
.LBB13_270:                             # %if.else2039
                                        #   in Loop: Header=BB13_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB13_271:                             # %if.end2048
                                        #   in Loop: Header=BB13_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB13_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_265
.LBB13_273:                             # %for.end2060
                                        #   in Loop: Header=BB13_261 Depth=2
	jmp	.LBB13_274
.LBB13_274:                             # %for.inc2061
                                        #   in Loop: Header=BB13_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB13_261
.LBB13_275:                             # %for.end2063
                                        #   in Loop: Header=BB13_259 Depth=1
	jmp	.LBB13_276
.LBB13_276:                             # %for.inc2064
                                        #   in Loop: Header=BB13_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB13_259
.LBB13_277:                             # %for.end2066
	jmp	.LBB13_278
.LBB13_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB13_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB13_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB13_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_285 Depth 2
                                        #       Child Loop BB13_287 Depth 3
                                        #         Child Loop BB13_289 Depth 4
                                        #         Child Loop BB13_293 Depth 4
                                        #       Child Loop BB13_299 Depth 3
                                        #         Child Loop BB13_303 Depth 4
                                        #         Child Loop BB13_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB13_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB13_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_283:                             # %land.end2079
                                        #   in Loop: Header=BB13_281 Depth=1
	testb	$1, %al
	jne	.LBB13_284
	jmp	.LBB13_340
.LBB13_284:                             # %for.body2081
                                        #   in Loop: Header=BB13_281 Depth=1
	movl	$0, -28(%rbp)
.LBB13_285:                             # %for.cond2082
                                        #   Parent Loop BB13_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_287 Depth 3
                                        #         Child Loop BB13_289 Depth 4
                                        #         Child Loop BB13_293 Depth 4
                                        #       Child Loop BB13_299 Depth 3
                                        #         Child Loop BB13_303 Depth 4
                                        #         Child Loop BB13_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB13_285 Depth=2
	movl	$0, -12(%rbp)
.LBB13_287:                             # %for.cond2087
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_289 Depth 4
                                        #         Child Loop BB13_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB13_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB13_287 Depth=3
	movl	$0, -16(%rbp)
.LBB13_289:                             # %for.cond2091
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        #       Parent Loop BB13_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB13_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB13_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB13_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_289
.LBB13_292:                             # %for.end2106
                                        #   in Loop: Header=BB13_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB13_293:                             # %for.cond2125
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        #       Parent Loop BB13_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB13_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB13_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB13_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_293
.LBB13_296:                             # %for.end2156
                                        #   in Loop: Header=BB13_287 Depth=3
	jmp	.LBB13_297
.LBB13_297:                             # %for.inc2157
                                        #   in Loop: Header=BB13_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_287
.LBB13_298:                             # %for.end2159
                                        #   in Loop: Header=BB13_285 Depth=2
	movl	$0, -16(%rbp)
.LBB13_299:                             # %for.cond2160
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_303 Depth 4
                                        #         Child Loop BB13_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB13_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB13_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_301:                             # %land.end2166
                                        #   in Loop: Header=BB13_299 Depth=3
	testb	$1, %al
	jne	.LBB13_302
	jmp	.LBB13_336
.LBB13_302:                             # %for.body2168
                                        #   in Loop: Header=BB13_299 Depth=3
	movl	$0, -12(%rbp)
.LBB13_303:                             # %for.cond2169
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        #       Parent Loop BB13_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB13_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB13_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB13_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_303
.LBB13_306:                             # %for.end2184
                                        #   in Loop: Header=BB13_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB13_307:                             # %for.cond2203
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        #       Parent Loop BB13_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB13_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB13_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB13_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB13_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB13_312
.LBB13_311:                             # %cond.false2231
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB13_312:                             # %cond.end2250
                                        #   in Loop: Header=BB13_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB13_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB13_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB13_318
.LBB13_314:                             # %cond.false2257
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB13_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB13_317
.LBB13_316:                             # %cond.false2279
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB13_317:                             # %cond.end2298
                                        #   in Loop: Header=BB13_307 Depth=4
.LBB13_318:                             # %cond.end2300
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB13_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB13_321
.LBB13_320:                             # %cond.false2333
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB13_321:                             # %cond.end2352
                                        #   in Loop: Header=BB13_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB13_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB13_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB13_327
.LBB13_323:                             # %cond.false2359
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB13_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB13_326
.LBB13_325:                             # %cond.false2381
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB13_326:                             # %cond.end2400
                                        #   in Loop: Header=BB13_307 Depth=4
.LBB13_327:                             # %cond.end2402
                                        #   in Loop: Header=BB13_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB13_332
.LBB13_328:                             # %if.else2412
                                        #   in Loop: Header=BB13_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB13_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB13_331
.LBB13_330:                             # %if.else2439
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB13_331:                             # %if.end2468
                                        #   in Loop: Header=BB13_307 Depth=4
	jmp	.LBB13_332
.LBB13_332:                             # %if.end2469
                                        #   in Loop: Header=BB13_307 Depth=4
	jmp	.LBB13_333
.LBB13_333:                             # %for.inc2470
                                        #   in Loop: Header=BB13_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_307
.LBB13_334:                             # %for.end2472
                                        #   in Loop: Header=BB13_299 Depth=3
	jmp	.LBB13_335
.LBB13_335:                             # %for.inc2473
                                        #   in Loop: Header=BB13_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_299
.LBB13_336:                             # %for.end2475
                                        #   in Loop: Header=BB13_285 Depth=2
	jmp	.LBB13_337
.LBB13_337:                             # %for.inc2476
                                        #   in Loop: Header=BB13_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB13_285
.LBB13_338:                             # %for.end2478
                                        #   in Loop: Header=BB13_281 Depth=1
	jmp	.LBB13_339
.LBB13_339:                             # %for.inc2479
                                        #   in Loop: Header=BB13_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_281
.LBB13_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB13_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB13_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB13_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB13_342 Depth=1
	movl	$0, -16(%rbp)
.LBB13_344:                             # %for.cond2490
                                        #   Parent Loop BB13_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB13_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB13_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB13_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB13_348
.LBB13_347:                             # %if.else2518
                                        #   in Loop: Header=BB13_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB13_348:                             # %if.end2536
                                        #   in Loop: Header=BB13_344 Depth=2
	jmp	.LBB13_349
.LBB13_349:                             # %for.inc2537
                                        #   in Loop: Header=BB13_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_344
.LBB13_350:                             # %for.end2539
                                        #   in Loop: Header=BB13_342 Depth=1
	jmp	.LBB13_351
.LBB13_351:                             # %for.inc2540
                                        #   in Loop: Header=BB13_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_342
.LBB13_352:                             # %for.end2542
	jmp	.LBB13_353
.LBB13_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$1353207049, -380(%rbp) # imm = 0x50A84D09
	jne	.LBB13_355
.LBB13_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_354
.Lfunc_end13:
	.size	dct_chroma.4, .Lfunc_end13-dct_chroma.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.5
.LCPI14_0:
	.quad	4616189618054758400     # double 4
.LCPI14_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI14_2:
	.quad	4611686018427387904     # double 2
.LCPI14_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.5
	.p2align	4, 0x90
	.type	dct_luma_sp.5,@function
dct_luma_sp.5:                          # @dct_luma_sp.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI14_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1854727030, -216(%rbp) # imm = 0x6E8CE376
	movl	%edi, -136(%rbp)
	movl	%esi, -128(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-136(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	-200(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -188(%rbp)
	movl	-200(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -196(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI14_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -184(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -116(%rbp)
	movl	-184(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -140(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	$0, -12(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -16(%rbp)
.LBB14_3:                               # %for.cond38
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_3
.LBB14_6:                               # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_7
.LBB14_7:                               # %for.inc66
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_1
.LBB14_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB14_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB14_9 Depth=1
	movl	$0, -16(%rbp)
.LBB14_11:                              # %for.cond73
                                        #   Parent Loop BB14_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB14_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB14_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_11
.LBB14_14:                              # %for.end106
                                        #   in Loop: Header=BB14_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB14_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_9
.LBB14_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB14_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	$0, -12(%rbp)
.LBB14_19:                              # %for.cond144
                                        #   Parent Loop BB14_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_19
.LBB14_22:                              # %for.end177
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_17
.LBB14_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB14_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB14_25 Depth=1
	movl	$0, -16(%rbp)
.LBB14_27:                              # %for.cond215
                                        #   Parent Loop BB14_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB14_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB14_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_27
.LBB14_30:                              # %for.end244
                                        #   in Loop: Header=BB14_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB14_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_25
.LBB14_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB14_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB14_33 Depth=1
	movl	$0, -12(%rbp)
.LBB14_35:                              # %for.cond278
                                        #   Parent Loop BB14_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB14_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB14_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_35
.LBB14_38:                              # %for.end307
                                        #   in Loop: Header=BB14_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB14_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_33
.LBB14_40:                              # %for.end336
	movl	$0, -208(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -68(%rbp)
.LBB14_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB14_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB14_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB14_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB14_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB14_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB14_46
.LBB14_45:                              # %if.then
                                        #   in Loop: Header=BB14_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_47
.LBB14_46:                              # %if.else
                                        #   in Loop: Header=BB14_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB14_47:                              # %if.end
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB14_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB14_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB14_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB14_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB14_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB14_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-24(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB14_55
	jp	.LBB14_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB14_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB14_54
.LBB14_53:                              # %cond.false
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-56(%rbp), %eax
.LBB14_54:                              # %cond.end
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB14_59
.LBB14_55:                              # %if.else500
                                        #   in Loop: Header=BB14_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB14_58
.LBB14_57:                              # %if.else504
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB14_58:                              # %if.end505
                                        #   in Loop: Header=BB14_41 Depth=1
	jmp	.LBB14_59
.LBB14_59:                              # %if.end506
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB14_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB14_62
.LBB14_61:                              # %cond.false510
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-124(%rbp), %eax
.LBB14_62:                              # %cond.end511
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	%eax, -120(%rbp)
	jmp	.LBB14_73
.LBB14_63:                              # %if.else513
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB14_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB14_72
.LBB14_65:                              # %if.else517
                                        #   in Loop: Header=BB14_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB14_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB14_68
.LBB14_67:                              # %cond.false521
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-56(%rbp), %eax
.LBB14_68:                              # %cond.end522
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB14_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB14_71
.LBB14_70:                              # %cond.false527
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-124(%rbp), %eax
.LBB14_71:                              # %cond.end528
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	%eax, -120(%rbp)
.LBB14_72:                              # %if.end530
                                        #   in Loop: Header=BB14_41 Depth=1
	jmp	.LBB14_73
.LBB14_73:                              # %if.end531
                                        #   in Loop: Header=BB14_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB14_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	$1, -208(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB14_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB14_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB14_77
.LBB14_76:                              # %if.else539
                                        #   in Loop: Header=BB14_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB14_77:                              # %if.end546
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB14_78:                              # %if.end568
                                        #   in Loop: Header=BB14_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-184(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB14_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB14_41
.LBB14_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB14_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_83 Depth 2
                                        #     Child Loop BB14_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	$0, -16(%rbp)
.LBB14_83:                              # %for.cond607
                                        #   Parent Loop BB14_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB14_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB14_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_83
.LBB14_86:                              # %for.end620
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB14_87:                              # %for.cond639
                                        #   Parent Loop BB14_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB14_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB14_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_87
.LBB14_90:                              # %for.end666
                                        #   in Loop: Header=BB14_81 Depth=1
	jmp	.LBB14_91
.LBB14_91:                              # %for.inc667
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_81
.LBB14_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB14_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_95 Depth 2
                                        #     Child Loop BB14_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB14_93 Depth=1
	movl	$0, -12(%rbp)
.LBB14_95:                              # %for.cond674
                                        #   Parent Loop BB14_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB14_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB14_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_95
.LBB14_98:                              # %for.end687
                                        #   in Loop: Header=BB14_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB14_99:                              # %for.cond706
                                        #   Parent Loop BB14_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB14_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB14_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB14_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB14_103
.LBB14_102:                             # %cond.false721
                                        #   in Loop: Header=BB14_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB14_103:                             # %cond.end729
                                        #   in Loop: Header=BB14_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB14_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB14_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_109
.LBB14_105:                             # %cond.false735
                                        #   in Loop: Header=BB14_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB14_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB14_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_108
.LBB14_107:                             # %cond.false746
                                        #   in Loop: Header=BB14_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB14_108:                             # %cond.end754
                                        #   in Loop: Header=BB14_99 Depth=2
.LBB14_109:                             # %cond.end756
                                        #   in Loop: Header=BB14_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB14_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB14_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB14_112
.LBB14_111:                             # %cond.false774
                                        #   in Loop: Header=BB14_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB14_112:                             # %cond.end782
                                        #   in Loop: Header=BB14_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB14_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB14_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_118
.LBB14_114:                             # %cond.false788
                                        #   in Loop: Header=BB14_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB14_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB14_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_117
.LBB14_116:                             # %cond.false799
                                        #   in Loop: Header=BB14_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB14_117:                             # %cond.end807
                                        #   in Loop: Header=BB14_99 Depth=2
.LBB14_118:                             # %cond.end809
                                        #   in Loop: Header=BB14_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB14_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_99
.LBB14_120:                             # %for.end818
                                        #   in Loop: Header=BB14_93 Depth=1
	jmp	.LBB14_121
.LBB14_121:                             # %for.inc819
                                        #   in Loop: Header=BB14_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_93
.LBB14_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB14_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB14_123 Depth=1
	movl	$0, -16(%rbp)
.LBB14_125:                             # %for.cond826
                                        #   Parent Loop BB14_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB14_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-136(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB14_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_125
.LBB14_128:                             # %for.end846
                                        #   in Loop: Header=BB14_123 Depth=1
	jmp	.LBB14_129
.LBB14_129:                             # %for.inc847
                                        #   in Loop: Header=BB14_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_123
.LBB14_130:                             # %for.end849
	movl	-208(%rbp), %ebx
	cmpl	$1854727030, -216(%rbp) # imm = 0x6E8CE376
	jne	.LBB14_132
.LBB14_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_131
.Lfunc_end14:
	.size	dct_luma_sp.5, .Lfunc_end14-dct_luma_sp.5
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.6         # -- Begin function dct_chroma4x4.6
	.p2align	4, 0x90
	.type	dct_chroma4x4.6,@function
dct_chroma4x4.6:                        # @dct_chroma4x4.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1944834524, -148(%rbp) # imm = 0x73EBD1DC
	movl	%edi, -28(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB15_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB15_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB15_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -84(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB15_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB15_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB15_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB15_8
.LBB15_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB15_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB15_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB15_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB15_10 Depth=1
	movl	$0, -16(%rbp)
.LBB15_12:                              # %for.cond31
                                        #   Parent Loop BB15_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB15_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB15_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_12
.LBB15_15:                              # %for.end
                                        #   in Loop: Header=BB15_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB15_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_10
.LBB15_17:                              # %for.end92
	jmp	.LBB15_18
.LBB15_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB15_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB15_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB15_20 Depth=1
	movl	$0, -12(%rbp)
.LBB15_22:                              # %for.cond99
                                        #   Parent Loop BB15_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB15_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB15_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_22
.LBB15_25:                              # %for.end132
                                        #   in Loop: Header=BB15_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB15_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_20
.LBB15_27:                              # %for.end165
	jmp	.LBB15_28
.LBB15_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB15_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB15_34
.LBB15_30:                              # %if.else
	cmpl	$1, -84(%rbp)
	jne	.LBB15_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_33
.LBB15_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB15_33:                              # %if.end213
	jmp	.LBB15_34
.LBB15_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB15_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB15_46
.LBB15_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB15_41
# %bb.37:                               # %if.then248
	cmpl	$1, -84(%rbp)
	jne	.LBB15_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB15_40
.LBB15_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB15_40:                              # %if.end290
	jmp	.LBB15_45
.LBB15_41:                              # %if.else291
	cmpl	$1, -84(%rbp)
	jne	.LBB15_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB15_44
.LBB15_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB15_44:                              # %if.end328
	jmp	.LBB15_45
.LBB15_45:                              # %if.end329
	jmp	.LBB15_46
.LBB15_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB15_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB15_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB15_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -80(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB15_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB15_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB15_54
.LBB15_50:                              # %if.else352
                                        #   in Loop: Header=BB15_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB15_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB15_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_53
.LBB15_52:                              # %if.else381
                                        #   in Loop: Header=BB15_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB15_53:                              # %if.end407
                                        #   in Loop: Header=BB15_47 Depth=1
	jmp	.LBB15_54
.LBB15_54:                              # %if.end408
                                        #   in Loop: Header=BB15_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB15_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB15_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB15_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB15_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB15_58
.LBB15_57:                              # %if.then415
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	$1, -132(%rbp)
.LBB15_58:                              # %if.end416
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB15_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB15_70
.LBB15_60:                              # %if.else436
                                        #   in Loop: Header=BB15_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB15_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB15_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB15_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB15_64
.LBB15_63:                              # %if.else457
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB15_64:                              # %if.end472
                                        #   in Loop: Header=BB15_47 Depth=1
	jmp	.LBB15_69
.LBB15_65:                              # %if.else473
                                        #   in Loop: Header=BB15_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB15_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB15_68
.LBB15_67:                              # %if.else488
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB15_68:                              # %if.end500
                                        #   in Loop: Header=BB15_47 Depth=1
	jmp	.LBB15_69
.LBB15_69:                              # %if.end501
                                        #   in Loop: Header=BB15_47 Depth=1
	jmp	.LBB15_70
.LBB15_70:                              # %if.end502
                                        #   in Loop: Header=BB15_47 Depth=1
	jmp	.LBB15_71
.LBB15_71:                              # %if.end503
                                        #   in Loop: Header=BB15_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB15_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_73:                              # %if.end511
                                        #   in Loop: Header=BB15_47 Depth=1
	jmp	.LBB15_74
.LBB15_74:                              # %for.inc512
                                        #   in Loop: Header=BB15_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB15_47
.LBB15_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB15_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB15_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_79 Depth 2
                                        #     Child Loop BB15_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB15_77 Depth=1
	movl	$0, -16(%rbp)
.LBB15_79:                              # %for.cond523
                                        #   Parent Loop BB15_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB15_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB15_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_79
.LBB15_82:                              # %for.end536
                                        #   in Loop: Header=BB15_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB15_83:                              # %for.cond555
                                        #   Parent Loop BB15_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB15_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB15_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_83
.LBB15_86:                              # %for.end582
                                        #   in Loop: Header=BB15_77 Depth=1
	jmp	.LBB15_87
.LBB15_87:                              # %for.inc583
                                        #   in Loop: Header=BB15_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_77
.LBB15_88:                              # %for.end585
	jmp	.LBB15_89
.LBB15_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB15_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB15_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_93 Depth 2
                                        #     Child Loop BB15_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB15_91 Depth=1
	movl	$0, -12(%rbp)
.LBB15_93:                              # %for.cond593
                                        #   Parent Loop BB15_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB15_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB15_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_93
.LBB15_96:                              # %for.end606
                                        #   in Loop: Header=BB15_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB15_97:                              # %for.cond625
                                        #   Parent Loop BB15_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB15_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB15_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_97
.LBB15_100:                             # %for.end656
                                        #   in Loop: Header=BB15_91 Depth=1
	jmp	.LBB15_101
.LBB15_101:                             # %for.inc657
                                        #   in Loop: Header=BB15_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_91
.LBB15_102:                             # %for.end659
	jmp	.LBB15_103
.LBB15_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1944834524, -148(%rbp) # imm = 0x73EBD1DC
	jne	.LBB15_105
.LBB15_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_104
.Lfunc_end15:
	.size	dct_chroma4x4.6, .Lfunc_end15-dct_chroma4x4.6
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.7            # -- Begin function dct_chroma.7
	.p2align	4, 0x90
	.type	dct_chroma.7,@function
dct_chroma.7:                           # @dct_chroma.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1498983963, -380(%rbp) # imm = 0x5958AE1B
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB16_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB16_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB16_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB16_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB16_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB16_11
.LBB16_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB16_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB16_10
.LBB16_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB16_10:                              # %cond.end
.LBB16_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB16_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB16_14
.LBB16_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB16_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB16_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB16_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB16_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_19 Depth 2
                                        #       Child Loop BB16_21 Depth 3
                                        #         Child Loop BB16_25 Depth 4
                                        #       Child Loop BB16_31 Depth 3
                                        #         Child Loop BB16_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB16_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	$0, -24(%rbp)
.LBB16_19:                              # %for.cond56
                                        #   Parent Loop BB16_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_21 Depth 3
                                        #         Child Loop BB16_25 Depth 4
                                        #       Child Loop BB16_31 Depth 3
                                        #         Child Loop BB16_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB16_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$0, -12(%rbp)
.LBB16_21:                              # %for.cond60
                                        #   Parent Loop BB16_17 Depth=1
                                        #     Parent Loop BB16_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB16_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB16_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB16_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB16_23:                              # %land.end64
                                        #   in Loop: Header=BB16_21 Depth=3
	testb	$1, %al
	jne	.LBB16_24
	jmp	.LBB16_30
.LBB16_24:                              # %for.body66
                                        #   in Loop: Header=BB16_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB16_25:                              # %for.cond68
                                        #   Parent Loop BB16_17 Depth=1
                                        #     Parent Loop BB16_19 Depth=2
                                        #       Parent Loop BB16_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB16_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB16_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB16_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_25
.LBB16_28:                              # %for.end
                                        #   in Loop: Header=BB16_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB16_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_21
.LBB16_30:                              # %for.end141
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$0, -16(%rbp)
.LBB16_31:                              # %for.cond142
                                        #   Parent Loop BB16_17 Depth=1
                                        #     Parent Loop BB16_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB16_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB16_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB16_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB16_33:                              # %land.end148
                                        #   in Loop: Header=BB16_31 Depth=3
	testb	$1, %al
	jne	.LBB16_34
	jmp	.LBB16_40
.LBB16_34:                              # %for.body150
                                        #   in Loop: Header=BB16_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB16_35:                              # %for.cond152
                                        #   Parent Loop BB16_17 Depth=1
                                        #     Parent Loop BB16_19 Depth=2
                                        #       Parent Loop BB16_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB16_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB16_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB16_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_35
.LBB16_38:                              # %for.end189
                                        #   in Loop: Header=BB16_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB16_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_31
.LBB16_40:                              # %for.end230
                                        #   in Loop: Header=BB16_19 Depth=2
	jmp	.LBB16_41
.LBB16_41:                              # %for.inc231
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_19
.LBB16_42:                              # %for.end233
                                        #   in Loop: Header=BB16_17 Depth=1
	jmp	.LBB16_43
.LBB16_43:                              # %for.inc234
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB16_17
.LBB16_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB16_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB16_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB16_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB16_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB16_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB16_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_50
.LBB16_49:                              # %if.else
                                        #   in Loop: Header=BB16_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB16_50:                              # %if.end349
                                        #   in Loop: Header=BB16_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB16_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB16_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB16_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB16_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB16_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB16_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB16_54:                              # %if.end359
                                        #   in Loop: Header=BB16_46 Depth=1
	jmp	.LBB16_55
.LBB16_55:                              # %if.end360
                                        #   in Loop: Header=BB16_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB16_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB16_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB16_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB16_46 Depth=1
	movl	$1, %eax
	jmp	.LBB16_59
.LBB16_58:                              # %cond.false370
                                        #   in Loop: Header=BB16_46 Depth=1
	movl	-136(%rbp), %eax
.LBB16_59:                              # %cond.end371
                                        #   in Loop: Header=BB16_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB16_60:                              # %if.end384
                                        #   in Loop: Header=BB16_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB16_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB16_46
.LBB16_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB16_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB16_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB16_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB16_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB16_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB16_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB16_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB16_68
.LBB16_67:                              # %if.else447
                                        #   in Loop: Header=BB16_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB16_68:                              # %if.end461
                                        #   in Loop: Header=BB16_63 Depth=1
	jmp	.LBB16_73
.LBB16_69:                              # %if.else462
                                        #   in Loop: Header=BB16_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB16_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB16_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB16_72
.LBB16_71:                              # %if.else479
                                        #   in Loop: Header=BB16_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB16_72:                              # %if.end493
                                        #   in Loop: Header=BB16_63 Depth=1
	jmp	.LBB16_73
.LBB16_73:                              # %if.end494
                                        #   in Loop: Header=BB16_63 Depth=1
	jmp	.LBB16_74
.LBB16_74:                              # %for.inc495
                                        #   in Loop: Header=BB16_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_63
.LBB16_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB16_213
.LBB16_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB16_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB16_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB16_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB16_78 Depth=1
	movl	$0, -16(%rbp)
.LBB16_80:                              # %for.cond523
                                        #   Parent Loop BB16_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB16_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB16_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB16_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_80
.LBB16_83:                              # %for.end541
                                        #   in Loop: Header=BB16_78 Depth=1
	jmp	.LBB16_84
.LBB16_84:                              # %for.inc542
                                        #   in Loop: Header=BB16_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_78
.LBB16_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB16_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB16_86 Depth=1
	movl	$0, -12(%rbp)
.LBB16_88:                              # %for.cond605
                                        #   Parent Loop BB16_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB16_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB16_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_88
.LBB16_91:                              # %for.end634
                                        #   in Loop: Header=BB16_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB16_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_86
.LBB16_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB16_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB16_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB16_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB16_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB16_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_98
.LBB16_97:                              # %if.else700
                                        #   in Loop: Header=BB16_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB16_98:                              # %if.end723
                                        #   in Loop: Header=BB16_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB16_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB16_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB16_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB16_94 Depth=1
	movl	$1, %eax
	jmp	.LBB16_102
.LBB16_101:                             # %cond.false735
                                        #   in Loop: Header=BB16_94 Depth=1
	movl	-136(%rbp), %eax
.LBB16_102:                             # %cond.end736
                                        #   in Loop: Header=BB16_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB16_103:                             # %if.end748
                                        #   in Loop: Header=BB16_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB16_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB16_94
.LBB16_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB16_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_108 Depth 2
                                        #     Child Loop BB16_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB16_106 Depth=1
	movl	$0, -12(%rbp)
.LBB16_108:                             # %for.cond823
                                        #   Parent Loop BB16_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB16_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB16_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_108
.LBB16_111:                             # %for.end835
                                        #   in Loop: Header=BB16_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB16_112:                             # %for.cond852
                                        #   Parent Loop BB16_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB16_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB16_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB16_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB16_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB16_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB16_117
.LBB16_116:                             # %if.else915
                                        #   in Loop: Header=BB16_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB16_117:                             # %if.end968
                                        #   in Loop: Header=BB16_112 Depth=2
	jmp	.LBB16_122
.LBB16_118:                             # %if.else969
                                        #   in Loop: Header=BB16_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB16_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB16_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB16_121
.LBB16_120:                             # %if.else1019
                                        #   in Loop: Header=BB16_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB16_121:                             # %if.end1066
                                        #   in Loop: Header=BB16_112 Depth=2
	jmp	.LBB16_122
.LBB16_122:                             # %if.end1067
                                        #   in Loop: Header=BB16_112 Depth=2
	jmp	.LBB16_123
.LBB16_123:                             # %for.inc1068
                                        #   in Loop: Header=BB16_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_112
.LBB16_124:                             # %for.end1070
                                        #   in Loop: Header=BB16_106 Depth=1
	jmp	.LBB16_125
.LBB16_125:                             # %for.inc1071
                                        #   in Loop: Header=BB16_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_106
.LBB16_126:                             # %for.end1073
	jmp	.LBB16_212
.LBB16_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB16_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB16_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB16_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB16_129 Depth=1
	movl	$0, -16(%rbp)
.LBB16_131:                             # %for.cond1083
                                        #   Parent Loop BB16_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB16_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB16_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB16_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_131
.LBB16_134:                             # %for.end1101
                                        #   in Loop: Header=BB16_129 Depth=1
	jmp	.LBB16_135
.LBB16_135:                             # %for.inc1102
                                        #   in Loop: Header=BB16_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_129
.LBB16_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB16_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB16_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB16_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB16_139:                             # %land.end1111
                                        #   in Loop: Header=BB16_137 Depth=1
	testb	$1, %al
	jne	.LBB16_140
	jmp	.LBB16_146
.LBB16_140:                             # %for.body1113
                                        #   in Loop: Header=BB16_137 Depth=1
	movl	$0, -16(%rbp)
.LBB16_141:                             # %for.cond1114
                                        #   Parent Loop BB16_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB16_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB16_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_141
.LBB16_144:                             # %for.end1143
                                        #   in Loop: Header=BB16_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB16_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_137
.LBB16_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB16_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB16_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB16_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB16_149:                             # %land.end1177
                                        #   in Loop: Header=BB16_147 Depth=1
	testb	$1, %al
	jne	.LBB16_150
	jmp	.LBB16_156
.LBB16_150:                             # %for.body1179
                                        #   in Loop: Header=BB16_147 Depth=1
	movl	$0, -12(%rbp)
.LBB16_151:                             # %for.cond1180
                                        #   Parent Loop BB16_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB16_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB16_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_151
.LBB16_154:                             # %for.end1209
                                        #   in Loop: Header=BB16_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB16_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_147
.LBB16_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB16_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB16_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB16_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB16_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB16_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB16_164
.LBB16_160:                             # %if.else1261
                                        #   in Loop: Header=BB16_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB16_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB16_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_163
.LBB16_162:                             # %if.else1287
                                        #   in Loop: Header=BB16_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB16_163:                             # %if.end1310
                                        #   in Loop: Header=BB16_157 Depth=1
	jmp	.LBB16_164
.LBB16_164:                             # %if.end1311
                                        #   in Loop: Header=BB16_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB16_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB16_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB16_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB16_157 Depth=1
	movl	$1, %eax
	jmp	.LBB16_168
.LBB16_167:                             # %cond.false1322
                                        #   in Loop: Header=BB16_157 Depth=1
	movl	-136(%rbp), %eax
.LBB16_168:                             # %cond.end1323
                                        #   in Loop: Header=BB16_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB16_169:                             # %if.end1335
                                        #   in Loop: Header=BB16_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB16_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB16_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB16_171:                             # %if.end1347
                                        #   in Loop: Header=BB16_157 Depth=1
	jmp	.LBB16_172
.LBB16_172:                             # %for.inc1348
                                        #   in Loop: Header=BB16_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB16_157
.LBB16_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB16_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_178 Depth 2
                                        #     Child Loop BB16_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB16_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB16_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB16_176:                             # %land.end1359
                                        #   in Loop: Header=BB16_174 Depth=1
	testb	$1, %al
	jne	.LBB16_177
	jmp	.LBB16_187
.LBB16_177:                             # %for.body1361
                                        #   in Loop: Header=BB16_174 Depth=1
	movl	$0, -16(%rbp)
.LBB16_178:                             # %for.cond1362
                                        #   Parent Loop BB16_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB16_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB16_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_178
.LBB16_181:                             # %for.end1374
                                        #   in Loop: Header=BB16_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB16_182:                             # %for.cond1391
                                        #   Parent Loop BB16_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB16_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB16_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_182
.LBB16_185:                             # %for.end1416
                                        #   in Loop: Header=BB16_174 Depth=1
	jmp	.LBB16_186
.LBB16_186:                             # %for.inc1417
                                        #   in Loop: Header=BB16_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_174
.LBB16_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB16_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_192 Depth 2
                                        #     Child Loop BB16_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB16_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB16_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB16_190:                             # %land.end1426
                                        #   in Loop: Header=BB16_188 Depth=1
	testb	$1, %al
	jne	.LBB16_191
	jmp	.LBB16_210
.LBB16_191:                             # %for.body1428
                                        #   in Loop: Header=BB16_188 Depth=1
	movl	$0, -12(%rbp)
.LBB16_192:                             # %for.cond1429
                                        #   Parent Loop BB16_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB16_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB16_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_192
.LBB16_195:                             # %for.end1441
                                        #   in Loop: Header=BB16_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB16_196:                             # %for.cond1458
                                        #   Parent Loop BB16_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB16_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB16_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB16_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB16_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB16_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB16_201
.LBB16_200:                             # %if.else1521
                                        #   in Loop: Header=BB16_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB16_201:                             # %if.end1574
                                        #   in Loop: Header=BB16_196 Depth=2
	jmp	.LBB16_206
.LBB16_202:                             # %if.else1575
                                        #   in Loop: Header=BB16_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB16_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB16_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB16_205
.LBB16_204:                             # %if.else1625
                                        #   in Loop: Header=BB16_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB16_205:                             # %if.end1672
                                        #   in Loop: Header=BB16_196 Depth=2
	jmp	.LBB16_206
.LBB16_206:                             # %if.end1673
                                        #   in Loop: Header=BB16_196 Depth=2
	jmp	.LBB16_207
.LBB16_207:                             # %for.inc1674
                                        #   in Loop: Header=BB16_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_196
.LBB16_208:                             # %for.end1676
                                        #   in Loop: Header=BB16_188 Depth=1
	jmp	.LBB16_209
.LBB16_209:                             # %for.inc1677
                                        #   in Loop: Header=BB16_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_188
.LBB16_210:                             # %for.end1679
	jmp	.LBB16_211
.LBB16_211:                             # %if.end1680
	jmp	.LBB16_212
.LBB16_212:                             # %if.end1681
	jmp	.LBB16_213
.LBB16_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB16_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_216 Depth 2
                                        #       Child Loop BB16_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB16_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB16_214 Depth=1
	movl	$0, -112(%rbp)
.LBB16_216:                             # %for.cond1689
                                        #   Parent Loop BB16_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB16_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB16_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB16_218:                             # %for.cond1722
                                        #   Parent Loop BB16_214 Depth=1
                                        #     Parent Loop BB16_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB16_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB16_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB16_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB16_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB16_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB16_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB16_223
.LBB16_222:                             # %if.then1731
                                        #   in Loop: Header=BB16_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_224
.LBB16_223:                             # %if.else1740
                                        #   in Loop: Header=BB16_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB16_224:                             # %if.end1749
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB16_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB16_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB16_230
.LBB16_226:                             # %if.else1761
                                        #   in Loop: Header=BB16_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB16_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB16_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_229
.LBB16_228:                             # %if.else1792
                                        #   in Loop: Header=BB16_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB16_229:                             # %if.end1820
                                        #   in Loop: Header=BB16_218 Depth=3
	jmp	.LBB16_230
.LBB16_230:                             # %if.end1821
                                        #   in Loop: Header=BB16_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB16_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB16_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB16_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB16_234
.LBB16_233:                             # %if.then1839
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB16_235
.LBB16_234:                             # %if.else1841
                                        #   in Loop: Header=BB16_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB16_235:                             # %if.end1848
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB16_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB16_247
.LBB16_237:                             # %if.else1872
                                        #   in Loop: Header=BB16_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB16_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB16_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB16_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB16_241
.LBB16_240:                             # %if.else1893
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB16_241:                             # %if.end1908
                                        #   in Loop: Header=BB16_218 Depth=3
	jmp	.LBB16_246
.LBB16_242:                             # %if.else1909
                                        #   in Loop: Header=BB16_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB16_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB16_245
.LBB16_244:                             # %if.else1924
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB16_245:                             # %if.end1936
                                        #   in Loop: Header=BB16_218 Depth=3
	jmp	.LBB16_246
.LBB16_246:                             # %if.end1937
                                        #   in Loop: Header=BB16_218 Depth=3
	jmp	.LBB16_247
.LBB16_247:                             # %if.end1938
                                        #   in Loop: Header=BB16_218 Depth=3
	jmp	.LBB16_248
.LBB16_248:                             # %if.end1939
                                        #   in Loop: Header=BB16_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB16_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB16_250:                             # %if.end1949
                                        #   in Loop: Header=BB16_218 Depth=3
	jmp	.LBB16_251
.LBB16_251:                             # %for.inc1950
                                        #   in Loop: Header=BB16_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB16_218
.LBB16_252:                             # %for.end1952
                                        #   in Loop: Header=BB16_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB16_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB16_216
.LBB16_254:                             # %for.end1957
                                        #   in Loop: Header=BB16_214 Depth=1
	jmp	.LBB16_255
.LBB16_255:                             # %for.inc1958
                                        #   in Loop: Header=BB16_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB16_214
.LBB16_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB16_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB16_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB16_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_261 Depth 2
                                        #       Child Loop BB16_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB16_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB16_259 Depth=1
	movl	$0, -112(%rbp)
.LBB16_261:                             # %for.cond1972
                                        #   Parent Loop BB16_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB16_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB16_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB16_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB16_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB16_264:                             # %if.end2016
                                        #   in Loop: Header=BB16_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB16_265:                             # %for.cond2018
                                        #   Parent Loop BB16_259 Depth=1
                                        #     Parent Loop BB16_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB16_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB16_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB16_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB16_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB16_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB16_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB16_270
.LBB16_269:                             # %if.then2030
                                        #   in Loop: Header=BB16_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_271
.LBB16_270:                             # %if.else2039
                                        #   in Loop: Header=BB16_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB16_271:                             # %if.end2048
                                        #   in Loop: Header=BB16_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB16_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB16_265
.LBB16_273:                             # %for.end2060
                                        #   in Loop: Header=BB16_261 Depth=2
	jmp	.LBB16_274
.LBB16_274:                             # %for.inc2061
                                        #   in Loop: Header=BB16_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB16_261
.LBB16_275:                             # %for.end2063
                                        #   in Loop: Header=BB16_259 Depth=1
	jmp	.LBB16_276
.LBB16_276:                             # %for.inc2064
                                        #   in Loop: Header=BB16_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB16_259
.LBB16_277:                             # %for.end2066
	jmp	.LBB16_278
.LBB16_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB16_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB16_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB16_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_285 Depth 2
                                        #       Child Loop BB16_287 Depth 3
                                        #         Child Loop BB16_289 Depth 4
                                        #         Child Loop BB16_293 Depth 4
                                        #       Child Loop BB16_299 Depth 3
                                        #         Child Loop BB16_303 Depth 4
                                        #         Child Loop BB16_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB16_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB16_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB16_283:                             # %land.end2079
                                        #   in Loop: Header=BB16_281 Depth=1
	testb	$1, %al
	jne	.LBB16_284
	jmp	.LBB16_340
.LBB16_284:                             # %for.body2081
                                        #   in Loop: Header=BB16_281 Depth=1
	movl	$0, -24(%rbp)
.LBB16_285:                             # %for.cond2082
                                        #   Parent Loop BB16_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_287 Depth 3
                                        #         Child Loop BB16_289 Depth 4
                                        #         Child Loop BB16_293 Depth 4
                                        #       Child Loop BB16_299 Depth 3
                                        #         Child Loop BB16_303 Depth 4
                                        #         Child Loop BB16_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB16_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB16_285 Depth=2
	movl	$0, -12(%rbp)
.LBB16_287:                             # %for.cond2087
                                        #   Parent Loop BB16_281 Depth=1
                                        #     Parent Loop BB16_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB16_289 Depth 4
                                        #         Child Loop BB16_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB16_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB16_287 Depth=3
	movl	$0, -16(%rbp)
.LBB16_289:                             # %for.cond2091
                                        #   Parent Loop BB16_281 Depth=1
                                        #     Parent Loop BB16_285 Depth=2
                                        #       Parent Loop BB16_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB16_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB16_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB16_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_289
.LBB16_292:                             # %for.end2106
                                        #   in Loop: Header=BB16_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB16_293:                             # %for.cond2125
                                        #   Parent Loop BB16_281 Depth=1
                                        #     Parent Loop BB16_285 Depth=2
                                        #       Parent Loop BB16_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB16_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB16_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB16_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_293
.LBB16_296:                             # %for.end2156
                                        #   in Loop: Header=BB16_287 Depth=3
	jmp	.LBB16_297
.LBB16_297:                             # %for.inc2157
                                        #   in Loop: Header=BB16_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_287
.LBB16_298:                             # %for.end2159
                                        #   in Loop: Header=BB16_285 Depth=2
	movl	$0, -16(%rbp)
.LBB16_299:                             # %for.cond2160
                                        #   Parent Loop BB16_281 Depth=1
                                        #     Parent Loop BB16_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB16_303 Depth 4
                                        #         Child Loop BB16_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB16_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB16_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB16_301:                             # %land.end2166
                                        #   in Loop: Header=BB16_299 Depth=3
	testb	$1, %al
	jne	.LBB16_302
	jmp	.LBB16_336
.LBB16_302:                             # %for.body2168
                                        #   in Loop: Header=BB16_299 Depth=3
	movl	$0, -12(%rbp)
.LBB16_303:                             # %for.cond2169
                                        #   Parent Loop BB16_281 Depth=1
                                        #     Parent Loop BB16_285 Depth=2
                                        #       Parent Loop BB16_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB16_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB16_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB16_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_303
.LBB16_306:                             # %for.end2184
                                        #   in Loop: Header=BB16_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB16_307:                             # %for.cond2203
                                        #   Parent Loop BB16_281 Depth=1
                                        #     Parent Loop BB16_285 Depth=2
                                        #       Parent Loop BB16_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB16_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB16_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB16_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB16_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB16_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB16_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB16_312
.LBB16_311:                             # %cond.false2231
                                        #   in Loop: Header=BB16_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB16_312:                             # %cond.end2250
                                        #   in Loop: Header=BB16_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB16_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB16_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB16_318
.LBB16_314:                             # %cond.false2257
                                        #   in Loop: Header=BB16_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB16_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB16_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB16_317
.LBB16_316:                             # %cond.false2279
                                        #   in Loop: Header=BB16_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB16_317:                             # %cond.end2298
                                        #   in Loop: Header=BB16_307 Depth=4
.LBB16_318:                             # %cond.end2300
                                        #   in Loop: Header=BB16_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB16_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB16_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB16_321
.LBB16_320:                             # %cond.false2333
                                        #   in Loop: Header=BB16_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB16_321:                             # %cond.end2352
                                        #   in Loop: Header=BB16_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB16_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB16_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB16_327
.LBB16_323:                             # %cond.false2359
                                        #   in Loop: Header=BB16_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB16_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB16_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB16_326
.LBB16_325:                             # %cond.false2381
                                        #   in Loop: Header=BB16_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB16_326:                             # %cond.end2400
                                        #   in Loop: Header=BB16_307 Depth=4
.LBB16_327:                             # %cond.end2402
                                        #   in Loop: Header=BB16_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB16_332
.LBB16_328:                             # %if.else2412
                                        #   in Loop: Header=BB16_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB16_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB16_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB16_331
.LBB16_330:                             # %if.else2439
                                        #   in Loop: Header=BB16_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB16_331:                             # %if.end2468
                                        #   in Loop: Header=BB16_307 Depth=4
	jmp	.LBB16_332
.LBB16_332:                             # %if.end2469
                                        #   in Loop: Header=BB16_307 Depth=4
	jmp	.LBB16_333
.LBB16_333:                             # %for.inc2470
                                        #   in Loop: Header=BB16_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_307
.LBB16_334:                             # %for.end2472
                                        #   in Loop: Header=BB16_299 Depth=3
	jmp	.LBB16_335
.LBB16_335:                             # %for.inc2473
                                        #   in Loop: Header=BB16_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_299
.LBB16_336:                             # %for.end2475
                                        #   in Loop: Header=BB16_285 Depth=2
	jmp	.LBB16_337
.LBB16_337:                             # %for.inc2476
                                        #   in Loop: Header=BB16_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_285
.LBB16_338:                             # %for.end2478
                                        #   in Loop: Header=BB16_281 Depth=1
	jmp	.LBB16_339
.LBB16_339:                             # %for.inc2479
                                        #   in Loop: Header=BB16_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB16_281
.LBB16_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB16_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB16_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB16_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB16_342 Depth=1
	movl	$0, -16(%rbp)
.LBB16_344:                             # %for.cond2490
                                        #   Parent Loop BB16_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB16_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB16_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB16_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB16_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB16_348
.LBB16_347:                             # %if.else2518
                                        #   in Loop: Header=BB16_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB16_348:                             # %if.end2536
                                        #   in Loop: Header=BB16_344 Depth=2
	jmp	.LBB16_349
.LBB16_349:                             # %for.inc2537
                                        #   in Loop: Header=BB16_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_344
.LBB16_350:                             # %for.end2539
                                        #   in Loop: Header=BB16_342 Depth=1
	jmp	.LBB16_351
.LBB16_351:                             # %for.inc2540
                                        #   in Loop: Header=BB16_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_342
.LBB16_352:                             # %for.end2542
	jmp	.LBB16_353
.LBB16_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$1498983963, -380(%rbp) # imm = 0x5958AE1B
	jne	.LBB16_355
.LBB16_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_354
.Lfunc_end16:
	.size	dct_chroma.7, .Lfunc_end16-dct_chroma.7
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.8         # -- Begin function dct_chroma_DC.8
	.p2align	4, 0x90
	.type	dct_chroma_DC.8,@function
dct_chroma_DC.8:                        # @dct_chroma_DC.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$596640930, -44(%rbp)   # imm = 0x239004A2
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB17_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB17_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB17_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$1, %eax
	jmp	.LBB17_6
.LBB17_5:                               # %cond.false
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-20(%rbp), %eax
.LBB17_6:                               # %cond.end
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %edi
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -28(%rbp)
.LBB17_7:                               # %if.end
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_8
.LBB17_8:                               # %for.inc
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_1
.LBB17_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$596640930, -44(%rbp)   # imm = 0x239004A2
	jne	.LBB17_11
.LBB17_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_10
.Lfunc_end17:
	.size	dct_chroma_DC.8, .Lfunc_end17-dct_chroma_DC.8
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.9        # -- Begin function intrapred_luma.9
	.p2align	4, 0x90
	.type	intrapred_luma.9,@function
intrapred_luma.9:                       # @intrapred_luma.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1705386993, -172(%rbp) # imm = 0x65A623F1
	movl	%edi, -116(%rbp)
	movl	%esi, -112(%rbp)
	movq	%rdx, -192(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -200(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_1
.LBB18_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-224(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB18_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB18_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB18_10
.LBB18_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB18_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB18_9:                               # %lor.end
.LBB18_10:                              # %land.end
	xorb	$-1, %al
.LBB18_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB18_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB18_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB18_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB18_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB18_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB18_17
.LBB18_16:                              # %cond.false
                                        #   in Loop: Header=BB18_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB18_17
.LBB18_17:                              # %cond.end
                                        #   in Loop: Header=BB18_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB18_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_13
.LBB18_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB18_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB18_22
.LBB18_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB18_22
.LBB18_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB18_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB18_25
.LBB18_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB18_25
.LBB18_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -224(%rbp)
	je	.LBB18_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-220(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB18_28
.LBB18_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB18_28
.LBB18_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB18_30
.LBB18_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-224(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB18_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB18_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB18_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB18_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB18_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB18_36
.LBB18_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB18_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB18_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB18_39
.LBB18_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB18_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB18_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_42
.LBB18_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB18_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB18_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB18_45
.LBB18_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB18_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB18_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB18_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB18_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB18_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_46
.LBB18_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB18_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB18_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB18_61
.LBB18_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB18_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB18_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB18_60
.LBB18_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB18_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB18_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB18_59
.LBB18_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB18_59:                              # %if.end284
	jmp	.LBB18_60
.LBB18_60:                              # %if.end285
	jmp	.LBB18_61
.LBB18_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB18_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB18_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB18_62 Depth=1
	movl	$0, -4(%rbp)
.LBB18_64:                              # %for.cond291
                                        #   Parent Loop BB18_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB18_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB18_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_64
.LBB18_67:                              # %for.end304
                                        #   in Loop: Header=BB18_62 Depth=1
	jmp	.LBB18_68
.LBB18_68:                              # %for.inc305
                                        #   in Loop: Header=BB18_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB18_62
.LBB18_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB18_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB18_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB18_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_70
.LBB18_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB18_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB18_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB18_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB18_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB18_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB18_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB18_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB18_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB18_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB18_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB18_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB18_85:                              # %if.end1174
	cmpl	$1705386993, -172(%rbp) # imm = 0x65A623F1
	jne	.LBB18_87
.LBB18_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_86
.Lfunc_end18:
	.size	intrapred_luma.9, .Lfunc_end18-intrapred_luma.9
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.10        # -- Begin function dct_chroma_DC.10
	.p2align	4, 0x90
	.type	dct_chroma_DC.10,@function
dct_chroma_DC.10:                       # @dct_chroma_DC.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$56533683, -44(%rbp)    # imm = 0x35EA2B3
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB19_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB19_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB19_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$1, %eax
	jmp	.LBB19_6
.LBB19_5:                               # %cond.false
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-24(%rbp), %eax
.LBB19_6:                               # %cond.end
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -28(%rbp)
.LBB19_7:                               # %if.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_8
.LBB19_8:                               # %for.inc
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_1
.LBB19_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$56533683, -44(%rbp)    # imm = 0x35EA2B3
	jne	.LBB19_11
.LBB19_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_10
.Lfunc_end19:
	.size	dct_chroma_DC.10, .Lfunc_end19-dct_chroma_DC.10
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.11       # -- Begin function dct_luma_16x16.11
	.p2align	4, 0x90
	.type	dct_luma_16x16.11,@function
dct_luma_16x16.11:                      # @dct_luma_16x16.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$862739989, -132(%rbp)  # imm = 0x336C5E15
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB20_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB20_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB20_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB20_3 Depth=1
	movl	$0, -16(%rbp)
.LBB20_5:                               # %for.cond16
                                        #   Parent Loop BB20_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB20_9
.LBB20_8:                               # %if.else
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_9:                               # %if.end
                                        #   in Loop: Header=BB20_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB20_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_5
.LBB20_11:                              # %for.end
                                        #   in Loop: Header=BB20_3 Depth=1
	jmp	.LBB20_12
.LBB20_12:                              # %for.inc61
                                        #   in Loop: Header=BB20_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_3
.LBB20_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB20_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_18 Depth 2
                                        #       Child Loop BB20_20 Depth 3
                                        #         Child Loop BB20_22 Depth 4
                                        #       Child Loop BB20_28 Depth 3
                                        #         Child Loop BB20_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB20_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB20_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_16:                              # %land.end69
                                        #   in Loop: Header=BB20_14 Depth=1
	testb	$1, %al
	jne	.LBB20_17
	jmp	.LBB20_39
.LBB20_17:                              # %for.body71
                                        #   in Loop: Header=BB20_14 Depth=1
	movl	$0, -24(%rbp)
.LBB20_18:                              # %for.cond72
                                        #   Parent Loop BB20_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_20 Depth 3
                                        #         Child Loop BB20_22 Depth 4
                                        #       Child Loop BB20_28 Depth 3
                                        #         Child Loop BB20_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB20_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	$0, -12(%rbp)
.LBB20_20:                              # %for.cond76
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB20_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB20_20 Depth=3
	movl	$0, -16(%rbp)
.LBB20_22:                              # %for.cond80
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        #       Parent Loop BB20_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB20_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB20_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB20_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_22
.LBB20_25:                              # %for.end125
                                        #   in Loop: Header=BB20_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB20_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_20
.LBB20_27:                              # %for.end169
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	$0, -16(%rbp)
.LBB20_28:                              # %for.cond170
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB20_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	$0, -12(%rbp)
.LBB20_30:                              # %for.cond174
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        #       Parent Loop BB20_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB20_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB20_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB20_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_30
.LBB20_33:                              # %for.end219
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_28
.LBB20_35:                              # %for.end264
                                        #   in Loop: Header=BB20_18 Depth=2
	jmp	.LBB20_36
.LBB20_36:                              # %for.inc265
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_18
.LBB20_37:                              # %for.end267
                                        #   in Loop: Header=BB20_14 Depth=1
	jmp	.LBB20_38
.LBB20_38:                              # %for.inc268
                                        #   in Loop: Header=BB20_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_14
.LBB20_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB20_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB20_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB20_40 Depth=1
	movl	$0, -16(%rbp)
.LBB20_42:                              # %for.cond275
                                        #   Parent Loop BB20_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB20_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB20_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB20_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_42
.LBB20_45:                              # %for.end291
                                        #   in Loop: Header=BB20_40 Depth=1
	jmp	.LBB20_46
.LBB20_46:                              # %for.inc292
                                        #   in Loop: Header=BB20_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_40
.LBB20_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB20_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB20_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_50:                              # %land.end301
                                        #   in Loop: Header=BB20_48 Depth=1
	testb	$1, %al
	jne	.LBB20_51
	jmp	.LBB20_57
.LBB20_51:                              # %for.body303
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	$0, -16(%rbp)
.LBB20_52:                              # %for.cond304
                                        #   Parent Loop BB20_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB20_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB20_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB20_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_52
.LBB20_55:                              # %for.end333
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_48
.LBB20_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB20_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB20_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_60:                              # %land.end367
                                        #   in Loop: Header=BB20_58 Depth=1
	testb	$1, %al
	jne	.LBB20_61
	jmp	.LBB20_67
.LBB20_61:                              # %for.body369
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	$0, -12(%rbp)
.LBB20_62:                              # %for.cond370
                                        #   Parent Loop BB20_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB20_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB20_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB20_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_62
.LBB20_65:                              # %for.end399
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_58
.LBB20_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB20_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB20_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB20_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB20_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB20_73
.LBB20_72:                              # %if.then437
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_74
.LBB20_73:                              # %if.else446
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB20_74:                              # %if.end455
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB20_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB20_77
.LBB20_76:                              # %if.else463
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB20_77:                              # %if.end481
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB20_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB20_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB20_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB20_81:                              # %if.end492
                                        #   in Loop: Header=BB20_68 Depth=1
	jmp	.LBB20_82
.LBB20_82:                              # %if.end493
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB20_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB20_84:                              # %if.end507
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB20_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_86:                              # %if.end519
                                        #   in Loop: Header=BB20_68 Depth=1
	jmp	.LBB20_87
.LBB20_87:                              # %for.inc520
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB20_68
.LBB20_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB20_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_93 Depth 2
                                        #     Child Loop BB20_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB20_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_91:                              # %land.end531
                                        #   in Loop: Header=BB20_89 Depth=1
	testb	$1, %al
	jne	.LBB20_92
	jmp	.LBB20_102
.LBB20_92:                              # %for.body533
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	$0, -16(%rbp)
.LBB20_93:                              # %for.cond534
                                        #   Parent Loop BB20_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB20_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB20_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB20_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_93
.LBB20_96:                              # %for.end546
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB20_97:                              # %for.cond563
                                        #   Parent Loop BB20_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB20_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB20_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB20_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_97
.LBB20_100:                             # %for.end588
                                        #   in Loop: Header=BB20_89 Depth=1
	jmp	.LBB20_101
.LBB20_101:                             # %for.inc589
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_89
.LBB20_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB20_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_107 Depth 2
                                        #     Child Loop BB20_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB20_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_105:                             # %land.end598
                                        #   in Loop: Header=BB20_103 Depth=1
	testb	$1, %al
	jne	.LBB20_106
	jmp	.LBB20_119
.LBB20_106:                             # %for.body600
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	$0, -12(%rbp)
.LBB20_107:                             # %for.cond601
                                        #   Parent Loop BB20_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB20_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB20_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB20_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_107
.LBB20_110:                             # %for.end613
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB20_111:                             # %for.cond630
                                        #   Parent Loop BB20_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB20_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB20_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB20_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB20_115
.LBB20_114:                             # %if.else680
                                        #   in Loop: Header=BB20_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB20_115:                             # %if.end717
                                        #   in Loop: Header=BB20_111 Depth=2
	jmp	.LBB20_116
.LBB20_116:                             # %for.inc718
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_111
.LBB20_117:                             # %for.end720
                                        #   in Loop: Header=BB20_103 Depth=1
	jmp	.LBB20_118
.LBB20_118:                             # %for.inc721
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_103
.LBB20_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB20_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_122 Depth 2
                                        #       Child Loop BB20_124 Depth 3
                                        #       Child Loop BB20_143 Depth 3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
                                        #       Child Loop BB20_157 Depth 3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB20_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB20_120 Depth=1
	movl	$0, -24(%rbp)
.LBB20_122:                             # %for.cond728
                                        #   Parent Loop BB20_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_124 Depth 3
                                        #       Child Loop BB20_143 Depth 3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
                                        #       Child Loop BB20_157 Depth 3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB20_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -108(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB20_124:                             # %for.cond751
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB20_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB20_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB20_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB20_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB20_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB20_129
.LBB20_128:                             # %if.then762
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_130
.LBB20_129:                             # %if.else771
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB20_130:                             # %if.end780
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB20_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB20_133
.LBB20_132:                             # %if.else793
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB20_133:                             # %if.end818
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB20_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB20_135:                             # %if.end836
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB20_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB20_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB20_139
.LBB20_138:                             # %if.else871
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_139:                             # %if.end889
                                        #   in Loop: Header=BB20_124 Depth=3
	jmp	.LBB20_140
.LBB20_140:                             # %if.end890
                                        #   in Loop: Header=BB20_124 Depth=3
	jmp	.LBB20_141
.LBB20_141:                             # %for.inc891
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB20_124
.LBB20_142:                             # %for.end893
                                        #   in Loop: Header=BB20_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB20_143:                             # %for.cond896
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB20_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_145:                             # %land.end902
                                        #   in Loop: Header=BB20_143 Depth=3
	testb	$1, %al
	jne	.LBB20_146
	jmp	.LBB20_156
.LBB20_146:                             # %for.body904
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	$0, -16(%rbp)
.LBB20_147:                             # %for.cond905
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB20_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB20_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB20_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_147
.LBB20_150:                             # %for.end921
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB20_151:                             # %for.cond940
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB20_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB20_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB20_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_151
.LBB20_154:                             # %for.end973
                                        #   in Loop: Header=BB20_143 Depth=3
	jmp	.LBB20_155
.LBB20_155:                             # %for.inc974
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_143
.LBB20_156:                             # %for.end976
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	$0, -16(%rbp)
.LBB20_157:                             # %for.cond977
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB20_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_159:                             # %land.end983
                                        #   in Loop: Header=BB20_157 Depth=3
	testb	$1, %al
	jne	.LBB20_160
	jmp	.LBB20_170
.LBB20_160:                             # %for.body985
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	$0, -12(%rbp)
.LBB20_161:                             # %for.cond986
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB20_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB20_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB20_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_161
.LBB20_164:                             # %for.end1002
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB20_165:                             # %for.cond1021
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB20_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB20_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB20_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_165
.LBB20_168:                             # %for.end1054
                                        #   in Loop: Header=BB20_157 Depth=3
	jmp	.LBB20_169
.LBB20_169:                             # %for.inc1055
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_157
.LBB20_170:                             # %for.end1057
                                        #   in Loop: Header=BB20_122 Depth=2
	jmp	.LBB20_171
.LBB20_171:                             # %for.inc1058
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_122
.LBB20_172:                             # %for.end1060
                                        #   in Loop: Header=BB20_120 Depth=1
	jmp	.LBB20_173
.LBB20_173:                             # %for.inc1061
                                        #   in Loop: Header=BB20_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_120
.LBB20_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB20_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB20_176 Depth=1
	movl	$0, -16(%rbp)
.LBB20_178:                             # %for.cond1071
                                        #   Parent Loop BB20_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB20_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB20_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_178
.LBB20_181:                             # %for.end1093
                                        #   in Loop: Header=BB20_176 Depth=1
	jmp	.LBB20_182
.LBB20_182:                             # %for.inc1094
                                        #   in Loop: Header=BB20_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_176
.LBB20_183:                             # %for.end1096
	jmp	.LBB20_196
.LBB20_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB20_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB20_185 Depth=1
	movl	$0, -16(%rbp)
.LBB20_187:                             # %for.cond1102
                                        #   Parent Loop BB20_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB20_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB20_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB20_191
.LBB20_190:                             # %if.else1125
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB20_191:                             # %if.end1145
                                        #   in Loop: Header=BB20_187 Depth=2
	jmp	.LBB20_192
.LBB20_192:                             # %for.inc1146
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_187
.LBB20_193:                             # %for.end1148
                                        #   in Loop: Header=BB20_185 Depth=1
	jmp	.LBB20_194
.LBB20_194:                             # %for.inc1149
                                        #   in Loop: Header=BB20_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_185
.LBB20_195:                             # %for.end1151
	jmp	.LBB20_196
.LBB20_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB20_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB20_198 Depth=1
	movl	$0, -16(%rbp)
.LBB20_200:                             # %for.cond1160
                                        #   Parent Loop BB20_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB20_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB20_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB20_213
.LBB20_203:                             # %if.else1186
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB20_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB20_206
.LBB20_205:                             # %cond.false
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB20_206:                             # %cond.end
                                        #   in Loop: Header=BB20_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB20_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB20_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB20_212
.LBB20_208:                             # %cond.false1229
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB20_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB20_211
.LBB20_210:                             # %cond.false1250
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB20_211:                             # %cond.end1268
                                        #   in Loop: Header=BB20_200 Depth=2
.LBB20_212:                             # %cond.end1270
                                        #   in Loop: Header=BB20_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB20_213:                             # %if.end1282
                                        #   in Loop: Header=BB20_200 Depth=2
	jmp	.LBB20_214
.LBB20_214:                             # %for.inc1283
                                        #   in Loop: Header=BB20_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_200
.LBB20_215:                             # %for.end1285
                                        #   in Loop: Header=BB20_198 Depth=1
	jmp	.LBB20_216
.LBB20_216:                             # %for.inc1286
                                        #   in Loop: Header=BB20_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_198
.LBB20_217:                             # %for.end1288
	jmp	.LBB20_218
.LBB20_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$862739989, -132(%rbp)  # imm = 0x336C5E15
	jne	.LBB20_220
.LBB20_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_219
.Lfunc_end20:
	.size	dct_luma_16x16.11, .Lfunc_end20-dct_luma_16x16.11
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.12        # -- Begin function dct_chroma4x4.12
	.p2align	4, 0x90
	.type	dct_chroma4x4.12,@function
dct_chroma4x4.12:                       # @dct_chroma4x4.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$920692626, -148(%rbp)  # imm = 0x36E0A792
	movl	%edi, -28(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB21_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB21_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB21_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB21_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB21_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB21_7
# %bb.6:                                # %cond.true
	movl	-84(%rbp), %eax
	jmp	.LBB21_8
.LBB21_7:                               # %cond.false
	movl	-84(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB21_8:                               # %cond.end
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB21_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB21_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB21_10 Depth=1
	movl	$0, -12(%rbp)
.LBB21_12:                              # %for.cond31
                                        #   Parent Loop BB21_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB21_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB21_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB21_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_12
.LBB21_15:                              # %for.end
                                        #   in Loop: Header=BB21_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB21_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_10
.LBB21_17:                              # %for.end92
	jmp	.LBB21_18
.LBB21_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB21_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB21_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB21_20 Depth=1
	movl	$0, -16(%rbp)
.LBB21_22:                              # %for.cond99
                                        #   Parent Loop BB21_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB21_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB21_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB21_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_22
.LBB21_25:                              # %for.end132
                                        #   in Loop: Header=BB21_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB21_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_20
.LBB21_27:                              # %for.end165
	jmp	.LBB21_28
.LBB21_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB21_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB21_34
.LBB21_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB21_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_33
.LBB21_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB21_33:                              # %if.end213
	jmp	.LBB21_34
.LBB21_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB21_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB21_46
.LBB21_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB21_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB21_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB21_40
.LBB21_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB21_40:                              # %if.end290
	jmp	.LBB21_45
.LBB21_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB21_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB21_44
.LBB21_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB21_44:                              # %if.end328
	jmp	.LBB21_45
.LBB21_45:                              # %if.end329
	jmp	.LBB21_46
.LBB21_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB21_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB21_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB21_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB21_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB21_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB21_54
.LBB21_50:                              # %if.else352
                                        #   in Loop: Header=BB21_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB21_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB21_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_53
.LBB21_52:                              # %if.else381
                                        #   in Loop: Header=BB21_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB21_53:                              # %if.end407
                                        #   in Loop: Header=BB21_47 Depth=1
	jmp	.LBB21_54
.LBB21_54:                              # %if.end408
                                        #   in Loop: Header=BB21_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB21_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB21_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB21_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB21_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB21_58
.LBB21_57:                              # %if.then415
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	$1, -132(%rbp)
.LBB21_58:                              # %if.end416
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB21_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB21_70
.LBB21_60:                              # %if.else436
                                        #   in Loop: Header=BB21_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB21_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB21_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB21_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB21_64
.LBB21_63:                              # %if.else457
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB21_64:                              # %if.end472
                                        #   in Loop: Header=BB21_47 Depth=1
	jmp	.LBB21_69
.LBB21_65:                              # %if.else473
                                        #   in Loop: Header=BB21_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB21_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB21_68
.LBB21_67:                              # %if.else488
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB21_68:                              # %if.end500
                                        #   in Loop: Header=BB21_47 Depth=1
	jmp	.LBB21_69
.LBB21_69:                              # %if.end501
                                        #   in Loop: Header=BB21_47 Depth=1
	jmp	.LBB21_70
.LBB21_70:                              # %if.end502
                                        #   in Loop: Header=BB21_47 Depth=1
	jmp	.LBB21_71
.LBB21_71:                              # %if.end503
                                        #   in Loop: Header=BB21_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB21_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB21_73:                              # %if.end511
                                        #   in Loop: Header=BB21_47 Depth=1
	jmp	.LBB21_74
.LBB21_74:                              # %for.inc512
                                        #   in Loop: Header=BB21_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB21_47
.LBB21_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB21_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB21_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_79 Depth 2
                                        #     Child Loop BB21_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB21_77 Depth=1
	movl	$0, -12(%rbp)
.LBB21_79:                              # %for.cond523
                                        #   Parent Loop BB21_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB21_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB21_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_79
.LBB21_82:                              # %for.end536
                                        #   in Loop: Header=BB21_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB21_83:                              # %for.cond555
                                        #   Parent Loop BB21_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB21_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB21_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB21_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_83
.LBB21_86:                              # %for.end582
                                        #   in Loop: Header=BB21_77 Depth=1
	jmp	.LBB21_87
.LBB21_87:                              # %for.inc583
                                        #   in Loop: Header=BB21_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_77
.LBB21_88:                              # %for.end585
	jmp	.LBB21_89
.LBB21_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB21_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB21_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_93 Depth 2
                                        #     Child Loop BB21_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB21_91 Depth=1
	movl	$0, -16(%rbp)
.LBB21_93:                              # %for.cond593
                                        #   Parent Loop BB21_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB21_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_93
.LBB21_96:                              # %for.end606
                                        #   in Loop: Header=BB21_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB21_97:                              # %for.cond625
                                        #   Parent Loop BB21_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB21_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB21_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB21_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_97
.LBB21_100:                             # %for.end656
                                        #   in Loop: Header=BB21_91 Depth=1
	jmp	.LBB21_101
.LBB21_101:                             # %for.inc657
                                        #   in Loop: Header=BB21_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_91
.LBB21_102:                             # %for.end659
	jmp	.LBB21_103
.LBB21_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$920692626, -148(%rbp)  # imm = 0x36E0A792
	jne	.LBB21_105
.LBB21_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_104
.Lfunc_end21:
	.size	dct_chroma4x4.12, .Lfunc_end21-dct_chroma4x4.12
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.13       # -- Begin function dct_luma_16x16.13
	.p2align	4, 0x90
	.type	dct_luma_16x16.13,@function
dct_luma_16x16.13:                      # @dct_luma_16x16.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$310802972, -132(%rbp)  # imm = 0x12867A1C
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB22_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB22_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB22_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB22_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB22_3 Depth=1
	movl	$0, -16(%rbp)
.LBB22_5:                               # %for.cond16
                                        #   Parent Loop BB22_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB22_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB22_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB22_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB22_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB22_9
.LBB22_8:                               # %if.else
                                        #   in Loop: Header=BB22_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB22_9:                               # %if.end
                                        #   in Loop: Header=BB22_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB22_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_5
.LBB22_11:                              # %for.end
                                        #   in Loop: Header=BB22_3 Depth=1
	jmp	.LBB22_12
.LBB22_12:                              # %for.inc61
                                        #   in Loop: Header=BB22_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_3
.LBB22_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB22_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_18 Depth 2
                                        #       Child Loop BB22_20 Depth 3
                                        #         Child Loop BB22_22 Depth 4
                                        #       Child Loop BB22_28 Depth 3
                                        #         Child Loop BB22_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB22_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB22_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_16:                              # %land.end69
                                        #   in Loop: Header=BB22_14 Depth=1
	testb	$1, %al
	jne	.LBB22_17
	jmp	.LBB22_39
.LBB22_17:                              # %for.body71
                                        #   in Loop: Header=BB22_14 Depth=1
	movl	$0, -20(%rbp)
.LBB22_18:                              # %for.cond72
                                        #   Parent Loop BB22_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_20 Depth 3
                                        #         Child Loop BB22_22 Depth 4
                                        #       Child Loop BB22_28 Depth 3
                                        #         Child Loop BB22_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB22_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB22_18 Depth=2
	movl	$0, -12(%rbp)
.LBB22_20:                              # %for.cond76
                                        #   Parent Loop BB22_14 Depth=1
                                        #     Parent Loop BB22_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB22_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB22_20 Depth=3
	movl	$0, -16(%rbp)
.LBB22_22:                              # %for.cond80
                                        #   Parent Loop BB22_14 Depth=1
                                        #     Parent Loop BB22_18 Depth=2
                                        #       Parent Loop BB22_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB22_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB22_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB22_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_22
.LBB22_25:                              # %for.end125
                                        #   in Loop: Header=BB22_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB22_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_20
.LBB22_27:                              # %for.end169
                                        #   in Loop: Header=BB22_18 Depth=2
	movl	$0, -16(%rbp)
.LBB22_28:                              # %for.cond170
                                        #   Parent Loop BB22_14 Depth=1
                                        #     Parent Loop BB22_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB22_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB22_28 Depth=3
	movl	$0, -12(%rbp)
.LBB22_30:                              # %for.cond174
                                        #   Parent Loop BB22_14 Depth=1
                                        #     Parent Loop BB22_18 Depth=2
                                        #       Parent Loop BB22_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB22_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB22_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB22_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_30
.LBB22_33:                              # %for.end219
                                        #   in Loop: Header=BB22_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB22_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_28
.LBB22_35:                              # %for.end264
                                        #   in Loop: Header=BB22_18 Depth=2
	jmp	.LBB22_36
.LBB22_36:                              # %for.inc265
                                        #   in Loop: Header=BB22_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_18
.LBB22_37:                              # %for.end267
                                        #   in Loop: Header=BB22_14 Depth=1
	jmp	.LBB22_38
.LBB22_38:                              # %for.inc268
                                        #   in Loop: Header=BB22_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_14
.LBB22_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB22_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB22_40 Depth=1
	movl	$0, -16(%rbp)
.LBB22_42:                              # %for.cond275
                                        #   Parent Loop BB22_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB22_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB22_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_42
.LBB22_45:                              # %for.end291
                                        #   in Loop: Header=BB22_40 Depth=1
	jmp	.LBB22_46
.LBB22_46:                              # %for.inc292
                                        #   in Loop: Header=BB22_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_40
.LBB22_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB22_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB22_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB22_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_50:                              # %land.end301
                                        #   in Loop: Header=BB22_48 Depth=1
	testb	$1, %al
	jne	.LBB22_51
	jmp	.LBB22_57
.LBB22_51:                              # %for.body303
                                        #   in Loop: Header=BB22_48 Depth=1
	movl	$0, -16(%rbp)
.LBB22_52:                              # %for.cond304
                                        #   Parent Loop BB22_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB22_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB22_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_52
.LBB22_55:                              # %for.end333
                                        #   in Loop: Header=BB22_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB22_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_48
.LBB22_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB22_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB22_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB22_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_60:                              # %land.end367
                                        #   in Loop: Header=BB22_58 Depth=1
	testb	$1, %al
	jne	.LBB22_61
	jmp	.LBB22_67
.LBB22_61:                              # %for.body369
                                        #   in Loop: Header=BB22_58 Depth=1
	movl	$0, -12(%rbp)
.LBB22_62:                              # %for.cond370
                                        #   Parent Loop BB22_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB22_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB22_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_62
.LBB22_65:                              # %for.end399
                                        #   in Loop: Header=BB22_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB22_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_58
.LBB22_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB22_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB22_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB22_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB22_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB22_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB22_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB22_73
.LBB22_72:                              # %if.then437
                                        #   in Loop: Header=BB22_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_74
.LBB22_73:                              # %if.else446
                                        #   in Loop: Header=BB22_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB22_74:                              # %if.end455
                                        #   in Loop: Header=BB22_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB22_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB22_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB22_77
.LBB22_76:                              # %if.else463
                                        #   in Loop: Header=BB22_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB22_77:                              # %if.end481
                                        #   in Loop: Header=BB22_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB22_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB22_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB22_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB22_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB22_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB22_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB22_81:                              # %if.end492
                                        #   in Loop: Header=BB22_68 Depth=1
	jmp	.LBB22_82
.LBB22_82:                              # %if.end493
                                        #   in Loop: Header=BB22_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB22_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB22_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB22_84:                              # %if.end507
                                        #   in Loop: Header=BB22_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB22_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB22_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB22_86:                              # %if.end519
                                        #   in Loop: Header=BB22_68 Depth=1
	jmp	.LBB22_87
.LBB22_87:                              # %for.inc520
                                        #   in Loop: Header=BB22_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB22_68
.LBB22_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB22_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_93 Depth 2
                                        #     Child Loop BB22_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB22_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB22_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_91:                              # %land.end531
                                        #   in Loop: Header=BB22_89 Depth=1
	testb	$1, %al
	jne	.LBB22_92
	jmp	.LBB22_102
.LBB22_92:                              # %for.body533
                                        #   in Loop: Header=BB22_89 Depth=1
	movl	$0, -16(%rbp)
.LBB22_93:                              # %for.cond534
                                        #   Parent Loop BB22_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB22_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB22_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_93
.LBB22_96:                              # %for.end546
                                        #   in Loop: Header=BB22_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB22_97:                              # %for.cond563
                                        #   Parent Loop BB22_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB22_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB22_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_97
.LBB22_100:                             # %for.end588
                                        #   in Loop: Header=BB22_89 Depth=1
	jmp	.LBB22_101
.LBB22_101:                             # %for.inc589
                                        #   in Loop: Header=BB22_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_89
.LBB22_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB22_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_107 Depth 2
                                        #     Child Loop BB22_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB22_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB22_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_105:                             # %land.end598
                                        #   in Loop: Header=BB22_103 Depth=1
	testb	$1, %al
	jne	.LBB22_106
	jmp	.LBB22_119
.LBB22_106:                             # %for.body600
                                        #   in Loop: Header=BB22_103 Depth=1
	movl	$0, -12(%rbp)
.LBB22_107:                             # %for.cond601
                                        #   Parent Loop BB22_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB22_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB22_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_107
.LBB22_110:                             # %for.end613
                                        #   in Loop: Header=BB22_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB22_111:                             # %for.cond630
                                        #   Parent Loop BB22_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB22_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB22_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB22_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB22_115
.LBB22_114:                             # %if.else680
                                        #   in Loop: Header=BB22_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB22_115:                             # %if.end717
                                        #   in Loop: Header=BB22_111 Depth=2
	jmp	.LBB22_116
.LBB22_116:                             # %for.inc718
                                        #   in Loop: Header=BB22_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_111
.LBB22_117:                             # %for.end720
                                        #   in Loop: Header=BB22_103 Depth=1
	jmp	.LBB22_118
.LBB22_118:                             # %for.inc721
                                        #   in Loop: Header=BB22_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_103
.LBB22_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB22_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_122 Depth 2
                                        #       Child Loop BB22_124 Depth 3
                                        #       Child Loop BB22_143 Depth 3
                                        #         Child Loop BB22_147 Depth 4
                                        #         Child Loop BB22_151 Depth 4
                                        #       Child Loop BB22_157 Depth 3
                                        #         Child Loop BB22_161 Depth 4
                                        #         Child Loop BB22_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB22_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB22_120 Depth=1
	movl	$0, -20(%rbp)
.LBB22_122:                             # %for.cond728
                                        #   Parent Loop BB22_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_124 Depth 3
                                        #       Child Loop BB22_143 Depth 3
                                        #         Child Loop BB22_147 Depth 4
                                        #         Child Loop BB22_151 Depth 4
                                        #       Child Loop BB22_157 Depth 3
                                        #         Child Loop BB22_161 Depth 4
                                        #         Child Loop BB22_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB22_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB22_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -56(%rbp)
.LBB22_124:                             # %for.cond751
                                        #   Parent Loop BB22_120 Depth=1
                                        #     Parent Loop BB22_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB22_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB22_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB22_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB22_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB22_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB22_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB22_129
.LBB22_128:                             # %if.then762
                                        #   in Loop: Header=BB22_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_130
.LBB22_129:                             # %if.else771
                                        #   in Loop: Header=BB22_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB22_130:                             # %if.end780
                                        #   in Loop: Header=BB22_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB22_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB22_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB22_133
.LBB22_132:                             # %if.else793
                                        #   in Loop: Header=BB22_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB22_133:                             # %if.end818
                                        #   in Loop: Header=BB22_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB22_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB22_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB22_135:                             # %if.end836
                                        #   in Loop: Header=BB22_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB22_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB22_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB22_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB22_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB22_139
.LBB22_138:                             # %if.else871
                                        #   in Loop: Header=BB22_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB22_139:                             # %if.end889
                                        #   in Loop: Header=BB22_124 Depth=3
	jmp	.LBB22_140
.LBB22_140:                             # %if.end890
                                        #   in Loop: Header=BB22_124 Depth=3
	jmp	.LBB22_141
.LBB22_141:                             # %for.inc891
                                        #   in Loop: Header=BB22_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB22_124
.LBB22_142:                             # %for.end893
                                        #   in Loop: Header=BB22_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB22_143:                             # %for.cond896
                                        #   Parent Loop BB22_120 Depth=1
                                        #     Parent Loop BB22_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_147 Depth 4
                                        #         Child Loop BB22_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB22_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB22_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_145:                             # %land.end902
                                        #   in Loop: Header=BB22_143 Depth=3
	testb	$1, %al
	jne	.LBB22_146
	jmp	.LBB22_156
.LBB22_146:                             # %for.body904
                                        #   in Loop: Header=BB22_143 Depth=3
	movl	$0, -16(%rbp)
.LBB22_147:                             # %for.cond905
                                        #   Parent Loop BB22_120 Depth=1
                                        #     Parent Loop BB22_122 Depth=2
                                        #       Parent Loop BB22_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB22_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB22_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB22_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_147
.LBB22_150:                             # %for.end921
                                        #   in Loop: Header=BB22_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB22_151:                             # %for.cond940
                                        #   Parent Loop BB22_120 Depth=1
                                        #     Parent Loop BB22_122 Depth=2
                                        #       Parent Loop BB22_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB22_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB22_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB22_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_151
.LBB22_154:                             # %for.end973
                                        #   in Loop: Header=BB22_143 Depth=3
	jmp	.LBB22_155
.LBB22_155:                             # %for.inc974
                                        #   in Loop: Header=BB22_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_143
.LBB22_156:                             # %for.end976
                                        #   in Loop: Header=BB22_122 Depth=2
	movl	$0, -16(%rbp)
.LBB22_157:                             # %for.cond977
                                        #   Parent Loop BB22_120 Depth=1
                                        #     Parent Loop BB22_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_161 Depth 4
                                        #         Child Loop BB22_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB22_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB22_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_159:                             # %land.end983
                                        #   in Loop: Header=BB22_157 Depth=3
	testb	$1, %al
	jne	.LBB22_160
	jmp	.LBB22_170
.LBB22_160:                             # %for.body985
                                        #   in Loop: Header=BB22_157 Depth=3
	movl	$0, -12(%rbp)
.LBB22_161:                             # %for.cond986
                                        #   Parent Loop BB22_120 Depth=1
                                        #     Parent Loop BB22_122 Depth=2
                                        #       Parent Loop BB22_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB22_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB22_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB22_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_161
.LBB22_164:                             # %for.end1002
                                        #   in Loop: Header=BB22_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB22_165:                             # %for.cond1021
                                        #   Parent Loop BB22_120 Depth=1
                                        #     Parent Loop BB22_122 Depth=2
                                        #       Parent Loop BB22_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB22_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB22_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB22_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_165
.LBB22_168:                             # %for.end1054
                                        #   in Loop: Header=BB22_157 Depth=3
	jmp	.LBB22_169
.LBB22_169:                             # %for.inc1055
                                        #   in Loop: Header=BB22_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_157
.LBB22_170:                             # %for.end1057
                                        #   in Loop: Header=BB22_122 Depth=2
	jmp	.LBB22_171
.LBB22_171:                             # %for.inc1058
                                        #   in Loop: Header=BB22_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_122
.LBB22_172:                             # %for.end1060
                                        #   in Loop: Header=BB22_120 Depth=1
	jmp	.LBB22_173
.LBB22_173:                             # %for.inc1061
                                        #   in Loop: Header=BB22_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_120
.LBB22_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB22_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB22_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB22_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB22_176 Depth=1
	movl	$0, -16(%rbp)
.LBB22_178:                             # %for.cond1071
                                        #   Parent Loop BB22_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB22_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB22_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB22_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_178
.LBB22_181:                             # %for.end1093
                                        #   in Loop: Header=BB22_176 Depth=1
	jmp	.LBB22_182
.LBB22_182:                             # %for.inc1094
                                        #   in Loop: Header=BB22_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_176
.LBB22_183:                             # %for.end1096
	jmp	.LBB22_196
.LBB22_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB22_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB22_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB22_185 Depth=1
	movl	$0, -16(%rbp)
.LBB22_187:                             # %for.cond1102
                                        #   Parent Loop BB22_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB22_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB22_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB22_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB22_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB22_191
.LBB22_190:                             # %if.else1125
                                        #   in Loop: Header=BB22_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB22_191:                             # %if.end1145
                                        #   in Loop: Header=BB22_187 Depth=2
	jmp	.LBB22_192
.LBB22_192:                             # %for.inc1146
                                        #   in Loop: Header=BB22_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_187
.LBB22_193:                             # %for.end1148
                                        #   in Loop: Header=BB22_185 Depth=1
	jmp	.LBB22_194
.LBB22_194:                             # %for.inc1149
                                        #   in Loop: Header=BB22_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_185
.LBB22_195:                             # %for.end1151
	jmp	.LBB22_196
.LBB22_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB22_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB22_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB22_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB22_198 Depth=1
	movl	$0, -16(%rbp)
.LBB22_200:                             # %for.cond1160
                                        #   Parent Loop BB22_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB22_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB22_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB22_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB22_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB22_213
.LBB22_203:                             # %if.else1186
                                        #   in Loop: Header=BB22_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB22_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB22_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB22_206
.LBB22_205:                             # %cond.false
                                        #   in Loop: Header=BB22_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB22_206:                             # %cond.end
                                        #   in Loop: Header=BB22_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB22_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB22_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB22_212
.LBB22_208:                             # %cond.false1229
                                        #   in Loop: Header=BB22_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB22_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB22_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_211
.LBB22_210:                             # %cond.false1250
                                        #   in Loop: Header=BB22_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB22_211:                             # %cond.end1268
                                        #   in Loop: Header=BB22_200 Depth=2
.LBB22_212:                             # %cond.end1270
                                        #   in Loop: Header=BB22_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB22_213:                             # %if.end1282
                                        #   in Loop: Header=BB22_200 Depth=2
	jmp	.LBB22_214
.LBB22_214:                             # %for.inc1283
                                        #   in Loop: Header=BB22_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_200
.LBB22_215:                             # %for.end1285
                                        #   in Loop: Header=BB22_198 Depth=1
	jmp	.LBB22_216
.LBB22_216:                             # %for.inc1286
                                        #   in Loop: Header=BB22_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_198
.LBB22_217:                             # %for.end1288
	jmp	.LBB22_218
.LBB22_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$310802972, -132(%rbp)  # imm = 0x12867A1C
	jne	.LBB22_220
.LBB22_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_219
.Lfunc_end22:
	.size	dct_luma_16x16.13, .Lfunc_end22-dct_luma_16x16.13
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.14        # -- Begin function dct_chroma4x4.14
	.p2align	4, 0x90
	.type	dct_chroma4x4.14,@function
dct_chroma4x4.14:                       # @dct_chroma4x4.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1353623583, -148(%rbp) # imm = 0x50AEA81F
	movl	%edi, -24(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB23_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB23_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB23_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB23_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB23_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB23_7
# %bb.6:                                # %cond.true
	movl	-84(%rbp), %eax
	jmp	.LBB23_8
.LBB23_7:                               # %cond.false
	movl	-84(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB23_8:                               # %cond.end
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB23_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB23_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB23_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB23_10 Depth=1
	movl	$0, -12(%rbp)
.LBB23_12:                              # %for.cond31
                                        #   Parent Loop BB23_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB23_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB23_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB23_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_12
.LBB23_15:                              # %for.end
                                        #   in Loop: Header=BB23_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB23_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_10
.LBB23_17:                              # %for.end92
	jmp	.LBB23_18
.LBB23_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB23_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB23_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB23_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB23_20 Depth=1
	movl	$0, -16(%rbp)
.LBB23_22:                              # %for.cond99
                                        #   Parent Loop BB23_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB23_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_22
.LBB23_25:                              # %for.end132
                                        #   in Loop: Header=BB23_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB23_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_20
.LBB23_27:                              # %for.end165
	jmp	.LBB23_28
.LBB23_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB23_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB23_34
.LBB23_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB23_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_33
.LBB23_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB23_33:                              # %if.end213
	jmp	.LBB23_34
.LBB23_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB23_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB23_46
.LBB23_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB23_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB23_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB23_40
.LBB23_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB23_40:                              # %if.end290
	jmp	.LBB23_45
.LBB23_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB23_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB23_44
.LBB23_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB23_44:                              # %if.end328
	jmp	.LBB23_45
.LBB23_45:                              # %if.end329
	jmp	.LBB23_46
.LBB23_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB23_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB23_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB23_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -88(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB23_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB23_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB23_54
.LBB23_50:                              # %if.else352
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB23_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB23_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_53
.LBB23_52:                              # %if.else381
                                        #   in Loop: Header=BB23_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB23_53:                              # %if.end407
                                        #   in Loop: Header=BB23_47 Depth=1
	jmp	.LBB23_54
.LBB23_54:                              # %if.end408
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB23_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB23_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB23_58
.LBB23_57:                              # %if.then415
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	$1, -132(%rbp)
.LBB23_58:                              # %if.end416
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB23_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB23_70
.LBB23_60:                              # %if.else436
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB23_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB23_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB23_64
.LBB23_63:                              # %if.else457
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB23_64:                              # %if.end472
                                        #   in Loop: Header=BB23_47 Depth=1
	jmp	.LBB23_69
.LBB23_65:                              # %if.else473
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB23_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB23_68
.LBB23_67:                              # %if.else488
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB23_68:                              # %if.end500
                                        #   in Loop: Header=BB23_47 Depth=1
	jmp	.LBB23_69
.LBB23_69:                              # %if.end501
                                        #   in Loop: Header=BB23_47 Depth=1
	jmp	.LBB23_70
.LBB23_70:                              # %if.end502
                                        #   in Loop: Header=BB23_47 Depth=1
	jmp	.LBB23_71
.LBB23_71:                              # %if.end503
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB23_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB23_73:                              # %if.end511
                                        #   in Loop: Header=BB23_47 Depth=1
	jmp	.LBB23_74
.LBB23_74:                              # %for.inc512
                                        #   in Loop: Header=BB23_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB23_47
.LBB23_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB23_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB23_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_79 Depth 2
                                        #     Child Loop BB23_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB23_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB23_77 Depth=1
	movl	$0, -12(%rbp)
.LBB23_79:                              # %for.cond523
                                        #   Parent Loop BB23_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB23_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB23_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB23_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_79
.LBB23_82:                              # %for.end536
                                        #   in Loop: Header=BB23_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB23_83:                              # %for.cond555
                                        #   Parent Loop BB23_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB23_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB23_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB23_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_83
.LBB23_86:                              # %for.end582
                                        #   in Loop: Header=BB23_77 Depth=1
	jmp	.LBB23_87
.LBB23_87:                              # %for.inc583
                                        #   in Loop: Header=BB23_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_77
.LBB23_88:                              # %for.end585
	jmp	.LBB23_89
.LBB23_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB23_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB23_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_93 Depth 2
                                        #     Child Loop BB23_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB23_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	$0, -16(%rbp)
.LBB23_93:                              # %for.cond593
                                        #   Parent Loop BB23_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB23_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB23_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_93
.LBB23_96:                              # %for.end606
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB23_97:                              # %for.cond625
                                        #   Parent Loop BB23_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB23_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB23_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB23_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_97
.LBB23_100:                             # %for.end656
                                        #   in Loop: Header=BB23_91 Depth=1
	jmp	.LBB23_101
.LBB23_101:                             # %for.inc657
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_91
.LBB23_102:                             # %for.end659
	jmp	.LBB23_103
.LBB23_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1353623583, -148(%rbp) # imm = 0x50AEA81F
	jne	.LBB23_105
.LBB23_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_104
.Lfunc_end23:
	.size	dct_chroma4x4.14, .Lfunc_end23-dct_chroma4x4.14
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.15       # -- Begin function intrapred_luma.15
	.p2align	4, 0x90
	.type	intrapred_luma.15,@function
intrapred_luma.15:                      # @intrapred_luma.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$443228973, -172(%rbp)  # imm = 0x1A6B232D
	movl	%edi, -108(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -192(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_1
.LBB24_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB24_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB24_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB24_10
.LBB24_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB24_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB24_9:                               # %lor.end
.LBB24_10:                              # %land.end
	xorb	$-1, %al
.LBB24_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB24_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB24_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB24_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB24_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB24_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB24_17
.LBB24_16:                              # %cond.false
                                        #   in Loop: Header=BB24_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB24_17
.LBB24_17:                              # %cond.end
                                        #   in Loop: Header=BB24_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB24_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_13
.LBB24_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB24_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB24_22
.LBB24_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB24_22
.LBB24_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB24_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB24_25
.LBB24_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB24_25
.LBB24_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -216(%rbp)
	je	.LBB24_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB24_28
.LBB24_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB24_28
.LBB24_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB24_30
.LBB24_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-216(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB24_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB24_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB24_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB24_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB24_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB24_36
.LBB24_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB24_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB24_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB24_39
.LBB24_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB24_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB24_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_42
.LBB24_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB24_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB24_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB24_45
.LBB24_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB24_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB24_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB24_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB24_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB24_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_46
.LBB24_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB24_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB24_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB24_61
.LBB24_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB24_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB24_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB24_60
.LBB24_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB24_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB24_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB24_59
.LBB24_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB24_59:                              # %if.end284
	jmp	.LBB24_60
.LBB24_60:                              # %if.end285
	jmp	.LBB24_61
.LBB24_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB24_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB24_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB24_62 Depth=1
	movl	$0, -4(%rbp)
.LBB24_64:                              # %for.cond291
                                        #   Parent Loop BB24_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB24_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB24_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_64
.LBB24_67:                              # %for.end304
                                        #   in Loop: Header=BB24_62 Depth=1
	jmp	.LBB24_68
.LBB24_68:                              # %for.inc305
                                        #   in Loop: Header=BB24_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB24_62
.LBB24_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB24_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB24_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB24_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_70
.LBB24_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB24_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB24_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB24_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB24_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB24_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB24_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB24_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB24_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB24_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB24_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB24_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB24_85:                              # %if.end1174
	cmpl	$443228973, -172(%rbp)  # imm = 0x1A6B232D
	jne	.LBB24_87
.LBB24_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_86
.Lfunc_end24:
	.size	intrapred_luma.15, .Lfunc_end24-intrapred_luma.15
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.16
.LCPI25_0:
	.quad	4616189618054758400     # double 4
.LCPI25_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI25_2:
	.quad	4611686018427387904     # double 2
.LCPI25_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.16
	.p2align	4, 0x90
	.type	dct_luma_sp.16,@function
dct_luma_sp.16:                         # @dct_luma_sp.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI25_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI25_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$621901856, -216(%rbp)  # imm = 0x25117820
	movl	%edi, -140(%rbp)
	movl	%esi, -132(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-140(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -204(%rbp)
	movl	-180(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI25_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI25_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -136(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-136(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -124(%rbp)
	movl	-200(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	$0, -12(%rbp)
.LBB25_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	$0, -16(%rbp)
.LBB25_3:                               # %for.cond38
                                        #   Parent Loop BB25_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB25_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_3
.LBB25_6:                               # %for.end
                                        #   in Loop: Header=BB25_1 Depth=1
	jmp	.LBB25_7
.LBB25_7:                               # %for.inc66
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_1
.LBB25_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB25_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB25_9 Depth=1
	movl	$0, -16(%rbp)
.LBB25_11:                              # %for.cond73
                                        #   Parent Loop BB25_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB25_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB25_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_11
.LBB25_14:                              # %for.end106
                                        #   in Loop: Header=BB25_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB25_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_9
.LBB25_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB25_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	$0, -12(%rbp)
.LBB25_19:                              # %for.cond144
                                        #   Parent Loop BB25_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_19
.LBB25_22:                              # %for.end177
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_17
.LBB25_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB25_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	$0, -16(%rbp)
.LBB25_27:                              # %for.cond215
                                        #   Parent Loop BB25_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_27
.LBB25_30:                              # %for.end244
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_25
.LBB25_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB25_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB25_33 Depth=1
	movl	$0, -12(%rbp)
.LBB25_35:                              # %for.cond278
                                        #   Parent Loop BB25_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB25_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB25_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_35
.LBB25_38:                              # %for.end307
                                        #   in Loop: Header=BB25_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB25_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_33
.LBB25_40:                              # %for.end336
	movl	$0, -208(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -68(%rbp)
.LBB25_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB25_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB25_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB25_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB25_46
.LBB25_45:                              # %if.then
                                        #   in Loop: Header=BB25_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_47
.LBB25_46:                              # %if.else
                                        #   in Loop: Header=BB25_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB25_47:                              # %if.end
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -108(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-184(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB25_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB25_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB25_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-60(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB25_55
	jp	.LBB25_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB25_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB25_54
.LBB25_53:                              # %cond.false
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-60(%rbp), %eax
.LBB25_54:                              # %cond.end
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB25_59
.LBB25_55:                              # %if.else500
                                        #   in Loop: Header=BB25_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB25_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB25_58
.LBB25_57:                              # %if.else504
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB25_58:                              # %if.end505
                                        #   in Loop: Header=BB25_41 Depth=1
	jmp	.LBB25_59
.LBB25_59:                              # %if.end506
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB25_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB25_62
.LBB25_61:                              # %cond.false510
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-128(%rbp), %eax
.LBB25_62:                              # %cond.end511
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	%eax, -116(%rbp)
	jmp	.LBB25_73
.LBB25_63:                              # %if.else513
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB25_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB25_72
.LBB25_65:                              # %if.else517
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB25_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB25_68
.LBB25_67:                              # %cond.false521
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-60(%rbp), %eax
.LBB25_68:                              # %cond.end522
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB25_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB25_71
.LBB25_70:                              # %cond.false527
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-128(%rbp), %eax
.LBB25_71:                              # %cond.end528
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	%eax, -116(%rbp)
.LBB25_72:                              # %if.end530
                                        #   in Loop: Header=BB25_41 Depth=1
	jmp	.LBB25_73
.LBB25_73:                              # %if.end531
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB25_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	$1, -208(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB25_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB25_77
.LBB25_76:                              # %if.else539
                                        #   in Loop: Header=BB25_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB25_77:                              # %if.end546
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -64(%rbp)
	movl	-56(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -108(%rbp)
.LBB25_78:                              # %if.end568
                                        #   in Loop: Header=BB25_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-184(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-108(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-200(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB25_41
.LBB25_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB25_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_83 Depth 2
                                        #     Child Loop BB25_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB25_81 Depth=1
	movl	$0, -16(%rbp)
.LBB25_83:                              # %for.cond607
                                        #   Parent Loop BB25_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB25_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB25_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_83
.LBB25_86:                              # %for.end620
                                        #   in Loop: Header=BB25_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB25_87:                              # %for.cond639
                                        #   Parent Loop BB25_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB25_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB25_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_87
.LBB25_90:                              # %for.end666
                                        #   in Loop: Header=BB25_81 Depth=1
	jmp	.LBB25_91
.LBB25_91:                              # %for.inc667
                                        #   in Loop: Header=BB25_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_81
.LBB25_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB25_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_95 Depth 2
                                        #     Child Loop BB25_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB25_93 Depth=1
	movl	$0, -12(%rbp)
.LBB25_95:                              # %for.cond674
                                        #   Parent Loop BB25_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB25_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB25_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_95
.LBB25_98:                              # %for.end687
                                        #   in Loop: Header=BB25_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB25_99:                              # %for.cond706
                                        #   Parent Loop BB25_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB25_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB25_103
.LBB25_102:                             # %cond.false721
                                        #   in Loop: Header=BB25_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB25_103:                             # %cond.end729
                                        #   in Loop: Header=BB25_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB25_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB25_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_109
.LBB25_105:                             # %cond.false735
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB25_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_108
.LBB25_107:                             # %cond.false746
                                        #   in Loop: Header=BB25_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB25_108:                             # %cond.end754
                                        #   in Loop: Header=BB25_99 Depth=2
.LBB25_109:                             # %cond.end756
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB25_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB25_112
.LBB25_111:                             # %cond.false774
                                        #   in Loop: Header=BB25_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB25_112:                             # %cond.end782
                                        #   in Loop: Header=BB25_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB25_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB25_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_118
.LBB25_114:                             # %cond.false788
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB25_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_117
.LBB25_116:                             # %cond.false799
                                        #   in Loop: Header=BB25_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB25_117:                             # %cond.end807
                                        #   in Loop: Header=BB25_99 Depth=2
.LBB25_118:                             # %cond.end809
                                        #   in Loop: Header=BB25_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB25_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_99
.LBB25_120:                             # %for.end818
                                        #   in Loop: Header=BB25_93 Depth=1
	jmp	.LBB25_121
.LBB25_121:                             # %for.inc819
                                        #   in Loop: Header=BB25_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_93
.LBB25_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB25_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB25_123 Depth=1
	movl	$0, -16(%rbp)
.LBB25_125:                             # %for.cond826
                                        #   Parent Loop BB25_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB25_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB25_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_125
.LBB25_128:                             # %for.end846
                                        #   in Loop: Header=BB25_123 Depth=1
	jmp	.LBB25_129
.LBB25_129:                             # %for.inc847
                                        #   in Loop: Header=BB25_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_123
.LBB25_130:                             # %for.end849
	movl	-208(%rbp), %ebx
	cmpl	$621901856, -216(%rbp)  # imm = 0x25117820
	jne	.LBB25_132
.LBB25_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_131
.Lfunc_end25:
	.size	dct_luma_sp.16, .Lfunc_end25-dct_luma_sp.16
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.17           # -- Begin function dct_chroma.17
	.p2align	4, 0x90
	.type	dct_chroma.17,@function
dct_chroma.17:                          # @dct_chroma.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1830973947, -380(%rbp) # imm = 0x6D2271FB
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB26_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB26_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB26_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB26_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB26_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB26_11
.LBB26_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB26_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB26_10
.LBB26_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB26_10:                              # %cond.end
.LBB26_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB26_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB26_14
.LBB26_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB26_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB26_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB26_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB26_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_19 Depth 2
                                        #       Child Loop BB26_21 Depth 3
                                        #         Child Loop BB26_25 Depth 4
                                        #       Child Loop BB26_31 Depth 3
                                        #         Child Loop BB26_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB26_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$0, -28(%rbp)
.LBB26_19:                              # %for.cond56
                                        #   Parent Loop BB26_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_21 Depth 3
                                        #         Child Loop BB26_25 Depth 4
                                        #       Child Loop BB26_31 Depth 3
                                        #         Child Loop BB26_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB26_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB26_19 Depth=2
	movl	$0, -12(%rbp)
.LBB26_21:                              # %for.cond60
                                        #   Parent Loop BB26_17 Depth=1
                                        #     Parent Loop BB26_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB26_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB26_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_23:                              # %land.end64
                                        #   in Loop: Header=BB26_21 Depth=3
	testb	$1, %al
	jne	.LBB26_24
	jmp	.LBB26_30
.LBB26_24:                              # %for.body66
                                        #   in Loop: Header=BB26_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB26_25:                              # %for.cond68
                                        #   Parent Loop BB26_17 Depth=1
                                        #     Parent Loop BB26_19 Depth=2
                                        #       Parent Loop BB26_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB26_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB26_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB26_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_25
.LBB26_28:                              # %for.end
                                        #   in Loop: Header=BB26_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB26_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_21
.LBB26_30:                              # %for.end141
                                        #   in Loop: Header=BB26_19 Depth=2
	movl	$0, -16(%rbp)
.LBB26_31:                              # %for.cond142
                                        #   Parent Loop BB26_17 Depth=1
                                        #     Parent Loop BB26_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB26_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB26_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_33:                              # %land.end148
                                        #   in Loop: Header=BB26_31 Depth=3
	testb	$1, %al
	jne	.LBB26_34
	jmp	.LBB26_40
.LBB26_34:                              # %for.body150
                                        #   in Loop: Header=BB26_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB26_35:                              # %for.cond152
                                        #   Parent Loop BB26_17 Depth=1
                                        #     Parent Loop BB26_19 Depth=2
                                        #       Parent Loop BB26_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB26_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB26_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB26_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_35
.LBB26_38:                              # %for.end189
                                        #   in Loop: Header=BB26_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB26_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_31
.LBB26_40:                              # %for.end230
                                        #   in Loop: Header=BB26_19 Depth=2
	jmp	.LBB26_41
.LBB26_41:                              # %for.inc231
                                        #   in Loop: Header=BB26_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB26_19
.LBB26_42:                              # %for.end233
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_43
.LBB26_43:                              # %for.inc234
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB26_17
.LBB26_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB26_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB26_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB26_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB26_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB26_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB26_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB26_50
.LBB26_49:                              # %if.else
                                        #   in Loop: Header=BB26_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB26_50:                              # %if.end349
                                        #   in Loop: Header=BB26_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB26_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB26_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB26_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB26_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB26_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB26_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB26_54:                              # %if.end359
                                        #   in Loop: Header=BB26_46 Depth=1
	jmp	.LBB26_55
.LBB26_55:                              # %if.end360
                                        #   in Loop: Header=BB26_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB26_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB26_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB26_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB26_46 Depth=1
	movl	$1, %eax
	jmp	.LBB26_59
.LBB26_58:                              # %cond.false370
                                        #   in Loop: Header=BB26_46 Depth=1
	movl	-136(%rbp), %eax
.LBB26_59:                              # %cond.end371
                                        #   in Loop: Header=BB26_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB26_60:                              # %if.end384
                                        #   in Loop: Header=BB26_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB26_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB26_46
.LBB26_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB26_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB26_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB26_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB26_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB26_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB26_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB26_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB26_68
.LBB26_67:                              # %if.else447
                                        #   in Loop: Header=BB26_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB26_68:                              # %if.end461
                                        #   in Loop: Header=BB26_63 Depth=1
	jmp	.LBB26_73
.LBB26_69:                              # %if.else462
                                        #   in Loop: Header=BB26_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB26_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB26_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB26_72
.LBB26_71:                              # %if.else479
                                        #   in Loop: Header=BB26_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB26_72:                              # %if.end493
                                        #   in Loop: Header=BB26_63 Depth=1
	jmp	.LBB26_73
.LBB26_73:                              # %if.end494
                                        #   in Loop: Header=BB26_63 Depth=1
	jmp	.LBB26_74
.LBB26_74:                              # %for.inc495
                                        #   in Loop: Header=BB26_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_63
.LBB26_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB26_213
.LBB26_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB26_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB26_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB26_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB26_78 Depth=1
	movl	$0, -16(%rbp)
.LBB26_80:                              # %for.cond523
                                        #   Parent Loop BB26_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB26_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB26_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB26_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_80
.LBB26_83:                              # %for.end541
                                        #   in Loop: Header=BB26_78 Depth=1
	jmp	.LBB26_84
.LBB26_84:                              # %for.inc542
                                        #   in Loop: Header=BB26_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_78
.LBB26_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB26_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB26_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB26_86 Depth=1
	movl	$0, -12(%rbp)
.LBB26_88:                              # %for.cond605
                                        #   Parent Loop BB26_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB26_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB26_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB26_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_88
.LBB26_91:                              # %for.end634
                                        #   in Loop: Header=BB26_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB26_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_86
.LBB26_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB26_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB26_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB26_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB26_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB26_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB26_98
.LBB26_97:                              # %if.else700
                                        #   in Loop: Header=BB26_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB26_98:                              # %if.end723
                                        #   in Loop: Header=BB26_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB26_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB26_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB26_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB26_94 Depth=1
	movl	$1, %eax
	jmp	.LBB26_102
.LBB26_101:                             # %cond.false735
                                        #   in Loop: Header=BB26_94 Depth=1
	movl	-136(%rbp), %eax
.LBB26_102:                             # %cond.end736
                                        #   in Loop: Header=BB26_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB26_103:                             # %if.end748
                                        #   in Loop: Header=BB26_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB26_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB26_94
.LBB26_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB26_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_108 Depth 2
                                        #     Child Loop BB26_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB26_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB26_106 Depth=1
	movl	$0, -12(%rbp)
.LBB26_108:                             # %for.cond823
                                        #   Parent Loop BB26_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB26_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB26_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB26_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_108
.LBB26_111:                             # %for.end835
                                        #   in Loop: Header=BB26_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB26_112:                             # %for.cond852
                                        #   Parent Loop BB26_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB26_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB26_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB26_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB26_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB26_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB26_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB26_117
.LBB26_116:                             # %if.else915
                                        #   in Loop: Header=BB26_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB26_117:                             # %if.end968
                                        #   in Loop: Header=BB26_112 Depth=2
	jmp	.LBB26_122
.LBB26_118:                             # %if.else969
                                        #   in Loop: Header=BB26_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB26_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB26_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB26_121
.LBB26_120:                             # %if.else1019
                                        #   in Loop: Header=BB26_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB26_121:                             # %if.end1066
                                        #   in Loop: Header=BB26_112 Depth=2
	jmp	.LBB26_122
.LBB26_122:                             # %if.end1067
                                        #   in Loop: Header=BB26_112 Depth=2
	jmp	.LBB26_123
.LBB26_123:                             # %for.inc1068
                                        #   in Loop: Header=BB26_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_112
.LBB26_124:                             # %for.end1070
                                        #   in Loop: Header=BB26_106 Depth=1
	jmp	.LBB26_125
.LBB26_125:                             # %for.inc1071
                                        #   in Loop: Header=BB26_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_106
.LBB26_126:                             # %for.end1073
	jmp	.LBB26_212
.LBB26_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB26_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB26_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB26_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB26_129 Depth=1
	movl	$0, -16(%rbp)
.LBB26_131:                             # %for.cond1083
                                        #   Parent Loop BB26_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB26_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB26_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB26_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_131
.LBB26_134:                             # %for.end1101
                                        #   in Loop: Header=BB26_129 Depth=1
	jmp	.LBB26_135
.LBB26_135:                             # %for.inc1102
                                        #   in Loop: Header=BB26_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_129
.LBB26_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB26_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB26_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB26_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_139:                             # %land.end1111
                                        #   in Loop: Header=BB26_137 Depth=1
	testb	$1, %al
	jne	.LBB26_140
	jmp	.LBB26_146
.LBB26_140:                             # %for.body1113
                                        #   in Loop: Header=BB26_137 Depth=1
	movl	$0, -16(%rbp)
.LBB26_141:                             # %for.cond1114
                                        #   Parent Loop BB26_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB26_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB26_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB26_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_141
.LBB26_144:                             # %for.end1143
                                        #   in Loop: Header=BB26_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB26_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_137
.LBB26_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB26_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB26_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB26_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_149:                             # %land.end1177
                                        #   in Loop: Header=BB26_147 Depth=1
	testb	$1, %al
	jne	.LBB26_150
	jmp	.LBB26_156
.LBB26_150:                             # %for.body1179
                                        #   in Loop: Header=BB26_147 Depth=1
	movl	$0, -12(%rbp)
.LBB26_151:                             # %for.cond1180
                                        #   Parent Loop BB26_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB26_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB26_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB26_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_151
.LBB26_154:                             # %for.end1209
                                        #   in Loop: Header=BB26_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB26_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_147
.LBB26_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB26_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB26_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB26_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB26_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB26_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB26_164
.LBB26_160:                             # %if.else1261
                                        #   in Loop: Header=BB26_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB26_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB26_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB26_163
.LBB26_162:                             # %if.else1287
                                        #   in Loop: Header=BB26_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB26_163:                             # %if.end1310
                                        #   in Loop: Header=BB26_157 Depth=1
	jmp	.LBB26_164
.LBB26_164:                             # %if.end1311
                                        #   in Loop: Header=BB26_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB26_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB26_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	$1, %eax
	jmp	.LBB26_168
.LBB26_167:                             # %cond.false1322
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	-136(%rbp), %eax
.LBB26_168:                             # %cond.end1323
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB26_169:                             # %if.end1335
                                        #   in Loop: Header=BB26_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB26_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB26_171:                             # %if.end1347
                                        #   in Loop: Header=BB26_157 Depth=1
	jmp	.LBB26_172
.LBB26_172:                             # %for.inc1348
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB26_157
.LBB26_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB26_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_178 Depth 2
                                        #     Child Loop BB26_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB26_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB26_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_176:                             # %land.end1359
                                        #   in Loop: Header=BB26_174 Depth=1
	testb	$1, %al
	jne	.LBB26_177
	jmp	.LBB26_187
.LBB26_177:                             # %for.body1361
                                        #   in Loop: Header=BB26_174 Depth=1
	movl	$0, -16(%rbp)
.LBB26_178:                             # %for.cond1362
                                        #   Parent Loop BB26_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB26_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB26_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB26_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_178
.LBB26_181:                             # %for.end1374
                                        #   in Loop: Header=BB26_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB26_182:                             # %for.cond1391
                                        #   Parent Loop BB26_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB26_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB26_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB26_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_182
.LBB26_185:                             # %for.end1416
                                        #   in Loop: Header=BB26_174 Depth=1
	jmp	.LBB26_186
.LBB26_186:                             # %for.inc1417
                                        #   in Loop: Header=BB26_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_174
.LBB26_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB26_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_192 Depth 2
                                        #     Child Loop BB26_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB26_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB26_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_190:                             # %land.end1426
                                        #   in Loop: Header=BB26_188 Depth=1
	testb	$1, %al
	jne	.LBB26_191
	jmp	.LBB26_210
.LBB26_191:                             # %for.body1428
                                        #   in Loop: Header=BB26_188 Depth=1
	movl	$0, -12(%rbp)
.LBB26_192:                             # %for.cond1429
                                        #   Parent Loop BB26_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB26_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB26_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB26_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_192
.LBB26_195:                             # %for.end1441
                                        #   in Loop: Header=BB26_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB26_196:                             # %for.cond1458
                                        #   Parent Loop BB26_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB26_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB26_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB26_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB26_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB26_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB26_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB26_201
.LBB26_200:                             # %if.else1521
                                        #   in Loop: Header=BB26_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB26_201:                             # %if.end1574
                                        #   in Loop: Header=BB26_196 Depth=2
	jmp	.LBB26_206
.LBB26_202:                             # %if.else1575
                                        #   in Loop: Header=BB26_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB26_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB26_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB26_205
.LBB26_204:                             # %if.else1625
                                        #   in Loop: Header=BB26_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB26_205:                             # %if.end1672
                                        #   in Loop: Header=BB26_196 Depth=2
	jmp	.LBB26_206
.LBB26_206:                             # %if.end1673
                                        #   in Loop: Header=BB26_196 Depth=2
	jmp	.LBB26_207
.LBB26_207:                             # %for.inc1674
                                        #   in Loop: Header=BB26_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_196
.LBB26_208:                             # %for.end1676
                                        #   in Loop: Header=BB26_188 Depth=1
	jmp	.LBB26_209
.LBB26_209:                             # %for.inc1677
                                        #   in Loop: Header=BB26_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_188
.LBB26_210:                             # %for.end1679
	jmp	.LBB26_211
.LBB26_211:                             # %if.end1680
	jmp	.LBB26_212
.LBB26_212:                             # %if.end1681
	jmp	.LBB26_213
.LBB26_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB26_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_216 Depth 2
                                        #       Child Loop BB26_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB26_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB26_214 Depth=1
	movl	$0, -112(%rbp)
.LBB26_216:                             # %for.cond1689
                                        #   Parent Loop BB26_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB26_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB26_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB26_218:                             # %for.cond1722
                                        #   Parent Loop BB26_214 Depth=1
                                        #     Parent Loop BB26_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB26_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB26_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB26_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB26_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB26_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_223
.LBB26_222:                             # %if.then1731
                                        #   in Loop: Header=BB26_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_224
.LBB26_223:                             # %if.else1740
                                        #   in Loop: Header=BB26_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB26_224:                             # %if.end1749
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB26_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB26_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB26_230
.LBB26_226:                             # %if.else1761
                                        #   in Loop: Header=BB26_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB26_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB26_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB26_229
.LBB26_228:                             # %if.else1792
                                        #   in Loop: Header=BB26_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB26_229:                             # %if.end1820
                                        #   in Loop: Header=BB26_218 Depth=3
	jmp	.LBB26_230
.LBB26_230:                             # %if.end1821
                                        #   in Loop: Header=BB26_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB26_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB26_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB26_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB26_234
.LBB26_233:                             # %if.then1839
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB26_235
.LBB26_234:                             # %if.else1841
                                        #   in Loop: Header=BB26_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB26_235:                             # %if.end1848
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB26_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB26_247
.LBB26_237:                             # %if.else1872
                                        #   in Loop: Header=BB26_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB26_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB26_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB26_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB26_241
.LBB26_240:                             # %if.else1893
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB26_241:                             # %if.end1908
                                        #   in Loop: Header=BB26_218 Depth=3
	jmp	.LBB26_246
.LBB26_242:                             # %if.else1909
                                        #   in Loop: Header=BB26_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB26_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB26_245
.LBB26_244:                             # %if.else1924
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB26_245:                             # %if.end1936
                                        #   in Loop: Header=BB26_218 Depth=3
	jmp	.LBB26_246
.LBB26_246:                             # %if.end1937
                                        #   in Loop: Header=BB26_218 Depth=3
	jmp	.LBB26_247
.LBB26_247:                             # %if.end1938
                                        #   in Loop: Header=BB26_218 Depth=3
	jmp	.LBB26_248
.LBB26_248:                             # %if.end1939
                                        #   in Loop: Header=BB26_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB26_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB26_250:                             # %if.end1949
                                        #   in Loop: Header=BB26_218 Depth=3
	jmp	.LBB26_251
.LBB26_251:                             # %for.inc1950
                                        #   in Loop: Header=BB26_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB26_218
.LBB26_252:                             # %for.end1952
                                        #   in Loop: Header=BB26_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB26_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB26_216
.LBB26_254:                             # %for.end1957
                                        #   in Loop: Header=BB26_214 Depth=1
	jmp	.LBB26_255
.LBB26_255:                             # %for.inc1958
                                        #   in Loop: Header=BB26_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB26_214
.LBB26_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB26_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB26_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB26_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_261 Depth 2
                                        #       Child Loop BB26_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB26_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB26_259 Depth=1
	movl	$0, -112(%rbp)
.LBB26_261:                             # %for.cond1972
                                        #   Parent Loop BB26_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB26_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB26_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB26_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB26_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB26_264:                             # %if.end2016
                                        #   in Loop: Header=BB26_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB26_265:                             # %for.cond2018
                                        #   Parent Loop BB26_259 Depth=1
                                        #     Parent Loop BB26_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB26_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB26_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB26_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB26_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB26_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_270
.LBB26_269:                             # %if.then2030
                                        #   in Loop: Header=BB26_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_271
.LBB26_270:                             # %if.else2039
                                        #   in Loop: Header=BB26_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB26_271:                             # %if.end2048
                                        #   in Loop: Header=BB26_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB26_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB26_265
.LBB26_273:                             # %for.end2060
                                        #   in Loop: Header=BB26_261 Depth=2
	jmp	.LBB26_274
.LBB26_274:                             # %for.inc2061
                                        #   in Loop: Header=BB26_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB26_261
.LBB26_275:                             # %for.end2063
                                        #   in Loop: Header=BB26_259 Depth=1
	jmp	.LBB26_276
.LBB26_276:                             # %for.inc2064
                                        #   in Loop: Header=BB26_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB26_259
.LBB26_277:                             # %for.end2066
	jmp	.LBB26_278
.LBB26_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB26_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB26_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB26_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_285 Depth 2
                                        #       Child Loop BB26_287 Depth 3
                                        #         Child Loop BB26_289 Depth 4
                                        #         Child Loop BB26_293 Depth 4
                                        #       Child Loop BB26_299 Depth 3
                                        #         Child Loop BB26_303 Depth 4
                                        #         Child Loop BB26_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB26_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB26_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_283:                             # %land.end2079
                                        #   in Loop: Header=BB26_281 Depth=1
	testb	$1, %al
	jne	.LBB26_284
	jmp	.LBB26_340
.LBB26_284:                             # %for.body2081
                                        #   in Loop: Header=BB26_281 Depth=1
	movl	$0, -28(%rbp)
.LBB26_285:                             # %for.cond2082
                                        #   Parent Loop BB26_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_287 Depth 3
                                        #         Child Loop BB26_289 Depth 4
                                        #         Child Loop BB26_293 Depth 4
                                        #       Child Loop BB26_299 Depth 3
                                        #         Child Loop BB26_303 Depth 4
                                        #         Child Loop BB26_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB26_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB26_285 Depth=2
	movl	$0, -12(%rbp)
.LBB26_287:                             # %for.cond2087
                                        #   Parent Loop BB26_281 Depth=1
                                        #     Parent Loop BB26_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_289 Depth 4
                                        #         Child Loop BB26_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB26_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB26_287 Depth=3
	movl	$0, -16(%rbp)
.LBB26_289:                             # %for.cond2091
                                        #   Parent Loop BB26_281 Depth=1
                                        #     Parent Loop BB26_285 Depth=2
                                        #       Parent Loop BB26_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB26_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB26_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB26_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_289
.LBB26_292:                             # %for.end2106
                                        #   in Loop: Header=BB26_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB26_293:                             # %for.cond2125
                                        #   Parent Loop BB26_281 Depth=1
                                        #     Parent Loop BB26_285 Depth=2
                                        #       Parent Loop BB26_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB26_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB26_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB26_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_293
.LBB26_296:                             # %for.end2156
                                        #   in Loop: Header=BB26_287 Depth=3
	jmp	.LBB26_297
.LBB26_297:                             # %for.inc2157
                                        #   in Loop: Header=BB26_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_287
.LBB26_298:                             # %for.end2159
                                        #   in Loop: Header=BB26_285 Depth=2
	movl	$0, -16(%rbp)
.LBB26_299:                             # %for.cond2160
                                        #   Parent Loop BB26_281 Depth=1
                                        #     Parent Loop BB26_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_303 Depth 4
                                        #         Child Loop BB26_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB26_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB26_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_301:                             # %land.end2166
                                        #   in Loop: Header=BB26_299 Depth=3
	testb	$1, %al
	jne	.LBB26_302
	jmp	.LBB26_336
.LBB26_302:                             # %for.body2168
                                        #   in Loop: Header=BB26_299 Depth=3
	movl	$0, -12(%rbp)
.LBB26_303:                             # %for.cond2169
                                        #   Parent Loop BB26_281 Depth=1
                                        #     Parent Loop BB26_285 Depth=2
                                        #       Parent Loop BB26_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB26_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB26_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB26_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_303
.LBB26_306:                             # %for.end2184
                                        #   in Loop: Header=BB26_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB26_307:                             # %for.cond2203
                                        #   Parent Loop BB26_281 Depth=1
                                        #     Parent Loop BB26_285 Depth=2
                                        #       Parent Loop BB26_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB26_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB26_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB26_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB26_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB26_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB26_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB26_312
.LBB26_311:                             # %cond.false2231
                                        #   in Loop: Header=BB26_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB26_312:                             # %cond.end2250
                                        #   in Loop: Header=BB26_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB26_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB26_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB26_318
.LBB26_314:                             # %cond.false2257
                                        #   in Loop: Header=BB26_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB26_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB26_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB26_317
.LBB26_316:                             # %cond.false2279
                                        #   in Loop: Header=BB26_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB26_317:                             # %cond.end2298
                                        #   in Loop: Header=BB26_307 Depth=4
.LBB26_318:                             # %cond.end2300
                                        #   in Loop: Header=BB26_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB26_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB26_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB26_321
.LBB26_320:                             # %cond.false2333
                                        #   in Loop: Header=BB26_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB26_321:                             # %cond.end2352
                                        #   in Loop: Header=BB26_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB26_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB26_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB26_327
.LBB26_323:                             # %cond.false2359
                                        #   in Loop: Header=BB26_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB26_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB26_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB26_326
.LBB26_325:                             # %cond.false2381
                                        #   in Loop: Header=BB26_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB26_326:                             # %cond.end2400
                                        #   in Loop: Header=BB26_307 Depth=4
.LBB26_327:                             # %cond.end2402
                                        #   in Loop: Header=BB26_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB26_332
.LBB26_328:                             # %if.else2412
                                        #   in Loop: Header=BB26_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB26_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB26_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB26_331
.LBB26_330:                             # %if.else2439
                                        #   in Loop: Header=BB26_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB26_331:                             # %if.end2468
                                        #   in Loop: Header=BB26_307 Depth=4
	jmp	.LBB26_332
.LBB26_332:                             # %if.end2469
                                        #   in Loop: Header=BB26_307 Depth=4
	jmp	.LBB26_333
.LBB26_333:                             # %for.inc2470
                                        #   in Loop: Header=BB26_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_307
.LBB26_334:                             # %for.end2472
                                        #   in Loop: Header=BB26_299 Depth=3
	jmp	.LBB26_335
.LBB26_335:                             # %for.inc2473
                                        #   in Loop: Header=BB26_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_299
.LBB26_336:                             # %for.end2475
                                        #   in Loop: Header=BB26_285 Depth=2
	jmp	.LBB26_337
.LBB26_337:                             # %for.inc2476
                                        #   in Loop: Header=BB26_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB26_285
.LBB26_338:                             # %for.end2478
                                        #   in Loop: Header=BB26_281 Depth=1
	jmp	.LBB26_339
.LBB26_339:                             # %for.inc2479
                                        #   in Loop: Header=BB26_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB26_281
.LBB26_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB26_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB26_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB26_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB26_342 Depth=1
	movl	$0, -16(%rbp)
.LBB26_344:                             # %for.cond2490
                                        #   Parent Loop BB26_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB26_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB26_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB26_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB26_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB26_348
.LBB26_347:                             # %if.else2518
                                        #   in Loop: Header=BB26_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB26_348:                             # %if.end2536
                                        #   in Loop: Header=BB26_344 Depth=2
	jmp	.LBB26_349
.LBB26_349:                             # %for.inc2537
                                        #   in Loop: Header=BB26_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_344
.LBB26_350:                             # %for.end2539
                                        #   in Loop: Header=BB26_342 Depth=1
	jmp	.LBB26_351
.LBB26_351:                             # %for.inc2540
                                        #   in Loop: Header=BB26_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_342
.LBB26_352:                             # %for.end2542
	jmp	.LBB26_353
.LBB26_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$1830973947, -380(%rbp) # imm = 0x6D2271FB
	jne	.LBB26_355
.LBB26_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_354
.Lfunc_end26:
	.size	dct_chroma.17, .Lfunc_end26-dct_chroma.17
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.18             # -- Begin function dct_luma.18
	.p2align	4, 0x90
	.type	dct_luma.18,@function
dct_luma.18:                            # @dct_luma.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$272767359, -148(%rbp)  # imm = 0x1042197F
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB27_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB27_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB27_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB27_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB27_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB27_5:                               # %land.end32
                                        #   in Loop: Header=BB27_3 Depth=1
	testb	$1, %al
	jne	.LBB27_6
	jmp	.LBB27_12
.LBB27_6:                               # %for.body
                                        #   in Loop: Header=BB27_3 Depth=1
	movl	$0, -16(%rbp)
.LBB27_7:                               # %for.cond34
                                        #   Parent Loop BB27_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB27_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB27_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB27_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_7
.LBB27_10:                              # %for.end
                                        #   in Loop: Header=BB27_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB27_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_3
.LBB27_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB27_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB27_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB27_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB27_15:                              # %land.end101
                                        #   in Loop: Header=BB27_13 Depth=1
	testb	$1, %al
	jne	.LBB27_16
	jmp	.LBB27_22
.LBB27_16:                              # %for.body103
                                        #   in Loop: Header=BB27_13 Depth=1
	movl	$0, -12(%rbp)
.LBB27_17:                              # %for.cond104
                                        #   Parent Loop BB27_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB27_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB27_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB27_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_17
.LBB27_20:                              # %for.end136
                                        #   in Loop: Header=BB27_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB27_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_13
.LBB27_22:                              # %for.end169
	movl	$0, -128(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -88(%rbp)
.LBB27_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB27_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB27_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB27_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB27_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB27_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB27_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB27_28
.LBB27_27:                              # %if.then
                                        #   in Loop: Header=BB27_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_29
.LBB27_28:                              # %if.else
                                        #   in Loop: Header=BB27_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB27_29:                              # %if.end
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB27_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB27_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB27_35
.LBB27_31:                              # %if.else199
                                        #   in Loop: Header=BB27_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB27_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB27_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_34
.LBB27_33:                              # %if.else223
                                        #   in Loop: Header=BB27_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB27_34:                              # %if.end245
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_35
.LBB27_35:                              # %if.end246
                                        #   in Loop: Header=BB27_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB27_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	$1, -128(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB27_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB27_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB27_39
.LBB27_38:                              # %if.then254
                                        #   in Loop: Header=BB27_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB27_40
.LBB27_39:                              # %if.else256
                                        #   in Loop: Header=BB27_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB27_40:                              # %if.end263
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB27_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB27_52
.LBB27_42:                              # %if.else283
                                        #   in Loop: Header=BB27_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB27_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB27_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB27_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB27_46
.LBB27_45:                              # %if.else301
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB27_46:                              # %if.end314
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_51
.LBB27_47:                              # %if.else315
                                        #   in Loop: Header=BB27_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB27_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB27_50
.LBB27_49:                              # %if.else328
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB27_50:                              # %if.end338
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_51
.LBB27_51:                              # %if.end339
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_52
.LBB27_52:                              # %if.end340
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_53
.LBB27_53:                              # %if.end341
                                        #   in Loop: Header=BB27_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB27_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB27_55:                              # %if.end349
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_56
.LBB27_56:                              # %for.inc350
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB27_23
.LBB27_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB27_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_62 Depth 2
                                        #     Child Loop BB27_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB27_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB27_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB27_60:                              # %land.end361
                                        #   in Loop: Header=BB27_58 Depth=1
	testb	$1, %al
	jne	.LBB27_61
	jmp	.LBB27_71
.LBB27_61:                              # %for.body363
                                        #   in Loop: Header=BB27_58 Depth=1
	movl	$0, -16(%rbp)
.LBB27_62:                              # %for.cond364
                                        #   Parent Loop BB27_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB27_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB27_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB27_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_62
.LBB27_65:                              # %for.end377
                                        #   in Loop: Header=BB27_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB27_66:                              # %for.cond396
                                        #   Parent Loop BB27_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB27_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB27_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB27_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_66
.LBB27_69:                              # %for.end423
                                        #   in Loop: Header=BB27_58 Depth=1
	jmp	.LBB27_70
.LBB27_70:                              # %for.inc424
                                        #   in Loop: Header=BB27_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_58
.LBB27_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB27_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_76 Depth 2
                                        #     Child Loop BB27_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB27_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB27_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB27_74:                              # %land.end433
                                        #   in Loop: Header=BB27_72 Depth=1
	testb	$1, %al
	jne	.LBB27_75
	jmp	.LBB27_109
.LBB27_75:                              # %for.body435
                                        #   in Loop: Header=BB27_72 Depth=1
	movl	$0, -12(%rbp)
.LBB27_76:                              # %for.cond436
                                        #   Parent Loop BB27_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB27_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB27_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB27_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_76
.LBB27_79:                              # %for.end449
                                        #   in Loop: Header=BB27_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB27_80:                              # %for.cond468
                                        #   Parent Loop BB27_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB27_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB27_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB27_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB27_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB27_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB27_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB27_85
.LBB27_84:                              # %cond.false
                                        #   in Loop: Header=BB27_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB27_85:                              # %cond.end
                                        #   in Loop: Header=BB27_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB27_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB27_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB27_91
.LBB27_87:                              # %cond.false518
                                        #   in Loop: Header=BB27_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB27_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB27_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_90
.LBB27_89:                              # %cond.false540
                                        #   in Loop: Header=BB27_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB27_90:                              # %cond.end559
                                        #   in Loop: Header=BB27_80 Depth=2
.LBB27_91:                              # %cond.end561
                                        #   in Loop: Header=BB27_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB27_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB27_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB27_94
.LBB27_93:                              # %cond.false592
                                        #   in Loop: Header=BB27_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB27_94:                              # %cond.end611
                                        #   in Loop: Header=BB27_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB27_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB27_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB27_100
.LBB27_96:                              # %cond.false618
                                        #   in Loop: Header=BB27_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB27_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB27_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_99
.LBB27_98:                              # %cond.false640
                                        #   in Loop: Header=BB27_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB27_99:                              # %cond.end659
                                        #   in Loop: Header=BB27_80 Depth=2
.LBB27_100:                             # %cond.end661
                                        #   in Loop: Header=BB27_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB27_105
.LBB27_101:                             # %if.else669
                                        #   in Loop: Header=BB27_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB27_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB27_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB27_104
.LBB27_103:                             # %if.else692
                                        #   in Loop: Header=BB27_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB27_104:                             # %if.end717
                                        #   in Loop: Header=BB27_80 Depth=2
	jmp	.LBB27_105
.LBB27_105:                             # %if.end718
                                        #   in Loop: Header=BB27_80 Depth=2
	jmp	.LBB27_106
.LBB27_106:                             # %for.inc719
                                        #   in Loop: Header=BB27_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_80
.LBB27_107:                             # %for.end721
                                        #   in Loop: Header=BB27_72 Depth=1
	jmp	.LBB27_108
.LBB27_108:                             # %for.inc722
                                        #   in Loop: Header=BB27_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_72
.LBB27_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB27_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB27_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB27_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB27_111 Depth=1
	movl	$0, -16(%rbp)
.LBB27_113:                             # %for.cond732
                                        #   Parent Loop BB27_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB27_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB27_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB27_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB27_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB27_117
.LBB27_116:                             # %if.else761
                                        #   in Loop: Header=BB27_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB27_117:                             # %if.end779
                                        #   in Loop: Header=BB27_113 Depth=2
	jmp	.LBB27_118
.LBB27_118:                             # %for.inc780
                                        #   in Loop: Header=BB27_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_113
.LBB27_119:                             # %for.end782
                                        #   in Loop: Header=BB27_111 Depth=1
	jmp	.LBB27_120
.LBB27_120:                             # %for.inc783
                                        #   in Loop: Header=BB27_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_111
.LBB27_121:                             # %for.end785
	jmp	.LBB27_122
.LBB27_122:                             # %if.end786
	movl	-128(%rbp), %ebx
	cmpl	$272767359, -148(%rbp)  # imm = 0x1042197F
	jne	.LBB27_124
.LBB27_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_123
.Lfunc_end27:
	.size	dct_luma.18, .Lfunc_end27-dct_luma.18
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.19        # -- Begin function dct_chroma4x4.19
	.p2align	4, 0x90
	.type	dct_chroma4x4.19,@function
dct_chroma4x4.19:                       # @dct_chroma4x4.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$899530194, -148(%rbp)  # imm = 0x359DBDD2
	movl	%edi, -24(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB28_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB28_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB28_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -84(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB28_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB28_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jge	.LBB28_7
# %bb.6:                                # %cond.true
	movl	-80(%rbp), %eax
	jmp	.LBB28_8
.LBB28_7:                               # %cond.false
	movl	-80(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB28_8:                               # %cond.end
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB28_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB28_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB28_10 Depth=1
	movl	$0, -12(%rbp)
.LBB28_12:                              # %for.cond31
                                        #   Parent Loop BB28_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB28_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB28_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_12
.LBB28_15:                              # %for.end
                                        #   in Loop: Header=BB28_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB28_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_10
.LBB28_17:                              # %for.end92
	jmp	.LBB28_18
.LBB28_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB28_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB28_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB28_20 Depth=1
	movl	$0, -16(%rbp)
.LBB28_22:                              # %for.cond99
                                        #   Parent Loop BB28_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB28_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB28_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_22
.LBB28_25:                              # %for.end132
                                        #   in Loop: Header=BB28_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB28_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_20
.LBB28_27:                              # %for.end165
	jmp	.LBB28_28
.LBB28_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB28_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB28_34
.LBB28_30:                              # %if.else
	cmpl	$1, -84(%rbp)
	jne	.LBB28_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_33
.LBB28_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB28_33:                              # %if.end213
	jmp	.LBB28_34
.LBB28_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB28_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB28_46
.LBB28_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB28_41
# %bb.37:                               # %if.then248
	cmpl	$1, -84(%rbp)
	jne	.LBB28_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB28_40
.LBB28_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB28_40:                              # %if.end290
	jmp	.LBB28_45
.LBB28_41:                              # %if.else291
	cmpl	$1, -84(%rbp)
	jne	.LBB28_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB28_44
.LBB28_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB28_44:                              # %if.end328
	jmp	.LBB28_45
.LBB28_45:                              # %if.end329
	jmp	.LBB28_46
.LBB28_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB28_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB28_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB28_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -88(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB28_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB28_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB28_54
.LBB28_50:                              # %if.else352
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB28_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB28_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_53
.LBB28_52:                              # %if.else381
                                        #   in Loop: Header=BB28_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB28_53:                              # %if.end407
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_54
.LBB28_54:                              # %if.end408
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB28_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB28_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB28_58
.LBB28_57:                              # %if.then415
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	$1, -132(%rbp)
.LBB28_58:                              # %if.end416
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB28_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB28_70
.LBB28_60:                              # %if.else436
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB28_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB28_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB28_64
.LBB28_63:                              # %if.else457
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB28_64:                              # %if.end472
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_69
.LBB28_65:                              # %if.else473
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB28_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB28_68
.LBB28_67:                              # %if.else488
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB28_68:                              # %if.end500
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_69
.LBB28_69:                              # %if.end501
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_70
.LBB28_70:                              # %if.end502
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_71
.LBB28_71:                              # %if.end503
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB28_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB28_73:                              # %if.end511
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_74
.LBB28_74:                              # %for.inc512
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB28_47
.LBB28_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB28_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB28_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_79 Depth 2
                                        #     Child Loop BB28_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB28_77 Depth=1
	movl	$0, -12(%rbp)
.LBB28_79:                              # %for.cond523
                                        #   Parent Loop BB28_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB28_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB28_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_79
.LBB28_82:                              # %for.end536
                                        #   in Loop: Header=BB28_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB28_83:                              # %for.cond555
                                        #   Parent Loop BB28_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB28_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB28_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_83
.LBB28_86:                              # %for.end582
                                        #   in Loop: Header=BB28_77 Depth=1
	jmp	.LBB28_87
.LBB28_87:                              # %for.inc583
                                        #   in Loop: Header=BB28_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_77
.LBB28_88:                              # %for.end585
	jmp	.LBB28_89
.LBB28_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB28_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB28_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_93 Depth 2
                                        #     Child Loop BB28_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB28_91 Depth=1
	movl	$0, -16(%rbp)
.LBB28_93:                              # %for.cond593
                                        #   Parent Loop BB28_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB28_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB28_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_93
.LBB28_96:                              # %for.end606
                                        #   in Loop: Header=BB28_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB28_97:                              # %for.cond625
                                        #   Parent Loop BB28_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB28_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB28_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_97
.LBB28_100:                             # %for.end656
                                        #   in Loop: Header=BB28_91 Depth=1
	jmp	.LBB28_101
.LBB28_101:                             # %for.inc657
                                        #   in Loop: Header=BB28_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_91
.LBB28_102:                             # %for.end659
	jmp	.LBB28_103
.LBB28_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$899530194, -148(%rbp)  # imm = 0x359DBDD2
	jne	.LBB28_105
.LBB28_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_104
.Lfunc_end28:
	.size	dct_chroma4x4.19, .Lfunc_end28-dct_chroma4x4.19
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.20       # -- Begin function intrapred_luma.20
	.p2align	4, 0x90
	.type	intrapred_luma.20,@function
intrapred_luma.20:                      # @intrapred_luma.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1437742279, -172(%rbp) # imm = 0x55B234C7
	movl	%edi, -116(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -192(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -200(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_1
.LBB29_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-224(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB29_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB29_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB29_10
.LBB29_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB29_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB29_9:                               # %lor.end
.LBB29_10:                              # %land.end
	xorb	$-1, %al
.LBB29_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB29_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB29_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB29_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB29_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB29_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_17
.LBB29_16:                              # %cond.false
                                        #   in Loop: Header=BB29_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_17
.LBB29_17:                              # %cond.end
                                        #   in Loop: Header=BB29_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB29_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_13
.LBB29_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB29_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_22
.LBB29_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB29_22
.LBB29_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB29_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_25
.LBB29_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB29_25
.LBB29_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -224(%rbp)
	je	.LBB29_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-220(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_28
.LBB29_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB29_28
.LBB29_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB29_30
.LBB29_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-224(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB29_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB29_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB29_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB29_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB29_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB29_36
.LBB29_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB29_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB29_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_39
.LBB29_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB29_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB29_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_42
.LBB29_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB29_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB29_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB29_45
.LBB29_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB29_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB29_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB29_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB29_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB29_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_46
.LBB29_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB29_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB29_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB29_61
.LBB29_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB29_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB29_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB29_60
.LBB29_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB29_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB29_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB29_59
.LBB29_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB29_59:                              # %if.end284
	jmp	.LBB29_60
.LBB29_60:                              # %if.end285
	jmp	.LBB29_61
.LBB29_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB29_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB29_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB29_62 Depth=1
	movl	$0, -4(%rbp)
.LBB29_64:                              # %for.cond291
                                        #   Parent Loop BB29_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB29_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB29_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_64
.LBB29_67:                              # %for.end304
                                        #   in Loop: Header=BB29_62 Depth=1
	jmp	.LBB29_68
.LBB29_68:                              # %for.inc305
                                        #   in Loop: Header=BB29_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB29_62
.LBB29_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB29_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB29_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB29_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_70
.LBB29_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB29_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB29_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB29_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB29_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB29_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB29_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB29_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB29_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB29_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB29_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB29_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB29_85:                              # %if.end1174
	cmpl	$1437742279, -172(%rbp) # imm = 0x55B234C7
	jne	.LBB29_87
.LBB29_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_86
.Lfunc_end29:
	.size	intrapred_luma.20, .Lfunc_end29-intrapred_luma.20
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.21 # -- Begin function intrapred_luma_16x16.21
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.21,@function
intrapred_luma_16x16.21:                # @intrapred_luma_16x16.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$2021360111, -92(%rbp)  # imm = 0x787B81EF
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB30_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_1
.LBB30_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB30_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB30_20
.LBB30_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB30_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB30_9
.LBB30_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB30_9
.LBB30_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB30_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB30_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB30_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB30_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB30_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB30_14
.LBB30_13:                              # %cond.false23
                                        #   in Loop: Header=BB30_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_14
.LBB30_14:                              # %cond.end24
                                        #   in Loop: Header=BB30_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB30_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_10
.LBB30_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB30_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB30_19
.LBB30_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB30_19
.LBB30_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB30_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB30_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB30_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB30_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB30_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB30_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB30_24:                              # %if.end51
                                        #   in Loop: Header=BB30_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB30_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB30_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB30_26:                              # %if.end68
                                        #   in Loop: Header=BB30_21 Depth=1
	jmp	.LBB30_27
.LBB30_27:                              # %for.inc69
                                        #   in Loop: Header=BB30_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_21
.LBB30_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB30_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB30_31
# %bb.30:                               # %if.then74
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB30_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB30_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB30_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB30_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB30_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB30_37
# %bb.36:                               # %if.then88
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB30_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB30_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB30_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB30_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB30_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB30_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB30_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB30_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB30_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB30_44:                              # %if.end114
                                        #   in Loop: Header=BB30_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB30_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB30_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB30_46:                              # %if.end133
                                        #   in Loop: Header=BB30_41 Depth=1
	jmp	.LBB30_47
.LBB30_47:                              # %for.inc134
                                        #   in Loop: Header=BB30_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_41
.LBB30_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB30_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB30_49 Depth=1
	movl	$0, -4(%rbp)
.LBB30_51:                              # %for.cond141
                                        #   Parent Loop BB30_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB30_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB30_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_51
.LBB30_54:                              # %for.end173
                                        #   in Loop: Header=BB30_49 Depth=1
	jmp	.LBB30_55
.LBB30_55:                              # %for.inc174
                                        #   in Loop: Header=BB30_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_49
.LBB30_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB30_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB30_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB30_60
.LBB30_59:                              # %if.then181
	jmp	.LBB30_85
.LBB30_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB30_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB30_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB30_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB30_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB30_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_65
.LBB30_64:                              # %if.else210
                                        #   in Loop: Header=BB30_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB30_65:                              # %if.end232
                                        #   in Loop: Header=BB30_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB30_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_61
.LBB30_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB30_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB30_68 Depth=1
	movl	$0, -4(%rbp)
.LBB30_70:                              # %for.cond293
                                        #   Parent Loop BB30_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB30_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB30_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_74
.LBB30_73:                              # %cond.false309
                                        #   in Loop: Header=BB30_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_74:                              # %cond.end318
                                        #   in Loop: Header=BB30_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB30_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_80
.LBB30_76:                              # %cond.false323
                                        #   in Loop: Header=BB30_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB30_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_79
.LBB30_78:                              # %cond.false337
                                        #   in Loop: Header=BB30_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_79:                              # %cond.end346
                                        #   in Loop: Header=BB30_70 Depth=2
.LBB30_80:                              # %cond.end348
                                        #   in Loop: Header=BB30_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB30_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_70
.LBB30_82:                              # %for.end359
                                        #   in Loop: Header=BB30_68 Depth=1
	jmp	.LBB30_83
.LBB30_83:                              # %for.inc360
                                        #   in Loop: Header=BB30_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_68
.LBB30_84:                              # %for.end362.loopexit
	jmp	.LBB30_85
.LBB30_85:                              # %for.end362
	cmpl	$2021360111, -92(%rbp)  # imm = 0x787B81EF
	jne	.LBB30_87
.LBB30_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_86
.Lfunc_end30:
	.size	intrapred_luma_16x16.21, .Lfunc_end30-intrapred_luma_16x16.21
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.22           # -- Begin function dct_chroma.22
	.p2align	4, 0x90
	.type	dct_chroma.22,@function
dct_chroma.22:                          # @dct_chroma.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$140812201, -380(%rbp)  # imm = 0x8649FA9
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB31_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB31_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB31_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB31_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB31_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB31_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB31_11
.LBB31_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB31_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB31_10
.LBB31_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB31_10:                              # %cond.end
.LBB31_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB31_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB31_14
.LBB31_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB31_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB31_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB31_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB31_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_19 Depth 2
                                        #       Child Loop BB31_21 Depth 3
                                        #         Child Loop BB31_25 Depth 4
                                        #       Child Loop BB31_31 Depth 3
                                        #         Child Loop BB31_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB31_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	$0, -24(%rbp)
.LBB31_19:                              # %for.cond56
                                        #   Parent Loop BB31_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_21 Depth 3
                                        #         Child Loop BB31_25 Depth 4
                                        #       Child Loop BB31_31 Depth 3
                                        #         Child Loop BB31_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB31_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	$0, -12(%rbp)
.LBB31_21:                              # %for.cond60
                                        #   Parent Loop BB31_17 Depth=1
                                        #     Parent Loop BB31_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB31_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB31_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_23:                              # %land.end64
                                        #   in Loop: Header=BB31_21 Depth=3
	testb	$1, %al
	jne	.LBB31_24
	jmp	.LBB31_30
.LBB31_24:                              # %for.body66
                                        #   in Loop: Header=BB31_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB31_25:                              # %for.cond68
                                        #   Parent Loop BB31_17 Depth=1
                                        #     Parent Loop BB31_19 Depth=2
                                        #       Parent Loop BB31_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB31_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB31_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB31_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_25
.LBB31_28:                              # %for.end
                                        #   in Loop: Header=BB31_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB31_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_21
.LBB31_30:                              # %for.end141
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	$0, -16(%rbp)
.LBB31_31:                              # %for.cond142
                                        #   Parent Loop BB31_17 Depth=1
                                        #     Parent Loop BB31_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB31_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB31_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_33:                              # %land.end148
                                        #   in Loop: Header=BB31_31 Depth=3
	testb	$1, %al
	jne	.LBB31_34
	jmp	.LBB31_40
.LBB31_34:                              # %for.body150
                                        #   in Loop: Header=BB31_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB31_35:                              # %for.cond152
                                        #   Parent Loop BB31_17 Depth=1
                                        #     Parent Loop BB31_19 Depth=2
                                        #       Parent Loop BB31_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB31_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB31_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB31_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_35
.LBB31_38:                              # %for.end189
                                        #   in Loop: Header=BB31_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB31_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_31
.LBB31_40:                              # %for.end230
                                        #   in Loop: Header=BB31_19 Depth=2
	jmp	.LBB31_41
.LBB31_41:                              # %for.inc231
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_19
.LBB31_42:                              # %for.end233
                                        #   in Loop: Header=BB31_17 Depth=1
	jmp	.LBB31_43
.LBB31_43:                              # %for.inc234
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB31_17
.LBB31_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB31_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB31_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB31_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB31_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB31_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB31_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB31_50
.LBB31_49:                              # %if.else
                                        #   in Loop: Header=BB31_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB31_50:                              # %if.end349
                                        #   in Loop: Header=BB31_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB31_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB31_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB31_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB31_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB31_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB31_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB31_54:                              # %if.end359
                                        #   in Loop: Header=BB31_46 Depth=1
	jmp	.LBB31_55
.LBB31_55:                              # %if.end360
                                        #   in Loop: Header=BB31_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB31_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB31_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB31_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB31_46 Depth=1
	movl	$1, %eax
	jmp	.LBB31_59
.LBB31_58:                              # %cond.false370
                                        #   in Loop: Header=BB31_46 Depth=1
	movl	-132(%rbp), %eax
.LBB31_59:                              # %cond.end371
                                        #   in Loop: Header=BB31_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB31_60:                              # %if.end384
                                        #   in Loop: Header=BB31_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB31_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB31_46
.LBB31_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB31_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB31_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB31_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB31_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB31_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB31_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB31_68
.LBB31_67:                              # %if.else447
                                        #   in Loop: Header=BB31_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB31_68:                              # %if.end461
                                        #   in Loop: Header=BB31_63 Depth=1
	jmp	.LBB31_73
.LBB31_69:                              # %if.else462
                                        #   in Loop: Header=BB31_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB31_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB31_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB31_72
.LBB31_71:                              # %if.else479
                                        #   in Loop: Header=BB31_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB31_72:                              # %if.end493
                                        #   in Loop: Header=BB31_63 Depth=1
	jmp	.LBB31_73
.LBB31_73:                              # %if.end494
                                        #   in Loop: Header=BB31_63 Depth=1
	jmp	.LBB31_74
.LBB31_74:                              # %for.inc495
                                        #   in Loop: Header=BB31_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_63
.LBB31_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB31_213
.LBB31_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB31_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB31_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB31_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB31_78 Depth=1
	movl	$0, -16(%rbp)
.LBB31_80:                              # %for.cond523
                                        #   Parent Loop BB31_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB31_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB31_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB31_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_80
.LBB31_83:                              # %for.end541
                                        #   in Loop: Header=BB31_78 Depth=1
	jmp	.LBB31_84
.LBB31_84:                              # %for.inc542
                                        #   in Loop: Header=BB31_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_78
.LBB31_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB31_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB31_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB31_86 Depth=1
	movl	$0, -12(%rbp)
.LBB31_88:                              # %for.cond605
                                        #   Parent Loop BB31_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB31_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB31_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB31_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_88
.LBB31_91:                              # %for.end634
                                        #   in Loop: Header=BB31_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB31_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_86
.LBB31_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB31_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB31_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB31_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB31_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB31_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB31_98
.LBB31_97:                              # %if.else700
                                        #   in Loop: Header=BB31_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB31_98:                              # %if.end723
                                        #   in Loop: Header=BB31_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB31_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB31_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB31_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB31_94 Depth=1
	movl	$1, %eax
	jmp	.LBB31_102
.LBB31_101:                             # %cond.false735
                                        #   in Loop: Header=BB31_94 Depth=1
	movl	-132(%rbp), %eax
.LBB31_102:                             # %cond.end736
                                        #   in Loop: Header=BB31_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB31_103:                             # %if.end748
                                        #   in Loop: Header=BB31_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB31_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB31_94
.LBB31_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB31_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_108 Depth 2
                                        #     Child Loop BB31_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB31_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB31_106 Depth=1
	movl	$0, -12(%rbp)
.LBB31_108:                             # %for.cond823
                                        #   Parent Loop BB31_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB31_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB31_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB31_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_108
.LBB31_111:                             # %for.end835
                                        #   in Loop: Header=BB31_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB31_112:                             # %for.cond852
                                        #   Parent Loop BB31_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB31_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB31_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB31_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB31_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB31_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB31_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB31_117
.LBB31_116:                             # %if.else915
                                        #   in Loop: Header=BB31_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB31_117:                             # %if.end968
                                        #   in Loop: Header=BB31_112 Depth=2
	jmp	.LBB31_122
.LBB31_118:                             # %if.else969
                                        #   in Loop: Header=BB31_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB31_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB31_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB31_121
.LBB31_120:                             # %if.else1019
                                        #   in Loop: Header=BB31_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB31_121:                             # %if.end1066
                                        #   in Loop: Header=BB31_112 Depth=2
	jmp	.LBB31_122
.LBB31_122:                             # %if.end1067
                                        #   in Loop: Header=BB31_112 Depth=2
	jmp	.LBB31_123
.LBB31_123:                             # %for.inc1068
                                        #   in Loop: Header=BB31_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_112
.LBB31_124:                             # %for.end1070
                                        #   in Loop: Header=BB31_106 Depth=1
	jmp	.LBB31_125
.LBB31_125:                             # %for.inc1071
                                        #   in Loop: Header=BB31_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_106
.LBB31_126:                             # %for.end1073
	jmp	.LBB31_212
.LBB31_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB31_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB31_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB31_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB31_129 Depth=1
	movl	$0, -16(%rbp)
.LBB31_131:                             # %for.cond1083
                                        #   Parent Loop BB31_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB31_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB31_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB31_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_131
.LBB31_134:                             # %for.end1101
                                        #   in Loop: Header=BB31_129 Depth=1
	jmp	.LBB31_135
.LBB31_135:                             # %for.inc1102
                                        #   in Loop: Header=BB31_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_129
.LBB31_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB31_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB31_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB31_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_139:                             # %land.end1111
                                        #   in Loop: Header=BB31_137 Depth=1
	testb	$1, %al
	jne	.LBB31_140
	jmp	.LBB31_146
.LBB31_140:                             # %for.body1113
                                        #   in Loop: Header=BB31_137 Depth=1
	movl	$0, -16(%rbp)
.LBB31_141:                             # %for.cond1114
                                        #   Parent Loop BB31_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB31_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB31_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB31_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_141
.LBB31_144:                             # %for.end1143
                                        #   in Loop: Header=BB31_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB31_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_137
.LBB31_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB31_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB31_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB31_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_149:                             # %land.end1177
                                        #   in Loop: Header=BB31_147 Depth=1
	testb	$1, %al
	jne	.LBB31_150
	jmp	.LBB31_156
.LBB31_150:                             # %for.body1179
                                        #   in Loop: Header=BB31_147 Depth=1
	movl	$0, -12(%rbp)
.LBB31_151:                             # %for.cond1180
                                        #   Parent Loop BB31_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB31_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB31_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB31_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_151
.LBB31_154:                             # %for.end1209
                                        #   in Loop: Header=BB31_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB31_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_147
.LBB31_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB31_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB31_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB31_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB31_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB31_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB31_164
.LBB31_160:                             # %if.else1261
                                        #   in Loop: Header=BB31_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB31_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB31_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB31_163
.LBB31_162:                             # %if.else1287
                                        #   in Loop: Header=BB31_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB31_163:                             # %if.end1310
                                        #   in Loop: Header=BB31_157 Depth=1
	jmp	.LBB31_164
.LBB31_164:                             # %if.end1311
                                        #   in Loop: Header=BB31_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB31_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB31_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB31_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB31_157 Depth=1
	movl	$1, %eax
	jmp	.LBB31_168
.LBB31_167:                             # %cond.false1322
                                        #   in Loop: Header=BB31_157 Depth=1
	movl	-132(%rbp), %eax
.LBB31_168:                             # %cond.end1323
                                        #   in Loop: Header=BB31_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB31_169:                             # %if.end1335
                                        #   in Loop: Header=BB31_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB31_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB31_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB31_171:                             # %if.end1347
                                        #   in Loop: Header=BB31_157 Depth=1
	jmp	.LBB31_172
.LBB31_172:                             # %for.inc1348
                                        #   in Loop: Header=BB31_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB31_157
.LBB31_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB31_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_178 Depth 2
                                        #     Child Loop BB31_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB31_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB31_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_176:                             # %land.end1359
                                        #   in Loop: Header=BB31_174 Depth=1
	testb	$1, %al
	jne	.LBB31_177
	jmp	.LBB31_187
.LBB31_177:                             # %for.body1361
                                        #   in Loop: Header=BB31_174 Depth=1
	movl	$0, -16(%rbp)
.LBB31_178:                             # %for.cond1362
                                        #   Parent Loop BB31_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB31_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB31_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_178
.LBB31_181:                             # %for.end1374
                                        #   in Loop: Header=BB31_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB31_182:                             # %for.cond1391
                                        #   Parent Loop BB31_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB31_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB31_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB31_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_182
.LBB31_185:                             # %for.end1416
                                        #   in Loop: Header=BB31_174 Depth=1
	jmp	.LBB31_186
.LBB31_186:                             # %for.inc1417
                                        #   in Loop: Header=BB31_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_174
.LBB31_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB31_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_192 Depth 2
                                        #     Child Loop BB31_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB31_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB31_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_190:                             # %land.end1426
                                        #   in Loop: Header=BB31_188 Depth=1
	testb	$1, %al
	jne	.LBB31_191
	jmp	.LBB31_210
.LBB31_191:                             # %for.body1428
                                        #   in Loop: Header=BB31_188 Depth=1
	movl	$0, -12(%rbp)
.LBB31_192:                             # %for.cond1429
                                        #   Parent Loop BB31_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB31_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB31_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB31_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_192
.LBB31_195:                             # %for.end1441
                                        #   in Loop: Header=BB31_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB31_196:                             # %for.cond1458
                                        #   Parent Loop BB31_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB31_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB31_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB31_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB31_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB31_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB31_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB31_201
.LBB31_200:                             # %if.else1521
                                        #   in Loop: Header=BB31_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB31_201:                             # %if.end1574
                                        #   in Loop: Header=BB31_196 Depth=2
	jmp	.LBB31_206
.LBB31_202:                             # %if.else1575
                                        #   in Loop: Header=BB31_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB31_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB31_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB31_205
.LBB31_204:                             # %if.else1625
                                        #   in Loop: Header=BB31_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB31_205:                             # %if.end1672
                                        #   in Loop: Header=BB31_196 Depth=2
	jmp	.LBB31_206
.LBB31_206:                             # %if.end1673
                                        #   in Loop: Header=BB31_196 Depth=2
	jmp	.LBB31_207
.LBB31_207:                             # %for.inc1674
                                        #   in Loop: Header=BB31_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_196
.LBB31_208:                             # %for.end1676
                                        #   in Loop: Header=BB31_188 Depth=1
	jmp	.LBB31_209
.LBB31_209:                             # %for.inc1677
                                        #   in Loop: Header=BB31_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_188
.LBB31_210:                             # %for.end1679
	jmp	.LBB31_211
.LBB31_211:                             # %if.end1680
	jmp	.LBB31_212
.LBB31_212:                             # %if.end1681
	jmp	.LBB31_213
.LBB31_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB31_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_216 Depth 2
                                        #       Child Loop BB31_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB31_214 Depth=1
	movl	$0, -116(%rbp)
.LBB31_216:                             # %for.cond1689
                                        #   Parent Loop BB31_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB31_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB31_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB31_218:                             # %for.cond1722
                                        #   Parent Loop BB31_214 Depth=1
                                        #     Parent Loop BB31_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB31_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB31_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB31_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB31_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB31_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_223
.LBB31_222:                             # %if.then1731
                                        #   in Loop: Header=BB31_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_224
.LBB31_223:                             # %if.else1740
                                        #   in Loop: Header=BB31_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB31_224:                             # %if.end1749
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB31_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB31_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB31_230
.LBB31_226:                             # %if.else1761
                                        #   in Loop: Header=BB31_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB31_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB31_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB31_229
.LBB31_228:                             # %if.else1792
                                        #   in Loop: Header=BB31_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB31_229:                             # %if.end1820
                                        #   in Loop: Header=BB31_218 Depth=3
	jmp	.LBB31_230
.LBB31_230:                             # %if.end1821
                                        #   in Loop: Header=BB31_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB31_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB31_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB31_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB31_234
.LBB31_233:                             # %if.then1839
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB31_235
.LBB31_234:                             # %if.else1841
                                        #   in Loop: Header=BB31_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB31_235:                             # %if.end1848
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB31_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB31_247
.LBB31_237:                             # %if.else1872
                                        #   in Loop: Header=BB31_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB31_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB31_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB31_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB31_241
.LBB31_240:                             # %if.else1893
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB31_241:                             # %if.end1908
                                        #   in Loop: Header=BB31_218 Depth=3
	jmp	.LBB31_246
.LBB31_242:                             # %if.else1909
                                        #   in Loop: Header=BB31_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB31_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB31_245
.LBB31_244:                             # %if.else1924
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB31_245:                             # %if.end1936
                                        #   in Loop: Header=BB31_218 Depth=3
	jmp	.LBB31_246
.LBB31_246:                             # %if.end1937
                                        #   in Loop: Header=BB31_218 Depth=3
	jmp	.LBB31_247
.LBB31_247:                             # %if.end1938
                                        #   in Loop: Header=BB31_218 Depth=3
	jmp	.LBB31_248
.LBB31_248:                             # %if.end1939
                                        #   in Loop: Header=BB31_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB31_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB31_250:                             # %if.end1949
                                        #   in Loop: Header=BB31_218 Depth=3
	jmp	.LBB31_251
.LBB31_251:                             # %for.inc1950
                                        #   in Loop: Header=BB31_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB31_218
.LBB31_252:                             # %for.end1952
                                        #   in Loop: Header=BB31_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB31_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB31_216
.LBB31_254:                             # %for.end1957
                                        #   in Loop: Header=BB31_214 Depth=1
	jmp	.LBB31_255
.LBB31_255:                             # %for.inc1958
                                        #   in Loop: Header=BB31_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB31_214
.LBB31_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB31_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB31_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB31_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_261 Depth 2
                                        #       Child Loop BB31_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB31_259 Depth=1
	movl	$0, -116(%rbp)
.LBB31_261:                             # %for.cond1972
                                        #   Parent Loop BB31_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB31_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB31_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB31_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB31_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB31_264:                             # %if.end2016
                                        #   in Loop: Header=BB31_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB31_265:                             # %for.cond2018
                                        #   Parent Loop BB31_259 Depth=1
                                        #     Parent Loop BB31_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB31_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB31_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB31_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB31_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB31_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_270
.LBB31_269:                             # %if.then2030
                                        #   in Loop: Header=BB31_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_271
.LBB31_270:                             # %if.else2039
                                        #   in Loop: Header=BB31_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB31_271:                             # %if.end2048
                                        #   in Loop: Header=BB31_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB31_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB31_265
.LBB31_273:                             # %for.end2060
                                        #   in Loop: Header=BB31_261 Depth=2
	jmp	.LBB31_274
.LBB31_274:                             # %for.inc2061
                                        #   in Loop: Header=BB31_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB31_261
.LBB31_275:                             # %for.end2063
                                        #   in Loop: Header=BB31_259 Depth=1
	jmp	.LBB31_276
.LBB31_276:                             # %for.inc2064
                                        #   in Loop: Header=BB31_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB31_259
.LBB31_277:                             # %for.end2066
	jmp	.LBB31_278
.LBB31_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB31_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB31_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB31_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_285 Depth 2
                                        #       Child Loop BB31_287 Depth 3
                                        #         Child Loop BB31_289 Depth 4
                                        #         Child Loop BB31_293 Depth 4
                                        #       Child Loop BB31_299 Depth 3
                                        #         Child Loop BB31_303 Depth 4
                                        #         Child Loop BB31_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB31_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB31_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_283:                             # %land.end2079
                                        #   in Loop: Header=BB31_281 Depth=1
	testb	$1, %al
	jne	.LBB31_284
	jmp	.LBB31_340
.LBB31_284:                             # %for.body2081
                                        #   in Loop: Header=BB31_281 Depth=1
	movl	$0, -24(%rbp)
.LBB31_285:                             # %for.cond2082
                                        #   Parent Loop BB31_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_287 Depth 3
                                        #         Child Loop BB31_289 Depth 4
                                        #         Child Loop BB31_293 Depth 4
                                        #       Child Loop BB31_299 Depth 3
                                        #         Child Loop BB31_303 Depth 4
                                        #         Child Loop BB31_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB31_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB31_285 Depth=2
	movl	$0, -12(%rbp)
.LBB31_287:                             # %for.cond2087
                                        #   Parent Loop BB31_281 Depth=1
                                        #     Parent Loop BB31_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_289 Depth 4
                                        #         Child Loop BB31_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB31_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB31_287 Depth=3
	movl	$0, -16(%rbp)
.LBB31_289:                             # %for.cond2091
                                        #   Parent Loop BB31_281 Depth=1
                                        #     Parent Loop BB31_285 Depth=2
                                        #       Parent Loop BB31_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB31_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB31_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB31_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_289
.LBB31_292:                             # %for.end2106
                                        #   in Loop: Header=BB31_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB31_293:                             # %for.cond2125
                                        #   Parent Loop BB31_281 Depth=1
                                        #     Parent Loop BB31_285 Depth=2
                                        #       Parent Loop BB31_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB31_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB31_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB31_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_293
.LBB31_296:                             # %for.end2156
                                        #   in Loop: Header=BB31_287 Depth=3
	jmp	.LBB31_297
.LBB31_297:                             # %for.inc2157
                                        #   in Loop: Header=BB31_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_287
.LBB31_298:                             # %for.end2159
                                        #   in Loop: Header=BB31_285 Depth=2
	movl	$0, -16(%rbp)
.LBB31_299:                             # %for.cond2160
                                        #   Parent Loop BB31_281 Depth=1
                                        #     Parent Loop BB31_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_303 Depth 4
                                        #         Child Loop BB31_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB31_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB31_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_301:                             # %land.end2166
                                        #   in Loop: Header=BB31_299 Depth=3
	testb	$1, %al
	jne	.LBB31_302
	jmp	.LBB31_336
.LBB31_302:                             # %for.body2168
                                        #   in Loop: Header=BB31_299 Depth=3
	movl	$0, -12(%rbp)
.LBB31_303:                             # %for.cond2169
                                        #   Parent Loop BB31_281 Depth=1
                                        #     Parent Loop BB31_285 Depth=2
                                        #       Parent Loop BB31_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB31_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB31_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB31_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_303
.LBB31_306:                             # %for.end2184
                                        #   in Loop: Header=BB31_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB31_307:                             # %for.cond2203
                                        #   Parent Loop BB31_281 Depth=1
                                        #     Parent Loop BB31_285 Depth=2
                                        #       Parent Loop BB31_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB31_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB31_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB31_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB31_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB31_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB31_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB31_312
.LBB31_311:                             # %cond.false2231
                                        #   in Loop: Header=BB31_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB31_312:                             # %cond.end2250
                                        #   in Loop: Header=BB31_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB31_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB31_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB31_318
.LBB31_314:                             # %cond.false2257
                                        #   in Loop: Header=BB31_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB31_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB31_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB31_317
.LBB31_316:                             # %cond.false2279
                                        #   in Loop: Header=BB31_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB31_317:                             # %cond.end2298
                                        #   in Loop: Header=BB31_307 Depth=4
.LBB31_318:                             # %cond.end2300
                                        #   in Loop: Header=BB31_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB31_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB31_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB31_321
.LBB31_320:                             # %cond.false2333
                                        #   in Loop: Header=BB31_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB31_321:                             # %cond.end2352
                                        #   in Loop: Header=BB31_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB31_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB31_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB31_327
.LBB31_323:                             # %cond.false2359
                                        #   in Loop: Header=BB31_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB31_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB31_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB31_326
.LBB31_325:                             # %cond.false2381
                                        #   in Loop: Header=BB31_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB31_326:                             # %cond.end2400
                                        #   in Loop: Header=BB31_307 Depth=4
.LBB31_327:                             # %cond.end2402
                                        #   in Loop: Header=BB31_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB31_332
.LBB31_328:                             # %if.else2412
                                        #   in Loop: Header=BB31_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB31_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB31_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB31_331
.LBB31_330:                             # %if.else2439
                                        #   in Loop: Header=BB31_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB31_331:                             # %if.end2468
                                        #   in Loop: Header=BB31_307 Depth=4
	jmp	.LBB31_332
.LBB31_332:                             # %if.end2469
                                        #   in Loop: Header=BB31_307 Depth=4
	jmp	.LBB31_333
.LBB31_333:                             # %for.inc2470
                                        #   in Loop: Header=BB31_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_307
.LBB31_334:                             # %for.end2472
                                        #   in Loop: Header=BB31_299 Depth=3
	jmp	.LBB31_335
.LBB31_335:                             # %for.inc2473
                                        #   in Loop: Header=BB31_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_299
.LBB31_336:                             # %for.end2475
                                        #   in Loop: Header=BB31_285 Depth=2
	jmp	.LBB31_337
.LBB31_337:                             # %for.inc2476
                                        #   in Loop: Header=BB31_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_285
.LBB31_338:                             # %for.end2478
                                        #   in Loop: Header=BB31_281 Depth=1
	jmp	.LBB31_339
.LBB31_339:                             # %for.inc2479
                                        #   in Loop: Header=BB31_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB31_281
.LBB31_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB31_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB31_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB31_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB31_342 Depth=1
	movl	$0, -16(%rbp)
.LBB31_344:                             # %for.cond2490
                                        #   Parent Loop BB31_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB31_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB31_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB31_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB31_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB31_348
.LBB31_347:                             # %if.else2518
                                        #   in Loop: Header=BB31_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB31_348:                             # %if.end2536
                                        #   in Loop: Header=BB31_344 Depth=2
	jmp	.LBB31_349
.LBB31_349:                             # %for.inc2537
                                        #   in Loop: Header=BB31_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_344
.LBB31_350:                             # %for.end2539
                                        #   in Loop: Header=BB31_342 Depth=1
	jmp	.LBB31_351
.LBB31_351:                             # %for.inc2540
                                        #   in Loop: Header=BB31_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_342
.LBB31_352:                             # %for.end2542
	jmp	.LBB31_353
.LBB31_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$140812201, -380(%rbp)  # imm = 0x8649FA9
	jne	.LBB31_355
.LBB31_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_354
.Lfunc_end31:
	.size	dct_chroma.22, .Lfunc_end31-dct_chroma.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.23
.LCPI32_0:
	.quad	4616189618054758400     # double 4
.LCPI32_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI32_2:
	.quad	4611686018427387904     # double 2
.LCPI32_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.23
	.p2align	4, 0x90
	.type	dct_luma_sp.23,@function
dct_luma_sp.23:                         # @dct_luma_sp.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI32_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$861214489, -216(%rbp)  # imm = 0x33551719
	movl	%edi, -136(%rbp)
	movl	%esi, -124(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-136(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -180(%rbp)
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI32_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -120(%rbp)
	movl	-204(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	$0, -12(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -16(%rbp)
.LBB32_3:                               # %for.cond38
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_3
.LBB32_6:                               # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_7
.LBB32_7:                               # %for.inc66
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_1
.LBB32_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB32_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB32_9 Depth=1
	movl	$0, -16(%rbp)
.LBB32_11:                              # %for.cond73
                                        #   Parent Loop BB32_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB32_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB32_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB32_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_11
.LBB32_14:                              # %for.end106
                                        #   in Loop: Header=BB32_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB32_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_9
.LBB32_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB32_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	$0, -12(%rbp)
.LBB32_19:                              # %for.cond144
                                        #   Parent Loop BB32_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB32_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB32_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB32_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_19
.LBB32_22:                              # %for.end177
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_17
.LBB32_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB32_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	$0, -16(%rbp)
.LBB32_27:                              # %for.cond215
                                        #   Parent Loop BB32_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB32_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_27
.LBB32_30:                              # %for.end244
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_25
.LBB32_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB32_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB32_33 Depth=1
	movl	$0, -12(%rbp)
.LBB32_35:                              # %for.cond278
                                        #   Parent Loop BB32_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB32_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB32_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB32_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_35
.LBB32_38:                              # %for.end307
                                        #   in Loop: Header=BB32_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB32_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_33
.LBB32_40:                              # %for.end336
	movl	$0, -208(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -64(%rbp)
.LBB32_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB32_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB32_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB32_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB32_46
.LBB32_45:                              # %if.then
                                        #   in Loop: Header=BB32_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_47
.LBB32_46:                              # %if.else
                                        #   in Loop: Header=BB32_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB32_47:                              # %if.end
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -108(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB32_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB32_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB32_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-112(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-168(%rbp), %xmm0
	jne	.LBB32_55
	jp	.LBB32_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB32_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB32_54
.LBB32_53:                              # %cond.false
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-56(%rbp), %eax
.LBB32_54:                              # %cond.end
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB32_59
.LBB32_55:                              # %if.else500
                                        #   in Loop: Header=BB32_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-168(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_58
.LBB32_57:                              # %if.else504
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_58:                              # %if.end505
                                        #   in Loop: Header=BB32_41 Depth=1
	jmp	.LBB32_59
.LBB32_59:                              # %if.end506
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB32_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB32_62
.LBB32_61:                              # %cond.false510
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-140(%rbp), %eax
.LBB32_62:                              # %cond.end511
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	%eax, -128(%rbp)
	jmp	.LBB32_73
.LBB32_63:                              # %if.else513
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB32_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB32_72
.LBB32_65:                              # %if.else517
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB32_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB32_68
.LBB32_67:                              # %cond.false521
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-56(%rbp), %eax
.LBB32_68:                              # %cond.end522
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB32_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB32_71
.LBB32_70:                              # %cond.false527
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-140(%rbp), %eax
.LBB32_71:                              # %cond.end528
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	%eax, -128(%rbp)
.LBB32_72:                              # %if.end530
                                        #   in Loop: Header=BB32_41 Depth=1
	jmp	.LBB32_73
.LBB32_73:                              # %if.end531
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB32_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	$1, -208(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB32_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB32_77
.LBB32_76:                              # %if.else539
                                        #   in Loop: Header=BB32_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB32_77:                              # %if.end546
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -108(%rbp)
.LBB32_78:                              # %if.end568
                                        #   in Loop: Header=BB32_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-108(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB32_41
.LBB32_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB32_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_83 Depth 2
                                        #     Child Loop BB32_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB32_81 Depth=1
	movl	$0, -16(%rbp)
.LBB32_83:                              # %for.cond607
                                        #   Parent Loop BB32_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB32_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB32_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_83
.LBB32_86:                              # %for.end620
                                        #   in Loop: Header=BB32_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB32_87:                              # %for.cond639
                                        #   Parent Loop BB32_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB32_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB32_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB32_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_87
.LBB32_90:                              # %for.end666
                                        #   in Loop: Header=BB32_81 Depth=1
	jmp	.LBB32_91
.LBB32_91:                              # %for.inc667
                                        #   in Loop: Header=BB32_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_81
.LBB32_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB32_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_95 Depth 2
                                        #     Child Loop BB32_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB32_93 Depth=1
	movl	$0, -12(%rbp)
.LBB32_95:                              # %for.cond674
                                        #   Parent Loop BB32_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB32_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB32_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_95
.LBB32_98:                              # %for.end687
                                        #   in Loop: Header=BB32_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB32_99:                              # %for.cond706
                                        #   Parent Loop BB32_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB32_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB32_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB32_103
.LBB32_102:                             # %cond.false721
                                        #   in Loop: Header=BB32_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB32_103:                             # %cond.end729
                                        #   in Loop: Header=BB32_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB32_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB32_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_109
.LBB32_105:                             # %cond.false735
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB32_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB32_108
.LBB32_107:                             # %cond.false746
                                        #   in Loop: Header=BB32_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB32_108:                             # %cond.end754
                                        #   in Loop: Header=BB32_99 Depth=2
.LBB32_109:                             # %cond.end756
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB32_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB32_112
.LBB32_111:                             # %cond.false774
                                        #   in Loop: Header=BB32_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB32_112:                             # %cond.end782
                                        #   in Loop: Header=BB32_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB32_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB32_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_118
.LBB32_114:                             # %cond.false788
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB32_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB32_117
.LBB32_116:                             # %cond.false799
                                        #   in Loop: Header=BB32_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB32_117:                             # %cond.end807
                                        #   in Loop: Header=BB32_99 Depth=2
.LBB32_118:                             # %cond.end809
                                        #   in Loop: Header=BB32_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB32_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_99
.LBB32_120:                             # %for.end818
                                        #   in Loop: Header=BB32_93 Depth=1
	jmp	.LBB32_121
.LBB32_121:                             # %for.inc819
                                        #   in Loop: Header=BB32_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_93
.LBB32_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB32_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB32_123 Depth=1
	movl	$0, -16(%rbp)
.LBB32_125:                             # %for.cond826
                                        #   Parent Loop BB32_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB32_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-124(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-136(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB32_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_125
.LBB32_128:                             # %for.end846
                                        #   in Loop: Header=BB32_123 Depth=1
	jmp	.LBB32_129
.LBB32_129:                             # %for.inc847
                                        #   in Loop: Header=BB32_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_123
.LBB32_130:                             # %for.end849
	movl	-208(%rbp), %ebx
	cmpl	$861214489, -216(%rbp)  # imm = 0x33551719
	jne	.LBB32_132
.LBB32_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_131
.Lfunc_end32:
	.size	dct_luma_sp.23, .Lfunc_end32-dct_luma_sp.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.24
.LCPI33_0:
	.quad	4616189618054758400     # double 4
.LCPI33_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI33_2:
	.quad	4611686018427387904     # double 2
.LCPI33_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.24
	.p2align	4, 0x90
	.type	dct_luma_sp.24,@function
dct_luma_sp.24:                         # @dct_luma_sp.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI33_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI33_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1937800111, -216(%rbp) # imm = 0x73807BAF
	movl	%edi, -140(%rbp)
	movl	%esi, -128(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-140(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-192(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -208(%rbp)
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -200(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-208(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-208(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI33_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI33_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -124(%rbp)
	movl	-180(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	$0, -12(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -16(%rbp)
.LBB33_3:                               # %for.cond38
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_3
.LBB33_6:                               # %for.end
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_7
.LBB33_7:                               # %for.inc66
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_1
.LBB33_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB33_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB33_9 Depth=1
	movl	$0, -16(%rbp)
.LBB33_11:                              # %for.cond73
                                        #   Parent Loop BB33_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB33_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB33_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB33_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_11
.LBB33_14:                              # %for.end106
                                        #   in Loop: Header=BB33_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB33_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_9
.LBB33_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB33_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	$0, -12(%rbp)
.LBB33_19:                              # %for.cond144
                                        #   Parent Loop BB33_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB33_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_19
.LBB33_22:                              # %for.end177
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_17
.LBB33_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB33_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	$0, -16(%rbp)
.LBB33_27:                              # %for.cond215
                                        #   Parent Loop BB33_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB33_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_27
.LBB33_30:                              # %for.end244
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_25
.LBB33_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB33_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB33_33 Depth=1
	movl	$0, -12(%rbp)
.LBB33_35:                              # %for.cond278
                                        #   Parent Loop BB33_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB33_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB33_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB33_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_35
.LBB33_38:                              # %for.end307
                                        #   in Loop: Header=BB33_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB33_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_33
.LBB33_40:                              # %for.end336
	movl	$0, -196(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -64(%rbp)
.LBB33_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB33_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB33_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB33_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB33_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB33_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB33_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB33_46
.LBB33_45:                              # %if.then
                                        #   in Loop: Header=BB33_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_47
.LBB33_46:                              # %if.else
                                        #   in Loop: Header=BB33_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB33_47:                              # %if.end
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -104(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-184(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB33_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB33_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB33_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB33_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB33_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB33_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-112(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-60(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB33_55
	jp	.LBB33_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB33_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB33_54
.LBB33_53:                              # %cond.false
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-60(%rbp), %eax
.LBB33_54:                              # %cond.end
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB33_59
.LBB33_55:                              # %if.else500
                                        #   in Loop: Header=BB33_41 Depth=1
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB33_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB33_58
.LBB33_57:                              # %if.else504
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB33_58:                              # %if.end505
                                        #   in Loop: Header=BB33_41 Depth=1
	jmp	.LBB33_59
.LBB33_59:                              # %if.end506
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB33_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB33_62
.LBB33_61:                              # %cond.false510
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-116(%rbp), %eax
.LBB33_62:                              # %cond.end511
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	%eax, -136(%rbp)
	jmp	.LBB33_73
.LBB33_63:                              # %if.else513
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB33_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB33_72
.LBB33_65:                              # %if.else517
                                        #   in Loop: Header=BB33_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB33_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB33_68
.LBB33_67:                              # %cond.false521
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-60(%rbp), %eax
.LBB33_68:                              # %cond.end522
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB33_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB33_71
.LBB33_70:                              # %cond.false527
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-116(%rbp), %eax
.LBB33_71:                              # %cond.end528
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	%eax, -136(%rbp)
.LBB33_72:                              # %if.end530
                                        #   in Loop: Header=BB33_41 Depth=1
	jmp	.LBB33_73
.LBB33_73:                              # %if.end531
                                        #   in Loop: Header=BB33_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB33_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	$1, -196(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB33_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB33_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB33_77
.LBB33_76:                              # %if.else539
                                        #   in Loop: Header=BB33_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB33_77:                              # %if.end546
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movq	-240(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -68(%rbp)
	movl	-56(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -104(%rbp)
.LBB33_78:                              # %if.end568
                                        #   in Loop: Header=BB33_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-184(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-104(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB33_41
.LBB33_80:                              # %for.end600
	movq	-240(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB33_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_83 Depth 2
                                        #     Child Loop BB33_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB33_81 Depth=1
	movl	$0, -16(%rbp)
.LBB33_83:                              # %for.cond607
                                        #   Parent Loop BB33_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB33_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB33_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_83
.LBB33_86:                              # %for.end620
                                        #   in Loop: Header=BB33_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB33_87:                              # %for.cond639
                                        #   Parent Loop BB33_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB33_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB33_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB33_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_87
.LBB33_90:                              # %for.end666
                                        #   in Loop: Header=BB33_81 Depth=1
	jmp	.LBB33_91
.LBB33_91:                              # %for.inc667
                                        #   in Loop: Header=BB33_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_81
.LBB33_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB33_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_95 Depth 2
                                        #     Child Loop BB33_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB33_93 Depth=1
	movl	$0, -12(%rbp)
.LBB33_95:                              # %for.cond674
                                        #   Parent Loop BB33_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB33_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB33_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_95
.LBB33_98:                              # %for.end687
                                        #   in Loop: Header=BB33_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB33_99:                              # %for.cond706
                                        #   Parent Loop BB33_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB33_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB33_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB33_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB33_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB33_103
.LBB33_102:                             # %cond.false721
                                        #   in Loop: Header=BB33_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB33_103:                             # %cond.end729
                                        #   in Loop: Header=BB33_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB33_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB33_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_109
.LBB33_105:                             # %cond.false735
                                        #   in Loop: Header=BB33_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB33_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB33_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB33_108
.LBB33_107:                             # %cond.false746
                                        #   in Loop: Header=BB33_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB33_108:                             # %cond.end754
                                        #   in Loop: Header=BB33_99 Depth=2
.LBB33_109:                             # %cond.end756
                                        #   in Loop: Header=BB33_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB33_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB33_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB33_112
.LBB33_111:                             # %cond.false774
                                        #   in Loop: Header=BB33_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB33_112:                             # %cond.end782
                                        #   in Loop: Header=BB33_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB33_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB33_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_118
.LBB33_114:                             # %cond.false788
                                        #   in Loop: Header=BB33_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB33_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB33_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB33_117
.LBB33_116:                             # %cond.false799
                                        #   in Loop: Header=BB33_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB33_117:                             # %cond.end807
                                        #   in Loop: Header=BB33_99 Depth=2
.LBB33_118:                             # %cond.end809
                                        #   in Loop: Header=BB33_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB33_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_99
.LBB33_120:                             # %for.end818
                                        #   in Loop: Header=BB33_93 Depth=1
	jmp	.LBB33_121
.LBB33_121:                             # %for.inc819
                                        #   in Loop: Header=BB33_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_93
.LBB33_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB33_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB33_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB33_123 Depth=1
	movl	$0, -16(%rbp)
.LBB33_125:                             # %for.cond826
                                        #   Parent Loop BB33_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB33_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB33_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB33_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_125
.LBB33_128:                             # %for.end846
                                        #   in Loop: Header=BB33_123 Depth=1
	jmp	.LBB33_129
.LBB33_129:                             # %for.inc847
                                        #   in Loop: Header=BB33_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_123
.LBB33_130:                             # %for.end849
	movl	-196(%rbp), %ebx
	cmpl	$1937800111, -216(%rbp) # imm = 0x73807BAF
	jne	.LBB33_132
.LBB33_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_131
.Lfunc_end33:
	.size	dct_luma_sp.24, .Lfunc_end33-dct_luma_sp.24
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.25             # -- Begin function dct_luma.25
	.p2align	4, 0x90
	.type	dct_luma.25,@function
dct_luma.25:                            # @dct_luma.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1875519785, -148(%rbp) # imm = 0x6FCA2929
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -124(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB34_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB34_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB34_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB34_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB34_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_5:                               # %land.end32
                                        #   in Loop: Header=BB34_3 Depth=1
	testb	$1, %al
	jne	.LBB34_6
	jmp	.LBB34_12
.LBB34_6:                               # %for.body
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	$0, -16(%rbp)
.LBB34_7:                               # %for.cond34
                                        #   Parent Loop BB34_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB34_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB34_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_7
.LBB34_10:                              # %for.end
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_3
.LBB34_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB34_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB34_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_15:                              # %land.end101
                                        #   in Loop: Header=BB34_13 Depth=1
	testb	$1, %al
	jne	.LBB34_16
	jmp	.LBB34_22
.LBB34_16:                              # %for.body103
                                        #   in Loop: Header=BB34_13 Depth=1
	movl	$0, -12(%rbp)
.LBB34_17:                              # %for.cond104
                                        #   Parent Loop BB34_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB34_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB34_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_17
.LBB34_20:                              # %for.end136
                                        #   in Loop: Header=BB34_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB34_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_13
.LBB34_22:                              # %for.end169
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -88(%rbp)
.LBB34_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB34_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB34_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB34_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB34_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB34_28
.LBB34_27:                              # %if.then
                                        #   in Loop: Header=BB34_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_29
.LBB34_28:                              # %if.else
                                        #   in Loop: Header=BB34_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB34_29:                              # %if.end
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB34_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB34_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB34_35
.LBB34_31:                              # %if.else199
                                        #   in Loop: Header=BB34_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB34_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB34_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_34
.LBB34_33:                              # %if.else223
                                        #   in Loop: Header=BB34_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB34_34:                              # %if.end245
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_35
.LBB34_35:                              # %if.end246
                                        #   in Loop: Header=BB34_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB34_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	$1, -132(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB34_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB34_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB34_39
.LBB34_38:                              # %if.then254
                                        #   in Loop: Header=BB34_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB34_40
.LBB34_39:                              # %if.else256
                                        #   in Loop: Header=BB34_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB34_40:                              # %if.end263
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB34_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB34_52
.LBB34_42:                              # %if.else283
                                        #   in Loop: Header=BB34_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB34_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB34_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB34_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB34_46
.LBB34_45:                              # %if.else301
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB34_46:                              # %if.end314
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_51
.LBB34_47:                              # %if.else315
                                        #   in Loop: Header=BB34_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB34_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB34_50
.LBB34_49:                              # %if.else328
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB34_50:                              # %if.end338
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_51
.LBB34_51:                              # %if.end339
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_52
.LBB34_52:                              # %if.end340
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_53
.LBB34_53:                              # %if.end341
                                        #   in Loop: Header=BB34_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB34_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB34_55:                              # %if.end349
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_56
.LBB34_56:                              # %for.inc350
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB34_23
.LBB34_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB34_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_62 Depth 2
                                        #     Child Loop BB34_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB34_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB34_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_60:                              # %land.end361
                                        #   in Loop: Header=BB34_58 Depth=1
	testb	$1, %al
	jne	.LBB34_61
	jmp	.LBB34_71
.LBB34_61:                              # %for.body363
                                        #   in Loop: Header=BB34_58 Depth=1
	movl	$0, -16(%rbp)
.LBB34_62:                              # %for.cond364
                                        #   Parent Loop BB34_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB34_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB34_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_62
.LBB34_65:                              # %for.end377
                                        #   in Loop: Header=BB34_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB34_66:                              # %for.cond396
                                        #   Parent Loop BB34_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB34_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB34_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_66
.LBB34_69:                              # %for.end423
                                        #   in Loop: Header=BB34_58 Depth=1
	jmp	.LBB34_70
.LBB34_70:                              # %for.inc424
                                        #   in Loop: Header=BB34_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_58
.LBB34_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB34_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_76 Depth 2
                                        #     Child Loop BB34_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB34_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_74:                              # %land.end433
                                        #   in Loop: Header=BB34_72 Depth=1
	testb	$1, %al
	jne	.LBB34_75
	jmp	.LBB34_109
.LBB34_75:                              # %for.body435
                                        #   in Loop: Header=BB34_72 Depth=1
	movl	$0, -12(%rbp)
.LBB34_76:                              # %for.cond436
                                        #   Parent Loop BB34_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB34_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB34_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_76
.LBB34_79:                              # %for.end449
                                        #   in Loop: Header=BB34_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB34_80:                              # %for.cond468
                                        #   Parent Loop BB34_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB34_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB34_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB34_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB34_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB34_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB34_85
.LBB34_84:                              # %cond.false
                                        #   in Loop: Header=BB34_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB34_85:                              # %cond.end
                                        #   in Loop: Header=BB34_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB34_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB34_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB34_91
.LBB34_87:                              # %cond.false518
                                        #   in Loop: Header=BB34_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB34_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB34_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_90
.LBB34_89:                              # %cond.false540
                                        #   in Loop: Header=BB34_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB34_90:                              # %cond.end559
                                        #   in Loop: Header=BB34_80 Depth=2
.LBB34_91:                              # %cond.end561
                                        #   in Loop: Header=BB34_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB34_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB34_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB34_94
.LBB34_93:                              # %cond.false592
                                        #   in Loop: Header=BB34_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB34_94:                              # %cond.end611
                                        #   in Loop: Header=BB34_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB34_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB34_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB34_100
.LBB34_96:                              # %cond.false618
                                        #   in Loop: Header=BB34_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB34_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB34_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_99
.LBB34_98:                              # %cond.false640
                                        #   in Loop: Header=BB34_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB34_99:                              # %cond.end659
                                        #   in Loop: Header=BB34_80 Depth=2
.LBB34_100:                             # %cond.end661
                                        #   in Loop: Header=BB34_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB34_105
.LBB34_101:                             # %if.else669
                                        #   in Loop: Header=BB34_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB34_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB34_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB34_104
.LBB34_103:                             # %if.else692
                                        #   in Loop: Header=BB34_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB34_104:                             # %if.end717
                                        #   in Loop: Header=BB34_80 Depth=2
	jmp	.LBB34_105
.LBB34_105:                             # %if.end718
                                        #   in Loop: Header=BB34_80 Depth=2
	jmp	.LBB34_106
.LBB34_106:                             # %for.inc719
                                        #   in Loop: Header=BB34_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_80
.LBB34_107:                             # %for.end721
                                        #   in Loop: Header=BB34_72 Depth=1
	jmp	.LBB34_108
.LBB34_108:                             # %for.inc722
                                        #   in Loop: Header=BB34_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_72
.LBB34_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB34_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB34_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB34_111 Depth=1
	movl	$0, -16(%rbp)
.LBB34_113:                             # %for.cond732
                                        #   Parent Loop BB34_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB34_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB34_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB34_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB34_117
.LBB34_116:                             # %if.else761
                                        #   in Loop: Header=BB34_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB34_117:                             # %if.end779
                                        #   in Loop: Header=BB34_113 Depth=2
	jmp	.LBB34_118
.LBB34_118:                             # %for.inc780
                                        #   in Loop: Header=BB34_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_113
.LBB34_119:                             # %for.end782
                                        #   in Loop: Header=BB34_111 Depth=1
	jmp	.LBB34_120
.LBB34_120:                             # %for.inc783
                                        #   in Loop: Header=BB34_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_111
.LBB34_121:                             # %for.end785
	jmp	.LBB34_122
.LBB34_122:                             # %if.end786
	movl	-132(%rbp), %ebx
	cmpl	$1875519785, -148(%rbp) # imm = 0x6FCA2929
	jne	.LBB34_124
.LBB34_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_123
.Lfunc_end34:
	.size	dct_luma.25, .Lfunc_end34-dct_luma.25
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.26        # -- Begin function dct_chroma_DC.26
	.p2align	4, 0x90
	.type	dct_chroma_DC.26,@function
dct_chroma_DC.26:                       # @dct_chroma_DC.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$586027602, -44(%rbp)   # imm = 0x22EE1252
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB35_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB35_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB35_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$1, %eax
	jmp	.LBB35_6
.LBB35_5:                               # %cond.false
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-20(%rbp), %eax
.LBB35_6:                               # %cond.end
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-40(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -24(%rbp)
.LBB35_7:                               # %if.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_8
.LBB35_8:                               # %for.inc
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_1
.LBB35_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$586027602, -44(%rbp)   # imm = 0x22EE1252
	jne	.LBB35_11
.LBB35_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_10
.Lfunc_end35:
	.size	dct_chroma_DC.26, .Lfunc_end35-dct_chroma_DC.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.27
.LCPI36_0:
	.quad	4616189618054758400     # double 4
.LCPI36_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI36_2:
	.quad	4611686018427387904     # double 2
.LCPI36_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.27
	.p2align	4, 0x90
	.type	dct_chroma_sp.27,@function
dct_chroma_sp.27:                       # @dct_chroma_sp.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI36_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI36_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1537508651, -268(%rbp) # imm = 0x5BA4852B
	movl	%edi, -124(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI36_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB36_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB36_6
.LBB36_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB36_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB36_5
.LBB36_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB36_5:                               # %cond.end
.LBB36_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB36_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB36_12
.LBB36_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB36_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB36_11
.LBB36_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB36_11:                              # %cond.end41
.LBB36_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB36_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB36_15
.LBB36_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB36_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB36_18
.LBB36_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB36_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB36_21
.LBB36_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB36_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB36_24
.LBB36_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB36_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB36_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB36_25 Depth=1
	movl	$0, -16(%rbp)
.LBB36_27:                              # %for.cond97
                                        #   Parent Loop BB36_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB36_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB36_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB36_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_27
.LBB36_30:                              # %for.end
                                        #   in Loop: Header=BB36_25 Depth=1
	jmp	.LBB36_31
.LBB36_31:                              # %for.inc121
                                        #   in Loop: Header=BB36_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_25
.LBB36_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB36_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_35 Depth 2
                                        #       Child Loop BB36_37 Depth 3
                                        #         Child Loop BB36_39 Depth 4
                                        #       Child Loop BB36_45 Depth 3
                                        #         Child Loop BB36_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB36_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	$0, -20(%rbp)
.LBB36_35:                              # %for.cond128
                                        #   Parent Loop BB36_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_37 Depth 3
                                        #         Child Loop BB36_39 Depth 4
                                        #       Child Loop BB36_45 Depth 3
                                        #         Child Loop BB36_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB36_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB36_35 Depth=2
	movl	$0, -12(%rbp)
.LBB36_37:                              # %for.cond132
                                        #   Parent Loop BB36_33 Depth=1
                                        #     Parent Loop BB36_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB36_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB36_39:                              # %for.cond137
                                        #   Parent Loop BB36_33 Depth=1
                                        #     Parent Loop BB36_35 Depth=2
                                        #       Parent Loop BB36_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB36_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB36_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB36_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_39
.LBB36_42:                              # %for.end174
                                        #   in Loop: Header=BB36_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB36_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_37
.LBB36_44:                              # %for.end214
                                        #   in Loop: Header=BB36_35 Depth=2
	movl	$0, -16(%rbp)
.LBB36_45:                              # %for.cond215
                                        #   Parent Loop BB36_33 Depth=1
                                        #     Parent Loop BB36_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB36_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB36_47:                              # %for.cond220
                                        #   Parent Loop BB36_33 Depth=1
                                        #     Parent Loop BB36_35 Depth=2
                                        #       Parent Loop BB36_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB36_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB36_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB36_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_47
.LBB36_50:                              # %for.end257
                                        #   in Loop: Header=BB36_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB36_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_45
.LBB36_52:                              # %for.end298
                                        #   in Loop: Header=BB36_35 Depth=2
	jmp	.LBB36_53
.LBB36_53:                              # %for.inc299
                                        #   in Loop: Header=BB36_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_35
.LBB36_54:                              # %for.end301
                                        #   in Loop: Header=BB36_33 Depth=1
	jmp	.LBB36_55
.LBB36_55:                              # %for.inc302
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_33
.LBB36_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB36_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_59 Depth 2
                                        #       Child Loop BB36_61 Depth 3
                                        #         Child Loop BB36_63 Depth 4
                                        #       Child Loop BB36_69 Depth 3
                                        #         Child Loop BB36_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB36_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB36_57 Depth=1
	movl	$0, -20(%rbp)
.LBB36_59:                              # %for.cond309
                                        #   Parent Loop BB36_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_61 Depth 3
                                        #         Child Loop BB36_63 Depth 4
                                        #       Child Loop BB36_69 Depth 3
                                        #         Child Loop BB36_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB36_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB36_59 Depth=2
	movl	$0, -12(%rbp)
.LBB36_61:                              # %for.cond313
                                        #   Parent Loop BB36_57 Depth=1
                                        #     Parent Loop BB36_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB36_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB36_63:                              # %for.cond318
                                        #   Parent Loop BB36_57 Depth=1
                                        #     Parent Loop BB36_59 Depth=2
                                        #       Parent Loop BB36_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB36_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB36_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB36_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_63
.LBB36_66:                              # %for.end351
                                        #   in Loop: Header=BB36_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB36_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_61
.LBB36_68:                              # %for.end387
                                        #   in Loop: Header=BB36_59 Depth=2
	movl	$0, -16(%rbp)
.LBB36_69:                              # %for.cond388
                                        #   Parent Loop BB36_57 Depth=1
                                        #     Parent Loop BB36_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB36_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB36_71:                              # %for.cond393
                                        #   Parent Loop BB36_57 Depth=1
                                        #     Parent Loop BB36_59 Depth=2
                                        #       Parent Loop BB36_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB36_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB36_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB36_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_71
.LBB36_74:                              # %for.end426
                                        #   in Loop: Header=BB36_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB36_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_69
.LBB36_76:                              # %for.end463
                                        #   in Loop: Header=BB36_59 Depth=2
	jmp	.LBB36_77
.LBB36_77:                              # %for.inc464
                                        #   in Loop: Header=BB36_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_59
.LBB36_78:                              # %for.end466
                                        #   in Loop: Header=BB36_57 Depth=1
	jmp	.LBB36_79
.LBB36_79:                              # %for.inc467
                                        #   in Loop: Header=BB36_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_57
.LBB36_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB36_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB36_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB36_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB36_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB36_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB36_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB36_90
	jp	.LBB36_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB36_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB36_89
.LBB36_88:                              # %cond.false691
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-40(%rbp), %eax
.LBB36_89:                              # %cond.end692
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB36_94
.LBB36_90:                              # %if.else
                                        #   in Loop: Header=BB36_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_93
.LBB36_92:                              # %if.else697
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB36_93:                              # %if.end
                                        #   in Loop: Header=BB36_81 Depth=1
	jmp	.LBB36_94
.LBB36_94:                              # %if.end698
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB36_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB36_97
.LBB36_96:                              # %cond.false702
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-100(%rbp), %eax
.LBB36_97:                              # %cond.end703
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB36_108
.LBB36_98:                              # %if.else705
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB36_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB36_107
.LBB36_100:                             # %if.else709
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB36_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB36_103
.LBB36_102:                             # %cond.false713
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-40(%rbp), %eax
.LBB36_103:                             # %cond.end714
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB36_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB36_106
.LBB36_105:                             # %cond.false719
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-100(%rbp), %eax
.LBB36_106:                             # %cond.end720
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB36_107:                             # %if.end722
                                        #   in Loop: Header=BB36_81 Depth=1
	jmp	.LBB36_108
.LBB36_108:                             # %if.end723
                                        #   in Loop: Header=BB36_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB36_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB36_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB36_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB36_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB36_112:                             # %if.end734
                                        #   in Loop: Header=BB36_81 Depth=1
	jmp	.LBB36_113
.LBB36_113:                             # %if.end735
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB36_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB36_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	$1, %eax
	jmp	.LBB36_117
.LBB36_116:                             # %cond.false745
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-204(%rbp), %eax
.LBB36_117:                             # %cond.end746
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB36_118:                             # %if.end763
                                        #   in Loop: Header=BB36_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_81
.LBB36_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -24(%rbp)
.LBB36_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_123 Depth 2
                                        #       Child Loop BB36_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB36_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB36_121 Depth=1
	movl	$0, -20(%rbp)
.LBB36_123:                             # %for.cond839
                                        #   Parent Loop BB36_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB36_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB36_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB36_125:                             # %for.cond860
                                        #   Parent Loop BB36_121 Depth=1
                                        #     Parent Loop BB36_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB36_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB36_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB36_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB36_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB36_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB36_130
.LBB36_129:                             # %if.then867
                                        #   in Loop: Header=BB36_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_131
.LBB36_130:                             # %if.else876
                                        #   in Loop: Header=BB36_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB36_131:                             # %if.end885
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB36_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB36_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB36_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB36_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB36_139
	jp	.LBB36_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB36_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB36_138
.LBB36_137:                             # %cond.false1047
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-40(%rbp), %eax
.LBB36_138:                             # %cond.end1048
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB36_143
.LBB36_139:                             # %if.else1050
                                        #   in Loop: Header=BB36_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_142
.LBB36_141:                             # %if.else1054
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB36_142:                             # %if.end1055
                                        #   in Loop: Header=BB36_125 Depth=3
	jmp	.LBB36_143
.LBB36_143:                             # %if.end1056
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB36_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB36_146
.LBB36_145:                             # %cond.false1060
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-100(%rbp), %eax
.LBB36_146:                             # %cond.end1061
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB36_157
.LBB36_147:                             # %if.else1063
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB36_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB36_156
.LBB36_149:                             # %if.else1067
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB36_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB36_152
.LBB36_151:                             # %cond.false1071
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-40(%rbp), %eax
.LBB36_152:                             # %cond.end1072
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB36_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB36_155
.LBB36_154:                             # %cond.false1077
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-100(%rbp), %eax
.LBB36_155:                             # %cond.end1078
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB36_156:                             # %if.end1080
                                        #   in Loop: Header=BB36_125 Depth=3
	jmp	.LBB36_157
.LBB36_157:                             # %if.end1081
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB36_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB36_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB36_161
.LBB36_160:                             # %if.else1099
                                        #   in Loop: Header=BB36_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB36_161:                             # %if.end1106
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB36_162:                             # %if.end1128
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_125
.LBB36_164:                             # %for.end1164
                                        #   in Loop: Header=BB36_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB36_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_123
.LBB36_166:                             # %for.end1169
                                        #   in Loop: Header=BB36_121 Depth=1
	jmp	.LBB36_167
.LBB36_167:                             # %for.inc1170
                                        #   in Loop: Header=BB36_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_121
.LBB36_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB36_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB36_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB36_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_173 Depth 2
                                        #       Child Loop BB36_175 Depth 3
                                        #         Child Loop BB36_177 Depth 4
                                        #         Child Loop BB36_181 Depth 4
                                        #       Child Loop BB36_187 Depth 3
                                        #         Child Loop BB36_189 Depth 4
                                        #         Child Loop BB36_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB36_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB36_171 Depth=1
	movl	$0, -20(%rbp)
.LBB36_173:                             # %for.cond1181
                                        #   Parent Loop BB36_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_175 Depth 3
                                        #         Child Loop BB36_177 Depth 4
                                        #         Child Loop BB36_181 Depth 4
                                        #       Child Loop BB36_187 Depth 3
                                        #         Child Loop BB36_189 Depth 4
                                        #         Child Loop BB36_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB36_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB36_173 Depth=2
	movl	$0, -12(%rbp)
.LBB36_175:                             # %for.cond1185
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_177 Depth 4
                                        #         Child Loop BB36_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB36_175 Depth=3
	movl	$0, -16(%rbp)
.LBB36_177:                             # %for.cond1189
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        #       Parent Loop BB36_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB36_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB36_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_177
.LBB36_180:                             # %for.end1204
                                        #   in Loop: Header=BB36_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB36_181:                             # %for.cond1223
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        #       Parent Loop BB36_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB36_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB36_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB36_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_181
.LBB36_184:                             # %for.end1254
                                        #   in Loop: Header=BB36_175 Depth=3
	jmp	.LBB36_185
.LBB36_185:                             # %for.inc1255
                                        #   in Loop: Header=BB36_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_175
.LBB36_186:                             # %for.end1257
                                        #   in Loop: Header=BB36_173 Depth=2
	movl	$0, -16(%rbp)
.LBB36_187:                             # %for.cond1258
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_189 Depth 4
                                        #         Child Loop BB36_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB36_187 Depth=3
	movl	$0, -12(%rbp)
.LBB36_189:                             # %for.cond1262
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        #       Parent Loop BB36_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB36_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB36_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_189
.LBB36_192:                             # %for.end1277
                                        #   in Loop: Header=BB36_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB36_193:                             # %for.cond1296
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        #       Parent Loop BB36_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB36_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB36_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB36_197
.LBB36_196:                             # %cond.false1311
                                        #   in Loop: Header=BB36_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB36_197:                             # %cond.end1319
                                        #   in Loop: Header=BB36_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB36_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB36_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB36_203
.LBB36_199:                             # %cond.false1325
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB36_202
.LBB36_201:                             # %cond.false1336
                                        #   in Loop: Header=BB36_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB36_202:                             # %cond.end1344
                                        #   in Loop: Header=BB36_193 Depth=4
.LBB36_203:                             # %cond.end1346
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB36_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB36_206
.LBB36_205:                             # %cond.false1366
                                        #   in Loop: Header=BB36_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB36_206:                             # %cond.end1374
                                        #   in Loop: Header=BB36_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB36_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB36_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB36_212
.LBB36_208:                             # %cond.false1380
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB36_211
.LBB36_210:                             # %cond.false1391
                                        #   in Loop: Header=BB36_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB36_211:                             # %cond.end1399
                                        #   in Loop: Header=BB36_193 Depth=4
.LBB36_212:                             # %cond.end1401
                                        #   in Loop: Header=BB36_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB36_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_193
.LBB36_214:                             # %for.end1412
                                        #   in Loop: Header=BB36_187 Depth=3
	jmp	.LBB36_215
.LBB36_215:                             # %for.inc1413
                                        #   in Loop: Header=BB36_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_187
.LBB36_216:                             # %for.end1415
                                        #   in Loop: Header=BB36_173 Depth=2
	jmp	.LBB36_217
.LBB36_217:                             # %for.inc1416
                                        #   in Loop: Header=BB36_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_173
.LBB36_218:                             # %for.end1418
                                        #   in Loop: Header=BB36_171 Depth=1
	jmp	.LBB36_219
.LBB36_219:                             # %for.inc1419
                                        #   in Loop: Header=BB36_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_171
.LBB36_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB36_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB36_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB36_221 Depth=1
	movl	$0, -16(%rbp)
.LBB36_223:                             # %for.cond1426
                                        #   Parent Loop BB36_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB36_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB36_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB36_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_223
.LBB36_226:                             # %for.end1446
                                        #   in Loop: Header=BB36_221 Depth=1
	jmp	.LBB36_227
.LBB36_227:                             # %for.inc1447
                                        #   in Loop: Header=BB36_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_221
.LBB36_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1537508651, -268(%rbp) # imm = 0x5BA4852B
	jne	.LBB36_230
.LBB36_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_229
.Lfunc_end36:
	.size	dct_chroma_sp.27, .Lfunc_end36-dct_chroma_sp.27
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.28             # -- Begin function dct_luma.28
	.p2align	4, 0x90
	.type	dct_luma.28,@function
dct_luma.28:                            # @dct_luma.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1254733462, -148(%rbp) # imm = 0x4AC9B696
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB37_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB37_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -12(%rbp)
.LBB37_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB37_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB37_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB37_5:                               # %land.end32
                                        #   in Loop: Header=BB37_3 Depth=1
	testb	$1, %al
	jne	.LBB37_6
	jmp	.LBB37_12
.LBB37_6:                               # %for.body
                                        #   in Loop: Header=BB37_3 Depth=1
	movl	$0, -16(%rbp)
.LBB37_7:                               # %for.cond34
                                        #   Parent Loop BB37_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB37_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_7
.LBB37_10:                              # %for.end
                                        #   in Loop: Header=BB37_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB37_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_3
.LBB37_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB37_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB37_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB37_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB37_15:                              # %land.end101
                                        #   in Loop: Header=BB37_13 Depth=1
	testb	$1, %al
	jne	.LBB37_16
	jmp	.LBB37_22
.LBB37_16:                              # %for.body103
                                        #   in Loop: Header=BB37_13 Depth=1
	movl	$0, -12(%rbp)
.LBB37_17:                              # %for.cond104
                                        #   Parent Loop BB37_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB37_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB37_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB37_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_17
.LBB37_20:                              # %for.end136
                                        #   in Loop: Header=BB37_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB37_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_13
.LBB37_22:                              # %for.end169
	movl	$0, -112(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB37_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB37_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB37_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB37_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB37_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB37_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB37_28
.LBB37_27:                              # %if.then
                                        #   in Loop: Header=BB37_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_29
.LBB37_28:                              # %if.else
                                        #   in Loop: Header=BB37_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB37_29:                              # %if.end
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB37_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB37_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB37_35
.LBB37_31:                              # %if.else199
                                        #   in Loop: Header=BB37_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB37_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB37_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB37_34
.LBB37_33:                              # %if.else223
                                        #   in Loop: Header=BB37_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB37_34:                              # %if.end245
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_35
.LBB37_35:                              # %if.end246
                                        #   in Loop: Header=BB37_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB37_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	$1, -112(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB37_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB37_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB37_39
.LBB37_38:                              # %if.then254
                                        #   in Loop: Header=BB37_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB37_40
.LBB37_39:                              # %if.else256
                                        #   in Loop: Header=BB37_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB37_40:                              # %if.end263
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB37_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB37_52
.LBB37_42:                              # %if.else283
                                        #   in Loop: Header=BB37_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB37_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB37_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB37_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB37_46
.LBB37_45:                              # %if.else301
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB37_46:                              # %if.end314
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_51
.LBB37_47:                              # %if.else315
                                        #   in Loop: Header=BB37_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB37_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB37_50
.LBB37_49:                              # %if.else328
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB37_50:                              # %if.end338
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_51
.LBB37_51:                              # %if.end339
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_52
.LBB37_52:                              # %if.end340
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_53
.LBB37_53:                              # %if.end341
                                        #   in Loop: Header=BB37_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB37_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB37_55:                              # %if.end349
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_56
.LBB37_56:                              # %for.inc350
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB37_23
.LBB37_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB37_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_62 Depth 2
                                        #     Child Loop BB37_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB37_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB37_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB37_60:                              # %land.end361
                                        #   in Loop: Header=BB37_58 Depth=1
	testb	$1, %al
	jne	.LBB37_61
	jmp	.LBB37_71
.LBB37_61:                              # %for.body363
                                        #   in Loop: Header=BB37_58 Depth=1
	movl	$0, -16(%rbp)
.LBB37_62:                              # %for.cond364
                                        #   Parent Loop BB37_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB37_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB37_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_62
.LBB37_65:                              # %for.end377
                                        #   in Loop: Header=BB37_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB37_66:                              # %for.cond396
                                        #   Parent Loop BB37_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB37_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB37_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB37_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_66
.LBB37_69:                              # %for.end423
                                        #   in Loop: Header=BB37_58 Depth=1
	jmp	.LBB37_70
.LBB37_70:                              # %for.inc424
                                        #   in Loop: Header=BB37_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_58
.LBB37_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB37_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_76 Depth 2
                                        #     Child Loop BB37_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB37_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB37_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB37_74:                              # %land.end433
                                        #   in Loop: Header=BB37_72 Depth=1
	testb	$1, %al
	jne	.LBB37_75
	jmp	.LBB37_109
.LBB37_75:                              # %for.body435
                                        #   in Loop: Header=BB37_72 Depth=1
	movl	$0, -12(%rbp)
.LBB37_76:                              # %for.cond436
                                        #   Parent Loop BB37_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB37_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB37_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_76
.LBB37_79:                              # %for.end449
                                        #   in Loop: Header=BB37_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB37_80:                              # %for.cond468
                                        #   Parent Loop BB37_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB37_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB37_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB37_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB37_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB37_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB37_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB37_85
.LBB37_84:                              # %cond.false
                                        #   in Loop: Header=BB37_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB37_85:                              # %cond.end
                                        #   in Loop: Header=BB37_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB37_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB37_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB37_91
.LBB37_87:                              # %cond.false518
                                        #   in Loop: Header=BB37_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB37_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB37_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB37_90
.LBB37_89:                              # %cond.false540
                                        #   in Loop: Header=BB37_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB37_90:                              # %cond.end559
                                        #   in Loop: Header=BB37_80 Depth=2
.LBB37_91:                              # %cond.end561
                                        #   in Loop: Header=BB37_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB37_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB37_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB37_94
.LBB37_93:                              # %cond.false592
                                        #   in Loop: Header=BB37_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB37_94:                              # %cond.end611
                                        #   in Loop: Header=BB37_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB37_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB37_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB37_100
.LBB37_96:                              # %cond.false618
                                        #   in Loop: Header=BB37_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB37_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB37_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB37_99
.LBB37_98:                              # %cond.false640
                                        #   in Loop: Header=BB37_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB37_99:                              # %cond.end659
                                        #   in Loop: Header=BB37_80 Depth=2
.LBB37_100:                             # %cond.end661
                                        #   in Loop: Header=BB37_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB37_105
.LBB37_101:                             # %if.else669
                                        #   in Loop: Header=BB37_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB37_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB37_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB37_104
.LBB37_103:                             # %if.else692
                                        #   in Loop: Header=BB37_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB37_104:                             # %if.end717
                                        #   in Loop: Header=BB37_80 Depth=2
	jmp	.LBB37_105
.LBB37_105:                             # %if.end718
                                        #   in Loop: Header=BB37_80 Depth=2
	jmp	.LBB37_106
.LBB37_106:                             # %for.inc719
                                        #   in Loop: Header=BB37_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_80
.LBB37_107:                             # %for.end721
                                        #   in Loop: Header=BB37_72 Depth=1
	jmp	.LBB37_108
.LBB37_108:                             # %for.inc722
                                        #   in Loop: Header=BB37_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_72
.LBB37_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB37_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB37_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB37_111 Depth=1
	movl	$0, -16(%rbp)
.LBB37_113:                             # %for.cond732
                                        #   Parent Loop BB37_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB37_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB37_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB37_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB37_117
.LBB37_116:                             # %if.else761
                                        #   in Loop: Header=BB37_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB37_117:                             # %if.end779
                                        #   in Loop: Header=BB37_113 Depth=2
	jmp	.LBB37_118
.LBB37_118:                             # %for.inc780
                                        #   in Loop: Header=BB37_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_113
.LBB37_119:                             # %for.end782
                                        #   in Loop: Header=BB37_111 Depth=1
	jmp	.LBB37_120
.LBB37_120:                             # %for.inc783
                                        #   in Loop: Header=BB37_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_111
.LBB37_121:                             # %for.end785
	jmp	.LBB37_122
.LBB37_122:                             # %if.end786
	movl	-112(%rbp), %ebx
	cmpl	$1254733462, -148(%rbp) # imm = 0x4AC9B696
	jne	.LBB37_124
.LBB37_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_123
.Lfunc_end37:
	.size	dct_luma.28, .Lfunc_end37-dct_luma.28
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.29       # -- Begin function dct_luma_16x16.29
	.p2align	4, 0x90
	.type	dct_luma_16x16.29,@function
dct_luma_16x16.29:                      # @dct_luma_16x16.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$274725421, -132(%rbp)  # imm = 0x105FFA2D
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB38_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB38_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB38_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB38_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB38_3 Depth=1
	movl	$0, -16(%rbp)
.LBB38_5:                               # %for.cond16
                                        #   Parent Loop BB38_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB38_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB38_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB38_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB38_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB38_9
.LBB38_8:                               # %if.else
                                        #   in Loop: Header=BB38_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB38_9:                               # %if.end
                                        #   in Loop: Header=BB38_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB38_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_5
.LBB38_11:                              # %for.end
                                        #   in Loop: Header=BB38_3 Depth=1
	jmp	.LBB38_12
.LBB38_12:                              # %for.inc61
                                        #   in Loop: Header=BB38_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_3
.LBB38_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB38_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_18 Depth 2
                                        #       Child Loop BB38_20 Depth 3
                                        #         Child Loop BB38_22 Depth 4
                                        #       Child Loop BB38_28 Depth 3
                                        #         Child Loop BB38_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB38_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB38_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_16:                              # %land.end69
                                        #   in Loop: Header=BB38_14 Depth=1
	testb	$1, %al
	jne	.LBB38_17
	jmp	.LBB38_39
.LBB38_17:                              # %for.body71
                                        #   in Loop: Header=BB38_14 Depth=1
	movl	$0, -20(%rbp)
.LBB38_18:                              # %for.cond72
                                        #   Parent Loop BB38_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_20 Depth 3
                                        #         Child Loop BB38_22 Depth 4
                                        #       Child Loop BB38_28 Depth 3
                                        #         Child Loop BB38_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB38_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB38_18 Depth=2
	movl	$0, -12(%rbp)
.LBB38_20:                              # %for.cond76
                                        #   Parent Loop BB38_14 Depth=1
                                        #     Parent Loop BB38_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB38_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB38_20 Depth=3
	movl	$0, -16(%rbp)
.LBB38_22:                              # %for.cond80
                                        #   Parent Loop BB38_14 Depth=1
                                        #     Parent Loop BB38_18 Depth=2
                                        #       Parent Loop BB38_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB38_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB38_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB38_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_22
.LBB38_25:                              # %for.end125
                                        #   in Loop: Header=BB38_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB38_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_20
.LBB38_27:                              # %for.end169
                                        #   in Loop: Header=BB38_18 Depth=2
	movl	$0, -16(%rbp)
.LBB38_28:                              # %for.cond170
                                        #   Parent Loop BB38_14 Depth=1
                                        #     Parent Loop BB38_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB38_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB38_28 Depth=3
	movl	$0, -12(%rbp)
.LBB38_30:                              # %for.cond174
                                        #   Parent Loop BB38_14 Depth=1
                                        #     Parent Loop BB38_18 Depth=2
                                        #       Parent Loop BB38_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB38_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB38_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB38_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_30
.LBB38_33:                              # %for.end219
                                        #   in Loop: Header=BB38_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB38_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_28
.LBB38_35:                              # %for.end264
                                        #   in Loop: Header=BB38_18 Depth=2
	jmp	.LBB38_36
.LBB38_36:                              # %for.inc265
                                        #   in Loop: Header=BB38_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_18
.LBB38_37:                              # %for.end267
                                        #   in Loop: Header=BB38_14 Depth=1
	jmp	.LBB38_38
.LBB38_38:                              # %for.inc268
                                        #   in Loop: Header=BB38_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_14
.LBB38_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB38_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB38_40 Depth=1
	movl	$0, -16(%rbp)
.LBB38_42:                              # %for.cond275
                                        #   Parent Loop BB38_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB38_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB38_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_42
.LBB38_45:                              # %for.end291
                                        #   in Loop: Header=BB38_40 Depth=1
	jmp	.LBB38_46
.LBB38_46:                              # %for.inc292
                                        #   in Loop: Header=BB38_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_40
.LBB38_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB38_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB38_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB38_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_50:                              # %land.end301
                                        #   in Loop: Header=BB38_48 Depth=1
	testb	$1, %al
	jne	.LBB38_51
	jmp	.LBB38_57
.LBB38_51:                              # %for.body303
                                        #   in Loop: Header=BB38_48 Depth=1
	movl	$0, -16(%rbp)
.LBB38_52:                              # %for.cond304
                                        #   Parent Loop BB38_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB38_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB38_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_52
.LBB38_55:                              # %for.end333
                                        #   in Loop: Header=BB38_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB38_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_48
.LBB38_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB38_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB38_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB38_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_60:                              # %land.end367
                                        #   in Loop: Header=BB38_58 Depth=1
	testb	$1, %al
	jne	.LBB38_61
	jmp	.LBB38_67
.LBB38_61:                              # %for.body369
                                        #   in Loop: Header=BB38_58 Depth=1
	movl	$0, -12(%rbp)
.LBB38_62:                              # %for.cond370
                                        #   Parent Loop BB38_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB38_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB38_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_62
.LBB38_65:                              # %for.end399
                                        #   in Loop: Header=BB38_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB38_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_58
.LBB38_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB38_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB38_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB38_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB38_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB38_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB38_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB38_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB38_73
.LBB38_72:                              # %if.then437
                                        #   in Loop: Header=BB38_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_74
.LBB38_73:                              # %if.else446
                                        #   in Loop: Header=BB38_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB38_74:                              # %if.end455
                                        #   in Loop: Header=BB38_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB38_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB38_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB38_77
.LBB38_76:                              # %if.else463
                                        #   in Loop: Header=BB38_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB38_77:                              # %if.end481
                                        #   in Loop: Header=BB38_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB38_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB38_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB38_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB38_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB38_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB38_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB38_81:                              # %if.end492
                                        #   in Loop: Header=BB38_68 Depth=1
	jmp	.LBB38_82
.LBB38_82:                              # %if.end493
                                        #   in Loop: Header=BB38_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB38_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB38_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB38_84:                              # %if.end507
                                        #   in Loop: Header=BB38_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB38_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB38_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB38_86:                              # %if.end519
                                        #   in Loop: Header=BB38_68 Depth=1
	jmp	.LBB38_87
.LBB38_87:                              # %for.inc520
                                        #   in Loop: Header=BB38_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB38_68
.LBB38_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB38_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_93 Depth 2
                                        #     Child Loop BB38_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB38_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB38_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_91:                              # %land.end531
                                        #   in Loop: Header=BB38_89 Depth=1
	testb	$1, %al
	jne	.LBB38_92
	jmp	.LBB38_102
.LBB38_92:                              # %for.body533
                                        #   in Loop: Header=BB38_89 Depth=1
	movl	$0, -16(%rbp)
.LBB38_93:                              # %for.cond534
                                        #   Parent Loop BB38_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB38_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB38_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_93
.LBB38_96:                              # %for.end546
                                        #   in Loop: Header=BB38_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB38_97:                              # %for.cond563
                                        #   Parent Loop BB38_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB38_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB38_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_97
.LBB38_100:                             # %for.end588
                                        #   in Loop: Header=BB38_89 Depth=1
	jmp	.LBB38_101
.LBB38_101:                             # %for.inc589
                                        #   in Loop: Header=BB38_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_89
.LBB38_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB38_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_107 Depth 2
                                        #     Child Loop BB38_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB38_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB38_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_105:                             # %land.end598
                                        #   in Loop: Header=BB38_103 Depth=1
	testb	$1, %al
	jne	.LBB38_106
	jmp	.LBB38_119
.LBB38_106:                             # %for.body600
                                        #   in Loop: Header=BB38_103 Depth=1
	movl	$0, -12(%rbp)
.LBB38_107:                             # %for.cond601
                                        #   Parent Loop BB38_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB38_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB38_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_107
.LBB38_110:                             # %for.end613
                                        #   in Loop: Header=BB38_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB38_111:                             # %for.cond630
                                        #   Parent Loop BB38_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB38_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB38_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB38_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB38_115
.LBB38_114:                             # %if.else680
                                        #   in Loop: Header=BB38_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB38_115:                             # %if.end717
                                        #   in Loop: Header=BB38_111 Depth=2
	jmp	.LBB38_116
.LBB38_116:                             # %for.inc718
                                        #   in Loop: Header=BB38_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_111
.LBB38_117:                             # %for.end720
                                        #   in Loop: Header=BB38_103 Depth=1
	jmp	.LBB38_118
.LBB38_118:                             # %for.inc721
                                        #   in Loop: Header=BB38_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_103
.LBB38_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB38_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_122 Depth 2
                                        #       Child Loop BB38_124 Depth 3
                                        #       Child Loop BB38_143 Depth 3
                                        #         Child Loop BB38_147 Depth 4
                                        #         Child Loop BB38_151 Depth 4
                                        #       Child Loop BB38_157 Depth 3
                                        #         Child Loop BB38_161 Depth 4
                                        #         Child Loop BB38_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB38_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB38_120 Depth=1
	movl	$0, -20(%rbp)
.LBB38_122:                             # %for.cond728
                                        #   Parent Loop BB38_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_124 Depth 3
                                        #       Child Loop BB38_143 Depth 3
                                        #         Child Loop BB38_147 Depth 4
                                        #         Child Loop BB38_151 Depth 4
                                        #       Child Loop BB38_157 Depth 3
                                        #         Child Loop BB38_161 Depth 4
                                        #         Child Loop BB38_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB38_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB38_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -56(%rbp)
.LBB38_124:                             # %for.cond751
                                        #   Parent Loop BB38_120 Depth=1
                                        #     Parent Loop BB38_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB38_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB38_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB38_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB38_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB38_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB38_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB38_129
.LBB38_128:                             # %if.then762
                                        #   in Loop: Header=BB38_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_130
.LBB38_129:                             # %if.else771
                                        #   in Loop: Header=BB38_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB38_130:                             # %if.end780
                                        #   in Loop: Header=BB38_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB38_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB38_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB38_133
.LBB38_132:                             # %if.else793
                                        #   in Loop: Header=BB38_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB38_133:                             # %if.end818
                                        #   in Loop: Header=BB38_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB38_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB38_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB38_135:                             # %if.end836
                                        #   in Loop: Header=BB38_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB38_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB38_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB38_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB38_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB38_139
.LBB38_138:                             # %if.else871
                                        #   in Loop: Header=BB38_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB38_139:                             # %if.end889
                                        #   in Loop: Header=BB38_124 Depth=3
	jmp	.LBB38_140
.LBB38_140:                             # %if.end890
                                        #   in Loop: Header=BB38_124 Depth=3
	jmp	.LBB38_141
.LBB38_141:                             # %for.inc891
                                        #   in Loop: Header=BB38_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB38_124
.LBB38_142:                             # %for.end893
                                        #   in Loop: Header=BB38_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB38_143:                             # %for.cond896
                                        #   Parent Loop BB38_120 Depth=1
                                        #     Parent Loop BB38_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_147 Depth 4
                                        #         Child Loop BB38_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB38_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB38_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_145:                             # %land.end902
                                        #   in Loop: Header=BB38_143 Depth=3
	testb	$1, %al
	jne	.LBB38_146
	jmp	.LBB38_156
.LBB38_146:                             # %for.body904
                                        #   in Loop: Header=BB38_143 Depth=3
	movl	$0, -16(%rbp)
.LBB38_147:                             # %for.cond905
                                        #   Parent Loop BB38_120 Depth=1
                                        #     Parent Loop BB38_122 Depth=2
                                        #       Parent Loop BB38_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB38_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB38_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB38_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_147
.LBB38_150:                             # %for.end921
                                        #   in Loop: Header=BB38_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB38_151:                             # %for.cond940
                                        #   Parent Loop BB38_120 Depth=1
                                        #     Parent Loop BB38_122 Depth=2
                                        #       Parent Loop BB38_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB38_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB38_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB38_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_151
.LBB38_154:                             # %for.end973
                                        #   in Loop: Header=BB38_143 Depth=3
	jmp	.LBB38_155
.LBB38_155:                             # %for.inc974
                                        #   in Loop: Header=BB38_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_143
.LBB38_156:                             # %for.end976
                                        #   in Loop: Header=BB38_122 Depth=2
	movl	$0, -16(%rbp)
.LBB38_157:                             # %for.cond977
                                        #   Parent Loop BB38_120 Depth=1
                                        #     Parent Loop BB38_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_161 Depth 4
                                        #         Child Loop BB38_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB38_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB38_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_159:                             # %land.end983
                                        #   in Loop: Header=BB38_157 Depth=3
	testb	$1, %al
	jne	.LBB38_160
	jmp	.LBB38_170
.LBB38_160:                             # %for.body985
                                        #   in Loop: Header=BB38_157 Depth=3
	movl	$0, -12(%rbp)
.LBB38_161:                             # %for.cond986
                                        #   Parent Loop BB38_120 Depth=1
                                        #     Parent Loop BB38_122 Depth=2
                                        #       Parent Loop BB38_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB38_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB38_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB38_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_161
.LBB38_164:                             # %for.end1002
                                        #   in Loop: Header=BB38_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB38_165:                             # %for.cond1021
                                        #   Parent Loop BB38_120 Depth=1
                                        #     Parent Loop BB38_122 Depth=2
                                        #       Parent Loop BB38_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB38_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB38_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB38_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_165
.LBB38_168:                             # %for.end1054
                                        #   in Loop: Header=BB38_157 Depth=3
	jmp	.LBB38_169
.LBB38_169:                             # %for.inc1055
                                        #   in Loop: Header=BB38_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_157
.LBB38_170:                             # %for.end1057
                                        #   in Loop: Header=BB38_122 Depth=2
	jmp	.LBB38_171
.LBB38_171:                             # %for.inc1058
                                        #   in Loop: Header=BB38_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_122
.LBB38_172:                             # %for.end1060
                                        #   in Loop: Header=BB38_120 Depth=1
	jmp	.LBB38_173
.LBB38_173:                             # %for.inc1061
                                        #   in Loop: Header=BB38_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_120
.LBB38_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB38_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB38_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB38_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB38_176 Depth=1
	movl	$0, -16(%rbp)
.LBB38_178:                             # %for.cond1071
                                        #   Parent Loop BB38_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB38_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB38_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB38_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_178
.LBB38_181:                             # %for.end1093
                                        #   in Loop: Header=BB38_176 Depth=1
	jmp	.LBB38_182
.LBB38_182:                             # %for.inc1094
                                        #   in Loop: Header=BB38_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_176
.LBB38_183:                             # %for.end1096
	jmp	.LBB38_196
.LBB38_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB38_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB38_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB38_185 Depth=1
	movl	$0, -16(%rbp)
.LBB38_187:                             # %for.cond1102
                                        #   Parent Loop BB38_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB38_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB38_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB38_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB38_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB38_191
.LBB38_190:                             # %if.else1125
                                        #   in Loop: Header=BB38_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB38_191:                             # %if.end1145
                                        #   in Loop: Header=BB38_187 Depth=2
	jmp	.LBB38_192
.LBB38_192:                             # %for.inc1146
                                        #   in Loop: Header=BB38_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_187
.LBB38_193:                             # %for.end1148
                                        #   in Loop: Header=BB38_185 Depth=1
	jmp	.LBB38_194
.LBB38_194:                             # %for.inc1149
                                        #   in Loop: Header=BB38_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_185
.LBB38_195:                             # %for.end1151
	jmp	.LBB38_196
.LBB38_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB38_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB38_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB38_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB38_198 Depth=1
	movl	$0, -16(%rbp)
.LBB38_200:                             # %for.cond1160
                                        #   Parent Loop BB38_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB38_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB38_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB38_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB38_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB38_213
.LBB38_203:                             # %if.else1186
                                        #   in Loop: Header=BB38_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB38_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB38_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB38_206
.LBB38_205:                             # %cond.false
                                        #   in Loop: Header=BB38_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB38_206:                             # %cond.end
                                        #   in Loop: Header=BB38_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB38_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB38_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB38_212
.LBB38_208:                             # %cond.false1229
                                        #   in Loop: Header=BB38_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB38_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB38_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB38_211
.LBB38_210:                             # %cond.false1250
                                        #   in Loop: Header=BB38_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB38_211:                             # %cond.end1268
                                        #   in Loop: Header=BB38_200 Depth=2
.LBB38_212:                             # %cond.end1270
                                        #   in Loop: Header=BB38_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB38_213:                             # %if.end1282
                                        #   in Loop: Header=BB38_200 Depth=2
	jmp	.LBB38_214
.LBB38_214:                             # %for.inc1283
                                        #   in Loop: Header=BB38_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_200
.LBB38_215:                             # %for.end1285
                                        #   in Loop: Header=BB38_198 Depth=1
	jmp	.LBB38_216
.LBB38_216:                             # %for.inc1286
                                        #   in Loop: Header=BB38_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_198
.LBB38_217:                             # %for.end1288
	jmp	.LBB38_218
.LBB38_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$274725421, -132(%rbp)  # imm = 0x105FFA2D
	jne	.LBB38_220
.LBB38_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_219
.Lfunc_end38:
	.size	dct_luma_16x16.29, .Lfunc_end38-dct_luma_16x16.29
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.30       # -- Begin function dct_luma_16x16.30
	.p2align	4, 0x90
	.type	dct_luma_16x16.30,@function
dct_luma_16x16.30:                      # @dct_luma_16x16.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$2089963583, -132(%rbp) # imm = 0x7C92503F
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB39_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB39_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB39_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB39_3 Depth=1
	movl	$0, -16(%rbp)
.LBB39_5:                               # %for.cond16
                                        #   Parent Loop BB39_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB39_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB39_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB39_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB39_9
.LBB39_8:                               # %if.else
                                        #   in Loop: Header=BB39_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB39_9:                               # %if.end
                                        #   in Loop: Header=BB39_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB39_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_5
.LBB39_11:                              # %for.end
                                        #   in Loop: Header=BB39_3 Depth=1
	jmp	.LBB39_12
.LBB39_12:                              # %for.inc61
                                        #   in Loop: Header=BB39_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_3
.LBB39_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB39_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_18 Depth 2
                                        #       Child Loop BB39_20 Depth 3
                                        #         Child Loop BB39_22 Depth 4
                                        #       Child Loop BB39_28 Depth 3
                                        #         Child Loop BB39_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB39_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB39_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_16:                              # %land.end69
                                        #   in Loop: Header=BB39_14 Depth=1
	testb	$1, %al
	jne	.LBB39_17
	jmp	.LBB39_39
.LBB39_17:                              # %for.body71
                                        #   in Loop: Header=BB39_14 Depth=1
	movl	$0, -24(%rbp)
.LBB39_18:                              # %for.cond72
                                        #   Parent Loop BB39_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_20 Depth 3
                                        #         Child Loop BB39_22 Depth 4
                                        #       Child Loop BB39_28 Depth 3
                                        #         Child Loop BB39_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB39_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB39_18 Depth=2
	movl	$0, -12(%rbp)
.LBB39_20:                              # %for.cond76
                                        #   Parent Loop BB39_14 Depth=1
                                        #     Parent Loop BB39_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB39_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB39_20 Depth=3
	movl	$0, -16(%rbp)
.LBB39_22:                              # %for.cond80
                                        #   Parent Loop BB39_14 Depth=1
                                        #     Parent Loop BB39_18 Depth=2
                                        #       Parent Loop BB39_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB39_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB39_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB39_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_22
.LBB39_25:                              # %for.end125
                                        #   in Loop: Header=BB39_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB39_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_20
.LBB39_27:                              # %for.end169
                                        #   in Loop: Header=BB39_18 Depth=2
	movl	$0, -16(%rbp)
.LBB39_28:                              # %for.cond170
                                        #   Parent Loop BB39_14 Depth=1
                                        #     Parent Loop BB39_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB39_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB39_28 Depth=3
	movl	$0, -12(%rbp)
.LBB39_30:                              # %for.cond174
                                        #   Parent Loop BB39_14 Depth=1
                                        #     Parent Loop BB39_18 Depth=2
                                        #       Parent Loop BB39_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB39_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB39_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB39_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_30
.LBB39_33:                              # %for.end219
                                        #   in Loop: Header=BB39_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB39_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_28
.LBB39_35:                              # %for.end264
                                        #   in Loop: Header=BB39_18 Depth=2
	jmp	.LBB39_36
.LBB39_36:                              # %for.inc265
                                        #   in Loop: Header=BB39_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB39_18
.LBB39_37:                              # %for.end267
                                        #   in Loop: Header=BB39_14 Depth=1
	jmp	.LBB39_38
.LBB39_38:                              # %for.inc268
                                        #   in Loop: Header=BB39_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_14
.LBB39_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB39_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB39_40 Depth=1
	movl	$0, -16(%rbp)
.LBB39_42:                              # %for.cond275
                                        #   Parent Loop BB39_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB39_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB39_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_42
.LBB39_45:                              # %for.end291
                                        #   in Loop: Header=BB39_40 Depth=1
	jmp	.LBB39_46
.LBB39_46:                              # %for.inc292
                                        #   in Loop: Header=BB39_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_40
.LBB39_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB39_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB39_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB39_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_50:                              # %land.end301
                                        #   in Loop: Header=BB39_48 Depth=1
	testb	$1, %al
	jne	.LBB39_51
	jmp	.LBB39_57
.LBB39_51:                              # %for.body303
                                        #   in Loop: Header=BB39_48 Depth=1
	movl	$0, -16(%rbp)
.LBB39_52:                              # %for.cond304
                                        #   Parent Loop BB39_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB39_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB39_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_52
.LBB39_55:                              # %for.end333
                                        #   in Loop: Header=BB39_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB39_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_48
.LBB39_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB39_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB39_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB39_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_60:                              # %land.end367
                                        #   in Loop: Header=BB39_58 Depth=1
	testb	$1, %al
	jne	.LBB39_61
	jmp	.LBB39_67
.LBB39_61:                              # %for.body369
                                        #   in Loop: Header=BB39_58 Depth=1
	movl	$0, -12(%rbp)
.LBB39_62:                              # %for.cond370
                                        #   Parent Loop BB39_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB39_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB39_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_62
.LBB39_65:                              # %for.end399
                                        #   in Loop: Header=BB39_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB39_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_58
.LBB39_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB39_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB39_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB39_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB39_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB39_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB39_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB39_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB39_73
.LBB39_72:                              # %if.then437
                                        #   in Loop: Header=BB39_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_74
.LBB39_73:                              # %if.else446
                                        #   in Loop: Header=BB39_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB39_74:                              # %if.end455
                                        #   in Loop: Header=BB39_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB39_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB39_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB39_77
.LBB39_76:                              # %if.else463
                                        #   in Loop: Header=BB39_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB39_77:                              # %if.end481
                                        #   in Loop: Header=BB39_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB39_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB39_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB39_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB39_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB39_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB39_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB39_81:                              # %if.end492
                                        #   in Loop: Header=BB39_68 Depth=1
	jmp	.LBB39_82
.LBB39_82:                              # %if.end493
                                        #   in Loop: Header=BB39_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB39_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB39_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB39_84:                              # %if.end507
                                        #   in Loop: Header=BB39_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB39_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB39_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB39_86:                              # %if.end519
                                        #   in Loop: Header=BB39_68 Depth=1
	jmp	.LBB39_87
.LBB39_87:                              # %for.inc520
                                        #   in Loop: Header=BB39_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB39_68
.LBB39_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB39_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_93 Depth 2
                                        #     Child Loop BB39_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB39_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB39_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_91:                              # %land.end531
                                        #   in Loop: Header=BB39_89 Depth=1
	testb	$1, %al
	jne	.LBB39_92
	jmp	.LBB39_102
.LBB39_92:                              # %for.body533
                                        #   in Loop: Header=BB39_89 Depth=1
	movl	$0, -16(%rbp)
.LBB39_93:                              # %for.cond534
                                        #   Parent Loop BB39_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB39_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB39_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_93
.LBB39_96:                              # %for.end546
                                        #   in Loop: Header=BB39_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB39_97:                              # %for.cond563
                                        #   Parent Loop BB39_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB39_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB39_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_97
.LBB39_100:                             # %for.end588
                                        #   in Loop: Header=BB39_89 Depth=1
	jmp	.LBB39_101
.LBB39_101:                             # %for.inc589
                                        #   in Loop: Header=BB39_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_89
.LBB39_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB39_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_107 Depth 2
                                        #     Child Loop BB39_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB39_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB39_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_105:                             # %land.end598
                                        #   in Loop: Header=BB39_103 Depth=1
	testb	$1, %al
	jne	.LBB39_106
	jmp	.LBB39_119
.LBB39_106:                             # %for.body600
                                        #   in Loop: Header=BB39_103 Depth=1
	movl	$0, -12(%rbp)
.LBB39_107:                             # %for.cond601
                                        #   Parent Loop BB39_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB39_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB39_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_107
.LBB39_110:                             # %for.end613
                                        #   in Loop: Header=BB39_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB39_111:                             # %for.cond630
                                        #   Parent Loop BB39_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB39_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB39_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB39_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB39_115
.LBB39_114:                             # %if.else680
                                        #   in Loop: Header=BB39_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB39_115:                             # %if.end717
                                        #   in Loop: Header=BB39_111 Depth=2
	jmp	.LBB39_116
.LBB39_116:                             # %for.inc718
                                        #   in Loop: Header=BB39_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_111
.LBB39_117:                             # %for.end720
                                        #   in Loop: Header=BB39_103 Depth=1
	jmp	.LBB39_118
.LBB39_118:                             # %for.inc721
                                        #   in Loop: Header=BB39_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_103
.LBB39_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB39_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_122 Depth 2
                                        #       Child Loop BB39_124 Depth 3
                                        #       Child Loop BB39_143 Depth 3
                                        #         Child Loop BB39_147 Depth 4
                                        #         Child Loop BB39_151 Depth 4
                                        #       Child Loop BB39_157 Depth 3
                                        #         Child Loop BB39_161 Depth 4
                                        #         Child Loop BB39_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB39_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB39_120 Depth=1
	movl	$0, -24(%rbp)
.LBB39_122:                             # %for.cond728
                                        #   Parent Loop BB39_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_124 Depth 3
                                        #       Child Loop BB39_143 Depth 3
                                        #         Child Loop BB39_147 Depth 4
                                        #         Child Loop BB39_151 Depth 4
                                        #       Child Loop BB39_157 Depth 3
                                        #         Child Loop BB39_161 Depth 4
                                        #         Child Loop BB39_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB39_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB39_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -56(%rbp)
.LBB39_124:                             # %for.cond751
                                        #   Parent Loop BB39_120 Depth=1
                                        #     Parent Loop BB39_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB39_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB39_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB39_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB39_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB39_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB39_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB39_129
.LBB39_128:                             # %if.then762
                                        #   in Loop: Header=BB39_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_130
.LBB39_129:                             # %if.else771
                                        #   in Loop: Header=BB39_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB39_130:                             # %if.end780
                                        #   in Loop: Header=BB39_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB39_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB39_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB39_133
.LBB39_132:                             # %if.else793
                                        #   in Loop: Header=BB39_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB39_133:                             # %if.end818
                                        #   in Loop: Header=BB39_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB39_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB39_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB39_135:                             # %if.end836
                                        #   in Loop: Header=BB39_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB39_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB39_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB39_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB39_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB39_139
.LBB39_138:                             # %if.else871
                                        #   in Loop: Header=BB39_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB39_139:                             # %if.end889
                                        #   in Loop: Header=BB39_124 Depth=3
	jmp	.LBB39_140
.LBB39_140:                             # %if.end890
                                        #   in Loop: Header=BB39_124 Depth=3
	jmp	.LBB39_141
.LBB39_141:                             # %for.inc891
                                        #   in Loop: Header=BB39_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB39_124
.LBB39_142:                             # %for.end893
                                        #   in Loop: Header=BB39_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB39_143:                             # %for.cond896
                                        #   Parent Loop BB39_120 Depth=1
                                        #     Parent Loop BB39_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_147 Depth 4
                                        #         Child Loop BB39_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB39_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB39_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_145:                             # %land.end902
                                        #   in Loop: Header=BB39_143 Depth=3
	testb	$1, %al
	jne	.LBB39_146
	jmp	.LBB39_156
.LBB39_146:                             # %for.body904
                                        #   in Loop: Header=BB39_143 Depth=3
	movl	$0, -16(%rbp)
.LBB39_147:                             # %for.cond905
                                        #   Parent Loop BB39_120 Depth=1
                                        #     Parent Loop BB39_122 Depth=2
                                        #       Parent Loop BB39_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB39_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB39_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB39_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_147
.LBB39_150:                             # %for.end921
                                        #   in Loop: Header=BB39_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB39_151:                             # %for.cond940
                                        #   Parent Loop BB39_120 Depth=1
                                        #     Parent Loop BB39_122 Depth=2
                                        #       Parent Loop BB39_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB39_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB39_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB39_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_151
.LBB39_154:                             # %for.end973
                                        #   in Loop: Header=BB39_143 Depth=3
	jmp	.LBB39_155
.LBB39_155:                             # %for.inc974
                                        #   in Loop: Header=BB39_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_143
.LBB39_156:                             # %for.end976
                                        #   in Loop: Header=BB39_122 Depth=2
	movl	$0, -16(%rbp)
.LBB39_157:                             # %for.cond977
                                        #   Parent Loop BB39_120 Depth=1
                                        #     Parent Loop BB39_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_161 Depth 4
                                        #         Child Loop BB39_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB39_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB39_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_159:                             # %land.end983
                                        #   in Loop: Header=BB39_157 Depth=3
	testb	$1, %al
	jne	.LBB39_160
	jmp	.LBB39_170
.LBB39_160:                             # %for.body985
                                        #   in Loop: Header=BB39_157 Depth=3
	movl	$0, -12(%rbp)
.LBB39_161:                             # %for.cond986
                                        #   Parent Loop BB39_120 Depth=1
                                        #     Parent Loop BB39_122 Depth=2
                                        #       Parent Loop BB39_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB39_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB39_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB39_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_161
.LBB39_164:                             # %for.end1002
                                        #   in Loop: Header=BB39_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB39_165:                             # %for.cond1021
                                        #   Parent Loop BB39_120 Depth=1
                                        #     Parent Loop BB39_122 Depth=2
                                        #       Parent Loop BB39_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB39_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB39_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB39_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_165
.LBB39_168:                             # %for.end1054
                                        #   in Loop: Header=BB39_157 Depth=3
	jmp	.LBB39_169
.LBB39_169:                             # %for.inc1055
                                        #   in Loop: Header=BB39_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_157
.LBB39_170:                             # %for.end1057
                                        #   in Loop: Header=BB39_122 Depth=2
	jmp	.LBB39_171
.LBB39_171:                             # %for.inc1058
                                        #   in Loop: Header=BB39_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB39_122
.LBB39_172:                             # %for.end1060
                                        #   in Loop: Header=BB39_120 Depth=1
	jmp	.LBB39_173
.LBB39_173:                             # %for.inc1061
                                        #   in Loop: Header=BB39_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_120
.LBB39_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB39_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB39_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB39_176 Depth=1
	movl	$0, -16(%rbp)
.LBB39_178:                             # %for.cond1071
                                        #   Parent Loop BB39_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB39_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB39_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_178
.LBB39_181:                             # %for.end1093
                                        #   in Loop: Header=BB39_176 Depth=1
	jmp	.LBB39_182
.LBB39_182:                             # %for.inc1094
                                        #   in Loop: Header=BB39_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_176
.LBB39_183:                             # %for.end1096
	jmp	.LBB39_196
.LBB39_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB39_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB39_185 Depth=1
	movl	$0, -16(%rbp)
.LBB39_187:                             # %for.cond1102
                                        #   Parent Loop BB39_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB39_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB39_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB39_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB39_191
.LBB39_190:                             # %if.else1125
                                        #   in Loop: Header=BB39_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB39_191:                             # %if.end1145
                                        #   in Loop: Header=BB39_187 Depth=2
	jmp	.LBB39_192
.LBB39_192:                             # %for.inc1146
                                        #   in Loop: Header=BB39_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_187
.LBB39_193:                             # %for.end1148
                                        #   in Loop: Header=BB39_185 Depth=1
	jmp	.LBB39_194
.LBB39_194:                             # %for.inc1149
                                        #   in Loop: Header=BB39_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_185
.LBB39_195:                             # %for.end1151
	jmp	.LBB39_196
.LBB39_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB39_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB39_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB39_198 Depth=1
	movl	$0, -16(%rbp)
.LBB39_200:                             # %for.cond1160
                                        #   Parent Loop BB39_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB39_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB39_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB39_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB39_213
.LBB39_203:                             # %if.else1186
                                        #   in Loop: Header=BB39_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB39_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB39_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB39_206
.LBB39_205:                             # %cond.false
                                        #   in Loop: Header=BB39_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB39_206:                             # %cond.end
                                        #   in Loop: Header=BB39_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB39_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB39_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB39_212
.LBB39_208:                             # %cond.false1229
                                        #   in Loop: Header=BB39_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB39_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB39_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB39_211
.LBB39_210:                             # %cond.false1250
                                        #   in Loop: Header=BB39_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB39_211:                             # %cond.end1268
                                        #   in Loop: Header=BB39_200 Depth=2
.LBB39_212:                             # %cond.end1270
                                        #   in Loop: Header=BB39_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB39_213:                             # %if.end1282
                                        #   in Loop: Header=BB39_200 Depth=2
	jmp	.LBB39_214
.LBB39_214:                             # %for.inc1283
                                        #   in Loop: Header=BB39_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_200
.LBB39_215:                             # %for.end1285
                                        #   in Loop: Header=BB39_198 Depth=1
	jmp	.LBB39_216
.LBB39_216:                             # %for.inc1286
                                        #   in Loop: Header=BB39_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_198
.LBB39_217:                             # %for.end1288
	jmp	.LBB39_218
.LBB39_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$2089963583, -132(%rbp) # imm = 0x7C92503F
	jne	.LBB39_220
.LBB39_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_219
.Lfunc_end39:
	.size	dct_luma_16x16.30, .Lfunc_end39-dct_luma_16x16.30
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.31         # -- Begin function copyblock_sp.31
	.p2align	4, 0x90
	.type	copyblock_sp.31,@function
copyblock_sp.31:                        # @copyblock_sp.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1072293730, -88(%rbp)  # imm = 0x3FE9E762
	movl	%edi, -84(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -68(%rbp)
	movl	-72(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_3:                               # %for.cond4
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_3
.LBB40_6:                               # %for.end
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_7
.LBB40_7:                               # %for.inc17
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB40_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB40_9 Depth=1
	movl	$0, -8(%rbp)
.LBB40_11:                              # %for.cond24
                                        #   Parent Loop BB40_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB40_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB40_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB40_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_11
.LBB40_14:                              # %for.end53
                                        #   in Loop: Header=BB40_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB40_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_9
.LBB40_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB40_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB40_17 Depth=1
	movl	$0, -4(%rbp)
.LBB40_19:                              # %for.cond86
                                        #   Parent Loop BB40_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB40_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB40_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB40_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_19
.LBB40_22:                              # %for.end115
                                        #   in Loop: Header=BB40_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB40_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_17
.LBB40_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB40_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB40_25 Depth=1
	movl	$0, -8(%rbp)
.LBB40_27:                              # %for.cond149
                                        #   Parent Loop BB40_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_27
.LBB40_30:                              # %for.end184
                                        #   in Loop: Header=BB40_25 Depth=1
	jmp	.LBB40_31
.LBB40_31:                              # %for.inc185
                                        #   in Loop: Header=BB40_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_25
.LBB40_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB40_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_35 Depth 2
                                        #     Child Loop BB40_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB40_33 Depth=1
	movl	$0, -8(%rbp)
.LBB40_35:                              # %for.cond192
                                        #   Parent Loop BB40_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB40_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB40_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_35
.LBB40_38:                              # %for.end205
                                        #   in Loop: Header=BB40_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB40_39:                              # %for.cond224
                                        #   Parent Loop BB40_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB40_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB40_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB40_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_39
.LBB40_42:                              # %for.end251
                                        #   in Loop: Header=BB40_33 Depth=1
	jmp	.LBB40_43
.LBB40_43:                              # %for.inc252
                                        #   in Loop: Header=BB40_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_33
.LBB40_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB40_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_47 Depth 2
                                        #     Child Loop BB40_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB40_45 Depth=1
	movl	$0, -4(%rbp)
.LBB40_47:                              # %for.cond259
                                        #   Parent Loop BB40_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB40_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB40_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_47
.LBB40_50:                              # %for.end272
                                        #   in Loop: Header=BB40_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB40_51:                              # %for.cond291
                                        #   Parent Loop BB40_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB40_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB40_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB40_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB40_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB40_55
.LBB40_54:                              # %cond.false
                                        #   in Loop: Header=BB40_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB40_55:                              # %cond.end
                                        #   in Loop: Header=BB40_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB40_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB40_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_61
.LBB40_57:                              # %cond.false316
                                        #   in Loop: Header=BB40_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB40_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB40_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB40_60
.LBB40_59:                              # %cond.false327
                                        #   in Loop: Header=BB40_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB40_60:                              # %cond.end335
                                        #   in Loop: Header=BB40_51 Depth=2
.LBB40_61:                              # %cond.end337
                                        #   in Loop: Header=BB40_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB40_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB40_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB40_64
.LBB40_63:                              # %cond.false355
                                        #   in Loop: Header=BB40_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB40_64:                              # %cond.end363
                                        #   in Loop: Header=BB40_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB40_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB40_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_70
.LBB40_66:                              # %cond.false369
                                        #   in Loop: Header=BB40_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB40_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB40_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB40_69
.LBB40_68:                              # %cond.false380
                                        #   in Loop: Header=BB40_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB40_69:                              # %cond.end388
                                        #   in Loop: Header=BB40_51 Depth=2
.LBB40_70:                              # %cond.end390
                                        #   in Loop: Header=BB40_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB40_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_51
.LBB40_72:                              # %for.end399
                                        #   in Loop: Header=BB40_45 Depth=1
	jmp	.LBB40_73
.LBB40_73:                              # %for.inc400
                                        #   in Loop: Header=BB40_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_45
.LBB40_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB40_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB40_75 Depth=1
	movl	$0, -8(%rbp)
.LBB40_77:                              # %for.cond407
                                        #   Parent Loop BB40_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB40_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB40_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_77
.LBB40_80:                              # %for.end427
                                        #   in Loop: Header=BB40_75 Depth=1
	jmp	.LBB40_81
.LBB40_81:                              # %for.inc428
                                        #   in Loop: Header=BB40_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_75
.LBB40_82:                              # %for.end430
	cmpl	$1072293730, -88(%rbp)  # imm = 0x3FE9E762
	jne	.LBB40_84
.LBB40_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_83
.Lfunc_end40:
	.size	copyblock_sp.31, .Lfunc_end40-copyblock_sp.31
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.32        # -- Begin function dct_chroma_DC.32
	.p2align	4, 0x90
	.type	dct_chroma_DC.32,@function
dct_chroma_DC.32:                       # @dct_chroma_DC.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1845399587, -44(%rbp)  # imm = 0x6DFE9023
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB41_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB41_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$1, %eax
	cmpl	-28(%rbp), %eax
	jle	.LBB41_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$1, %eax
	jmp	.LBB41_6
.LBB41_5:                               # %cond.false
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-28(%rbp), %eax
.LBB41_6:                               # %cond.end
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	%eax, -28(%rbp)
	movl	-40(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -24(%rbp)
.LBB41_7:                               # %if.end
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_8
.LBB41_8:                               # %for.inc
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_1
.LBB41_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %ebx
	cmpl	$1845399587, -44(%rbp)  # imm = 0x6DFE9023
	jne	.LBB41_11
.LBB41_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_10
.Lfunc_end41:
	.size	dct_chroma_DC.32, .Lfunc_end41-dct_chroma_DC.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.33
.LCPI42_0:
	.quad	4616189618054758400     # double 4
.LCPI42_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI42_2:
	.quad	4611686018427387904     # double 2
.LCPI42_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.33
	.p2align	4, 0x90
	.type	dct_chroma_sp.33,@function
dct_chroma_sp.33:                       # @dct_chroma_sp.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI42_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI42_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$374420498, -268(%rbp)  # imm = 0x16513412
	movl	%edi, -112(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI42_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI42_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB42_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB42_6
.LBB42_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB42_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB42_5
.LBB42_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB42_5:                               # %cond.end
.LBB42_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB42_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB42_12
.LBB42_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB42_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB42_11
.LBB42_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB42_11:                              # %cond.end41
.LBB42_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB42_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB42_15
.LBB42_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB42_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB42_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB42_18
.LBB42_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB42_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB42_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB42_21
.LBB42_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB42_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB42_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB42_24
.LBB42_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB42_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB42_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB42_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	$0, -16(%rbp)
.LBB42_27:                              # %for.cond97
                                        #   Parent Loop BB42_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB42_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB42_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_27
.LBB42_30:                              # %for.end
                                        #   in Loop: Header=BB42_25 Depth=1
	jmp	.LBB42_31
.LBB42_31:                              # %for.inc121
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_25
.LBB42_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB42_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_35 Depth 2
                                        #       Child Loop BB42_37 Depth 3
                                        #         Child Loop BB42_39 Depth 4
                                        #       Child Loop BB42_45 Depth 3
                                        #         Child Loop BB42_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB42_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB42_33 Depth=1
	movl	$0, -20(%rbp)
.LBB42_35:                              # %for.cond128
                                        #   Parent Loop BB42_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_37 Depth 3
                                        #         Child Loop BB42_39 Depth 4
                                        #       Child Loop BB42_45 Depth 3
                                        #         Child Loop BB42_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB42_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB42_35 Depth=2
	movl	$0, -12(%rbp)
.LBB42_37:                              # %for.cond132
                                        #   Parent Loop BB42_33 Depth=1
                                        #     Parent Loop BB42_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB42_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB42_39:                              # %for.cond137
                                        #   Parent Loop BB42_33 Depth=1
                                        #     Parent Loop BB42_35 Depth=2
                                        #       Parent Loop BB42_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB42_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB42_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB42_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_39
.LBB42_42:                              # %for.end174
                                        #   in Loop: Header=BB42_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB42_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_37
.LBB42_44:                              # %for.end214
                                        #   in Loop: Header=BB42_35 Depth=2
	movl	$0, -16(%rbp)
.LBB42_45:                              # %for.cond215
                                        #   Parent Loop BB42_33 Depth=1
                                        #     Parent Loop BB42_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB42_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB42_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB42_47:                              # %for.cond220
                                        #   Parent Loop BB42_33 Depth=1
                                        #     Parent Loop BB42_35 Depth=2
                                        #       Parent Loop BB42_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB42_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB42_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB42_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_47
.LBB42_50:                              # %for.end257
                                        #   in Loop: Header=BB42_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB42_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_45
.LBB42_52:                              # %for.end298
                                        #   in Loop: Header=BB42_35 Depth=2
	jmp	.LBB42_53
.LBB42_53:                              # %for.inc299
                                        #   in Loop: Header=BB42_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_35
.LBB42_54:                              # %for.end301
                                        #   in Loop: Header=BB42_33 Depth=1
	jmp	.LBB42_55
.LBB42_55:                              # %for.inc302
                                        #   in Loop: Header=BB42_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_33
.LBB42_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB42_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_59 Depth 2
                                        #       Child Loop BB42_61 Depth 3
                                        #         Child Loop BB42_63 Depth 4
                                        #       Child Loop BB42_69 Depth 3
                                        #         Child Loop BB42_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB42_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB42_57 Depth=1
	movl	$0, -20(%rbp)
.LBB42_59:                              # %for.cond309
                                        #   Parent Loop BB42_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_61 Depth 3
                                        #         Child Loop BB42_63 Depth 4
                                        #       Child Loop BB42_69 Depth 3
                                        #         Child Loop BB42_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB42_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB42_59 Depth=2
	movl	$0, -12(%rbp)
.LBB42_61:                              # %for.cond313
                                        #   Parent Loop BB42_57 Depth=1
                                        #     Parent Loop BB42_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB42_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB42_63:                              # %for.cond318
                                        #   Parent Loop BB42_57 Depth=1
                                        #     Parent Loop BB42_59 Depth=2
                                        #       Parent Loop BB42_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB42_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB42_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB42_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_63
.LBB42_66:                              # %for.end351
                                        #   in Loop: Header=BB42_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB42_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_61
.LBB42_68:                              # %for.end387
                                        #   in Loop: Header=BB42_59 Depth=2
	movl	$0, -16(%rbp)
.LBB42_69:                              # %for.cond388
                                        #   Parent Loop BB42_57 Depth=1
                                        #     Parent Loop BB42_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB42_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB42_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB42_71:                              # %for.cond393
                                        #   Parent Loop BB42_57 Depth=1
                                        #     Parent Loop BB42_59 Depth=2
                                        #       Parent Loop BB42_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB42_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB42_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB42_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_71
.LBB42_74:                              # %for.end426
                                        #   in Loop: Header=BB42_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB42_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_69
.LBB42_76:                              # %for.end463
                                        #   in Loop: Header=BB42_59 Depth=2
	jmp	.LBB42_77
.LBB42_77:                              # %for.inc464
                                        #   in Loop: Header=BB42_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_59
.LBB42_78:                              # %for.end466
                                        #   in Loop: Header=BB42_57 Depth=1
	jmp	.LBB42_79
.LBB42_79:                              # %for.inc467
                                        #   in Loop: Header=BB42_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_57
.LBB42_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB42_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB42_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB42_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB42_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB42_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB42_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB42_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB42_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB42_90
	jp	.LBB42_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB42_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB42_89
.LBB42_88:                              # %cond.false691
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-44(%rbp), %eax
.LBB42_89:                              # %cond.end692
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB42_94
.LBB42_90:                              # %if.else
                                        #   in Loop: Header=BB42_81 Depth=1
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB42_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_93
.LBB42_92:                              # %if.else697
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB42_93:                              # %if.end
                                        #   in Loop: Header=BB42_81 Depth=1
	jmp	.LBB42_94
.LBB42_94:                              # %if.end698
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB42_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB42_97
.LBB42_96:                              # %cond.false702
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-104(%rbp), %eax
.LBB42_97:                              # %cond.end703
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB42_108
.LBB42_98:                              # %if.else705
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB42_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB42_107
.LBB42_100:                             # %if.else709
                                        #   in Loop: Header=BB42_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB42_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB42_103
.LBB42_102:                             # %cond.false713
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-44(%rbp), %eax
.LBB42_103:                             # %cond.end714
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB42_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB42_106
.LBB42_105:                             # %cond.false719
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-104(%rbp), %eax
.LBB42_106:                             # %cond.end720
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB42_107:                             # %if.end722
                                        #   in Loop: Header=BB42_81 Depth=1
	jmp	.LBB42_108
.LBB42_108:                             # %if.end723
                                        #   in Loop: Header=BB42_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB42_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB42_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB42_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB42_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB42_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB42_112:                             # %if.end734
                                        #   in Loop: Header=BB42_81 Depth=1
	jmp	.LBB42_113
.LBB42_113:                             # %if.end735
                                        #   in Loop: Header=BB42_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB42_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB42_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	$1, %eax
	jmp	.LBB42_117
.LBB42_116:                             # %cond.false745
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-204(%rbp), %eax
.LBB42_117:                             # %cond.end746
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB42_118:                             # %if.end763
                                        #   in Loop: Header=BB42_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB42_81
.LBB42_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB42_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_123 Depth 2
                                        #       Child Loop BB42_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB42_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB42_121 Depth=1
	movl	$0, -20(%rbp)
.LBB42_123:                             # %for.cond839
                                        #   Parent Loop BB42_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB42_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB42_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB42_125:                             # %for.cond860
                                        #   Parent Loop BB42_121 Depth=1
                                        #     Parent Loop BB42_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB42_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB42_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB42_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB42_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB42_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB42_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB42_130
.LBB42_129:                             # %if.then867
                                        #   in Loop: Header=BB42_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_131
.LBB42_130:                             # %if.else876
                                        #   in Loop: Header=BB42_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB42_131:                             # %if.end885
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB42_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB42_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB42_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB42_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB42_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB42_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB42_139
	jp	.LBB42_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB42_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB42_138
.LBB42_137:                             # %cond.false1047
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-44(%rbp), %eax
.LBB42_138:                             # %cond.end1048
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB42_143
.LBB42_139:                             # %if.else1050
                                        #   in Loop: Header=BB42_125 Depth=3
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB42_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_142
.LBB42_141:                             # %if.else1054
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB42_142:                             # %if.end1055
                                        #   in Loop: Header=BB42_125 Depth=3
	jmp	.LBB42_143
.LBB42_143:                             # %if.end1056
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB42_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB42_146
.LBB42_145:                             # %cond.false1060
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-104(%rbp), %eax
.LBB42_146:                             # %cond.end1061
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB42_157
.LBB42_147:                             # %if.else1063
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB42_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB42_156
.LBB42_149:                             # %if.else1067
                                        #   in Loop: Header=BB42_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB42_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB42_152
.LBB42_151:                             # %cond.false1071
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-44(%rbp), %eax
.LBB42_152:                             # %cond.end1072
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB42_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB42_155
.LBB42_154:                             # %cond.false1077
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-104(%rbp), %eax
.LBB42_155:                             # %cond.end1078
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB42_156:                             # %if.end1080
                                        #   in Loop: Header=BB42_125 Depth=3
	jmp	.LBB42_157
.LBB42_157:                             # %if.end1081
                                        #   in Loop: Header=BB42_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB42_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB42_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB42_161
.LBB42_160:                             # %if.else1099
                                        #   in Loop: Header=BB42_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB42_161:                             # %if.end1106
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB42_162:                             # %if.end1128
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB42_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB42_125
.LBB42_164:                             # %for.end1164
                                        #   in Loop: Header=BB42_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB42_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_123
.LBB42_166:                             # %for.end1169
                                        #   in Loop: Header=BB42_121 Depth=1
	jmp	.LBB42_167
.LBB42_167:                             # %for.inc1170
                                        #   in Loop: Header=BB42_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_121
.LBB42_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB42_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB42_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB42_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_173 Depth 2
                                        #       Child Loop BB42_175 Depth 3
                                        #         Child Loop BB42_177 Depth 4
                                        #         Child Loop BB42_181 Depth 4
                                        #       Child Loop BB42_187 Depth 3
                                        #         Child Loop BB42_189 Depth 4
                                        #         Child Loop BB42_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB42_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB42_171 Depth=1
	movl	$0, -20(%rbp)
.LBB42_173:                             # %for.cond1181
                                        #   Parent Loop BB42_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_175 Depth 3
                                        #         Child Loop BB42_177 Depth 4
                                        #         Child Loop BB42_181 Depth 4
                                        #       Child Loop BB42_187 Depth 3
                                        #         Child Loop BB42_189 Depth 4
                                        #         Child Loop BB42_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB42_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB42_173 Depth=2
	movl	$0, -12(%rbp)
.LBB42_175:                             # %for.cond1185
                                        #   Parent Loop BB42_171 Depth=1
                                        #     Parent Loop BB42_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_177 Depth 4
                                        #         Child Loop BB42_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB42_175 Depth=3
	movl	$0, -16(%rbp)
.LBB42_177:                             # %for.cond1189
                                        #   Parent Loop BB42_171 Depth=1
                                        #     Parent Loop BB42_173 Depth=2
                                        #       Parent Loop BB42_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB42_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB42_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB42_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_177
.LBB42_180:                             # %for.end1204
                                        #   in Loop: Header=BB42_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB42_181:                             # %for.cond1223
                                        #   Parent Loop BB42_171 Depth=1
                                        #     Parent Loop BB42_173 Depth=2
                                        #       Parent Loop BB42_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB42_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB42_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB42_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_181
.LBB42_184:                             # %for.end1254
                                        #   in Loop: Header=BB42_175 Depth=3
	jmp	.LBB42_185
.LBB42_185:                             # %for.inc1255
                                        #   in Loop: Header=BB42_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_175
.LBB42_186:                             # %for.end1257
                                        #   in Loop: Header=BB42_173 Depth=2
	movl	$0, -16(%rbp)
.LBB42_187:                             # %for.cond1258
                                        #   Parent Loop BB42_171 Depth=1
                                        #     Parent Loop BB42_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_189 Depth 4
                                        #         Child Loop BB42_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB42_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB42_187 Depth=3
	movl	$0, -12(%rbp)
.LBB42_189:                             # %for.cond1262
                                        #   Parent Loop BB42_171 Depth=1
                                        #     Parent Loop BB42_173 Depth=2
                                        #       Parent Loop BB42_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB42_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB42_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_189
.LBB42_192:                             # %for.end1277
                                        #   in Loop: Header=BB42_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB42_193:                             # %for.cond1296
                                        #   Parent Loop BB42_171 Depth=1
                                        #     Parent Loop BB42_173 Depth=2
                                        #       Parent Loop BB42_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB42_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB42_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB42_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB42_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB42_197
.LBB42_196:                             # %cond.false1311
                                        #   in Loop: Header=BB42_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB42_197:                             # %cond.end1319
                                        #   in Loop: Header=BB42_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB42_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB42_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB42_203
.LBB42_199:                             # %cond.false1325
                                        #   in Loop: Header=BB42_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB42_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB42_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB42_202
.LBB42_201:                             # %cond.false1336
                                        #   in Loop: Header=BB42_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB42_202:                             # %cond.end1344
                                        #   in Loop: Header=BB42_193 Depth=4
.LBB42_203:                             # %cond.end1346
                                        #   in Loop: Header=BB42_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB42_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB42_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB42_206
.LBB42_205:                             # %cond.false1366
                                        #   in Loop: Header=BB42_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB42_206:                             # %cond.end1374
                                        #   in Loop: Header=BB42_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB42_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB42_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB42_212
.LBB42_208:                             # %cond.false1380
                                        #   in Loop: Header=BB42_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB42_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB42_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB42_211
.LBB42_210:                             # %cond.false1391
                                        #   in Loop: Header=BB42_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB42_211:                             # %cond.end1399
                                        #   in Loop: Header=BB42_193 Depth=4
.LBB42_212:                             # %cond.end1401
                                        #   in Loop: Header=BB42_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB42_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_193
.LBB42_214:                             # %for.end1412
                                        #   in Loop: Header=BB42_187 Depth=3
	jmp	.LBB42_215
.LBB42_215:                             # %for.inc1413
                                        #   in Loop: Header=BB42_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_187
.LBB42_216:                             # %for.end1415
                                        #   in Loop: Header=BB42_173 Depth=2
	jmp	.LBB42_217
.LBB42_217:                             # %for.inc1416
                                        #   in Loop: Header=BB42_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_173
.LBB42_218:                             # %for.end1418
                                        #   in Loop: Header=BB42_171 Depth=1
	jmp	.LBB42_219
.LBB42_219:                             # %for.inc1419
                                        #   in Loop: Header=BB42_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_171
.LBB42_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB42_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB42_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB42_221 Depth=1
	movl	$0, -16(%rbp)
.LBB42_223:                             # %for.cond1426
                                        #   Parent Loop BB42_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB42_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB42_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB42_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_223
.LBB42_226:                             # %for.end1446
                                        #   in Loop: Header=BB42_221 Depth=1
	jmp	.LBB42_227
.LBB42_227:                             # %for.inc1447
                                        #   in Loop: Header=BB42_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_221
.LBB42_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$374420498, -268(%rbp)  # imm = 0x16513412
	jne	.LBB42_230
.LBB42_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_229
.Lfunc_end42:
	.size	dct_chroma_sp.33, .Lfunc_end42-dct_chroma_sp.33
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.34 # -- Begin function intrapred_luma_16x16.34
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.34,@function
intrapred_luma_16x16.34:                # @intrapred_luma_16x16.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1263605360, -92(%rbp)  # imm = 0x4B511670
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB43_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_1
.LBB43_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB43_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB43_20
.LBB43_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB43_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_9
.LBB43_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB43_9
.LBB43_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB43_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB43_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB43_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB43_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB43_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_14
.LBB43_13:                              # %cond.false23
                                        #   in Loop: Header=BB43_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_14
.LBB43_14:                              # %cond.end24
                                        #   in Loop: Header=BB43_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB43_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_10
.LBB43_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB43_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_19
.LBB43_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB43_19
.LBB43_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB43_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB43_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB43_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB43_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB43_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB43_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB43_24:                              # %if.end51
                                        #   in Loop: Header=BB43_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB43_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB43_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB43_26:                              # %if.end68
                                        #   in Loop: Header=BB43_21 Depth=1
	jmp	.LBB43_27
.LBB43_27:                              # %for.inc69
                                        #   in Loop: Header=BB43_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_21
.LBB43_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB43_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB43_31
# %bb.30:                               # %if.then74
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB43_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB43_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB43_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB43_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB43_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB43_37
# %bb.36:                               # %if.then88
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB43_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB43_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB43_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB43_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB43_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB43_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB43_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB43_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB43_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB43_44:                              # %if.end114
                                        #   in Loop: Header=BB43_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB43_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB43_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB43_46:                              # %if.end133
                                        #   in Loop: Header=BB43_41 Depth=1
	jmp	.LBB43_47
.LBB43_47:                              # %for.inc134
                                        #   in Loop: Header=BB43_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_41
.LBB43_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB43_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB43_49 Depth=1
	movl	$0, -4(%rbp)
.LBB43_51:                              # %for.cond141
                                        #   Parent Loop BB43_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB43_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB43_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_51
.LBB43_54:                              # %for.end173
                                        #   in Loop: Header=BB43_49 Depth=1
	jmp	.LBB43_55
.LBB43_55:                              # %for.inc174
                                        #   in Loop: Header=BB43_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_49
.LBB43_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB43_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB43_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB43_60
.LBB43_59:                              # %if.then181
	jmp	.LBB43_85
.LBB43_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB43_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB43_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB43_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB43_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB43_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB43_65
.LBB43_64:                              # %if.else210
                                        #   in Loop: Header=BB43_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB43_65:                              # %if.end232
                                        #   in Loop: Header=BB43_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB43_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_61
.LBB43_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB43_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB43_68 Depth=1
	movl	$0, -4(%rbp)
.LBB43_70:                              # %for.cond293
                                        #   Parent Loop BB43_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB43_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB43_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_74
.LBB43_73:                              # %cond.false309
                                        #   in Loop: Header=BB43_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_74:                              # %cond.end318
                                        #   in Loop: Header=BB43_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB43_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB43_80
.LBB43_76:                              # %cond.false323
                                        #   in Loop: Header=BB43_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB43_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_79
.LBB43_78:                              # %cond.false337
                                        #   in Loop: Header=BB43_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_79:                              # %cond.end346
                                        #   in Loop: Header=BB43_70 Depth=2
.LBB43_80:                              # %cond.end348
                                        #   in Loop: Header=BB43_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB43_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_70
.LBB43_82:                              # %for.end359
                                        #   in Loop: Header=BB43_68 Depth=1
	jmp	.LBB43_83
.LBB43_83:                              # %for.inc360
                                        #   in Loop: Header=BB43_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_68
.LBB43_84:                              # %for.end362.loopexit
	jmp	.LBB43_85
.LBB43_85:                              # %for.end362
	cmpl	$1263605360, -92(%rbp)  # imm = 0x4B511670
	jne	.LBB43_87
.LBB43_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_86
.Lfunc_end43:
	.size	intrapred_luma_16x16.34, .Lfunc_end43-intrapred_luma_16x16.34
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.35 # -- Begin function intrapred_luma_16x16.35
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.35,@function
intrapred_luma_16x16.35:                # @intrapred_luma_16x16.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$834370075, -92(%rbp)   # imm = 0x31BB7A1B
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB44_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_1
.LBB44_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB44_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB44_20
.LBB44_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB44_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB44_9
.LBB44_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB44_9
.LBB44_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB44_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB44_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB44_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB44_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB44_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB44_14
.LBB44_13:                              # %cond.false23
                                        #   in Loop: Header=BB44_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_14
.LBB44_14:                              # %cond.end24
                                        #   in Loop: Header=BB44_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB44_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_10
.LBB44_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB44_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB44_19
.LBB44_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB44_19
.LBB44_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB44_20:                              # %if.end
	movl	$0, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB44_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB44_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB44_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB44_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB44_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB44_24:                              # %if.end51
                                        #   in Loop: Header=BB44_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB44_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB44_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB44_26:                              # %if.end68
                                        #   in Loop: Header=BB44_21 Depth=1
	jmp	.LBB44_27
.LBB44_27:                              # %for.inc69
                                        #   in Loop: Header=BB44_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_21
.LBB44_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB44_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB44_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB44_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB44_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB44_34
# %bb.33:                               # %if.then81
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB44_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB44_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB44_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB44_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB44_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB44_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB44_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB44_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB44_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB44_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB44_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB44_44:                              # %if.end114
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB44_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB44_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB44_46:                              # %if.end133
                                        #   in Loop: Header=BB44_41 Depth=1
	jmp	.LBB44_47
.LBB44_47:                              # %for.inc134
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_41
.LBB44_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB44_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB44_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB44_49 Depth=1
	movl	$0, -4(%rbp)
.LBB44_51:                              # %for.cond141
                                        #   Parent Loop BB44_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB44_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB44_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB44_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_51
.LBB44_54:                              # %for.end173
                                        #   in Loop: Header=BB44_49 Depth=1
	jmp	.LBB44_55
.LBB44_55:                              # %for.inc174
                                        #   in Loop: Header=BB44_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_49
.LBB44_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB44_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB44_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB44_60
.LBB44_59:                              # %if.then181
	jmp	.LBB44_85
.LBB44_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB44_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB44_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB44_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB44_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB44_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_65
.LBB44_64:                              # %if.else210
                                        #   in Loop: Header=BB44_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB44_65:                              # %if.end232
                                        #   in Loop: Header=BB44_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB44_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_61
.LBB44_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB44_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB44_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB44_68 Depth=1
	movl	$0, -4(%rbp)
.LBB44_70:                              # %for.cond293
                                        #   Parent Loop BB44_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB44_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_74
.LBB44_73:                              # %cond.false309
                                        #   in Loop: Header=BB44_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_74:                              # %cond.end318
                                        #   in Loop: Header=BB44_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB44_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_80
.LBB44_76:                              # %cond.false323
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_79
.LBB44_78:                              # %cond.false337
                                        #   in Loop: Header=BB44_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_79:                              # %cond.end346
                                        #   in Loop: Header=BB44_70 Depth=2
.LBB44_80:                              # %cond.end348
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB44_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_70
.LBB44_82:                              # %for.end359
                                        #   in Loop: Header=BB44_68 Depth=1
	jmp	.LBB44_83
.LBB44_83:                              # %for.inc360
                                        #   in Loop: Header=BB44_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_68
.LBB44_84:                              # %for.end362.loopexit
	jmp	.LBB44_85
.LBB44_85:                              # %for.end362
	cmpl	$834370075, -92(%rbp)   # imm = 0x31BB7A1B
	jne	.LBB44_87
.LBB44_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_86
.Lfunc_end44:
	.size	intrapred_luma_16x16.35, .Lfunc_end44-intrapred_luma_16x16.35
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.36         # -- Begin function copyblock_sp.36
	.p2align	4, 0x90
	.type	copyblock_sp.36,@function
copyblock_sp.36:                        # @copyblock_sp.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1668854542, -92(%rbp)  # imm = 0x6378B30E
	movl	%edi, -72(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_3:                               # %for.cond4
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_3
.LBB45_6:                               # %for.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_7
.LBB45_7:                               # %for.inc17
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_1
.LBB45_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB45_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB45_9 Depth=1
	movl	$0, -8(%rbp)
.LBB45_11:                              # %for.cond24
                                        #   Parent Loop BB45_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB45_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB45_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB45_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_11
.LBB45_14:                              # %for.end53
                                        #   in Loop: Header=BB45_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB45_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_9
.LBB45_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB45_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	$0, -4(%rbp)
.LBB45_19:                              # %for.cond86
                                        #   Parent Loop BB45_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB45_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_19
.LBB45_22:                              # %for.end115
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_17
.LBB45_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB45_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	$0, -8(%rbp)
.LBB45_27:                              # %for.cond149
                                        #   Parent Loop BB45_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB45_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_27
.LBB45_30:                              # %for.end184
                                        #   in Loop: Header=BB45_25 Depth=1
	jmp	.LBB45_31
.LBB45_31:                              # %for.inc185
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_25
.LBB45_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB45_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_35 Depth 2
                                        #     Child Loop BB45_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB45_33 Depth=1
	movl	$0, -8(%rbp)
.LBB45_35:                              # %for.cond192
                                        #   Parent Loop BB45_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB45_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB45_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_35
.LBB45_38:                              # %for.end205
                                        #   in Loop: Header=BB45_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB45_39:                              # %for.cond224
                                        #   Parent Loop BB45_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB45_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB45_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB45_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_39
.LBB45_42:                              # %for.end251
                                        #   in Loop: Header=BB45_33 Depth=1
	jmp	.LBB45_43
.LBB45_43:                              # %for.inc252
                                        #   in Loop: Header=BB45_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_33
.LBB45_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB45_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_47 Depth 2
                                        #     Child Loop BB45_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB45_45 Depth=1
	movl	$0, -4(%rbp)
.LBB45_47:                              # %for.cond259
                                        #   Parent Loop BB45_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB45_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB45_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_47
.LBB45_50:                              # %for.end272
                                        #   in Loop: Header=BB45_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB45_51:                              # %for.cond291
                                        #   Parent Loop BB45_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB45_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB45_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB45_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB45_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB45_55
.LBB45_54:                              # %cond.false
                                        #   in Loop: Header=BB45_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB45_55:                              # %cond.end
                                        #   in Loop: Header=BB45_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB45_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB45_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB45_61
.LBB45_57:                              # %cond.false316
                                        #   in Loop: Header=BB45_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB45_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB45_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB45_60
.LBB45_59:                              # %cond.false327
                                        #   in Loop: Header=BB45_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB45_60:                              # %cond.end335
                                        #   in Loop: Header=BB45_51 Depth=2
.LBB45_61:                              # %cond.end337
                                        #   in Loop: Header=BB45_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB45_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB45_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB45_64
.LBB45_63:                              # %cond.false355
                                        #   in Loop: Header=BB45_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB45_64:                              # %cond.end363
                                        #   in Loop: Header=BB45_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB45_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB45_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB45_70
.LBB45_66:                              # %cond.false369
                                        #   in Loop: Header=BB45_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB45_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB45_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB45_69
.LBB45_68:                              # %cond.false380
                                        #   in Loop: Header=BB45_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB45_69:                              # %cond.end388
                                        #   in Loop: Header=BB45_51 Depth=2
.LBB45_70:                              # %cond.end390
                                        #   in Loop: Header=BB45_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB45_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_51
.LBB45_72:                              # %for.end399
                                        #   in Loop: Header=BB45_45 Depth=1
	jmp	.LBB45_73
.LBB45_73:                              # %for.inc400
                                        #   in Loop: Header=BB45_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_45
.LBB45_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB45_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB45_75 Depth=1
	movl	$0, -8(%rbp)
.LBB45_77:                              # %for.cond407
                                        #   Parent Loop BB45_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB45_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB45_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_77
.LBB45_80:                              # %for.end427
                                        #   in Loop: Header=BB45_75 Depth=1
	jmp	.LBB45_81
.LBB45_81:                              # %for.inc428
                                        #   in Loop: Header=BB45_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_75
.LBB45_82:                              # %for.end430
	cmpl	$1668854542, -92(%rbp)  # imm = 0x6378B30E
	jne	.LBB45_84
.LBB45_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_83
.Lfunc_end45:
	.size	copyblock_sp.36, .Lfunc_end45-copyblock_sp.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.37
.LCPI46_0:
	.quad	4616189618054758400     # double 4
.LCPI46_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI46_2:
	.quad	4611686018427387904     # double 2
.LCPI46_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.37
	.p2align	4, 0x90
	.type	dct_chroma_sp.37,@function
dct_chroma_sp.37:                       # @dct_chroma_sp.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI46_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$898786172, -268(%rbp)  # imm = 0x3592637C
	movl	%edi, -112(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI46_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB46_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB46_6
.LBB46_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB46_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB46_5
.LBB46_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB46_5:                               # %cond.end
.LBB46_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB46_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB46_12
.LBB46_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB46_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB46_11
.LBB46_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB46_11:                              # %cond.end41
.LBB46_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB46_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB46_15
.LBB46_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB46_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB46_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB46_18
.LBB46_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB46_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -216(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB46_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB46_21
.LBB46_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB46_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB46_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB46_24
.LBB46_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB46_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB46_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB46_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB46_25 Depth=1
	movl	$0, -16(%rbp)
.LBB46_27:                              # %for.cond97
                                        #   Parent Loop BB46_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB46_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB46_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB46_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_27
.LBB46_30:                              # %for.end
                                        #   in Loop: Header=BB46_25 Depth=1
	jmp	.LBB46_31
.LBB46_31:                              # %for.inc121
                                        #   in Loop: Header=BB46_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_25
.LBB46_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB46_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_35 Depth 2
                                        #       Child Loop BB46_37 Depth 3
                                        #         Child Loop BB46_39 Depth 4
                                        #       Child Loop BB46_45 Depth 3
                                        #         Child Loop BB46_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB46_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB46_33 Depth=1
	movl	$0, -20(%rbp)
.LBB46_35:                              # %for.cond128
                                        #   Parent Loop BB46_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_37 Depth 3
                                        #         Child Loop BB46_39 Depth 4
                                        #       Child Loop BB46_45 Depth 3
                                        #         Child Loop BB46_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB46_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB46_35 Depth=2
	movl	$0, -12(%rbp)
.LBB46_37:                              # %for.cond132
                                        #   Parent Loop BB46_33 Depth=1
                                        #     Parent Loop BB46_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB46_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB46_39:                              # %for.cond137
                                        #   Parent Loop BB46_33 Depth=1
                                        #     Parent Loop BB46_35 Depth=2
                                        #       Parent Loop BB46_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB46_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB46_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB46_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_39
.LBB46_42:                              # %for.end174
                                        #   in Loop: Header=BB46_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB46_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_37
.LBB46_44:                              # %for.end214
                                        #   in Loop: Header=BB46_35 Depth=2
	movl	$0, -16(%rbp)
.LBB46_45:                              # %for.cond215
                                        #   Parent Loop BB46_33 Depth=1
                                        #     Parent Loop BB46_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB46_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB46_47:                              # %for.cond220
                                        #   Parent Loop BB46_33 Depth=1
                                        #     Parent Loop BB46_35 Depth=2
                                        #       Parent Loop BB46_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB46_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB46_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB46_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_47
.LBB46_50:                              # %for.end257
                                        #   in Loop: Header=BB46_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB46_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_45
.LBB46_52:                              # %for.end298
                                        #   in Loop: Header=BB46_35 Depth=2
	jmp	.LBB46_53
.LBB46_53:                              # %for.inc299
                                        #   in Loop: Header=BB46_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_35
.LBB46_54:                              # %for.end301
                                        #   in Loop: Header=BB46_33 Depth=1
	jmp	.LBB46_55
.LBB46_55:                              # %for.inc302
                                        #   in Loop: Header=BB46_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_33
.LBB46_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB46_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_59 Depth 2
                                        #       Child Loop BB46_61 Depth 3
                                        #         Child Loop BB46_63 Depth 4
                                        #       Child Loop BB46_69 Depth 3
                                        #         Child Loop BB46_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB46_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB46_57 Depth=1
	movl	$0, -20(%rbp)
.LBB46_59:                              # %for.cond309
                                        #   Parent Loop BB46_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_61 Depth 3
                                        #         Child Loop BB46_63 Depth 4
                                        #       Child Loop BB46_69 Depth 3
                                        #         Child Loop BB46_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB46_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB46_59 Depth=2
	movl	$0, -12(%rbp)
.LBB46_61:                              # %for.cond313
                                        #   Parent Loop BB46_57 Depth=1
                                        #     Parent Loop BB46_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB46_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB46_63:                              # %for.cond318
                                        #   Parent Loop BB46_57 Depth=1
                                        #     Parent Loop BB46_59 Depth=2
                                        #       Parent Loop BB46_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB46_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB46_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB46_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_63
.LBB46_66:                              # %for.end351
                                        #   in Loop: Header=BB46_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB46_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_61
.LBB46_68:                              # %for.end387
                                        #   in Loop: Header=BB46_59 Depth=2
	movl	$0, -16(%rbp)
.LBB46_69:                              # %for.cond388
                                        #   Parent Loop BB46_57 Depth=1
                                        #     Parent Loop BB46_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB46_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB46_71:                              # %for.cond393
                                        #   Parent Loop BB46_57 Depth=1
                                        #     Parent Loop BB46_59 Depth=2
                                        #       Parent Loop BB46_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB46_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB46_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB46_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_71
.LBB46_74:                              # %for.end426
                                        #   in Loop: Header=BB46_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB46_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_69
.LBB46_76:                              # %for.end463
                                        #   in Loop: Header=BB46_59 Depth=2
	jmp	.LBB46_77
.LBB46_77:                              # %for.inc464
                                        #   in Loop: Header=BB46_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_59
.LBB46_78:                              # %for.end466
                                        #   in Loop: Header=BB46_57 Depth=1
	jmp	.LBB46_79
.LBB46_79:                              # %for.inc467
                                        #   in Loop: Header=BB46_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_57
.LBB46_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB46_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB46_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB46_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB46_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB46_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB46_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB46_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB46_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB46_90
	jp	.LBB46_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB46_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB46_89
.LBB46_88:                              # %cond.false691
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-44(%rbp), %eax
.LBB46_89:                              # %cond.end692
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB46_94
.LBB46_90:                              # %if.else
                                        #   in Loop: Header=BB46_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB46_93
.LBB46_92:                              # %if.else697
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB46_93:                              # %if.end
                                        #   in Loop: Header=BB46_81 Depth=1
	jmp	.LBB46_94
.LBB46_94:                              # %if.end698
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB46_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB46_97
.LBB46_96:                              # %cond.false702
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-100(%rbp), %eax
.LBB46_97:                              # %cond.end703
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB46_108
.LBB46_98:                              # %if.else705
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB46_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB46_107
.LBB46_100:                             # %if.else709
                                        #   in Loop: Header=BB46_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB46_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB46_103
.LBB46_102:                             # %cond.false713
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-44(%rbp), %eax
.LBB46_103:                             # %cond.end714
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB46_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB46_106
.LBB46_105:                             # %cond.false719
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-100(%rbp), %eax
.LBB46_106:                             # %cond.end720
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB46_107:                             # %if.end722
                                        #   in Loop: Header=BB46_81 Depth=1
	jmp	.LBB46_108
.LBB46_108:                             # %if.end723
                                        #   in Loop: Header=BB46_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB46_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB46_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB46_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB46_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB46_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB46_112:                             # %if.end734
                                        #   in Loop: Header=BB46_81 Depth=1
	jmp	.LBB46_113
.LBB46_113:                             # %if.end735
                                        #   in Loop: Header=BB46_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB46_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB46_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	$1, %eax
	jmp	.LBB46_117
.LBB46_116:                             # %cond.false745
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-204(%rbp), %eax
.LBB46_117:                             # %cond.end746
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB46_118:                             # %if.end763
                                        #   in Loop: Header=BB46_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_81
.LBB46_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -220(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB46_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_123 Depth 2
                                        #       Child Loop BB46_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB46_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB46_121 Depth=1
	movl	$0, -20(%rbp)
.LBB46_123:                             # %for.cond839
                                        #   Parent Loop BB46_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB46_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB46_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB46_125:                             # %for.cond860
                                        #   Parent Loop BB46_121 Depth=1
                                        #     Parent Loop BB46_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB46_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB46_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB46_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB46_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB46_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB46_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB46_130
.LBB46_129:                             # %if.then867
                                        #   in Loop: Header=BB46_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_131
.LBB46_130:                             # %if.else876
                                        #   in Loop: Header=BB46_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB46_131:                             # %if.end885
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB46_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB46_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB46_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB46_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB46_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB46_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB46_139
	jp	.LBB46_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB46_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB46_138
.LBB46_137:                             # %cond.false1047
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-44(%rbp), %eax
.LBB46_138:                             # %cond.end1048
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB46_143
.LBB46_139:                             # %if.else1050
                                        #   in Loop: Header=BB46_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB46_142
.LBB46_141:                             # %if.else1054
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB46_142:                             # %if.end1055
                                        #   in Loop: Header=BB46_125 Depth=3
	jmp	.LBB46_143
.LBB46_143:                             # %if.end1056
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB46_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB46_146
.LBB46_145:                             # %cond.false1060
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-100(%rbp), %eax
.LBB46_146:                             # %cond.end1061
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB46_157
.LBB46_147:                             # %if.else1063
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB46_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB46_156
.LBB46_149:                             # %if.else1067
                                        #   in Loop: Header=BB46_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB46_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB46_152
.LBB46_151:                             # %cond.false1071
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-44(%rbp), %eax
.LBB46_152:                             # %cond.end1072
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB46_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB46_155
.LBB46_154:                             # %cond.false1077
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-100(%rbp), %eax
.LBB46_155:                             # %cond.end1078
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB46_156:                             # %if.end1080
                                        #   in Loop: Header=BB46_125 Depth=3
	jmp	.LBB46_157
.LBB46_157:                             # %if.end1081
                                        #   in Loop: Header=BB46_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB46_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB46_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-220(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -220(%rbp)
	jmp	.LBB46_161
.LBB46_160:                             # %if.else1099
                                        #   in Loop: Header=BB46_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-220(%rbp), %eax
	movl	%eax, -220(%rbp)
.LBB46_161:                             # %if.end1106
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB46_162:                             # %if.end1128
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB46_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_125
.LBB46_164:                             # %for.end1164
                                        #   in Loop: Header=BB46_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB46_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_123
.LBB46_166:                             # %for.end1169
                                        #   in Loop: Header=BB46_121 Depth=1
	jmp	.LBB46_167
.LBB46_167:                             # %for.inc1170
                                        #   in Loop: Header=BB46_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_121
.LBB46_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB46_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB46_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB46_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_173 Depth 2
                                        #       Child Loop BB46_175 Depth 3
                                        #         Child Loop BB46_177 Depth 4
                                        #         Child Loop BB46_181 Depth 4
                                        #       Child Loop BB46_187 Depth 3
                                        #         Child Loop BB46_189 Depth 4
                                        #         Child Loop BB46_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB46_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB46_171 Depth=1
	movl	$0, -20(%rbp)
.LBB46_173:                             # %for.cond1181
                                        #   Parent Loop BB46_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_175 Depth 3
                                        #         Child Loop BB46_177 Depth 4
                                        #         Child Loop BB46_181 Depth 4
                                        #       Child Loop BB46_187 Depth 3
                                        #         Child Loop BB46_189 Depth 4
                                        #         Child Loop BB46_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB46_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB46_173 Depth=2
	movl	$0, -12(%rbp)
.LBB46_175:                             # %for.cond1185
                                        #   Parent Loop BB46_171 Depth=1
                                        #     Parent Loop BB46_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_177 Depth 4
                                        #         Child Loop BB46_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB46_175 Depth=3
	movl	$0, -16(%rbp)
.LBB46_177:                             # %for.cond1189
                                        #   Parent Loop BB46_171 Depth=1
                                        #     Parent Loop BB46_173 Depth=2
                                        #       Parent Loop BB46_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB46_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB46_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_177
.LBB46_180:                             # %for.end1204
                                        #   in Loop: Header=BB46_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB46_181:                             # %for.cond1223
                                        #   Parent Loop BB46_171 Depth=1
                                        #     Parent Loop BB46_173 Depth=2
                                        #       Parent Loop BB46_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB46_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB46_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB46_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_181
.LBB46_184:                             # %for.end1254
                                        #   in Loop: Header=BB46_175 Depth=3
	jmp	.LBB46_185
.LBB46_185:                             # %for.inc1255
                                        #   in Loop: Header=BB46_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_175
.LBB46_186:                             # %for.end1257
                                        #   in Loop: Header=BB46_173 Depth=2
	movl	$0, -16(%rbp)
.LBB46_187:                             # %for.cond1258
                                        #   Parent Loop BB46_171 Depth=1
                                        #     Parent Loop BB46_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_189 Depth 4
                                        #         Child Loop BB46_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB46_187 Depth=3
	movl	$0, -12(%rbp)
.LBB46_189:                             # %for.cond1262
                                        #   Parent Loop BB46_171 Depth=1
                                        #     Parent Loop BB46_173 Depth=2
                                        #       Parent Loop BB46_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB46_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB46_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_189
.LBB46_192:                             # %for.end1277
                                        #   in Loop: Header=BB46_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB46_193:                             # %for.cond1296
                                        #   Parent Loop BB46_171 Depth=1
                                        #     Parent Loop BB46_173 Depth=2
                                        #       Parent Loop BB46_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB46_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB46_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB46_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB46_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB46_197
.LBB46_196:                             # %cond.false1311
                                        #   in Loop: Header=BB46_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB46_197:                             # %cond.end1319
                                        #   in Loop: Header=BB46_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB46_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB46_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB46_203
.LBB46_199:                             # %cond.false1325
                                        #   in Loop: Header=BB46_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB46_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB46_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB46_202
.LBB46_201:                             # %cond.false1336
                                        #   in Loop: Header=BB46_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB46_202:                             # %cond.end1344
                                        #   in Loop: Header=BB46_193 Depth=4
.LBB46_203:                             # %cond.end1346
                                        #   in Loop: Header=BB46_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB46_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB46_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB46_206
.LBB46_205:                             # %cond.false1366
                                        #   in Loop: Header=BB46_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB46_206:                             # %cond.end1374
                                        #   in Loop: Header=BB46_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB46_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB46_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB46_212
.LBB46_208:                             # %cond.false1380
                                        #   in Loop: Header=BB46_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB46_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB46_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB46_211
.LBB46_210:                             # %cond.false1391
                                        #   in Loop: Header=BB46_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB46_211:                             # %cond.end1399
                                        #   in Loop: Header=BB46_193 Depth=4
.LBB46_212:                             # %cond.end1401
                                        #   in Loop: Header=BB46_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB46_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_193
.LBB46_214:                             # %for.end1412
                                        #   in Loop: Header=BB46_187 Depth=3
	jmp	.LBB46_215
.LBB46_215:                             # %for.inc1413
                                        #   in Loop: Header=BB46_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_187
.LBB46_216:                             # %for.end1415
                                        #   in Loop: Header=BB46_173 Depth=2
	jmp	.LBB46_217
.LBB46_217:                             # %for.inc1416
                                        #   in Loop: Header=BB46_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_173
.LBB46_218:                             # %for.end1418
                                        #   in Loop: Header=BB46_171 Depth=1
	jmp	.LBB46_219
.LBB46_219:                             # %for.inc1419
                                        #   in Loop: Header=BB46_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_171
.LBB46_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB46_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB46_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB46_221 Depth=1
	movl	$0, -16(%rbp)
.LBB46_223:                             # %for.cond1426
                                        #   Parent Loop BB46_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB46_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB46_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB46_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_223
.LBB46_226:                             # %for.end1446
                                        #   in Loop: Header=BB46_221 Depth=1
	jmp	.LBB46_227
.LBB46_227:                             # %for.inc1447
                                        #   in Loop: Header=BB46_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_221
.LBB46_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$898786172, -268(%rbp)  # imm = 0x3592637C
	jne	.LBB46_230
.LBB46_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_229
.Lfunc_end46:
	.size	dct_chroma_sp.37, .Lfunc_end46-dct_chroma_sp.37
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.38       # -- Begin function intrapred_luma.38
	.p2align	4, 0x90
	.type	intrapred_luma.38,@function
intrapred_luma.38:                      # @intrapred_luma.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1617235580, -172(%rbp) # imm = 0x60650E7C
	movl	%edi, -112(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -224(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_1
.LBB47_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB47_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB47_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB47_10
.LBB47_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB47_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB47_9:                               # %lor.end
.LBB47_10:                              # %land.end
	xorb	$-1, %al
.LBB47_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB47_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB47_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB47_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB47_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB47_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_17
.LBB47_16:                              # %cond.false
                                        #   in Loop: Header=BB47_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_17
.LBB47_17:                              # %cond.end
                                        #   in Loop: Header=BB47_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB47_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_13
.LBB47_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB47_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_22
.LBB47_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB47_22
.LBB47_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB47_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_25
.LBB47_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB47_25
.LBB47_25:                              # %cond.end49
	movl	%eax, -116(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB47_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_28
.LBB47_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB47_28
.LBB47_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB47_30
.LBB47_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB47_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB47_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB47_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB47_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB47_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB47_36
.LBB47_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB47_36:                              # %if.end114
	cmpl	$0, -116(%rbp)
	je	.LBB47_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB47_39
.LBB47_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB47_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB47_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_42
.LBB47_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB47_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB47_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB47_45
.LBB47_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB47_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB47_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB47_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB47_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_46
.LBB47_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB47_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB47_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB47_61
.LBB47_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB47_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB47_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB47_60
.LBB47_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB47_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB47_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB47_59
.LBB47_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB47_59:                              # %if.end284
	jmp	.LBB47_60
.LBB47_60:                              # %if.end285
	jmp	.LBB47_61
.LBB47_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB47_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB47_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB47_62 Depth=1
	movl	$0, -4(%rbp)
.LBB47_64:                              # %for.cond291
                                        #   Parent Loop BB47_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB47_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB47_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_64
.LBB47_67:                              # %for.end304
                                        #   in Loop: Header=BB47_62 Depth=1
	jmp	.LBB47_68
.LBB47_68:                              # %for.inc305
                                        #   in Loop: Header=BB47_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB47_62
.LBB47_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB47_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB47_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB47_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_70
.LBB47_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB47_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB47_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB47_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB47_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB47_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB47_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB47_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB47_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB47_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB47_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB47_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB47_85:                              # %if.end1174
	cmpl	$1617235580, -172(%rbp) # imm = 0x60650E7C
	jne	.LBB47_87
.LBB47_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_86
.Lfunc_end47:
	.size	intrapred_luma.38, .Lfunc_end47-intrapred_luma.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.39
.LCPI48_0:
	.quad	4616189618054758400     # double 4
.LCPI48_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI48_2:
	.quad	4611686018427387904     # double 2
.LCPI48_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.39
	.p2align	4, 0x90
	.type	dct_chroma_sp.39,@function
dct_chroma_sp.39:                       # @dct_chroma_sp.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI48_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI48_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$2094296848, -268(%rbp) # imm = 0x7CD46F10
	movl	%edi, -124(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI48_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI48_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB48_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB48_6
.LBB48_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB48_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB48_5
.LBB48_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB48_5:                               # %cond.end
.LBB48_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB48_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB48_12
.LBB48_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB48_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB48_11
.LBB48_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB48_11:                              # %cond.end41
.LBB48_12:                              # %cond.end43
	movl	%eax, -220(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB48_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB48_15
.LBB48_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB48_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB48_18
.LBB48_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -224(%rbp)
	cmpl	$0, -220(%rbp)
	jge	.LBB48_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB48_21
.LBB48_20:                              # %cond.false72
	movslq	-220(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -220(%rbp)
	jge	.LBB48_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB48_24
.LBB48_23:                              # %cond.false84
	movslq	-220(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -212(%rbp)
	movl	$0, -12(%rbp)
.LBB48_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB48_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	$0, -16(%rbp)
.LBB48_27:                              # %for.cond97
                                        #   Parent Loop BB48_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB48_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB48_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_27
.LBB48_30:                              # %for.end
                                        #   in Loop: Header=BB48_25 Depth=1
	jmp	.LBB48_31
.LBB48_31:                              # %for.inc121
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_25
.LBB48_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB48_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_35 Depth 2
                                        #       Child Loop BB48_37 Depth 3
                                        #         Child Loop BB48_39 Depth 4
                                        #       Child Loop BB48_45 Depth 3
                                        #         Child Loop BB48_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB48_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB48_33 Depth=1
	movl	$0, -24(%rbp)
.LBB48_35:                              # %for.cond128
                                        #   Parent Loop BB48_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_37 Depth 3
                                        #         Child Loop BB48_39 Depth 4
                                        #       Child Loop BB48_45 Depth 3
                                        #         Child Loop BB48_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB48_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB48_35 Depth=2
	movl	$0, -12(%rbp)
.LBB48_37:                              # %for.cond132
                                        #   Parent Loop BB48_33 Depth=1
                                        #     Parent Loop BB48_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB48_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB48_39:                              # %for.cond137
                                        #   Parent Loop BB48_33 Depth=1
                                        #     Parent Loop BB48_35 Depth=2
                                        #       Parent Loop BB48_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB48_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB48_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB48_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_39
.LBB48_42:                              # %for.end174
                                        #   in Loop: Header=BB48_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB48_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_37
.LBB48_44:                              # %for.end214
                                        #   in Loop: Header=BB48_35 Depth=2
	movl	$0, -16(%rbp)
.LBB48_45:                              # %for.cond215
                                        #   Parent Loop BB48_33 Depth=1
                                        #     Parent Loop BB48_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB48_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB48_47:                              # %for.cond220
                                        #   Parent Loop BB48_33 Depth=1
                                        #     Parent Loop BB48_35 Depth=2
                                        #       Parent Loop BB48_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB48_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB48_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB48_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_47
.LBB48_50:                              # %for.end257
                                        #   in Loop: Header=BB48_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB48_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_45
.LBB48_52:                              # %for.end298
                                        #   in Loop: Header=BB48_35 Depth=2
	jmp	.LBB48_53
.LBB48_53:                              # %for.inc299
                                        #   in Loop: Header=BB48_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_35
.LBB48_54:                              # %for.end301
                                        #   in Loop: Header=BB48_33 Depth=1
	jmp	.LBB48_55
.LBB48_55:                              # %for.inc302
                                        #   in Loop: Header=BB48_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_33
.LBB48_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB48_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_59 Depth 2
                                        #       Child Loop BB48_61 Depth 3
                                        #         Child Loop BB48_63 Depth 4
                                        #       Child Loop BB48_69 Depth 3
                                        #         Child Loop BB48_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB48_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB48_57 Depth=1
	movl	$0, -24(%rbp)
.LBB48_59:                              # %for.cond309
                                        #   Parent Loop BB48_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_61 Depth 3
                                        #         Child Loop BB48_63 Depth 4
                                        #       Child Loop BB48_69 Depth 3
                                        #         Child Loop BB48_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB48_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB48_59 Depth=2
	movl	$0, -12(%rbp)
.LBB48_61:                              # %for.cond313
                                        #   Parent Loop BB48_57 Depth=1
                                        #     Parent Loop BB48_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB48_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB48_63:                              # %for.cond318
                                        #   Parent Loop BB48_57 Depth=1
                                        #     Parent Loop BB48_59 Depth=2
                                        #       Parent Loop BB48_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB48_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB48_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB48_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_63
.LBB48_66:                              # %for.end351
                                        #   in Loop: Header=BB48_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB48_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_61
.LBB48_68:                              # %for.end387
                                        #   in Loop: Header=BB48_59 Depth=2
	movl	$0, -16(%rbp)
.LBB48_69:                              # %for.cond388
                                        #   Parent Loop BB48_57 Depth=1
                                        #     Parent Loop BB48_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB48_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB48_71:                              # %for.cond393
                                        #   Parent Loop BB48_57 Depth=1
                                        #     Parent Loop BB48_59 Depth=2
                                        #       Parent Loop BB48_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB48_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB48_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB48_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_71
.LBB48_74:                              # %for.end426
                                        #   in Loop: Header=BB48_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB48_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_69
.LBB48_76:                              # %for.end463
                                        #   in Loop: Header=BB48_59 Depth=2
	jmp	.LBB48_77
.LBB48_77:                              # %for.inc464
                                        #   in Loop: Header=BB48_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_59
.LBB48_78:                              # %for.end466
                                        #   in Loop: Header=BB48_57 Depth=1
	jmp	.LBB48_79
.LBB48_79:                              # %for.inc467
                                        #   in Loop: Header=BB48_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_57
.LBB48_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -32(%rbp)
.LBB48_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB48_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB48_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB48_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB48_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB48_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB48_90
	jp	.LBB48_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB48_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB48_89
.LBB48_88:                              # %cond.false691
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-44(%rbp), %eax
.LBB48_89:                              # %cond.end692
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB48_94
.LBB48_90:                              # %if.else
                                        #   in Loop: Header=BB48_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB48_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_93
.LBB48_92:                              # %if.else697
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB48_93:                              # %if.end
                                        #   in Loop: Header=BB48_81 Depth=1
	jmp	.LBB48_94
.LBB48_94:                              # %if.end698
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB48_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB48_97
.LBB48_96:                              # %cond.false702
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-104(%rbp), %eax
.LBB48_97:                              # %cond.end703
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB48_108
.LBB48_98:                              # %if.else705
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB48_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB48_107
.LBB48_100:                             # %if.else709
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB48_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB48_103
.LBB48_102:                             # %cond.false713
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-44(%rbp), %eax
.LBB48_103:                             # %cond.end714
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB48_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB48_106
.LBB48_105:                             # %cond.false719
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-104(%rbp), %eax
.LBB48_106:                             # %cond.end720
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB48_107:                             # %if.end722
                                        #   in Loop: Header=BB48_81 Depth=1
	jmp	.LBB48_108
.LBB48_108:                             # %if.end723
                                        #   in Loop: Header=BB48_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB48_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB48_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB48_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB48_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB48_112:                             # %if.end734
                                        #   in Loop: Header=BB48_81 Depth=1
	jmp	.LBB48_113
.LBB48_113:                             # %if.end735
                                        #   in Loop: Header=BB48_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB48_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB48_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	$1, %eax
	jmp	.LBB48_117
.LBB48_116:                             # %cond.false745
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-208(%rbp), %eax
.LBB48_117:                             # %cond.end746
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB48_118:                             # %if.end763
                                        #   in Loop: Header=BB48_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB48_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB48_81
.LBB48_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -216(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB48_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_123 Depth 2
                                        #       Child Loop BB48_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB48_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB48_121 Depth=1
	movl	$0, -24(%rbp)
.LBB48_123:                             # %for.cond839
                                        #   Parent Loop BB48_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB48_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB48_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$1, -32(%rbp)
.LBB48_125:                             # %for.cond860
                                        #   Parent Loop BB48_121 Depth=1
                                        #     Parent Loop BB48_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB48_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB48_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB48_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB48_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB48_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB48_130
.LBB48_129:                             # %if.then867
                                        #   in Loop: Header=BB48_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_131
.LBB48_130:                             # %if.else876
                                        #   in Loop: Header=BB48_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB48_131:                             # %if.end885
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB48_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB48_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB48_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB48_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB48_139
	jp	.LBB48_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB48_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB48_138
.LBB48_137:                             # %cond.false1047
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-44(%rbp), %eax
.LBB48_138:                             # %cond.end1048
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB48_143
.LBB48_139:                             # %if.else1050
                                        #   in Loop: Header=BB48_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB48_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_142
.LBB48_141:                             # %if.else1054
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB48_142:                             # %if.end1055
                                        #   in Loop: Header=BB48_125 Depth=3
	jmp	.LBB48_143
.LBB48_143:                             # %if.end1056
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB48_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB48_146
.LBB48_145:                             # %cond.false1060
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-104(%rbp), %eax
.LBB48_146:                             # %cond.end1061
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB48_157
.LBB48_147:                             # %if.else1063
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB48_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB48_156
.LBB48_149:                             # %if.else1067
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB48_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB48_152
.LBB48_151:                             # %cond.false1071
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-44(%rbp), %eax
.LBB48_152:                             # %cond.end1072
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB48_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB48_155
.LBB48_154:                             # %cond.false1077
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-104(%rbp), %eax
.LBB48_155:                             # %cond.end1078
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB48_156:                             # %if.end1080
                                        #   in Loop: Header=BB48_125 Depth=3
	jmp	.LBB48_157
.LBB48_157:                             # %if.end1081
                                        #   in Loop: Header=BB48_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB48_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB48_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-216(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -216(%rbp)
	jmp	.LBB48_161
.LBB48_160:                             # %if.else1099
                                        #   in Loop: Header=BB48_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-216(%rbp), %eax
	movl	%eax, -216(%rbp)
.LBB48_161:                             # %if.end1106
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB48_162:                             # %if.end1128
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB48_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB48_125
.LBB48_164:                             # %for.end1164
                                        #   in Loop: Header=BB48_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB48_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_123
.LBB48_166:                             # %for.end1169
                                        #   in Loop: Header=BB48_121 Depth=1
	jmp	.LBB48_167
.LBB48_167:                             # %for.inc1170
                                        #   in Loop: Header=BB48_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_121
.LBB48_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB48_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB48_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB48_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_173 Depth 2
                                        #       Child Loop BB48_175 Depth 3
                                        #         Child Loop BB48_177 Depth 4
                                        #         Child Loop BB48_181 Depth 4
                                        #       Child Loop BB48_187 Depth 3
                                        #         Child Loop BB48_189 Depth 4
                                        #         Child Loop BB48_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB48_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB48_171 Depth=1
	movl	$0, -24(%rbp)
.LBB48_173:                             # %for.cond1181
                                        #   Parent Loop BB48_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_175 Depth 3
                                        #         Child Loop BB48_177 Depth 4
                                        #         Child Loop BB48_181 Depth 4
                                        #       Child Loop BB48_187 Depth 3
                                        #         Child Loop BB48_189 Depth 4
                                        #         Child Loop BB48_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB48_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB48_173 Depth=2
	movl	$0, -12(%rbp)
.LBB48_175:                             # %for.cond1185
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_177 Depth 4
                                        #         Child Loop BB48_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB48_175 Depth=3
	movl	$0, -16(%rbp)
.LBB48_177:                             # %for.cond1189
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        #       Parent Loop BB48_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB48_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB48_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_177
.LBB48_180:                             # %for.end1204
                                        #   in Loop: Header=BB48_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB48_181:                             # %for.cond1223
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        #       Parent Loop BB48_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB48_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB48_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB48_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_181
.LBB48_184:                             # %for.end1254
                                        #   in Loop: Header=BB48_175 Depth=3
	jmp	.LBB48_185
.LBB48_185:                             # %for.inc1255
                                        #   in Loop: Header=BB48_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_175
.LBB48_186:                             # %for.end1257
                                        #   in Loop: Header=BB48_173 Depth=2
	movl	$0, -16(%rbp)
.LBB48_187:                             # %for.cond1258
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_189 Depth 4
                                        #         Child Loop BB48_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB48_187 Depth=3
	movl	$0, -12(%rbp)
.LBB48_189:                             # %for.cond1262
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        #       Parent Loop BB48_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB48_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB48_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_189
.LBB48_192:                             # %for.end1277
                                        #   in Loop: Header=BB48_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB48_193:                             # %for.cond1296
                                        #   Parent Loop BB48_171 Depth=1
                                        #     Parent Loop BB48_173 Depth=2
                                        #       Parent Loop BB48_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB48_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB48_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB48_197
.LBB48_196:                             # %cond.false1311
                                        #   in Loop: Header=BB48_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB48_197:                             # %cond.end1319
                                        #   in Loop: Header=BB48_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB48_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB48_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB48_203
.LBB48_199:                             # %cond.false1325
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB48_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB48_202
.LBB48_201:                             # %cond.false1336
                                        #   in Loop: Header=BB48_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB48_202:                             # %cond.end1344
                                        #   in Loop: Header=BB48_193 Depth=4
.LBB48_203:                             # %cond.end1346
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB48_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB48_206
.LBB48_205:                             # %cond.false1366
                                        #   in Loop: Header=BB48_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB48_206:                             # %cond.end1374
                                        #   in Loop: Header=BB48_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB48_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB48_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB48_212
.LBB48_208:                             # %cond.false1380
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB48_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB48_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB48_211
.LBB48_210:                             # %cond.false1391
                                        #   in Loop: Header=BB48_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB48_211:                             # %cond.end1399
                                        #   in Loop: Header=BB48_193 Depth=4
.LBB48_212:                             # %cond.end1401
                                        #   in Loop: Header=BB48_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB48_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_193
.LBB48_214:                             # %for.end1412
                                        #   in Loop: Header=BB48_187 Depth=3
	jmp	.LBB48_215
.LBB48_215:                             # %for.inc1413
                                        #   in Loop: Header=BB48_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_187
.LBB48_216:                             # %for.end1415
                                        #   in Loop: Header=BB48_173 Depth=2
	jmp	.LBB48_217
.LBB48_217:                             # %for.inc1416
                                        #   in Loop: Header=BB48_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_173
.LBB48_218:                             # %for.end1418
                                        #   in Loop: Header=BB48_171 Depth=1
	jmp	.LBB48_219
.LBB48_219:                             # %for.inc1419
                                        #   in Loop: Header=BB48_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_171
.LBB48_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB48_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB48_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB48_221 Depth=1
	movl	$0, -16(%rbp)
.LBB48_223:                             # %for.cond1426
                                        #   Parent Loop BB48_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB48_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB48_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB48_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_223
.LBB48_226:                             # %for.end1446
                                        #   in Loop: Header=BB48_221 Depth=1
	jmp	.LBB48_227
.LBB48_227:                             # %for.inc1447
                                        #   in Loop: Header=BB48_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_221
.LBB48_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$2094296848, -268(%rbp) # imm = 0x7CD46F10
	jne	.LBB48_230
.LBB48_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_229
.Lfunc_end48:
	.size	dct_chroma_sp.39, .Lfunc_end48-dct_chroma_sp.39
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.40         # -- Begin function copyblock_sp.40
	.p2align	4, 0x90
	.type	copyblock_sp.40,@function
copyblock_sp.40:                        # @copyblock_sp.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$667082466, -92(%rbp)   # imm = 0x27C2DEE2
	movl	%edi, -76(%rbp)
	movl	%esi, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_3:                               # %for.cond4
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_3
.LBB49_6:                               # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_7
.LBB49_7:                               # %for.inc17
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB49_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	$0, -8(%rbp)
.LBB49_11:                              # %for.cond24
                                        #   Parent Loop BB49_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB49_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB49_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB49_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_11
.LBB49_14:                              # %for.end53
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_9
.LBB49_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB49_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	$0, -4(%rbp)
.LBB49_19:                              # %for.cond86
                                        #   Parent Loop BB49_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB49_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_19
.LBB49_22:                              # %for.end115
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_17
.LBB49_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB49_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	$0, -8(%rbp)
.LBB49_27:                              # %for.cond149
                                        #   Parent Loop BB49_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_27
.LBB49_30:                              # %for.end184
                                        #   in Loop: Header=BB49_25 Depth=1
	jmp	.LBB49_31
.LBB49_31:                              # %for.inc185
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_25
.LBB49_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB49_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_35 Depth 2
                                        #     Child Loop BB49_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	$0, -8(%rbp)
.LBB49_35:                              # %for.cond192
                                        #   Parent Loop BB49_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB49_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB49_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_35
.LBB49_38:                              # %for.end205
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB49_39:                              # %for.cond224
                                        #   Parent Loop BB49_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB49_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB49_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB49_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_39
.LBB49_42:                              # %for.end251
                                        #   in Loop: Header=BB49_33 Depth=1
	jmp	.LBB49_43
.LBB49_43:                              # %for.inc252
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_33
.LBB49_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB49_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_47 Depth 2
                                        #     Child Loop BB49_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB49_45 Depth=1
	movl	$0, -4(%rbp)
.LBB49_47:                              # %for.cond259
                                        #   Parent Loop BB49_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB49_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB49_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_47
.LBB49_50:                              # %for.end272
                                        #   in Loop: Header=BB49_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB49_51:                              # %for.cond291
                                        #   Parent Loop BB49_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB49_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB49_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB49_55
.LBB49_54:                              # %cond.false
                                        #   in Loop: Header=BB49_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB49_55:                              # %cond.end
                                        #   in Loop: Header=BB49_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB49_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB49_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_61
.LBB49_57:                              # %cond.false316
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_60
.LBB49_59:                              # %cond.false327
                                        #   in Loop: Header=BB49_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB49_60:                              # %cond.end335
                                        #   in Loop: Header=BB49_51 Depth=2
.LBB49_61:                              # %cond.end337
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB49_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB49_64
.LBB49_63:                              # %cond.false355
                                        #   in Loop: Header=BB49_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB49_64:                              # %cond.end363
                                        #   in Loop: Header=BB49_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB49_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB49_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_70
.LBB49_66:                              # %cond.false369
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB49_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_69
.LBB49_68:                              # %cond.false380
                                        #   in Loop: Header=BB49_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB49_69:                              # %cond.end388
                                        #   in Loop: Header=BB49_51 Depth=2
.LBB49_70:                              # %cond.end390
                                        #   in Loop: Header=BB49_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB49_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_51
.LBB49_72:                              # %for.end399
                                        #   in Loop: Header=BB49_45 Depth=1
	jmp	.LBB49_73
.LBB49_73:                              # %for.inc400
                                        #   in Loop: Header=BB49_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_45
.LBB49_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB49_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB49_75 Depth=1
	movl	$0, -8(%rbp)
.LBB49_77:                              # %for.cond407
                                        #   Parent Loop BB49_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB49_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB49_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_77
.LBB49_80:                              # %for.end427
                                        #   in Loop: Header=BB49_75 Depth=1
	jmp	.LBB49_81
.LBB49_81:                              # %for.inc428
                                        #   in Loop: Header=BB49_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_75
.LBB49_82:                              # %for.end430
	cmpl	$667082466, -92(%rbp)   # imm = 0x27C2DEE2
	jne	.LBB49_84
.LBB49_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_83
.Lfunc_end49:
	.size	copyblock_sp.40, .Lfunc_end49-copyblock_sp.40
	.cfi_endproc
                                        # -- End function
	.type	QP_SCALE_CR,@object     # @QP_SCALE_CR
	.section	.rodata,"a",@progbits
	.globl	QP_SCALE_CR
	.p2align	4
QP_SCALE_CR:
	.ascii	"\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\035\036\037  !\"\"##$$%%%&&&''''"
	.size	QP_SCALE_CR, 52

	.type	SNGL_SCAN,@object       # @SNGL_SCAN
	.globl	SNGL_SCAN
	.p2align	4
SNGL_SCAN:
	.zero	2
	.asciz	"\001"
	.ascii	"\000\001"
	.ascii	"\000\002"
	.zero	2,1
	.asciz	"\002"
	.asciz	"\003"
	.ascii	"\002\001"
	.ascii	"\001\002"
	.ascii	"\000\003"
	.ascii	"\001\003"
	.zero	2,2
	.ascii	"\003\001"
	.ascii	"\003\002"
	.ascii	"\002\003"
	.zero	2,3
	.size	SNGL_SCAN, 32

	.type	FIELD_SCAN,@object      # @FIELD_SCAN
	.globl	FIELD_SCAN
	.p2align	4
FIELD_SCAN:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.asciz	"\002"
	.ascii	"\002\001"
	.zero	2,2
	.ascii	"\002\003"
	.asciz	"\003"
	.ascii	"\003\001"
	.ascii	"\003\002"
	.zero	2,3
	.size	FIELD_SCAN, 32

	.type	COEFF_COST,@object      # @COEFF_COST
	.globl	COEFF_COST
	.p2align	4
COEFF_COST:
	.byte	3                       # 0x3
	.byte	2                       # 0x2
	.byte	2                       # 0x2
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	10
	.zero	16,9
	.size	COEFF_COST, 32

	.type	COEFF_BIT_COST,@object  # @COEFF_BIT_COST
	.globl	COEFF_BIT_COST
	.p2align	4
COEFF_BIT_COST:
	.ascii	"\003\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r"
	.ascii	"\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\003\005\007\007\007\t\t\t\t\013\013\r\r\r\r\017"
	.ascii	"\005\t\t\013\013\r\r\r\r\017\017\017\017\017\017\017"
	.ascii	"\007\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.zero	16
	.zero	16
	.ascii	"\003\007\t\t\013\r\r\017\017\017\017\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.size	COEFF_BIT_COST, 768

	.type	SCAN_YUV422,@object     # @SCAN_YUV422
	.globl	SCAN_YUV422
	.p2align	4
SCAN_YUV422:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.size	SCAN_YUV422, 16

	.type	hor_offset,@object      # @hor_offset
	.globl	hor_offset
	.p2align	4
hor_offset:
	.zero	16
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	hor_offset, 64

	.type	ver_offset,@object      # @ver_offset
	.globl	ver_offset
	.p2align	4
ver_offset:
	.zero	16
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	ver_offset, 64

	.type	quant_coef,@object      # @quant_coef
	.globl	quant_coef
	.p2align	4
quant_coef:
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.size	quant_coef, 384

	.type	dequant_coef,@object    # @dequant_coef
	.globl	dequant_coef
	.p2align	4
dequant_coef:
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.size	dequant_coef, 384

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	.L__const.dct_chroma.cbpblk_pattern,@object # @__const.dct_chroma.cbpblk_pattern
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.L__const.dct_chroma.cbpblk_pattern:
	.quad	0                       # 0x0
	.quad	983040                  # 0xf0000
	.quad	16711680                # 0xff0000
	.quad	4294901760              # 0xffff0000
	.size	.L__const.dct_chroma.cbpblk_pattern, 32

	.type	cbp_blk_chroma,@object  # @cbp_blk_chroma
	.data
	.p2align	4
cbp_blk_chroma:
	.ascii	"\020\021\022\023"
	.ascii	"\024\025\026\027"
	.ascii	"\030\031\032\033"
	.ascii	"\034\035\036\037"
	.ascii	" !\"#"
	.ascii	"$%&'"
	.ascii	"()*+"
	.ascii	",-./"
	.size	cbp_blk_chroma, 32

	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	A,@object               # @A
	.section	.rodata,"a",@progbits
	.p2align	4
A:
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.size	A, 64

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
