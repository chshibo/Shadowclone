	.text
	.file	"context_ini.c"
	.globl	create_context_memory   # -- Begin function create_context_memory
	.p2align	4, 0x90
	.type	create_context_memory,@function
create_context_memory:                  # @create_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_create_context_memory.27
	callq	create_context_memory.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_create_context_memory.29
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.29
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_create_context_memory.40
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_create_context_memory.42
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_create_context_memory.61
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_create_context_memory.63
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_create_context_memory.65
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.65
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_create_context_memory.68
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_create_context_memory.74
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_create_context_memory.75
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_create_context_memory.78
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.78
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_create_context_memory.79
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_create_context_memory.81
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_create_context_memory.82
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_create_context_memory.83
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_create_context_memory.84
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	create_context_memory, .Lfunc_end0-create_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory     # -- Begin function free_context_memory
	.p2align	4, 0x90
	.type	free_context_memory,@function
free_context_memory:                    # @free_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_free_context_memory.10
	callq	free_context_memory.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_free_context_memory.12
	.cfi_def_cfa %rbp, 16
	callq	free_context_memory.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	free_context_memory, .Lfunc_end1-free_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber       # -- Begin function SetCtxModelNumber
	.p2align	4, 0x90
	.type	SetCtxModelNumber,@function
SetCtxModelNumber:                      # @SetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_7
# %bb.1:                                # %func_SetCtxModelNumber.4
	callq	SetCtxModelNumber.4
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_SetCtxModelNumber.7
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_SetCtxModelNumber.11
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_SetCtxModelNumber.21
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_SetCtxModelNumber.34
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_SetCtxModelNumber.38
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
	jmp	.LBB2_6
.Lfunc_end2:
	.size	SetCtxModelNumber, .Lfunc_end2-SetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts           # -- Begin function init_contexts
	.p2align	4, 0x90
	.type	init_contexts,@function
init_contexts:                          # @init_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_init_contexts.5
	callq	init_contexts.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_init_contexts.19
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_init_contexts.32
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_init_contexts.37
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.37
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_init_contexts.39
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.39
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_init_contexts.41
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_init_contexts.50
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_init_contexts.52
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_init_contexts.58
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_init_contexts.59
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_init_contexts.60
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_init_contexts.64
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_init_contexts.66
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.66
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_init_contexts.67
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.67
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_init_contexts.77
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.77
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_init_contexts.80
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	init_contexts, .Lfunc_end3-init_contexts
	.cfi_endproc
                                        # -- End function
	.globl	XRate                   # -- Begin function XRate
	.p2align	4, 0x90
	.type	XRate,@function
XRate:                                  # @XRate
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_XRate.2
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_XRate.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_XRate.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_XRate.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_XRate.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_XRate.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_XRate.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_XRate.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_XRate.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_XRate.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_XRate.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.48
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_XRate.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.51
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_XRate.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_XRate.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_XRate.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.57
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_XRate.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	XRate, .Lfunc_end4-XRate
	.cfi_endproc
                                        # -- End function
	.globl	GetCtxModelNumber       # -- Begin function GetCtxModelNumber
	.p2align	4, 0x90
	.type	GetCtxModelNumber,@function
GetCtxModelNumber:                      # @GetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_GetCtxModelNumber.3
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_GetCtxModelNumber.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_GetCtxModelNumber.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_GetCtxModelNumber.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_GetCtxModelNumber.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_GetCtxModelNumber.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_GetCtxModelNumber.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_GetCtxModelNumber.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_GetCtxModelNumber.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_GetCtxModelNumber.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_GetCtxModelNumber.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_GetCtxModelNumber.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_GetCtxModelNumber.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_GetCtxModelNumber.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_GetCtxModelNumber.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_GetCtxModelNumber.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	GetCtxModelNumber, .Lfunc_end5-GetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts          # -- Begin function store_contexts
	.p2align	4, 0x90
	.type	store_contexts,@function
store_contexts:                         # @store_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_7
# %bb.1:                                # %func_store_contexts.1
	callq	store_contexts.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_store_contexts.6
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_store_contexts.8
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.8
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_store_contexts.9
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_store_contexts.20
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_store_contexts.23
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
	jmp	.LBB6_6
.Lfunc_end6:
	.size	store_contexts, .Lfunc_end6-store_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts # -- Begin function update_field_frame_contexts
	.p2align	4, 0x90
	.type	update_field_frame_contexts,@function
update_field_frame_contexts:            # @update_field_frame_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_7
# %bb.1:                                # %func_update_field_frame_contexts.15
	movl	%ebx, %edi
	callq	update_field_frame_contexts.15
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_update_field_frame_contexts.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_update_field_frame_contexts.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_update_field_frame_contexts.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_update_field_frame_contexts.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_update_field_frame_contexts.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
	jmp	.LBB7_6
.Lfunc_end7:
	.size	update_field_frame_contexts, .Lfunc_end7-update_field_frame_contexts
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.1        # -- Begin function store_contexts.1
	.p2align	4, 0x90
	.type	store_contexts.1,@function
store_contexts.1:                       # @store_contexts.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1895840242, -16(%rbp)  # imm = 0x710039F2
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB8_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB8_3
.LBB8_2:                                # %if.else
	jmp	.LBB8_3
.LBB8_3:                                # %if.end
	cmpl	$1895840242, -16(%rbp)  # imm = 0x710039F2
	jne	.LBB8_5
.LBB8_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_4
.Lfunc_end8:
	.size	store_contexts.1, .Lfunc_end8-store_contexts.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.2
.LCPI9_0:
	.quad	4607182418800017408     # double 1
.LCPI9_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI9_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI9_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.2
	.p2align	4, 0x90
	.type	XRate.2,@function
XRate.2:                                # @XRate.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2111315212, -36(%rbp)  # imm = 0x7DD81D0C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB9_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB9_3
.LBB9_2:                                # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB9_3:                                # %cond.end
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	.LCPI9_1(%rip), %xmm1   # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI9_2(%rip), %xmm3   # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI9_3(%rip), %xmm3   # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB9_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	jmp	.LBB9_6
.LBB9_5:                                # %cond.false6
	vmovsd	.LCPI9_1(%rip), %xmm0   # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI9_2(%rip), %xmm2   # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI9_3(%rip), %xmm2   # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB9_6:                                # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB9_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB9_9
.LBB9_8:                                # %cond.false16
	movl	-4(%rbp), %eax
.LBB9_9:                                # %cond.end17
	cmpl	$127, %eax
	jge	.LBB9_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB9_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB9_13
.LBB9_12:                               # %cond.false25
	movl	-4(%rbp), %eax
.LBB9_13:                               # %cond.end26
	jmp	.LBB9_15
.LBB9_14:                               # %cond.false28
	movl	$127, %eax
	jmp	.LBB9_15
.LBB9_15:                               # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB9_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB9_18
.LBB9_17:                               # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB9_18:                               # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2111315212, -36(%rbp)  # imm = 0x7DD81D0C
	jne	.LBB9_20
.LBB9_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_20:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB9_19
.Lfunc_end9:
	.size	XRate.2, .Lfunc_end9-XRate.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.3
.LCPI10_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.3
	.p2align	4, 0x90
	.type	GetCtxModelNumber.3,@function
GetCtxModelNumber.3:                    # @GetCtxModelNumber.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1011929019, -48(%rbp)  # imm = 0x3C50CFBB
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_3 Depth 2
                                        #       Child Loop BB10_5 Depth 3
                                        #     Child Loop BB10_14 Depth 2
                                        #       Child Loop BB10_16 Depth 3
                                        #     Child Loop BB10_25 Depth 2
                                        #       Child Loop BB10_27 Depth 3
                                        #     Child Loop BB10_36 Depth 2
                                        #       Child Loop BB10_38 Depth 3
                                        #     Child Loop BB10_47 Depth 2
                                        #     Child Loop BB10_54 Depth 2
                                        #     Child Loop BB10_61 Depth 2
                                        #     Child Loop BB10_68 Depth 2
                                        #     Child Loop BB10_75 Depth 2
                                        #     Child Loop BB10_82 Depth 2
                                        #       Child Loop BB10_84 Depth 3
                                        #     Child Loop BB10_93 Depth 2
                                        #       Child Loop BB10_95 Depth 3
                                        #     Child Loop BB10_104 Depth 2
                                        #       Child Loop BB10_106 Depth 3
                                        #     Child Loop BB10_115 Depth 2
                                        #       Child Loop BB10_117 Depth 3
                                        #     Child Loop BB10_126 Depth 2
                                        #       Child Loop BB10_128 Depth 3
                                        #     Child Loop BB10_137 Depth 2
                                        #       Child Loop BB10_139 Depth 3
                                        #     Child Loop BB10_148 Depth 2
                                        #       Child Loop BB10_150 Depth 3
                                        #     Child Loop BB10_159 Depth 2
                                        #       Child Loop BB10_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB10_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB10_3:                               # %for.cond2
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB10_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB10_3 Depth=2
	movl	$0, -4(%rbp)
.LBB10_5:                               # %for.cond5
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB10_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB10_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB10_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_9
.LBB10_8:                               # %if.else
                                        #   in Loop: Header=BB10_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_9:                               # %if.end
                                        #   in Loop: Header=BB10_5 Depth=3
	jmp	.LBB10_10
.LBB10_10:                              # %for.inc
                                        #   in Loop: Header=BB10_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_5
.LBB10_11:                              # %for.end
                                        #   in Loop: Header=BB10_3 Depth=2
	jmp	.LBB10_12
.LBB10_12:                              # %for.inc33
                                        #   in Loop: Header=BB10_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_3
.LBB10_13:                              # %for.end35
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_14:                              # %for.cond36
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB10_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB10_14 Depth=2
	movl	$0, -4(%rbp)
.LBB10_16:                              # %for.cond39
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB10_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB10_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB10_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_20
.LBB10_19:                              # %if.else58
                                        #   in Loop: Header=BB10_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_20:                              # %if.end73
                                        #   in Loop: Header=BB10_16 Depth=3
	jmp	.LBB10_21
.LBB10_21:                              # %for.inc74
                                        #   in Loop: Header=BB10_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_16
.LBB10_22:                              # %for.end76
                                        #   in Loop: Header=BB10_14 Depth=2
	jmp	.LBB10_23
.LBB10_23:                              # %for.inc77
                                        #   in Loop: Header=BB10_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_14
.LBB10_24:                              # %for.end79
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_25:                              # %for.cond80
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB10_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB10_25 Depth=2
	movl	$0, -4(%rbp)
.LBB10_27:                              # %for.cond83
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB10_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB10_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB10_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_31
.LBB10_30:                              # %if.else102
                                        #   in Loop: Header=BB10_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_31:                              # %if.end117
                                        #   in Loop: Header=BB10_27 Depth=3
	jmp	.LBB10_32
.LBB10_32:                              # %for.inc118
                                        #   in Loop: Header=BB10_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_27
.LBB10_33:                              # %for.end120
                                        #   in Loop: Header=BB10_25 Depth=2
	jmp	.LBB10_34
.LBB10_34:                              # %for.inc121
                                        #   in Loop: Header=BB10_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_25
.LBB10_35:                              # %for.end123
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_36:                              # %for.cond124
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB10_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB10_36 Depth=2
	movl	$0, -4(%rbp)
.LBB10_38:                              # %for.cond127
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB10_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB10_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB10_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_42
.LBB10_41:                              # %if.else146
                                        #   in Loop: Header=BB10_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_42:                              # %if.end161
                                        #   in Loop: Header=BB10_38 Depth=3
	jmp	.LBB10_43
.LBB10_43:                              # %for.inc162
                                        #   in Loop: Header=BB10_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_38
.LBB10_44:                              # %for.end164
                                        #   in Loop: Header=BB10_36 Depth=2
	jmp	.LBB10_45
.LBB10_45:                              # %for.inc165
                                        #   in Loop: Header=BB10_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_36
.LBB10_46:                              # %for.end167
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_47:                              # %for.cond168
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB10_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB10_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_51
.LBB10_50:                              # %if.else184
                                        #   in Loop: Header=BB10_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_51:                              # %if.end196
                                        #   in Loop: Header=BB10_47 Depth=2
	jmp	.LBB10_52
.LBB10_52:                              # %for.inc197
                                        #   in Loop: Header=BB10_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_47
.LBB10_53:                              # %for.end199
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_54:                              # %for.cond200
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB10_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB10_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_58
.LBB10_57:                              # %if.else216
                                        #   in Loop: Header=BB10_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_58:                              # %if.end228
                                        #   in Loop: Header=BB10_54 Depth=2
	jmp	.LBB10_59
.LBB10_59:                              # %for.inc229
                                        #   in Loop: Header=BB10_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_54
.LBB10_60:                              # %for.end231
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_61:                              # %for.cond232
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB10_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB10_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB10_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_65
.LBB10_64:                              # %if.else248
                                        #   in Loop: Header=BB10_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_65:                              # %if.end260
                                        #   in Loop: Header=BB10_61 Depth=2
	jmp	.LBB10_66
.LBB10_66:                              # %for.inc261
                                        #   in Loop: Header=BB10_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_61
.LBB10_67:                              # %for.end263
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_68:                              # %for.cond264
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB10_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB10_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB10_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_72
.LBB10_71:                              # %if.else280
                                        #   in Loop: Header=BB10_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_72:                              # %if.end292
                                        #   in Loop: Header=BB10_68 Depth=2
	jmp	.LBB10_73
.LBB10_73:                              # %for.inc293
                                        #   in Loop: Header=BB10_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_68
.LBB10_74:                              # %for.end295
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_75:                              # %for.cond296
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB10_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB10_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_79
.LBB10_78:                              # %if.else312
                                        #   in Loop: Header=BB10_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_79:                              # %if.end324
                                        #   in Loop: Header=BB10_75 Depth=2
	jmp	.LBB10_80
.LBB10_80:                              # %for.inc325
                                        #   in Loop: Header=BB10_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_75
.LBB10_81:                              # %for.end327
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_82:                              # %for.cond328
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB10_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	$0, -4(%rbp)
.LBB10_84:                              # %for.cond331
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB10_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB10_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB10_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_88
.LBB10_87:                              # %if.else350
                                        #   in Loop: Header=BB10_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_88:                              # %if.end365
                                        #   in Loop: Header=BB10_84 Depth=3
	jmp	.LBB10_89
.LBB10_89:                              # %for.inc366
                                        #   in Loop: Header=BB10_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_84
.LBB10_90:                              # %for.end368
                                        #   in Loop: Header=BB10_82 Depth=2
	jmp	.LBB10_91
.LBB10_91:                              # %for.inc369
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_82
.LBB10_92:                              # %for.end371
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_93:                              # %for.cond372
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB10_93 Depth=2
	movl	$0, -4(%rbp)
.LBB10_95:                              # %for.cond375
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB10_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB10_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB10_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_99
.LBB10_98:                              # %if.else394
                                        #   in Loop: Header=BB10_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_99:                              # %if.end409
                                        #   in Loop: Header=BB10_95 Depth=3
	jmp	.LBB10_100
.LBB10_100:                             # %for.inc410
                                        #   in Loop: Header=BB10_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_95
.LBB10_101:                             # %for.end412
                                        #   in Loop: Header=BB10_93 Depth=2
	jmp	.LBB10_102
.LBB10_102:                             # %for.inc413
                                        #   in Loop: Header=BB10_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_93
.LBB10_103:                             # %for.end415
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_104:                             # %for.cond416
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB10_104 Depth=2
	movl	$0, -4(%rbp)
.LBB10_106:                             # %for.cond419
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB10_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB10_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB10_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_110
.LBB10_109:                             # %if.else438
                                        #   in Loop: Header=BB10_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_110:                             # %if.end453
                                        #   in Loop: Header=BB10_106 Depth=3
	jmp	.LBB10_111
.LBB10_111:                             # %for.inc454
                                        #   in Loop: Header=BB10_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_106
.LBB10_112:                             # %for.end456
                                        #   in Loop: Header=BB10_104 Depth=2
	jmp	.LBB10_113
.LBB10_113:                             # %for.inc457
                                        #   in Loop: Header=BB10_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_104
.LBB10_114:                             # %for.end459
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_115:                             # %for.cond460
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB10_115 Depth=2
	movl	$0, -4(%rbp)
.LBB10_117:                             # %for.cond463
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB10_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB10_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB10_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_121
.LBB10_120:                             # %if.else482
                                        #   in Loop: Header=BB10_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_121:                             # %if.end497
                                        #   in Loop: Header=BB10_117 Depth=3
	jmp	.LBB10_122
.LBB10_122:                             # %for.inc498
                                        #   in Loop: Header=BB10_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_117
.LBB10_123:                             # %for.end500
                                        #   in Loop: Header=BB10_115 Depth=2
	jmp	.LBB10_124
.LBB10_124:                             # %for.inc501
                                        #   in Loop: Header=BB10_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_115
.LBB10_125:                             # %for.end503
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_126:                             # %for.cond504
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB10_126 Depth=2
	movl	$0, -4(%rbp)
.LBB10_128:                             # %for.cond507
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB10_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB10_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB10_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_132
.LBB10_131:                             # %if.else526
                                        #   in Loop: Header=BB10_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_132:                             # %if.end541
                                        #   in Loop: Header=BB10_128 Depth=3
	jmp	.LBB10_133
.LBB10_133:                             # %for.inc542
                                        #   in Loop: Header=BB10_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_128
.LBB10_134:                             # %for.end544
                                        #   in Loop: Header=BB10_126 Depth=2
	jmp	.LBB10_135
.LBB10_135:                             # %for.inc545
                                        #   in Loop: Header=BB10_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_126
.LBB10_136:                             # %for.end547
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_137:                             # %for.cond548
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB10_137 Depth=2
	movl	$0, -4(%rbp)
.LBB10_139:                             # %for.cond551
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB10_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB10_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB10_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_143
.LBB10_142:                             # %if.else570
                                        #   in Loop: Header=BB10_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_143:                             # %if.end585
                                        #   in Loop: Header=BB10_139 Depth=3
	jmp	.LBB10_144
.LBB10_144:                             # %for.inc586
                                        #   in Loop: Header=BB10_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_139
.LBB10_145:                             # %for.end588
                                        #   in Loop: Header=BB10_137 Depth=2
	jmp	.LBB10_146
.LBB10_146:                             # %for.inc589
                                        #   in Loop: Header=BB10_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_137
.LBB10_147:                             # %for.end591
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_148:                             # %for.cond592
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB10_148 Depth=2
	movl	$0, -4(%rbp)
.LBB10_150:                             # %for.cond595
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB10_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB10_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB10_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_154
.LBB10_153:                             # %if.else614
                                        #   in Loop: Header=BB10_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_154:                             # %if.end629
                                        #   in Loop: Header=BB10_150 Depth=3
	jmp	.LBB10_155
.LBB10_155:                             # %for.inc630
                                        #   in Loop: Header=BB10_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_150
.LBB10_156:                             # %for.end632
                                        #   in Loop: Header=BB10_148 Depth=2
	jmp	.LBB10_157
.LBB10_157:                             # %for.inc633
                                        #   in Loop: Header=BB10_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_148
.LBB10_158:                             # %for.end635
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_159:                             # %for.cond636
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB10_159 Depth=2
	movl	$0, -4(%rbp)
.LBB10_161:                             # %for.cond639
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB10_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB10_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB10_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_165
.LBB10_164:                             # %if.else658
                                        #   in Loop: Header=BB10_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_165:                             # %if.end673
                                        #   in Loop: Header=BB10_161 Depth=3
	jmp	.LBB10_166
.LBB10_166:                             # %for.inc674
                                        #   in Loop: Header=BB10_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_161
.LBB10_167:                             # %for.end676
                                        #   in Loop: Header=BB10_159 Depth=2
	jmp	.LBB10_168
.LBB10_168:                             # %for.inc677
                                        #   in Loop: Header=BB10_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_159
.LBB10_169:                             # %for.end679
                                        #   in Loop: Header=BB10_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB10_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB10_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB10_171:                             # %if.end682
                                        #   in Loop: Header=BB10_1 Depth=1
	jmp	.LBB10_172
.LBB10_172:                             # %for.inc683
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_1
.LBB10_173:                             # %for.end685
	cmpl	$1011929019, -48(%rbp)  # imm = 0x3C50CFBB
	jne	.LBB10_175
.LBB10_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_174
.Lfunc_end10:
	.size	GetCtxModelNumber.3, .Lfunc_end10-GetCtxModelNumber.3
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.4     # -- Begin function SetCtxModelNumber.4
	.p2align	4, 0x90
	.type	SetCtxModelNumber.4,@function
SetCtxModelNumber.4:                    # @SetCtxModelNumber.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$602066825, -16(%rbp)   # imm = 0x23E2CF89
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB11_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB11_11
.LBB11_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB11_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB11_11
.LBB11_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB11_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB11_11
.LBB11_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB11_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB11_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB11_10
.LBB11_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB11_10:                              # %if.end38
	jmp	.LBB11_11
.LBB11_11:                              # %if.end39
	cmpl	$602066825, -16(%rbp)   # imm = 0x23E2CF89
	jne	.LBB11_13
.LBB11_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_12
.Lfunc_end11:
	.size	SetCtxModelNumber.4, .Lfunc_end11-SetCtxModelNumber.4
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.5         # -- Begin function init_contexts.5
	.p2align	4, 0x90
	.type	init_contexts.5,@function
init_contexts.5:                        # @init_contexts.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2139035532, -28(%rbp)  # imm = 0x7F7F178C
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB12_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_3:                               # %for.cond2
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB12_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_7
.LBB12_6:                               # %if.else
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_7:                               # %if.end
                                        #   in Loop: Header=BB12_3 Depth=2
	jmp	.LBB12_8
.LBB12_8:                               # %for.inc
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_3
.LBB12_9:                               # %for.end
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_10
.LBB12_10:                              # %for.inc28
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_1
.LBB12_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB12_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB12_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB12_12 Depth=1
	movl	$0, -4(%rbp)
.LBB12_14:                              # %for.cond34
                                        #   Parent Loop BB12_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB12_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB12_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB12_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_18
.LBB12_17:                              # %if.else52
                                        #   in Loop: Header=BB12_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_18:                              # %if.end66
                                        #   in Loop: Header=BB12_14 Depth=2
	jmp	.LBB12_19
.LBB12_19:                              # %for.inc67
                                        #   in Loop: Header=BB12_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_14
.LBB12_20:                              # %for.end69
                                        #   in Loop: Header=BB12_12 Depth=1
	jmp	.LBB12_21
.LBB12_21:                              # %for.inc70
                                        #   in Loop: Header=BB12_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_12
.LBB12_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB12_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB12_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	$0, -4(%rbp)
.LBB12_25:                              # %for.cond76
                                        #   Parent Loop BB12_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB12_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB12_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB12_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_29
.LBB12_28:                              # %if.else94
                                        #   in Loop: Header=BB12_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_29:                              # %if.end108
                                        #   in Loop: Header=BB12_25 Depth=2
	jmp	.LBB12_30
.LBB12_30:                              # %for.inc109
                                        #   in Loop: Header=BB12_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_25
.LBB12_31:                              # %for.end111
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_32
.LBB12_32:                              # %for.inc112
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_23
.LBB12_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB12_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB12_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB12_34 Depth=1
	movl	$0, -4(%rbp)
.LBB12_36:                              # %for.cond118
                                        #   Parent Loop BB12_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB12_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB12_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB12_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_40
.LBB12_39:                              # %if.else136
                                        #   in Loop: Header=BB12_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_40:                              # %if.end150
                                        #   in Loop: Header=BB12_36 Depth=2
	jmp	.LBB12_41
.LBB12_41:                              # %for.inc151
                                        #   in Loop: Header=BB12_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_36
.LBB12_42:                              # %for.end153
                                        #   in Loop: Header=BB12_34 Depth=1
	jmp	.LBB12_43
.LBB12_43:                              # %for.inc154
                                        #   in Loop: Header=BB12_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_34
.LBB12_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB12_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB12_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB12_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB12_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_49
.LBB12_48:                              # %if.else172
                                        #   in Loop: Header=BB12_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_49:                              # %if.end183
                                        #   in Loop: Header=BB12_45 Depth=1
	jmp	.LBB12_50
.LBB12_50:                              # %for.inc184
                                        #   in Loop: Header=BB12_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_45
.LBB12_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB12_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB12_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB12_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB12_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_56
.LBB12_55:                              # %if.else202
                                        #   in Loop: Header=BB12_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_56:                              # %if.end213
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_57
.LBB12_57:                              # %for.inc214
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_52
.LBB12_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB12_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB12_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB12_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB12_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_63
.LBB12_62:                              # %if.else232
                                        #   in Loop: Header=BB12_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_63:                              # %if.end243
                                        #   in Loop: Header=BB12_59 Depth=1
	jmp	.LBB12_64
.LBB12_64:                              # %for.inc244
                                        #   in Loop: Header=BB12_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_59
.LBB12_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB12_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB12_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB12_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB12_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_70
.LBB12_69:                              # %if.else262
                                        #   in Loop: Header=BB12_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_70:                              # %if.end273
                                        #   in Loop: Header=BB12_66 Depth=1
	jmp	.LBB12_71
.LBB12_71:                              # %for.inc274
                                        #   in Loop: Header=BB12_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_66
.LBB12_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB12_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB12_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB12_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB12_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_77
.LBB12_76:                              # %if.else292
                                        #   in Loop: Header=BB12_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_77:                              # %if.end303
                                        #   in Loop: Header=BB12_73 Depth=1
	jmp	.LBB12_78
.LBB12_78:                              # %for.inc304
                                        #   in Loop: Header=BB12_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_73
.LBB12_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB12_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB12_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB12_80 Depth=1
	movl	$0, -4(%rbp)
.LBB12_82:                              # %for.cond310
                                        #   Parent Loop BB12_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB12_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB12_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_86
.LBB12_85:                              # %if.else328
                                        #   in Loop: Header=BB12_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_86:                              # %if.end342
                                        #   in Loop: Header=BB12_82 Depth=2
	jmp	.LBB12_87
.LBB12_87:                              # %for.inc343
                                        #   in Loop: Header=BB12_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_82
.LBB12_88:                              # %for.end345
                                        #   in Loop: Header=BB12_80 Depth=1
	jmp	.LBB12_89
.LBB12_89:                              # %for.inc346
                                        #   in Loop: Header=BB12_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_80
.LBB12_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB12_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB12_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB12_91 Depth=1
	movl	$0, -4(%rbp)
.LBB12_93:                              # %for.cond352
                                        #   Parent Loop BB12_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB12_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB12_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_97
.LBB12_96:                              # %if.else370
                                        #   in Loop: Header=BB12_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_97:                              # %if.end384
                                        #   in Loop: Header=BB12_93 Depth=2
	jmp	.LBB12_98
.LBB12_98:                              # %for.inc385
                                        #   in Loop: Header=BB12_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_93
.LBB12_99:                              # %for.end387
                                        #   in Loop: Header=BB12_91 Depth=1
	jmp	.LBB12_100
.LBB12_100:                             # %for.inc388
                                        #   in Loop: Header=BB12_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_91
.LBB12_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB12_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB12_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB12_102 Depth=1
	movl	$0, -4(%rbp)
.LBB12_104:                             # %for.cond394
                                        #   Parent Loop BB12_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB12_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB12_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB12_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_108
.LBB12_107:                             # %if.else412
                                        #   in Loop: Header=BB12_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_108:                             # %if.end426
                                        #   in Loop: Header=BB12_104 Depth=2
	jmp	.LBB12_109
.LBB12_109:                             # %for.inc427
                                        #   in Loop: Header=BB12_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_104
.LBB12_110:                             # %for.end429
                                        #   in Loop: Header=BB12_102 Depth=1
	jmp	.LBB12_111
.LBB12_111:                             # %for.inc430
                                        #   in Loop: Header=BB12_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_102
.LBB12_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB12_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB12_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB12_113 Depth=1
	movl	$0, -4(%rbp)
.LBB12_115:                             # %for.cond436
                                        #   Parent Loop BB12_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB12_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB12_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB12_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_119
.LBB12_118:                             # %if.else454
                                        #   in Loop: Header=BB12_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_119:                             # %if.end468
                                        #   in Loop: Header=BB12_115 Depth=2
	jmp	.LBB12_120
.LBB12_120:                             # %for.inc469
                                        #   in Loop: Header=BB12_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_115
.LBB12_121:                             # %for.end471
                                        #   in Loop: Header=BB12_113 Depth=1
	jmp	.LBB12_122
.LBB12_122:                             # %for.inc472
                                        #   in Loop: Header=BB12_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_113
.LBB12_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB12_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB12_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB12_124 Depth=1
	movl	$0, -4(%rbp)
.LBB12_126:                             # %for.cond478
                                        #   Parent Loop BB12_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB12_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB12_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB12_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_130
.LBB12_129:                             # %if.else496
                                        #   in Loop: Header=BB12_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_130:                             # %if.end510
                                        #   in Loop: Header=BB12_126 Depth=2
	jmp	.LBB12_131
.LBB12_131:                             # %for.inc511
                                        #   in Loop: Header=BB12_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_126
.LBB12_132:                             # %for.end513
                                        #   in Loop: Header=BB12_124 Depth=1
	jmp	.LBB12_133
.LBB12_133:                             # %for.inc514
                                        #   in Loop: Header=BB12_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_124
.LBB12_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB12_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB12_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	$0, -4(%rbp)
.LBB12_137:                             # %for.cond520
                                        #   Parent Loop BB12_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB12_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB12_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB12_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_141
.LBB12_140:                             # %if.else538
                                        #   in Loop: Header=BB12_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_141:                             # %if.end552
                                        #   in Loop: Header=BB12_137 Depth=2
	jmp	.LBB12_142
.LBB12_142:                             # %for.inc553
                                        #   in Loop: Header=BB12_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_137
.LBB12_143:                             # %for.end555
                                        #   in Loop: Header=BB12_135 Depth=1
	jmp	.LBB12_144
.LBB12_144:                             # %for.inc556
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_135
.LBB12_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB12_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB12_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB12_146 Depth=1
	movl	$0, -4(%rbp)
.LBB12_148:                             # %for.cond562
                                        #   Parent Loop BB12_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB12_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB12_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB12_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_152
.LBB12_151:                             # %if.else580
                                        #   in Loop: Header=BB12_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_152:                             # %if.end594
                                        #   in Loop: Header=BB12_148 Depth=2
	jmp	.LBB12_153
.LBB12_153:                             # %for.inc595
                                        #   in Loop: Header=BB12_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_148
.LBB12_154:                             # %for.end597
                                        #   in Loop: Header=BB12_146 Depth=1
	jmp	.LBB12_155
.LBB12_155:                             # %for.inc598
                                        #   in Loop: Header=BB12_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_146
.LBB12_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB12_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB12_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB12_157 Depth=1
	movl	$0, -4(%rbp)
.LBB12_159:                             # %for.cond604
                                        #   Parent Loop BB12_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB12_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB12_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB12_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB12_163
.LBB12_162:                             # %if.else622
                                        #   in Loop: Header=BB12_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB12_163:                             # %if.end636
                                        #   in Loop: Header=BB12_159 Depth=2
	jmp	.LBB12_164
.LBB12_164:                             # %for.inc637
                                        #   in Loop: Header=BB12_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_159
.LBB12_165:                             # %for.end639
                                        #   in Loop: Header=BB12_157 Depth=1
	jmp	.LBB12_166
.LBB12_166:                             # %for.inc640
                                        #   in Loop: Header=BB12_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_157
.LBB12_167:                             # %for.end642
	cmpl	$2139035532, -28(%rbp)  # imm = 0x7F7F178C
	jne	.LBB12_169
.LBB12_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_168
.Lfunc_end12:
	.size	init_contexts.5, .Lfunc_end12-init_contexts.5
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.6        # -- Begin function store_contexts.6
	.p2align	4, 0x90
	.type	store_contexts.6,@function
store_contexts.6:                       # @store_contexts.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2038052458, -16(%rbp)  # imm = 0x797A366A
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB13_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB13_3
.LBB13_2:                               # %if.else
	jmp	.LBB13_3
.LBB13_3:                               # %if.end
	cmpl	$2038052458, -16(%rbp)  # imm = 0x797A366A
	jne	.LBB13_5
.LBB13_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_4
.Lfunc_end13:
	.size	store_contexts.6, .Lfunc_end13-store_contexts.6
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.7     # -- Begin function SetCtxModelNumber.7
	.p2align	4, 0x90
	.type	SetCtxModelNumber.7,@function
SetCtxModelNumber.7:                    # @SetCtxModelNumber.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$678185728, -16(%rbp)   # imm = 0x286C4B00
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB14_11
.LBB14_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB14_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB14_11
.LBB14_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB14_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB14_11
.LBB14_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB14_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB14_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB14_10
.LBB14_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB14_10:                              # %if.end38
	jmp	.LBB14_11
.LBB14_11:                              # %if.end39
	cmpl	$678185728, -16(%rbp)   # imm = 0x286C4B00
	jne	.LBB14_13
.LBB14_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_12
.Lfunc_end14:
	.size	SetCtxModelNumber.7, .Lfunc_end14-SetCtxModelNumber.7
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.8        # -- Begin function store_contexts.8
	.p2align	4, 0x90
	.type	store_contexts.8,@function
store_contexts.8:                       # @store_contexts.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$670275331, -16(%rbp)   # imm = 0x27F39703
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB15_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB15_3
.LBB15_2:                               # %if.else
	jmp	.LBB15_3
.LBB15_3:                               # %if.end
	cmpl	$670275331, -16(%rbp)   # imm = 0x27F39703
	jne	.LBB15_5
.LBB15_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_4
.Lfunc_end15:
	.size	store_contexts.8, .Lfunc_end15-store_contexts.8
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.9        # -- Begin function store_contexts.9
	.p2align	4, 0x90
	.type	store_contexts.9,@function
store_contexts.9:                       # @store_contexts.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1195647426, -16(%rbp)  # imm = 0x474421C2
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB16_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB16_3
.LBB16_2:                               # %if.else
	jmp	.LBB16_3
.LBB16_3:                               # %if.end
	cmpl	$1195647426, -16(%rbp)  # imm = 0x474421C2
	jne	.LBB16_5
.LBB16_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_4
.Lfunc_end16:
	.size	store_contexts.9, .Lfunc_end16-store_contexts.9
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.10  # -- Begin function free_context_memory.10
	.p2align	4, 0x90
	.type	free_context_memory.10,@function
free_context_memory.10:                 # @free_context_memory.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1248513789, -12(%rbp)  # imm = 0x4A6ACEFD
	movl	$0, -4(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB17_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$0, -8(%rbp)
.LBB17_3:                               # %for.cond1
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_3
.LBB17_6:                               # %for.end
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_1
.LBB17_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$1248513789, -12(%rbp)  # imm = 0x4A6ACEFD
	jne	.LBB17_10
.LBB17_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_9
.Lfunc_end17:
	.size	free_context_memory.10, .Lfunc_end17-free_context_memory.10
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.11    # -- Begin function SetCtxModelNumber.11
	.p2align	4, 0x90
	.type	SetCtxModelNumber.11,@function
SetCtxModelNumber.11:                   # @SetCtxModelNumber.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$187736225, -16(%rbp)   # imm = 0xB30A0A1
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB18_11
.LBB18_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB18_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_11
.LBB18_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB18_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_11
.LBB18_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB18_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB18_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_10
.LBB18_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB18_10:                              # %if.end38
	jmp	.LBB18_11
.LBB18_11:                              # %if.end39
	cmpl	$187736225, -16(%rbp)   # imm = 0xB30A0A1
	jne	.LBB18_13
.LBB18_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_12
.Lfunc_end18:
	.size	SetCtxModelNumber.11, .Lfunc_end18-SetCtxModelNumber.11
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.12  # -- Begin function free_context_memory.12
	.p2align	4, 0x90
	.type	free_context_memory.12,@function
free_context_memory.12:                 # @free_context_memory.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$245146344, -12(%rbp)   # imm = 0xE9CA2E8
	movl	$0, -4(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB19_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_3:                               # %for.cond1
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_3
.LBB19_6:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_1
.LBB19_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$245146344, -12(%rbp)   # imm = 0xE9CA2E8
	jne	.LBB19_10
.LBB19_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_9
.Lfunc_end19:
	.size	free_context_memory.12, .Lfunc_end19-free_context_memory.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.13
.LCPI20_0:
	.quad	4607182418800017408     # double 1
.LCPI20_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI20_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI20_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.13
	.p2align	4, 0x90
	.type	XRate.13,@function
XRate.13:                               # @XRate.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1092457703, -32(%rbp)  # imm = 0x411D94E7
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB20_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB20_3
.LBB20_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB20_3:                               # %cond.end
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI20_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI20_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI20_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB20_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB20_6
.LBB20_5:                               # %cond.false6
	vmovsd	.LCPI20_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI20_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI20_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB20_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB20_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB20_9
.LBB20_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB20_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB20_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB20_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB20_13
.LBB20_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB20_13:                              # %cond.end26
	jmp	.LBB20_15
.LBB20_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB20_15
.LBB20_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB20_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB20_18
.LBB20_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB20_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1092457703, -32(%rbp)  # imm = 0x411D94E7
	jne	.LBB20_20
.LBB20_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB20_19
.Lfunc_end20:
	.size	XRate.13, .Lfunc_end20-XRate.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.14
.LCPI21_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.14
	.p2align	4, 0x90
	.type	GetCtxModelNumber.14,@function
GetCtxModelNumber.14:                   # @GetCtxModelNumber.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1240661119, -48(%rbp)  # imm = 0x49F2FC7F
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
                                        #       Child Loop BB21_5 Depth 3
                                        #     Child Loop BB21_14 Depth 2
                                        #       Child Loop BB21_16 Depth 3
                                        #     Child Loop BB21_25 Depth 2
                                        #       Child Loop BB21_27 Depth 3
                                        #     Child Loop BB21_36 Depth 2
                                        #       Child Loop BB21_38 Depth 3
                                        #     Child Loop BB21_47 Depth 2
                                        #     Child Loop BB21_54 Depth 2
                                        #     Child Loop BB21_61 Depth 2
                                        #     Child Loop BB21_68 Depth 2
                                        #     Child Loop BB21_75 Depth 2
                                        #     Child Loop BB21_82 Depth 2
                                        #       Child Loop BB21_84 Depth 3
                                        #     Child Loop BB21_93 Depth 2
                                        #       Child Loop BB21_95 Depth 3
                                        #     Child Loop BB21_104 Depth 2
                                        #       Child Loop BB21_106 Depth 3
                                        #     Child Loop BB21_115 Depth 2
                                        #       Child Loop BB21_117 Depth 3
                                        #     Child Loop BB21_126 Depth 2
                                        #       Child Loop BB21_128 Depth 3
                                        #     Child Loop BB21_137 Depth 2
                                        #       Child Loop BB21_139 Depth 3
                                        #     Child Loop BB21_148 Depth 2
                                        #       Child Loop BB21_150 Depth 3
                                        #     Child Loop BB21_159 Depth 2
                                        #       Child Loop BB21_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB21_3:                               # %for.cond2
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB21_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	$0, -4(%rbp)
.LBB21_5:                               # %for.cond5
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB21_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_9
.LBB21_8:                               # %if.else
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_9:                               # %if.end
                                        #   in Loop: Header=BB21_5 Depth=3
	jmp	.LBB21_10
.LBB21_10:                              # %for.inc
                                        #   in Loop: Header=BB21_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_5
.LBB21_11:                              # %for.end
                                        #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_12
.LBB21_12:                              # %for.inc33
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_3
.LBB21_13:                              # %for.end35
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_14:                              # %for.cond36
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	$0, -4(%rbp)
.LBB21_16:                              # %for.cond39
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB21_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_20
.LBB21_19:                              # %if.else58
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_20:                              # %if.end73
                                        #   in Loop: Header=BB21_16 Depth=3
	jmp	.LBB21_21
.LBB21_21:                              # %for.inc74
                                        #   in Loop: Header=BB21_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_16
.LBB21_22:                              # %for.end76
                                        #   in Loop: Header=BB21_14 Depth=2
	jmp	.LBB21_23
.LBB21_23:                              # %for.inc77
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_14
.LBB21_24:                              # %for.end79
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_25:                              # %for.cond80
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	$0, -4(%rbp)
.LBB21_27:                              # %for.cond83
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB21_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_31
.LBB21_30:                              # %if.else102
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_31:                              # %if.end117
                                        #   in Loop: Header=BB21_27 Depth=3
	jmp	.LBB21_32
.LBB21_32:                              # %for.inc118
                                        #   in Loop: Header=BB21_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_27
.LBB21_33:                              # %for.end120
                                        #   in Loop: Header=BB21_25 Depth=2
	jmp	.LBB21_34
.LBB21_34:                              # %for.inc121
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_25
.LBB21_35:                              # %for.end123
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_36:                              # %for.cond124
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	$0, -4(%rbp)
.LBB21_38:                              # %for.cond127
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB21_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_42
.LBB21_41:                              # %if.else146
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_42:                              # %if.end161
                                        #   in Loop: Header=BB21_38 Depth=3
	jmp	.LBB21_43
.LBB21_43:                              # %for.inc162
                                        #   in Loop: Header=BB21_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_38
.LBB21_44:                              # %for.end164
                                        #   in Loop: Header=BB21_36 Depth=2
	jmp	.LBB21_45
.LBB21_45:                              # %for.inc165
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_36
.LBB21_46:                              # %for.end167
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_47:                              # %for.cond168
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_51
.LBB21_50:                              # %if.else184
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_51:                              # %if.end196
                                        #   in Loop: Header=BB21_47 Depth=2
	jmp	.LBB21_52
.LBB21_52:                              # %for.inc197
                                        #   in Loop: Header=BB21_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_47
.LBB21_53:                              # %for.end199
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_54:                              # %for.cond200
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_58
.LBB21_57:                              # %if.else216
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_58:                              # %if.end228
                                        #   in Loop: Header=BB21_54 Depth=2
	jmp	.LBB21_59
.LBB21_59:                              # %for.inc229
                                        #   in Loop: Header=BB21_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_54
.LBB21_60:                              # %for.end231
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_61:                              # %for.cond232
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB21_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_65
.LBB21_64:                              # %if.else248
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_65:                              # %if.end260
                                        #   in Loop: Header=BB21_61 Depth=2
	jmp	.LBB21_66
.LBB21_66:                              # %for.inc261
                                        #   in Loop: Header=BB21_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_61
.LBB21_67:                              # %for.end263
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_68:                              # %for.cond264
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB21_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_72
.LBB21_71:                              # %if.else280
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_72:                              # %if.end292
                                        #   in Loop: Header=BB21_68 Depth=2
	jmp	.LBB21_73
.LBB21_73:                              # %for.inc293
                                        #   in Loop: Header=BB21_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_68
.LBB21_74:                              # %for.end295
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_75:                              # %for.cond296
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_79
.LBB21_78:                              # %if.else312
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_79:                              # %if.end324
                                        #   in Loop: Header=BB21_75 Depth=2
	jmp	.LBB21_80
.LBB21_80:                              # %for.inc325
                                        #   in Loop: Header=BB21_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_75
.LBB21_81:                              # %for.end327
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_82:                              # %for.cond328
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB21_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	$0, -4(%rbp)
.LBB21_84:                              # %for.cond331
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB21_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_88
.LBB21_87:                              # %if.else350
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_88:                              # %if.end365
                                        #   in Loop: Header=BB21_84 Depth=3
	jmp	.LBB21_89
.LBB21_89:                              # %for.inc366
                                        #   in Loop: Header=BB21_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_84
.LBB21_90:                              # %for.end368
                                        #   in Loop: Header=BB21_82 Depth=2
	jmp	.LBB21_91
.LBB21_91:                              # %for.inc369
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_82
.LBB21_92:                              # %for.end371
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_93:                              # %for.cond372
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	$0, -4(%rbp)
.LBB21_95:                              # %for.cond375
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB21_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_99
.LBB21_98:                              # %if.else394
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_99:                              # %if.end409
                                        #   in Loop: Header=BB21_95 Depth=3
	jmp	.LBB21_100
.LBB21_100:                             # %for.inc410
                                        #   in Loop: Header=BB21_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_95
.LBB21_101:                             # %for.end412
                                        #   in Loop: Header=BB21_93 Depth=2
	jmp	.LBB21_102
.LBB21_102:                             # %for.inc413
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_93
.LBB21_103:                             # %for.end415
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_104:                             # %for.cond416
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	$0, -4(%rbp)
.LBB21_106:                             # %for.cond419
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_110
.LBB21_109:                             # %if.else438
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_110:                             # %if.end453
                                        #   in Loop: Header=BB21_106 Depth=3
	jmp	.LBB21_111
.LBB21_111:                             # %for.inc454
                                        #   in Loop: Header=BB21_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_106
.LBB21_112:                             # %for.end456
                                        #   in Loop: Header=BB21_104 Depth=2
	jmp	.LBB21_113
.LBB21_113:                             # %for.inc457
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_104
.LBB21_114:                             # %for.end459
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_115:                             # %for.cond460
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	$0, -4(%rbp)
.LBB21_117:                             # %for.cond463
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_121
.LBB21_120:                             # %if.else482
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_121:                             # %if.end497
                                        #   in Loop: Header=BB21_117 Depth=3
	jmp	.LBB21_122
.LBB21_122:                             # %for.inc498
                                        #   in Loop: Header=BB21_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_117
.LBB21_123:                             # %for.end500
                                        #   in Loop: Header=BB21_115 Depth=2
	jmp	.LBB21_124
.LBB21_124:                             # %for.inc501
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_115
.LBB21_125:                             # %for.end503
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_126:                             # %for.cond504
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	$0, -4(%rbp)
.LBB21_128:                             # %for.cond507
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB21_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_132
.LBB21_131:                             # %if.else526
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_132:                             # %if.end541
                                        #   in Loop: Header=BB21_128 Depth=3
	jmp	.LBB21_133
.LBB21_133:                             # %for.inc542
                                        #   in Loop: Header=BB21_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_128
.LBB21_134:                             # %for.end544
                                        #   in Loop: Header=BB21_126 Depth=2
	jmp	.LBB21_135
.LBB21_135:                             # %for.inc545
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_126
.LBB21_136:                             # %for.end547
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_137:                             # %for.cond548
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	$0, -4(%rbp)
.LBB21_139:                             # %for.cond551
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB21_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_143
.LBB21_142:                             # %if.else570
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_143:                             # %if.end585
                                        #   in Loop: Header=BB21_139 Depth=3
	jmp	.LBB21_144
.LBB21_144:                             # %for.inc586
                                        #   in Loop: Header=BB21_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_139
.LBB21_145:                             # %for.end588
                                        #   in Loop: Header=BB21_137 Depth=2
	jmp	.LBB21_146
.LBB21_146:                             # %for.inc589
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_137
.LBB21_147:                             # %for.end591
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_148:                             # %for.cond592
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	$0, -4(%rbp)
.LBB21_150:                             # %for.cond595
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_154
.LBB21_153:                             # %if.else614
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_154:                             # %if.end629
                                        #   in Loop: Header=BB21_150 Depth=3
	jmp	.LBB21_155
.LBB21_155:                             # %for.inc630
                                        #   in Loop: Header=BB21_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_150
.LBB21_156:                             # %for.end632
                                        #   in Loop: Header=BB21_148 Depth=2
	jmp	.LBB21_157
.LBB21_157:                             # %for.inc633
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_148
.LBB21_158:                             # %for.end635
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_159:                             # %for.cond636
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	$0, -4(%rbp)
.LBB21_161:                             # %for.cond639
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_165
.LBB21_164:                             # %if.else658
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_165:                             # %if.end673
                                        #   in Loop: Header=BB21_161 Depth=3
	jmp	.LBB21_166
.LBB21_166:                             # %for.inc674
                                        #   in Loop: Header=BB21_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_161
.LBB21_167:                             # %for.end676
                                        #   in Loop: Header=BB21_159 Depth=2
	jmp	.LBB21_168
.LBB21_168:                             # %for.inc677
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_159
.LBB21_169:                             # %for.end679
                                        #   in Loop: Header=BB21_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB21_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB21_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB21_171:                             # %if.end682
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_172
.LBB21_172:                             # %for.inc683
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_1
.LBB21_173:                             # %for.end685
	cmpl	$1240661119, -48(%rbp)  # imm = 0x49F2FC7F
	jne	.LBB21_175
.LBB21_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_174
.Lfunc_end21:
	.size	GetCtxModelNumber.14, .Lfunc_end21-GetCtxModelNumber.14
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.15 # -- Begin function update_field_frame_contexts.15
	.p2align	4, 0x90
	.type	update_field_frame_contexts.15,@function
update_field_frame_contexts.15:         # @update_field_frame_contexts.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1082951533, -16(%rbp)  # imm = 0x408C876D
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB22_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB22_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB22_2 Depth=1
	movl	$0, -8(%rbp)
.LBB22_4:                               # %for.cond1
                                        #   Parent Loop BB22_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB22_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB22_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB22_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_4
.LBB22_7:                               # %for.end
                                        #   in Loop: Header=BB22_2 Depth=1
	jmp	.LBB22_8
.LBB22_8:                               # %for.inc23
                                        #   in Loop: Header=BB22_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_2
.LBB22_9:                               # %for.end25
	jmp	.LBB22_19
.LBB22_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB22_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	$0, -8(%rbp)
.LBB22_13:                              # %for.cond29
                                        #   Parent Loop BB22_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB22_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB22_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_13
.LBB22_16:                              # %for.end56
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_17
.LBB22_17:                              # %for.inc57
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_11
.LBB22_18:                              # %for.end59
	jmp	.LBB22_19
.LBB22_19:                              # %if.end
	cmpl	$1082951533, -16(%rbp)  # imm = 0x408C876D
	jne	.LBB22_21
.LBB22_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_20
.Lfunc_end22:
	.size	update_field_frame_contexts.15, .Lfunc_end22-update_field_frame_contexts.15
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.16 # -- Begin function update_field_frame_contexts.16
	.p2align	4, 0x90
	.type	update_field_frame_contexts.16,@function
update_field_frame_contexts.16:         # @update_field_frame_contexts.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1499785647, -16(%rbp)  # imm = 0x5964E9AF
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB23_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB23_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	$0, -8(%rbp)
.LBB23_4:                               # %for.cond1
                                        #   Parent Loop BB23_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB23_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB23_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB23_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_4
.LBB23_7:                               # %for.end
                                        #   in Loop: Header=BB23_2 Depth=1
	jmp	.LBB23_8
.LBB23_8:                               # %for.inc23
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_2
.LBB23_9:                               # %for.end25
	jmp	.LBB23_19
.LBB23_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB23_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	$0, -8(%rbp)
.LBB23_13:                              # %for.cond29
                                        #   Parent Loop BB23_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB23_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB23_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_13
.LBB23_16:                              # %for.end56
                                        #   in Loop: Header=BB23_11 Depth=1
	jmp	.LBB23_17
.LBB23_17:                              # %for.inc57
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_11
.LBB23_18:                              # %for.end59
	jmp	.LBB23_19
.LBB23_19:                              # %if.end
	cmpl	$1499785647, -16(%rbp)  # imm = 0x5964E9AF
	jne	.LBB23_21
.LBB23_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_20
.Lfunc_end23:
	.size	update_field_frame_contexts.16, .Lfunc_end23-update_field_frame_contexts.16
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.17 # -- Begin function update_field_frame_contexts.17
	.p2align	4, 0x90
	.type	update_field_frame_contexts.17,@function
update_field_frame_contexts.17:         # @update_field_frame_contexts.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$603992307, -16(%rbp)   # imm = 0x240030F3
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB24_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB24_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	$0, -4(%rbp)
.LBB24_4:                               # %for.cond1
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB24_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB24_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB24_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_4
.LBB24_7:                               # %for.end
                                        #   in Loop: Header=BB24_2 Depth=1
	jmp	.LBB24_8
.LBB24_8:                               # %for.inc23
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_2
.LBB24_9:                               # %for.end25
	jmp	.LBB24_19
.LBB24_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB24_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB24_11 Depth=1
	movl	$0, -4(%rbp)
.LBB24_13:                              # %for.cond29
                                        #   Parent Loop BB24_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB24_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB24_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_13
.LBB24_16:                              # %for.end56
                                        #   in Loop: Header=BB24_11 Depth=1
	jmp	.LBB24_17
.LBB24_17:                              # %for.inc57
                                        #   in Loop: Header=BB24_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_11
.LBB24_18:                              # %for.end59
	jmp	.LBB24_19
.LBB24_19:                              # %if.end
	cmpl	$603992307, -16(%rbp)   # imm = 0x240030F3
	jne	.LBB24_21
.LBB24_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_20
.Lfunc_end24:
	.size	update_field_frame_contexts.17, .Lfunc_end24-update_field_frame_contexts.17
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.18 # -- Begin function update_field_frame_contexts.18
	.p2align	4, 0x90
	.type	update_field_frame_contexts.18,@function
update_field_frame_contexts.18:         # @update_field_frame_contexts.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$802736889, -16(%rbp)   # imm = 0x2FD8CAF9
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB25_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB25_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	$0, -4(%rbp)
.LBB25_4:                               # %for.cond1
                                        #   Parent Loop BB25_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB25_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB25_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB25_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_4
.LBB25_7:                               # %for.end
                                        #   in Loop: Header=BB25_2 Depth=1
	jmp	.LBB25_8
.LBB25_8:                               # %for.inc23
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_2
.LBB25_9:                               # %for.end25
	jmp	.LBB25_19
.LBB25_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB25_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	$0, -4(%rbp)
.LBB25_13:                              # %for.cond29
                                        #   Parent Loop BB25_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB25_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB25_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_13
.LBB25_16:                              # %for.end56
                                        #   in Loop: Header=BB25_11 Depth=1
	jmp	.LBB25_17
.LBB25_17:                              # %for.inc57
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_11
.LBB25_18:                              # %for.end59
	jmp	.LBB25_19
.LBB25_19:                              # %if.end
	cmpl	$802736889, -16(%rbp)   # imm = 0x2FD8CAF9
	jne	.LBB25_21
.LBB25_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_20
.Lfunc_end25:
	.size	update_field_frame_contexts.18, .Lfunc_end25-update_field_frame_contexts.18
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.19        # -- Begin function init_contexts.19
	.p2align	4, 0x90
	.type	init_contexts.19,@function
init_contexts.19:                       # @init_contexts.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1337848841, -28(%rbp)  # imm = 0x4FBDF409
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB26_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -4(%rbp)
.LBB26_3:                               # %for.cond2
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB26_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_7
.LBB26_6:                               # %if.else
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_7:                               # %if.end
                                        #   in Loop: Header=BB26_3 Depth=2
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_3
.LBB26_9:                               # %for.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_10
.LBB26_10:                              # %for.inc28
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_1
.LBB26_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB26_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB26_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB26_12 Depth=1
	movl	$0, -4(%rbp)
.LBB26_14:                              # %for.cond34
                                        #   Parent Loop BB26_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB26_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB26_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB26_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_18
.LBB26_17:                              # %if.else52
                                        #   in Loop: Header=BB26_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_18:                              # %if.end66
                                        #   in Loop: Header=BB26_14 Depth=2
	jmp	.LBB26_19
.LBB26_19:                              # %for.inc67
                                        #   in Loop: Header=BB26_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_14
.LBB26_20:                              # %for.end69
                                        #   in Loop: Header=BB26_12 Depth=1
	jmp	.LBB26_21
.LBB26_21:                              # %for.inc70
                                        #   in Loop: Header=BB26_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_12
.LBB26_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB26_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB26_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB26_23 Depth=1
	movl	$0, -4(%rbp)
.LBB26_25:                              # %for.cond76
                                        #   Parent Loop BB26_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB26_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB26_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB26_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_29
.LBB26_28:                              # %if.else94
                                        #   in Loop: Header=BB26_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_29:                              # %if.end108
                                        #   in Loop: Header=BB26_25 Depth=2
	jmp	.LBB26_30
.LBB26_30:                              # %for.inc109
                                        #   in Loop: Header=BB26_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_25
.LBB26_31:                              # %for.end111
                                        #   in Loop: Header=BB26_23 Depth=1
	jmp	.LBB26_32
.LBB26_32:                              # %for.inc112
                                        #   in Loop: Header=BB26_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_23
.LBB26_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB26_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB26_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB26_34 Depth=1
	movl	$0, -4(%rbp)
.LBB26_36:                              # %for.cond118
                                        #   Parent Loop BB26_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB26_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB26_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB26_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_40
.LBB26_39:                              # %if.else136
                                        #   in Loop: Header=BB26_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_40:                              # %if.end150
                                        #   in Loop: Header=BB26_36 Depth=2
	jmp	.LBB26_41
.LBB26_41:                              # %for.inc151
                                        #   in Loop: Header=BB26_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_36
.LBB26_42:                              # %for.end153
                                        #   in Loop: Header=BB26_34 Depth=1
	jmp	.LBB26_43
.LBB26_43:                              # %for.inc154
                                        #   in Loop: Header=BB26_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_34
.LBB26_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB26_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB26_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB26_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB26_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_49
.LBB26_48:                              # %if.else172
                                        #   in Loop: Header=BB26_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_49:                              # %if.end183
                                        #   in Loop: Header=BB26_45 Depth=1
	jmp	.LBB26_50
.LBB26_50:                              # %for.inc184
                                        #   in Loop: Header=BB26_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_45
.LBB26_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB26_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB26_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB26_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB26_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_56
.LBB26_55:                              # %if.else202
                                        #   in Loop: Header=BB26_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_56:                              # %if.end213
                                        #   in Loop: Header=BB26_52 Depth=1
	jmp	.LBB26_57
.LBB26_57:                              # %for.inc214
                                        #   in Loop: Header=BB26_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_52
.LBB26_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB26_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB26_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB26_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB26_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_63
.LBB26_62:                              # %if.else232
                                        #   in Loop: Header=BB26_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_63:                              # %if.end243
                                        #   in Loop: Header=BB26_59 Depth=1
	jmp	.LBB26_64
.LBB26_64:                              # %for.inc244
                                        #   in Loop: Header=BB26_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_59
.LBB26_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB26_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB26_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB26_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB26_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_70
.LBB26_69:                              # %if.else262
                                        #   in Loop: Header=BB26_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_70:                              # %if.end273
                                        #   in Loop: Header=BB26_66 Depth=1
	jmp	.LBB26_71
.LBB26_71:                              # %for.inc274
                                        #   in Loop: Header=BB26_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_66
.LBB26_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB26_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB26_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB26_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB26_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_77
.LBB26_76:                              # %if.else292
                                        #   in Loop: Header=BB26_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_77:                              # %if.end303
                                        #   in Loop: Header=BB26_73 Depth=1
	jmp	.LBB26_78
.LBB26_78:                              # %for.inc304
                                        #   in Loop: Header=BB26_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_73
.LBB26_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB26_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB26_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB26_80 Depth=1
	movl	$0, -4(%rbp)
.LBB26_82:                              # %for.cond310
                                        #   Parent Loop BB26_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB26_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB26_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_86
.LBB26_85:                              # %if.else328
                                        #   in Loop: Header=BB26_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_86:                              # %if.end342
                                        #   in Loop: Header=BB26_82 Depth=2
	jmp	.LBB26_87
.LBB26_87:                              # %for.inc343
                                        #   in Loop: Header=BB26_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_82
.LBB26_88:                              # %for.end345
                                        #   in Loop: Header=BB26_80 Depth=1
	jmp	.LBB26_89
.LBB26_89:                              # %for.inc346
                                        #   in Loop: Header=BB26_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_80
.LBB26_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB26_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB26_91 Depth=1
	movl	$0, -4(%rbp)
.LBB26_93:                              # %for.cond352
                                        #   Parent Loop BB26_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB26_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB26_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_97
.LBB26_96:                              # %if.else370
                                        #   in Loop: Header=BB26_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_97:                              # %if.end384
                                        #   in Loop: Header=BB26_93 Depth=2
	jmp	.LBB26_98
.LBB26_98:                              # %for.inc385
                                        #   in Loop: Header=BB26_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_93
.LBB26_99:                              # %for.end387
                                        #   in Loop: Header=BB26_91 Depth=1
	jmp	.LBB26_100
.LBB26_100:                             # %for.inc388
                                        #   in Loop: Header=BB26_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_91
.LBB26_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB26_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB26_102 Depth=1
	movl	$0, -4(%rbp)
.LBB26_104:                             # %for.cond394
                                        #   Parent Loop BB26_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB26_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB26_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB26_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_108
.LBB26_107:                             # %if.else412
                                        #   in Loop: Header=BB26_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_108:                             # %if.end426
                                        #   in Loop: Header=BB26_104 Depth=2
	jmp	.LBB26_109
.LBB26_109:                             # %for.inc427
                                        #   in Loop: Header=BB26_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_104
.LBB26_110:                             # %for.end429
                                        #   in Loop: Header=BB26_102 Depth=1
	jmp	.LBB26_111
.LBB26_111:                             # %for.inc430
                                        #   in Loop: Header=BB26_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_102
.LBB26_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB26_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB26_113 Depth=1
	movl	$0, -4(%rbp)
.LBB26_115:                             # %for.cond436
                                        #   Parent Loop BB26_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB26_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB26_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB26_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_119
.LBB26_118:                             # %if.else454
                                        #   in Loop: Header=BB26_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_119:                             # %if.end468
                                        #   in Loop: Header=BB26_115 Depth=2
	jmp	.LBB26_120
.LBB26_120:                             # %for.inc469
                                        #   in Loop: Header=BB26_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_115
.LBB26_121:                             # %for.end471
                                        #   in Loop: Header=BB26_113 Depth=1
	jmp	.LBB26_122
.LBB26_122:                             # %for.inc472
                                        #   in Loop: Header=BB26_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_113
.LBB26_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB26_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB26_124 Depth=1
	movl	$0, -4(%rbp)
.LBB26_126:                             # %for.cond478
                                        #   Parent Loop BB26_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB26_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB26_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB26_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_130
.LBB26_129:                             # %if.else496
                                        #   in Loop: Header=BB26_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_130:                             # %if.end510
                                        #   in Loop: Header=BB26_126 Depth=2
	jmp	.LBB26_131
.LBB26_131:                             # %for.inc511
                                        #   in Loop: Header=BB26_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_126
.LBB26_132:                             # %for.end513
                                        #   in Loop: Header=BB26_124 Depth=1
	jmp	.LBB26_133
.LBB26_133:                             # %for.inc514
                                        #   in Loop: Header=BB26_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_124
.LBB26_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB26_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB26_135 Depth=1
	movl	$0, -4(%rbp)
.LBB26_137:                             # %for.cond520
                                        #   Parent Loop BB26_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB26_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB26_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB26_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_141
.LBB26_140:                             # %if.else538
                                        #   in Loop: Header=BB26_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_141:                             # %if.end552
                                        #   in Loop: Header=BB26_137 Depth=2
	jmp	.LBB26_142
.LBB26_142:                             # %for.inc553
                                        #   in Loop: Header=BB26_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_137
.LBB26_143:                             # %for.end555
                                        #   in Loop: Header=BB26_135 Depth=1
	jmp	.LBB26_144
.LBB26_144:                             # %for.inc556
                                        #   in Loop: Header=BB26_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_135
.LBB26_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB26_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB26_146 Depth=1
	movl	$0, -4(%rbp)
.LBB26_148:                             # %for.cond562
                                        #   Parent Loop BB26_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB26_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB26_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB26_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_152
.LBB26_151:                             # %if.else580
                                        #   in Loop: Header=BB26_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_152:                             # %if.end594
                                        #   in Loop: Header=BB26_148 Depth=2
	jmp	.LBB26_153
.LBB26_153:                             # %for.inc595
                                        #   in Loop: Header=BB26_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_148
.LBB26_154:                             # %for.end597
                                        #   in Loop: Header=BB26_146 Depth=1
	jmp	.LBB26_155
.LBB26_155:                             # %for.inc598
                                        #   in Loop: Header=BB26_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_146
.LBB26_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB26_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	$0, -4(%rbp)
.LBB26_159:                             # %for.cond604
                                        #   Parent Loop BB26_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB26_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB26_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB26_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_163
.LBB26_162:                             # %if.else622
                                        #   in Loop: Header=BB26_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_163:                             # %if.end636
                                        #   in Loop: Header=BB26_159 Depth=2
	jmp	.LBB26_164
.LBB26_164:                             # %for.inc637
                                        #   in Loop: Header=BB26_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_159
.LBB26_165:                             # %for.end639
                                        #   in Loop: Header=BB26_157 Depth=1
	jmp	.LBB26_166
.LBB26_166:                             # %for.inc640
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_157
.LBB26_167:                             # %for.end642
	cmpl	$1337848841, -28(%rbp)  # imm = 0x4FBDF409
	jne	.LBB26_169
.LBB26_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_168
.Lfunc_end26:
	.size	init_contexts.19, .Lfunc_end26-init_contexts.19
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.20       # -- Begin function store_contexts.20
	.p2align	4, 0x90
	.type	store_contexts.20,@function
store_contexts.20:                      # @store_contexts.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1583775982, -16(%rbp)  # imm = 0x5E6680EE
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB27_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB27_3
.LBB27_2:                               # %if.else
	jmp	.LBB27_3
.LBB27_3:                               # %if.end
	cmpl	$1583775982, -16(%rbp)  # imm = 0x5E6680EE
	jne	.LBB27_5
.LBB27_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_4
.Lfunc_end27:
	.size	store_contexts.20, .Lfunc_end27-store_contexts.20
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.21    # -- Begin function SetCtxModelNumber.21
	.p2align	4, 0x90
	.type	SetCtxModelNumber.21,@function
SetCtxModelNumber.21:                   # @SetCtxModelNumber.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1147829894, -16(%rbp)  # imm = 0x446A7E86
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB28_11
.LBB28_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB28_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB28_11
.LBB28_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB28_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB28_11
.LBB28_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB28_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB28_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB28_10
.LBB28_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB28_10:                              # %if.end38
	jmp	.LBB28_11
.LBB28_11:                              # %if.end39
	cmpl	$1147829894, -16(%rbp)  # imm = 0x446A7E86
	jne	.LBB28_13
.LBB28_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_12
.Lfunc_end28:
	.size	SetCtxModelNumber.21, .Lfunc_end28-SetCtxModelNumber.21
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.22 # -- Begin function update_field_frame_contexts.22
	.p2align	4, 0x90
	.type	update_field_frame_contexts.22,@function
update_field_frame_contexts.22:         # @update_field_frame_contexts.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$63788090, -16(%rbp)    # imm = 0x3CD543A
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB29_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB29_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB29_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	$0, -4(%rbp)
.LBB29_4:                               # %for.cond1
                                        #   Parent Loop BB29_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB29_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB29_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB29_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_4
.LBB29_7:                               # %for.end
                                        #   in Loop: Header=BB29_2 Depth=1
	jmp	.LBB29_8
.LBB29_8:                               # %for.inc23
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_2
.LBB29_9:                               # %for.end25
	jmp	.LBB29_19
.LBB29_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB29_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB29_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB29_11 Depth=1
	movl	$0, -4(%rbp)
.LBB29_13:                              # %for.cond29
                                        #   Parent Loop BB29_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB29_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB29_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_13
.LBB29_16:                              # %for.end56
                                        #   in Loop: Header=BB29_11 Depth=1
	jmp	.LBB29_17
.LBB29_17:                              # %for.inc57
                                        #   in Loop: Header=BB29_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_11
.LBB29_18:                              # %for.end59
	jmp	.LBB29_19
.LBB29_19:                              # %if.end
	cmpl	$63788090, -16(%rbp)    # imm = 0x3CD543A
	jne	.LBB29_21
.LBB29_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_20
.Lfunc_end29:
	.size	update_field_frame_contexts.22, .Lfunc_end29-update_field_frame_contexts.22
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.23       # -- Begin function store_contexts.23
	.p2align	4, 0x90
	.type	store_contexts.23,@function
store_contexts.23:                      # @store_contexts.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$846313387, -16(%rbp)   # imm = 0x3271B7AB
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB30_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB30_3
.LBB30_2:                               # %if.else
	jmp	.LBB30_3
.LBB30_3:                               # %if.end
	cmpl	$846313387, -16(%rbp)   # imm = 0x3271B7AB
	jne	.LBB30_5
.LBB30_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_4
.Lfunc_end30:
	.size	store_contexts.23, .Lfunc_end30-store_contexts.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.24
.LCPI31_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.24
	.p2align	4, 0x90
	.type	GetCtxModelNumber.24,@function
GetCtxModelNumber.24:                   # @GetCtxModelNumber.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$597691336, -48(%rbp)   # imm = 0x23A00BC8
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_3 Depth 2
                                        #       Child Loop BB31_5 Depth 3
                                        #     Child Loop BB31_14 Depth 2
                                        #       Child Loop BB31_16 Depth 3
                                        #     Child Loop BB31_25 Depth 2
                                        #       Child Loop BB31_27 Depth 3
                                        #     Child Loop BB31_36 Depth 2
                                        #       Child Loop BB31_38 Depth 3
                                        #     Child Loop BB31_47 Depth 2
                                        #     Child Loop BB31_54 Depth 2
                                        #     Child Loop BB31_61 Depth 2
                                        #     Child Loop BB31_68 Depth 2
                                        #     Child Loop BB31_75 Depth 2
                                        #     Child Loop BB31_82 Depth 2
                                        #       Child Loop BB31_84 Depth 3
                                        #     Child Loop BB31_93 Depth 2
                                        #       Child Loop BB31_95 Depth 3
                                        #     Child Loop BB31_104 Depth 2
                                        #       Child Loop BB31_106 Depth 3
                                        #     Child Loop BB31_115 Depth 2
                                        #       Child Loop BB31_117 Depth 3
                                        #     Child Loop BB31_126 Depth 2
                                        #       Child Loop BB31_128 Depth 3
                                        #     Child Loop BB31_137 Depth 2
                                        #       Child Loop BB31_139 Depth 3
                                        #     Child Loop BB31_148 Depth 2
                                        #       Child Loop BB31_150 Depth 3
                                        #     Child Loop BB31_159 Depth 2
                                        #       Child Loop BB31_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB31_3:                               # %for.cond2
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB31_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	$0, -4(%rbp)
.LBB31_5:                               # %for.cond5
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB31_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_9
.LBB31_8:                               # %if.else
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_9:                               # %if.end
                                        #   in Loop: Header=BB31_5 Depth=3
	jmp	.LBB31_10
.LBB31_10:                              # %for.inc
                                        #   in Loop: Header=BB31_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_5
.LBB31_11:                              # %for.end
                                        #   in Loop: Header=BB31_3 Depth=2
	jmp	.LBB31_12
.LBB31_12:                              # %for.inc33
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_3
.LBB31_13:                              # %for.end35
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_14:                              # %for.cond36
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB31_14 Depth=2
	movl	$0, -4(%rbp)
.LBB31_16:                              # %for.cond39
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB31_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_20
.LBB31_19:                              # %if.else58
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_20:                              # %if.end73
                                        #   in Loop: Header=BB31_16 Depth=3
	jmp	.LBB31_21
.LBB31_21:                              # %for.inc74
                                        #   in Loop: Header=BB31_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_16
.LBB31_22:                              # %for.end76
                                        #   in Loop: Header=BB31_14 Depth=2
	jmp	.LBB31_23
.LBB31_23:                              # %for.inc77
                                        #   in Loop: Header=BB31_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_14
.LBB31_24:                              # %for.end79
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_25:                              # %for.cond80
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	$0, -4(%rbp)
.LBB31_27:                              # %for.cond83
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB31_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_31
.LBB31_30:                              # %if.else102
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_31:                              # %if.end117
                                        #   in Loop: Header=BB31_27 Depth=3
	jmp	.LBB31_32
.LBB31_32:                              # %for.inc118
                                        #   in Loop: Header=BB31_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_27
.LBB31_33:                              # %for.end120
                                        #   in Loop: Header=BB31_25 Depth=2
	jmp	.LBB31_34
.LBB31_34:                              # %for.inc121
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_25
.LBB31_35:                              # %for.end123
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_36:                              # %for.cond124
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB31_36 Depth=2
	movl	$0, -4(%rbp)
.LBB31_38:                              # %for.cond127
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB31_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_42
.LBB31_41:                              # %if.else146
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_42:                              # %if.end161
                                        #   in Loop: Header=BB31_38 Depth=3
	jmp	.LBB31_43
.LBB31_43:                              # %for.inc162
                                        #   in Loop: Header=BB31_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_38
.LBB31_44:                              # %for.end164
                                        #   in Loop: Header=BB31_36 Depth=2
	jmp	.LBB31_45
.LBB31_45:                              # %for.inc165
                                        #   in Loop: Header=BB31_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_36
.LBB31_46:                              # %for.end167
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_47:                              # %for.cond168
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_51
.LBB31_50:                              # %if.else184
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_51:                              # %if.end196
                                        #   in Loop: Header=BB31_47 Depth=2
	jmp	.LBB31_52
.LBB31_52:                              # %for.inc197
                                        #   in Loop: Header=BB31_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_47
.LBB31_53:                              # %for.end199
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_54:                              # %for.cond200
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_58
.LBB31_57:                              # %if.else216
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_58:                              # %if.end228
                                        #   in Loop: Header=BB31_54 Depth=2
	jmp	.LBB31_59
.LBB31_59:                              # %for.inc229
                                        #   in Loop: Header=BB31_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_54
.LBB31_60:                              # %for.end231
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_61:                              # %for.cond232
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB31_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_65
.LBB31_64:                              # %if.else248
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_65:                              # %if.end260
                                        #   in Loop: Header=BB31_61 Depth=2
	jmp	.LBB31_66
.LBB31_66:                              # %for.inc261
                                        #   in Loop: Header=BB31_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_61
.LBB31_67:                              # %for.end263
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_68:                              # %for.cond264
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB31_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_72
.LBB31_71:                              # %if.else280
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_72:                              # %if.end292
                                        #   in Loop: Header=BB31_68 Depth=2
	jmp	.LBB31_73
.LBB31_73:                              # %for.inc293
                                        #   in Loop: Header=BB31_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_68
.LBB31_74:                              # %for.end295
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_75:                              # %for.cond296
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_79
.LBB31_78:                              # %if.else312
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_79:                              # %if.end324
                                        #   in Loop: Header=BB31_75 Depth=2
	jmp	.LBB31_80
.LBB31_80:                              # %for.inc325
                                        #   in Loop: Header=BB31_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_75
.LBB31_81:                              # %for.end327
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_82:                              # %for.cond328
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB31_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB31_82 Depth=2
	movl	$0, -4(%rbp)
.LBB31_84:                              # %for.cond331
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB31_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_88
.LBB31_87:                              # %if.else350
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_88:                              # %if.end365
                                        #   in Loop: Header=BB31_84 Depth=3
	jmp	.LBB31_89
.LBB31_89:                              # %for.inc366
                                        #   in Loop: Header=BB31_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_84
.LBB31_90:                              # %for.end368
                                        #   in Loop: Header=BB31_82 Depth=2
	jmp	.LBB31_91
.LBB31_91:                              # %for.inc369
                                        #   in Loop: Header=BB31_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_82
.LBB31_92:                              # %for.end371
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_93:                              # %for.cond372
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB31_93 Depth=2
	movl	$0, -4(%rbp)
.LBB31_95:                              # %for.cond375
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB31_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_99
.LBB31_98:                              # %if.else394
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_99:                              # %if.end409
                                        #   in Loop: Header=BB31_95 Depth=3
	jmp	.LBB31_100
.LBB31_100:                             # %for.inc410
                                        #   in Loop: Header=BB31_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_95
.LBB31_101:                             # %for.end412
                                        #   in Loop: Header=BB31_93 Depth=2
	jmp	.LBB31_102
.LBB31_102:                             # %for.inc413
                                        #   in Loop: Header=BB31_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_93
.LBB31_103:                             # %for.end415
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_104:                             # %for.cond416
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB31_104 Depth=2
	movl	$0, -4(%rbp)
.LBB31_106:                             # %for.cond419
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_110
.LBB31_109:                             # %if.else438
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_110:                             # %if.end453
                                        #   in Loop: Header=BB31_106 Depth=3
	jmp	.LBB31_111
.LBB31_111:                             # %for.inc454
                                        #   in Loop: Header=BB31_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_106
.LBB31_112:                             # %for.end456
                                        #   in Loop: Header=BB31_104 Depth=2
	jmp	.LBB31_113
.LBB31_113:                             # %for.inc457
                                        #   in Loop: Header=BB31_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_104
.LBB31_114:                             # %for.end459
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_115:                             # %for.cond460
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB31_115 Depth=2
	movl	$0, -4(%rbp)
.LBB31_117:                             # %for.cond463
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_121
.LBB31_120:                             # %if.else482
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_121:                             # %if.end497
                                        #   in Loop: Header=BB31_117 Depth=3
	jmp	.LBB31_122
.LBB31_122:                             # %for.inc498
                                        #   in Loop: Header=BB31_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_117
.LBB31_123:                             # %for.end500
                                        #   in Loop: Header=BB31_115 Depth=2
	jmp	.LBB31_124
.LBB31_124:                             # %for.inc501
                                        #   in Loop: Header=BB31_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_115
.LBB31_125:                             # %for.end503
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_126:                             # %for.cond504
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB31_126 Depth=2
	movl	$0, -4(%rbp)
.LBB31_128:                             # %for.cond507
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB31_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_132
.LBB31_131:                             # %if.else526
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_132:                             # %if.end541
                                        #   in Loop: Header=BB31_128 Depth=3
	jmp	.LBB31_133
.LBB31_133:                             # %for.inc542
                                        #   in Loop: Header=BB31_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_128
.LBB31_134:                             # %for.end544
                                        #   in Loop: Header=BB31_126 Depth=2
	jmp	.LBB31_135
.LBB31_135:                             # %for.inc545
                                        #   in Loop: Header=BB31_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_126
.LBB31_136:                             # %for.end547
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_137:                             # %for.cond548
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB31_137 Depth=2
	movl	$0, -4(%rbp)
.LBB31_139:                             # %for.cond551
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB31_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_143
.LBB31_142:                             # %if.else570
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_143:                             # %if.end585
                                        #   in Loop: Header=BB31_139 Depth=3
	jmp	.LBB31_144
.LBB31_144:                             # %for.inc586
                                        #   in Loop: Header=BB31_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_139
.LBB31_145:                             # %for.end588
                                        #   in Loop: Header=BB31_137 Depth=2
	jmp	.LBB31_146
.LBB31_146:                             # %for.inc589
                                        #   in Loop: Header=BB31_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_137
.LBB31_147:                             # %for.end591
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_148:                             # %for.cond592
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB31_148 Depth=2
	movl	$0, -4(%rbp)
.LBB31_150:                             # %for.cond595
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_154
.LBB31_153:                             # %if.else614
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_154:                             # %if.end629
                                        #   in Loop: Header=BB31_150 Depth=3
	jmp	.LBB31_155
.LBB31_155:                             # %for.inc630
                                        #   in Loop: Header=BB31_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_150
.LBB31_156:                             # %for.end632
                                        #   in Loop: Header=BB31_148 Depth=2
	jmp	.LBB31_157
.LBB31_157:                             # %for.inc633
                                        #   in Loop: Header=BB31_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_148
.LBB31_158:                             # %for.end635
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_159:                             # %for.cond636
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB31_159 Depth=2
	movl	$0, -4(%rbp)
.LBB31_161:                             # %for.cond639
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_165
.LBB31_164:                             # %if.else658
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_165:                             # %if.end673
                                        #   in Loop: Header=BB31_161 Depth=3
	jmp	.LBB31_166
.LBB31_166:                             # %for.inc674
                                        #   in Loop: Header=BB31_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_161
.LBB31_167:                             # %for.end676
                                        #   in Loop: Header=BB31_159 Depth=2
	jmp	.LBB31_168
.LBB31_168:                             # %for.inc677
                                        #   in Loop: Header=BB31_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_159
.LBB31_169:                             # %for.end679
                                        #   in Loop: Header=BB31_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB31_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB31_171:                             # %if.end682
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_172
.LBB31_172:                             # %for.inc683
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_1
.LBB31_173:                             # %for.end685
	cmpl	$597691336, -48(%rbp)   # imm = 0x23A00BC8
	jne	.LBB31_175
.LBB31_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_174
.Lfunc_end31:
	.size	GetCtxModelNumber.24, .Lfunc_end31-GetCtxModelNumber.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.25
.LCPI32_0:
	.quad	4607182418800017408     # double 1
.LCPI32_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI32_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI32_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.25
	.p2align	4, 0x90
	.type	XRate.25,@function
XRate.25:                               # @XRate.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$69452462, -32(%rbp)    # imm = 0x423C2AE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB32_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB32_3
.LBB32_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB32_3:                               # %cond.end
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI32_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI32_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB32_6
.LBB32_5:                               # %cond.false6
	vmovsd	.LCPI32_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI32_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI32_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB32_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB32_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB32_9
.LBB32_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB32_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB32_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB32_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB32_13
.LBB32_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB32_13:                              # %cond.end26
	jmp	.LBB32_15
.LBB32_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB32_15
.LBB32_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB32_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB32_18
.LBB32_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB32_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$69452462, -32(%rbp)    # imm = 0x423C2AE
	jne	.LBB32_20
.LBB32_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB32_19
.Lfunc_end32:
	.size	XRate.25, .Lfunc_end32-XRate.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.26
.LCPI33_0:
	.quad	4607182418800017408     # double 1
.LCPI33_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI33_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI33_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.26
	.p2align	4, 0x90
	.type	XRate.26,@function
XRate.26:                               # @XRate.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$272356460, -36(%rbp)   # imm = 0x103BD46C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB33_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB33_3
.LBB33_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB33_3:                               # %cond.end
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI33_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI33_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI33_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB33_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB33_6
.LBB33_5:                               # %cond.false6
	vmovsd	.LCPI33_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI33_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI33_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB33_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB33_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB33_9
.LBB33_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB33_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB33_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB33_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB33_13
.LBB33_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB33_13:                              # %cond.end26
	jmp	.LBB33_15
.LBB33_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB33_15
.LBB33_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB33_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB33_18
.LBB33_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB33_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$272356460, -36(%rbp)   # imm = 0x103BD46C
	jne	.LBB33_20
.LBB33_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB33_19
.Lfunc_end33:
	.size	XRate.26, .Lfunc_end33-XRate.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.27
.LCPI34_0:
	.quad	4611686018427387904     # double 2
.LCPI34_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.27
	.p2align	4, 0x90
	.type	create_context_memory.27,@function
create_context_memory.27:               # @create_context_memory.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1913295532, -20(%rbp)  # imm = 0x720A92AC
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB34_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB34_3
.LBB34_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB34_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB34_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB34_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB34_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB34_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB34_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB34_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB34_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB34_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB34_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB34_11:                              # %if.end10
                                        #   in Loop: Header=BB34_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB34_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB34_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB34_13:                              # %if.end16
                                        #   in Loop: Header=BB34_8 Depth=1
	movl	$0, -8(%rbp)
.LBB34_14:                              # %for.cond17
                                        #   Parent Loop BB34_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB34_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB34_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB34_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB34_17:                              # %if.end28
                                        #   in Loop: Header=BB34_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB34_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB34_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB34_19:                              # %if.end39
                                        #   in Loop: Header=BB34_14 Depth=2
	jmp	.LBB34_20
.LBB34_20:                              # %for.inc
                                        #   in Loop: Header=BB34_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_14
.LBB34_21:                              # %for.end
                                        #   in Loop: Header=BB34_8 Depth=1
	jmp	.LBB34_22
.LBB34_22:                              # %for.inc40
                                        #   in Loop: Header=BB34_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_8
.LBB34_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB34_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_26 Depth 2
                                        #       Child Loop BB34_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB34_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB34_24 Depth=1
	movl	$0, -8(%rbp)
.LBB34_26:                              # %for.cond47
                                        #   Parent Loop BB34_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB34_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB34_26 Depth=2
	movl	$0, -12(%rbp)
.LBB34_28:                              # %for.cond51
                                        #   Parent Loop BB34_24 Depth=1
                                        #     Parent Loop BB34_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB34_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB34_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_28
.LBB34_31:                              # %for.end63
                                        #   in Loop: Header=BB34_26 Depth=2
	jmp	.LBB34_32
.LBB34_32:                              # %for.inc64
                                        #   in Loop: Header=BB34_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_26
.LBB34_33:                              # %for.end66
                                        #   in Loop: Header=BB34_24 Depth=1
	jmp	.LBB34_34
.LBB34_34:                              # %for.inc67
                                        #   in Loop: Header=BB34_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_24
.LBB34_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB34_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB34_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB34_36 Depth=1
	vmovsd	.LCPI34_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB34_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_36
.LBB34_39:                              # %for.end98
	cmpl	$1913295532, -20(%rbp)  # imm = 0x720A92AC
	jne	.LBB34_41
.LBB34_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_40
.Lfunc_end34:
	.size	create_context_memory.27, .Lfunc_end34-create_context_memory.27
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.28 # -- Begin function update_field_frame_contexts.28
	.p2align	4, 0x90
	.type	update_field_frame_contexts.28,@function
update_field_frame_contexts.28:         # @update_field_frame_contexts.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1659087684, -16(%rbp)  # imm = 0x62E3AB44
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB35_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB35_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	$0, -8(%rbp)
.LBB35_4:                               # %for.cond1
                                        #   Parent Loop BB35_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB35_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB35_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB35_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_4
.LBB35_7:                               # %for.end
                                        #   in Loop: Header=BB35_2 Depth=1
	jmp	.LBB35_8
.LBB35_8:                               # %for.inc23
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_2
.LBB35_9:                               # %for.end25
	jmp	.LBB35_19
.LBB35_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB35_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB35_11 Depth=1
	movl	$0, -8(%rbp)
.LBB35_13:                              # %for.cond29
                                        #   Parent Loop BB35_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB35_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB35_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_13
.LBB35_16:                              # %for.end56
                                        #   in Loop: Header=BB35_11 Depth=1
	jmp	.LBB35_17
.LBB35_17:                              # %for.inc57
                                        #   in Loop: Header=BB35_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_11
.LBB35_18:                              # %for.end59
	jmp	.LBB35_19
.LBB35_19:                              # %if.end
	cmpl	$1659087684, -16(%rbp)  # imm = 0x62E3AB44
	jne	.LBB35_21
.LBB35_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_20
.Lfunc_end35:
	.size	update_field_frame_contexts.28, .Lfunc_end35-update_field_frame_contexts.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.29
.LCPI36_0:
	.quad	4611686018427387904     # double 2
.LCPI36_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.29
	.p2align	4, 0x90
	.type	create_context_memory.29,@function
create_context_memory.29:               # @create_context_memory.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$828150697, -20(%rbp)   # imm = 0x315C93A9
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB36_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB36_3
.LBB36_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB36_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB36_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB36_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB36_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB36_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB36_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB36_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB36_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB36_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB36_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB36_11:                              # %if.end10
                                        #   in Loop: Header=BB36_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB36_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB36_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB36_13:                              # %if.end16
                                        #   in Loop: Header=BB36_8 Depth=1
	movl	$0, -8(%rbp)
.LBB36_14:                              # %for.cond17
                                        #   Parent Loop BB36_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB36_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB36_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB36_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB36_17:                              # %if.end28
                                        #   in Loop: Header=BB36_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB36_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB36_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB36_19:                              # %if.end39
                                        #   in Loop: Header=BB36_14 Depth=2
	jmp	.LBB36_20
.LBB36_20:                              # %for.inc
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_14
.LBB36_21:                              # %for.end
                                        #   in Loop: Header=BB36_8 Depth=1
	jmp	.LBB36_22
.LBB36_22:                              # %for.inc40
                                        #   in Loop: Header=BB36_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_8
.LBB36_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB36_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_26 Depth 2
                                        #       Child Loop BB36_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB36_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB36_24 Depth=1
	movl	$0, -8(%rbp)
.LBB36_26:                              # %for.cond47
                                        #   Parent Loop BB36_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB36_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB36_26 Depth=2
	movl	$0, -12(%rbp)
.LBB36_28:                              # %for.cond51
                                        #   Parent Loop BB36_24 Depth=1
                                        #     Parent Loop BB36_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB36_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB36_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB36_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_28
.LBB36_31:                              # %for.end63
                                        #   in Loop: Header=BB36_26 Depth=2
	jmp	.LBB36_32
.LBB36_32:                              # %for.inc64
                                        #   in Loop: Header=BB36_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_26
.LBB36_33:                              # %for.end66
                                        #   in Loop: Header=BB36_24 Depth=1
	jmp	.LBB36_34
.LBB36_34:                              # %for.inc67
                                        #   in Loop: Header=BB36_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_24
.LBB36_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB36_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB36_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB36_36 Depth=1
	vmovsd	.LCPI36_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB36_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_36
.LBB36_39:                              # %for.end98
	cmpl	$828150697, -20(%rbp)   # imm = 0x315C93A9
	jne	.LBB36_41
.LBB36_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_40
.Lfunc_end36:
	.size	create_context_memory.29, .Lfunc_end36-create_context_memory.29
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.30
.LCPI37_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.30
	.p2align	4, 0x90
	.type	GetCtxModelNumber.30,@function
GetCtxModelNumber.30:                   # @GetCtxModelNumber.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$333949417, -48(%rbp)   # imm = 0x13E7A9E9
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_3 Depth 2
                                        #       Child Loop BB37_5 Depth 3
                                        #     Child Loop BB37_14 Depth 2
                                        #       Child Loop BB37_16 Depth 3
                                        #     Child Loop BB37_25 Depth 2
                                        #       Child Loop BB37_27 Depth 3
                                        #     Child Loop BB37_36 Depth 2
                                        #       Child Loop BB37_38 Depth 3
                                        #     Child Loop BB37_47 Depth 2
                                        #     Child Loop BB37_54 Depth 2
                                        #     Child Loop BB37_61 Depth 2
                                        #     Child Loop BB37_68 Depth 2
                                        #     Child Loop BB37_75 Depth 2
                                        #     Child Loop BB37_82 Depth 2
                                        #       Child Loop BB37_84 Depth 3
                                        #     Child Loop BB37_93 Depth 2
                                        #       Child Loop BB37_95 Depth 3
                                        #     Child Loop BB37_104 Depth 2
                                        #       Child Loop BB37_106 Depth 3
                                        #     Child Loop BB37_115 Depth 2
                                        #       Child Loop BB37_117 Depth 3
                                        #     Child Loop BB37_126 Depth 2
                                        #       Child Loop BB37_128 Depth 3
                                        #     Child Loop BB37_137 Depth 2
                                        #       Child Loop BB37_139 Depth 3
                                        #     Child Loop BB37_148 Depth 2
                                        #       Child Loop BB37_150 Depth 3
                                        #     Child Loop BB37_159 Depth 2
                                        #       Child Loop BB37_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB37_3:                               # %for.cond2
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB37_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	$0, -4(%rbp)
.LBB37_5:                               # %for.cond5
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB37_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB37_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB37_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_9
.LBB37_8:                               # %if.else
                                        #   in Loop: Header=BB37_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_9:                               # %if.end
                                        #   in Loop: Header=BB37_5 Depth=3
	jmp	.LBB37_10
.LBB37_10:                              # %for.inc
                                        #   in Loop: Header=BB37_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_5
.LBB37_11:                              # %for.end
                                        #   in Loop: Header=BB37_3 Depth=2
	jmp	.LBB37_12
.LBB37_12:                              # %for.inc33
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_3
.LBB37_13:                              # %for.end35
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_14:                              # %for.cond36
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB37_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB37_14 Depth=2
	movl	$0, -4(%rbp)
.LBB37_16:                              # %for.cond39
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB37_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB37_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB37_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_20
.LBB37_19:                              # %if.else58
                                        #   in Loop: Header=BB37_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_20:                              # %if.end73
                                        #   in Loop: Header=BB37_16 Depth=3
	jmp	.LBB37_21
.LBB37_21:                              # %for.inc74
                                        #   in Loop: Header=BB37_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_16
.LBB37_22:                              # %for.end76
                                        #   in Loop: Header=BB37_14 Depth=2
	jmp	.LBB37_23
.LBB37_23:                              # %for.inc77
                                        #   in Loop: Header=BB37_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_14
.LBB37_24:                              # %for.end79
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_25:                              # %for.cond80
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB37_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB37_25 Depth=2
	movl	$0, -4(%rbp)
.LBB37_27:                              # %for.cond83
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB37_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB37_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB37_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_31
.LBB37_30:                              # %if.else102
                                        #   in Loop: Header=BB37_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_31:                              # %if.end117
                                        #   in Loop: Header=BB37_27 Depth=3
	jmp	.LBB37_32
.LBB37_32:                              # %for.inc118
                                        #   in Loop: Header=BB37_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_27
.LBB37_33:                              # %for.end120
                                        #   in Loop: Header=BB37_25 Depth=2
	jmp	.LBB37_34
.LBB37_34:                              # %for.inc121
                                        #   in Loop: Header=BB37_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_25
.LBB37_35:                              # %for.end123
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_36:                              # %for.cond124
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB37_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB37_36 Depth=2
	movl	$0, -4(%rbp)
.LBB37_38:                              # %for.cond127
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB37_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB37_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB37_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_42
.LBB37_41:                              # %if.else146
                                        #   in Loop: Header=BB37_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_42:                              # %if.end161
                                        #   in Loop: Header=BB37_38 Depth=3
	jmp	.LBB37_43
.LBB37_43:                              # %for.inc162
                                        #   in Loop: Header=BB37_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_38
.LBB37_44:                              # %for.end164
                                        #   in Loop: Header=BB37_36 Depth=2
	jmp	.LBB37_45
.LBB37_45:                              # %for.inc165
                                        #   in Loop: Header=BB37_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_36
.LBB37_46:                              # %for.end167
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -4(%rbp)
.LBB37_47:                              # %for.cond168
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB37_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB37_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_51
.LBB37_50:                              # %if.else184
                                        #   in Loop: Header=BB37_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_51:                              # %if.end196
                                        #   in Loop: Header=BB37_47 Depth=2
	jmp	.LBB37_52
.LBB37_52:                              # %for.inc197
                                        #   in Loop: Header=BB37_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_47
.LBB37_53:                              # %for.end199
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -4(%rbp)
.LBB37_54:                              # %for.cond200
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB37_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB37_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_58
.LBB37_57:                              # %if.else216
                                        #   in Loop: Header=BB37_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_58:                              # %if.end228
                                        #   in Loop: Header=BB37_54 Depth=2
	jmp	.LBB37_59
.LBB37_59:                              # %for.inc229
                                        #   in Loop: Header=BB37_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_54
.LBB37_60:                              # %for.end231
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -4(%rbp)
.LBB37_61:                              # %for.cond232
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB37_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB37_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB37_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_65
.LBB37_64:                              # %if.else248
                                        #   in Loop: Header=BB37_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_65:                              # %if.end260
                                        #   in Loop: Header=BB37_61 Depth=2
	jmp	.LBB37_66
.LBB37_66:                              # %for.inc261
                                        #   in Loop: Header=BB37_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_61
.LBB37_67:                              # %for.end263
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -4(%rbp)
.LBB37_68:                              # %for.cond264
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB37_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB37_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB37_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_72
.LBB37_71:                              # %if.else280
                                        #   in Loop: Header=BB37_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_72:                              # %if.end292
                                        #   in Loop: Header=BB37_68 Depth=2
	jmp	.LBB37_73
.LBB37_73:                              # %for.inc293
                                        #   in Loop: Header=BB37_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_68
.LBB37_74:                              # %for.end295
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -4(%rbp)
.LBB37_75:                              # %for.cond296
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB37_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB37_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_79
.LBB37_78:                              # %if.else312
                                        #   in Loop: Header=BB37_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_79:                              # %if.end324
                                        #   in Loop: Header=BB37_75 Depth=2
	jmp	.LBB37_80
.LBB37_80:                              # %for.inc325
                                        #   in Loop: Header=BB37_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_75
.LBB37_81:                              # %for.end327
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_82:                              # %for.cond328
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB37_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB37_82 Depth=2
	movl	$0, -4(%rbp)
.LBB37_84:                              # %for.cond331
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB37_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB37_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB37_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_88
.LBB37_87:                              # %if.else350
                                        #   in Loop: Header=BB37_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_88:                              # %if.end365
                                        #   in Loop: Header=BB37_84 Depth=3
	jmp	.LBB37_89
.LBB37_89:                              # %for.inc366
                                        #   in Loop: Header=BB37_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_84
.LBB37_90:                              # %for.end368
                                        #   in Loop: Header=BB37_82 Depth=2
	jmp	.LBB37_91
.LBB37_91:                              # %for.inc369
                                        #   in Loop: Header=BB37_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_82
.LBB37_92:                              # %for.end371
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_93:                              # %for.cond372
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB37_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB37_93 Depth=2
	movl	$0, -4(%rbp)
.LBB37_95:                              # %for.cond375
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB37_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB37_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB37_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_99
.LBB37_98:                              # %if.else394
                                        #   in Loop: Header=BB37_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_99:                              # %if.end409
                                        #   in Loop: Header=BB37_95 Depth=3
	jmp	.LBB37_100
.LBB37_100:                             # %for.inc410
                                        #   in Loop: Header=BB37_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_95
.LBB37_101:                             # %for.end412
                                        #   in Loop: Header=BB37_93 Depth=2
	jmp	.LBB37_102
.LBB37_102:                             # %for.inc413
                                        #   in Loop: Header=BB37_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_93
.LBB37_103:                             # %for.end415
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_104:                             # %for.cond416
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB37_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB37_104 Depth=2
	movl	$0, -4(%rbp)
.LBB37_106:                             # %for.cond419
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB37_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB37_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB37_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_110
.LBB37_109:                             # %if.else438
                                        #   in Loop: Header=BB37_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_110:                             # %if.end453
                                        #   in Loop: Header=BB37_106 Depth=3
	jmp	.LBB37_111
.LBB37_111:                             # %for.inc454
                                        #   in Loop: Header=BB37_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_106
.LBB37_112:                             # %for.end456
                                        #   in Loop: Header=BB37_104 Depth=2
	jmp	.LBB37_113
.LBB37_113:                             # %for.inc457
                                        #   in Loop: Header=BB37_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_104
.LBB37_114:                             # %for.end459
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_115:                             # %for.cond460
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB37_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB37_115 Depth=2
	movl	$0, -4(%rbp)
.LBB37_117:                             # %for.cond463
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB37_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB37_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB37_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_121
.LBB37_120:                             # %if.else482
                                        #   in Loop: Header=BB37_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_121:                             # %if.end497
                                        #   in Loop: Header=BB37_117 Depth=3
	jmp	.LBB37_122
.LBB37_122:                             # %for.inc498
                                        #   in Loop: Header=BB37_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_117
.LBB37_123:                             # %for.end500
                                        #   in Loop: Header=BB37_115 Depth=2
	jmp	.LBB37_124
.LBB37_124:                             # %for.inc501
                                        #   in Loop: Header=BB37_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_115
.LBB37_125:                             # %for.end503
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_126:                             # %for.cond504
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB37_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB37_126 Depth=2
	movl	$0, -4(%rbp)
.LBB37_128:                             # %for.cond507
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB37_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB37_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB37_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_132
.LBB37_131:                             # %if.else526
                                        #   in Loop: Header=BB37_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_132:                             # %if.end541
                                        #   in Loop: Header=BB37_128 Depth=3
	jmp	.LBB37_133
.LBB37_133:                             # %for.inc542
                                        #   in Loop: Header=BB37_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_128
.LBB37_134:                             # %for.end544
                                        #   in Loop: Header=BB37_126 Depth=2
	jmp	.LBB37_135
.LBB37_135:                             # %for.inc545
                                        #   in Loop: Header=BB37_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_126
.LBB37_136:                             # %for.end547
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_137:                             # %for.cond548
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB37_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB37_137 Depth=2
	movl	$0, -4(%rbp)
.LBB37_139:                             # %for.cond551
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB37_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB37_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB37_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_143
.LBB37_142:                             # %if.else570
                                        #   in Loop: Header=BB37_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_143:                             # %if.end585
                                        #   in Loop: Header=BB37_139 Depth=3
	jmp	.LBB37_144
.LBB37_144:                             # %for.inc586
                                        #   in Loop: Header=BB37_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_139
.LBB37_145:                             # %for.end588
                                        #   in Loop: Header=BB37_137 Depth=2
	jmp	.LBB37_146
.LBB37_146:                             # %for.inc589
                                        #   in Loop: Header=BB37_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_137
.LBB37_147:                             # %for.end591
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_148:                             # %for.cond592
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB37_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB37_148 Depth=2
	movl	$0, -4(%rbp)
.LBB37_150:                             # %for.cond595
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB37_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB37_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB37_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_154
.LBB37_153:                             # %if.else614
                                        #   in Loop: Header=BB37_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_154:                             # %if.end629
                                        #   in Loop: Header=BB37_150 Depth=3
	jmp	.LBB37_155
.LBB37_155:                             # %for.inc630
                                        #   in Loop: Header=BB37_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_150
.LBB37_156:                             # %for.end632
                                        #   in Loop: Header=BB37_148 Depth=2
	jmp	.LBB37_157
.LBB37_157:                             # %for.inc633
                                        #   in Loop: Header=BB37_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_148
.LBB37_158:                             # %for.end635
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_159:                             # %for.cond636
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB37_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB37_159 Depth=2
	movl	$0, -4(%rbp)
.LBB37_161:                             # %for.cond639
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB37_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB37_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB37_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB37_165
.LBB37_164:                             # %if.else658
                                        #   in Loop: Header=BB37_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB37_165:                             # %if.end673
                                        #   in Loop: Header=BB37_161 Depth=3
	jmp	.LBB37_166
.LBB37_166:                             # %for.inc674
                                        #   in Loop: Header=BB37_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_161
.LBB37_167:                             # %for.end676
                                        #   in Loop: Header=BB37_159 Depth=2
	jmp	.LBB37_168
.LBB37_168:                             # %for.inc677
                                        #   in Loop: Header=BB37_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_159
.LBB37_169:                             # %for.end679
                                        #   in Loop: Header=BB37_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB37_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB37_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB37_171:                             # %if.end682
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_172
.LBB37_172:                             # %for.inc683
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_1
.LBB37_173:                             # %for.end685
	cmpl	$333949417, -48(%rbp)   # imm = 0x13E7A9E9
	jne	.LBB37_175
.LBB37_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_174
.Lfunc_end37:
	.size	GetCtxModelNumber.30, .Lfunc_end37-GetCtxModelNumber.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.31
.LCPI38_0:
	.quad	4607182418800017408     # double 1
.LCPI38_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI38_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI38_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.31
	.p2align	4, 0x90
	.type	XRate.31,@function
XRate.31:                               # @XRate.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$900256216, -32(%rbp)   # imm = 0x35A8D1D8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB38_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB38_3
.LBB38_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB38_3:                               # %cond.end
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI38_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI38_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI38_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB38_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB38_6
.LBB38_5:                               # %cond.false6
	vmovsd	.LCPI38_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI38_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI38_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB38_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB38_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB38_9
.LBB38_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB38_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB38_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB38_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB38_13
.LBB38_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB38_13:                              # %cond.end26
	jmp	.LBB38_15
.LBB38_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB38_15
.LBB38_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB38_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB38_18
.LBB38_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB38_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$900256216, -32(%rbp)   # imm = 0x35A8D1D8
	jne	.LBB38_20
.LBB38_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB38_19
.Lfunc_end38:
	.size	XRate.31, .Lfunc_end38-XRate.31
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.32        # -- Begin function init_contexts.32
	.p2align	4, 0x90
	.type	init_contexts.32,@function
init_contexts.32:                       # @init_contexts.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$912279990, -28(%rbp)   # imm = 0x366049B6
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB39_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_3:                               # %for.cond2
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB39_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_7
.LBB39_6:                               # %if.else
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_7:                               # %if.end
                                        #   in Loop: Header=BB39_3 Depth=2
	jmp	.LBB39_8
.LBB39_8:                               # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_3
.LBB39_9:                               # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_10
.LBB39_10:                              # %for.inc28
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_1
.LBB39_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB39_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB39_12 Depth=1
	movl	$0, -4(%rbp)
.LBB39_14:                              # %for.cond34
                                        #   Parent Loop BB39_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB39_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_18
.LBB39_17:                              # %if.else52
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_18:                              # %if.end66
                                        #   in Loop: Header=BB39_14 Depth=2
	jmp	.LBB39_19
.LBB39_19:                              # %for.inc67
                                        #   in Loop: Header=BB39_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_14
.LBB39_20:                              # %for.end69
                                        #   in Loop: Header=BB39_12 Depth=1
	jmp	.LBB39_21
.LBB39_21:                              # %for.inc70
                                        #   in Loop: Header=BB39_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_12
.LBB39_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB39_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB39_23 Depth=1
	movl	$0, -4(%rbp)
.LBB39_25:                              # %for.cond76
                                        #   Parent Loop BB39_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB39_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_29
.LBB39_28:                              # %if.else94
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_29:                              # %if.end108
                                        #   in Loop: Header=BB39_25 Depth=2
	jmp	.LBB39_30
.LBB39_30:                              # %for.inc109
                                        #   in Loop: Header=BB39_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_25
.LBB39_31:                              # %for.end111
                                        #   in Loop: Header=BB39_23 Depth=1
	jmp	.LBB39_32
.LBB39_32:                              # %for.inc112
                                        #   in Loop: Header=BB39_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_23
.LBB39_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB39_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB39_34 Depth=1
	movl	$0, -4(%rbp)
.LBB39_36:                              # %for.cond118
                                        #   Parent Loop BB39_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB39_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_40
.LBB39_39:                              # %if.else136
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_40:                              # %if.end150
                                        #   in Loop: Header=BB39_36 Depth=2
	jmp	.LBB39_41
.LBB39_41:                              # %for.inc151
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_36
.LBB39_42:                              # %for.end153
                                        #   in Loop: Header=BB39_34 Depth=1
	jmp	.LBB39_43
.LBB39_43:                              # %for.inc154
                                        #   in Loop: Header=BB39_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_34
.LBB39_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB39_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_49
.LBB39_48:                              # %if.else172
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_49:                              # %if.end183
                                        #   in Loop: Header=BB39_45 Depth=1
	jmp	.LBB39_50
.LBB39_50:                              # %for.inc184
                                        #   in Loop: Header=BB39_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_45
.LBB39_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB39_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_56
.LBB39_55:                              # %if.else202
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_56:                              # %if.end213
                                        #   in Loop: Header=BB39_52 Depth=1
	jmp	.LBB39_57
.LBB39_57:                              # %for.inc214
                                        #   in Loop: Header=BB39_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_52
.LBB39_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB39_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB39_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_63
.LBB39_62:                              # %if.else232
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_63:                              # %if.end243
                                        #   in Loop: Header=BB39_59 Depth=1
	jmp	.LBB39_64
.LBB39_64:                              # %for.inc244
                                        #   in Loop: Header=BB39_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_59
.LBB39_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB39_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB39_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_70
.LBB39_69:                              # %if.else262
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_70:                              # %if.end273
                                        #   in Loop: Header=BB39_66 Depth=1
	jmp	.LBB39_71
.LBB39_71:                              # %for.inc274
                                        #   in Loop: Header=BB39_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_66
.LBB39_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB39_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_77
.LBB39_76:                              # %if.else292
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_77:                              # %if.end303
                                        #   in Loop: Header=BB39_73 Depth=1
	jmp	.LBB39_78
.LBB39_78:                              # %for.inc304
                                        #   in Loop: Header=BB39_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_73
.LBB39_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB39_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB39_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB39_80 Depth=1
	movl	$0, -4(%rbp)
.LBB39_82:                              # %for.cond310
                                        #   Parent Loop BB39_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_86
.LBB39_85:                              # %if.else328
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_86:                              # %if.end342
                                        #   in Loop: Header=BB39_82 Depth=2
	jmp	.LBB39_87
.LBB39_87:                              # %for.inc343
                                        #   in Loop: Header=BB39_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_82
.LBB39_88:                              # %for.end345
                                        #   in Loop: Header=BB39_80 Depth=1
	jmp	.LBB39_89
.LBB39_89:                              # %for.inc346
                                        #   in Loop: Header=BB39_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_80
.LBB39_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB39_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB39_91 Depth=1
	movl	$0, -4(%rbp)
.LBB39_93:                              # %for.cond352
                                        #   Parent Loop BB39_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_97
.LBB39_96:                              # %if.else370
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_97:                              # %if.end384
                                        #   in Loop: Header=BB39_93 Depth=2
	jmp	.LBB39_98
.LBB39_98:                              # %for.inc385
                                        #   in Loop: Header=BB39_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_93
.LBB39_99:                              # %for.end387
                                        #   in Loop: Header=BB39_91 Depth=1
	jmp	.LBB39_100
.LBB39_100:                             # %for.inc388
                                        #   in Loop: Header=BB39_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_91
.LBB39_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB39_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB39_102 Depth=1
	movl	$0, -4(%rbp)
.LBB39_104:                             # %for.cond394
                                        #   Parent Loop BB39_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_108
.LBB39_107:                             # %if.else412
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_108:                             # %if.end426
                                        #   in Loop: Header=BB39_104 Depth=2
	jmp	.LBB39_109
.LBB39_109:                             # %for.inc427
                                        #   in Loop: Header=BB39_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_104
.LBB39_110:                             # %for.end429
                                        #   in Loop: Header=BB39_102 Depth=1
	jmp	.LBB39_111
.LBB39_111:                             # %for.inc430
                                        #   in Loop: Header=BB39_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_102
.LBB39_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB39_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB39_113 Depth=1
	movl	$0, -4(%rbp)
.LBB39_115:                             # %for.cond436
                                        #   Parent Loop BB39_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_119
.LBB39_118:                             # %if.else454
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_119:                             # %if.end468
                                        #   in Loop: Header=BB39_115 Depth=2
	jmp	.LBB39_120
.LBB39_120:                             # %for.inc469
                                        #   in Loop: Header=BB39_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_115
.LBB39_121:                             # %for.end471
                                        #   in Loop: Header=BB39_113 Depth=1
	jmp	.LBB39_122
.LBB39_122:                             # %for.inc472
                                        #   in Loop: Header=BB39_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_113
.LBB39_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB39_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB39_124 Depth=1
	movl	$0, -4(%rbp)
.LBB39_126:                             # %for.cond478
                                        #   Parent Loop BB39_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB39_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_130
.LBB39_129:                             # %if.else496
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_130:                             # %if.end510
                                        #   in Loop: Header=BB39_126 Depth=2
	jmp	.LBB39_131
.LBB39_131:                             # %for.inc511
                                        #   in Loop: Header=BB39_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_126
.LBB39_132:                             # %for.end513
                                        #   in Loop: Header=BB39_124 Depth=1
	jmp	.LBB39_133
.LBB39_133:                             # %for.inc514
                                        #   in Loop: Header=BB39_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_124
.LBB39_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB39_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB39_135 Depth=1
	movl	$0, -4(%rbp)
.LBB39_137:                             # %for.cond520
                                        #   Parent Loop BB39_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB39_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_141
.LBB39_140:                             # %if.else538
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_141:                             # %if.end552
                                        #   in Loop: Header=BB39_137 Depth=2
	jmp	.LBB39_142
.LBB39_142:                             # %for.inc553
                                        #   in Loop: Header=BB39_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_137
.LBB39_143:                             # %for.end555
                                        #   in Loop: Header=BB39_135 Depth=1
	jmp	.LBB39_144
.LBB39_144:                             # %for.inc556
                                        #   in Loop: Header=BB39_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_135
.LBB39_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB39_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB39_146 Depth=1
	movl	$0, -4(%rbp)
.LBB39_148:                             # %for.cond562
                                        #   Parent Loop BB39_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_152
.LBB39_151:                             # %if.else580
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_152:                             # %if.end594
                                        #   in Loop: Header=BB39_148 Depth=2
	jmp	.LBB39_153
.LBB39_153:                             # %for.inc595
                                        #   in Loop: Header=BB39_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_148
.LBB39_154:                             # %for.end597
                                        #   in Loop: Header=BB39_146 Depth=1
	jmp	.LBB39_155
.LBB39_155:                             # %for.inc598
                                        #   in Loop: Header=BB39_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_146
.LBB39_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB39_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	$0, -4(%rbp)
.LBB39_159:                             # %for.cond604
                                        #   Parent Loop BB39_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_163
.LBB39_162:                             # %if.else622
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_163:                             # %if.end636
                                        #   in Loop: Header=BB39_159 Depth=2
	jmp	.LBB39_164
.LBB39_164:                             # %for.inc637
                                        #   in Loop: Header=BB39_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_159
.LBB39_165:                             # %for.end639
                                        #   in Loop: Header=BB39_157 Depth=1
	jmp	.LBB39_166
.LBB39_166:                             # %for.inc640
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_157
.LBB39_167:                             # %for.end642
	cmpl	$912279990, -28(%rbp)   # imm = 0x366049B6
	jne	.LBB39_169
.LBB39_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_168
.Lfunc_end39:
	.size	init_contexts.32, .Lfunc_end39-init_contexts.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.33
.LCPI40_0:
	.quad	4607182418800017408     # double 1
.LCPI40_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI40_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI40_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.33
	.p2align	4, 0x90
	.type	XRate.33,@function
XRate.33:                               # @XRate.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$755692170, -36(%rbp)   # imm = 0x2D0AF28A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB40_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB40_3
.LBB40_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB40_3:                               # %cond.end
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI40_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI40_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI40_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB40_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB40_6
.LBB40_5:                               # %cond.false6
	vmovsd	.LCPI40_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI40_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI40_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB40_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB40_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB40_9
.LBB40_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB40_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB40_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB40_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB40_13
.LBB40_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB40_13:                              # %cond.end26
	jmp	.LBB40_15
.LBB40_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB40_15
.LBB40_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB40_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB40_18
.LBB40_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB40_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$755692170, -36(%rbp)   # imm = 0x2D0AF28A
	jne	.LBB40_20
.LBB40_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB40_19
.Lfunc_end40:
	.size	XRate.33, .Lfunc_end40-XRate.33
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.34    # -- Begin function SetCtxModelNumber.34
	.p2align	4, 0x90
	.type	SetCtxModelNumber.34,@function
SetCtxModelNumber.34:                   # @SetCtxModelNumber.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1025262555, -16(%rbp)  # imm = 0x3D1C43DB
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB41_11
.LBB41_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB41_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB41_11
.LBB41_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB41_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB41_11
.LBB41_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB41_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB41_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB41_10
.LBB41_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB41_10:                              # %if.end38
	jmp	.LBB41_11
.LBB41_11:                              # %if.end39
	cmpl	$1025262555, -16(%rbp)  # imm = 0x3D1C43DB
	jne	.LBB41_13
.LBB41_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_12
.Lfunc_end41:
	.size	SetCtxModelNumber.34, .Lfunc_end41-SetCtxModelNumber.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.35
.LCPI42_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.35
	.p2align	4, 0x90
	.type	GetCtxModelNumber.35,@function
GetCtxModelNumber.35:                   # @GetCtxModelNumber.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1152131059, -44(%rbp)  # imm = 0x44AC1FF3
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_3 Depth 2
                                        #       Child Loop BB42_5 Depth 3
                                        #     Child Loop BB42_14 Depth 2
                                        #       Child Loop BB42_16 Depth 3
                                        #     Child Loop BB42_25 Depth 2
                                        #       Child Loop BB42_27 Depth 3
                                        #     Child Loop BB42_36 Depth 2
                                        #       Child Loop BB42_38 Depth 3
                                        #     Child Loop BB42_47 Depth 2
                                        #     Child Loop BB42_54 Depth 2
                                        #     Child Loop BB42_61 Depth 2
                                        #     Child Loop BB42_68 Depth 2
                                        #     Child Loop BB42_75 Depth 2
                                        #     Child Loop BB42_82 Depth 2
                                        #       Child Loop BB42_84 Depth 3
                                        #     Child Loop BB42_93 Depth 2
                                        #       Child Loop BB42_95 Depth 3
                                        #     Child Loop BB42_104 Depth 2
                                        #       Child Loop BB42_106 Depth 3
                                        #     Child Loop BB42_115 Depth 2
                                        #       Child Loop BB42_117 Depth 3
                                        #     Child Loop BB42_126 Depth 2
                                        #       Child Loop BB42_128 Depth 3
                                        #     Child Loop BB42_137 Depth 2
                                        #       Child Loop BB42_139 Depth 3
                                        #     Child Loop BB42_148 Depth 2
                                        #       Child Loop BB42_150 Depth 3
                                        #     Child Loop BB42_159 Depth 2
                                        #       Child Loop BB42_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB42_3:                               # %for.cond2
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB42_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	$0, -4(%rbp)
.LBB42_5:                               # %for.cond5
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB42_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_9
.LBB42_8:                               # %if.else
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_9:                               # %if.end
                                        #   in Loop: Header=BB42_5 Depth=3
	jmp	.LBB42_10
.LBB42_10:                              # %for.inc
                                        #   in Loop: Header=BB42_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_5
.LBB42_11:                              # %for.end
                                        #   in Loop: Header=BB42_3 Depth=2
	jmp	.LBB42_12
.LBB42_12:                              # %for.inc33
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_3
.LBB42_13:                              # %for.end35
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_14:                              # %for.cond36
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB42_14 Depth=2
	movl	$0, -4(%rbp)
.LBB42_16:                              # %for.cond39
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB42_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_20
.LBB42_19:                              # %if.else58
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_20:                              # %if.end73
                                        #   in Loop: Header=BB42_16 Depth=3
	jmp	.LBB42_21
.LBB42_21:                              # %for.inc74
                                        #   in Loop: Header=BB42_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_16
.LBB42_22:                              # %for.end76
                                        #   in Loop: Header=BB42_14 Depth=2
	jmp	.LBB42_23
.LBB42_23:                              # %for.inc77
                                        #   in Loop: Header=BB42_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_14
.LBB42_24:                              # %for.end79
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_25:                              # %for.cond80
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	$0, -4(%rbp)
.LBB42_27:                              # %for.cond83
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB42_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_31
.LBB42_30:                              # %if.else102
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_31:                              # %if.end117
                                        #   in Loop: Header=BB42_27 Depth=3
	jmp	.LBB42_32
.LBB42_32:                              # %for.inc118
                                        #   in Loop: Header=BB42_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_27
.LBB42_33:                              # %for.end120
                                        #   in Loop: Header=BB42_25 Depth=2
	jmp	.LBB42_34
.LBB42_34:                              # %for.inc121
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_25
.LBB42_35:                              # %for.end123
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_36:                              # %for.cond124
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	$0, -4(%rbp)
.LBB42_38:                              # %for.cond127
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB42_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_42
.LBB42_41:                              # %if.else146
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_42:                              # %if.end161
                                        #   in Loop: Header=BB42_38 Depth=3
	jmp	.LBB42_43
.LBB42_43:                              # %for.inc162
                                        #   in Loop: Header=BB42_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_38
.LBB42_44:                              # %for.end164
                                        #   in Loop: Header=BB42_36 Depth=2
	jmp	.LBB42_45
.LBB42_45:                              # %for.inc165
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_36
.LBB42_46:                              # %for.end167
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_47:                              # %for.cond168
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_51
.LBB42_50:                              # %if.else184
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_51:                              # %if.end196
                                        #   in Loop: Header=BB42_47 Depth=2
	jmp	.LBB42_52
.LBB42_52:                              # %for.inc197
                                        #   in Loop: Header=BB42_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_47
.LBB42_53:                              # %for.end199
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_54:                              # %for.cond200
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_58
.LBB42_57:                              # %if.else216
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_58:                              # %if.end228
                                        #   in Loop: Header=BB42_54 Depth=2
	jmp	.LBB42_59
.LBB42_59:                              # %for.inc229
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_54
.LBB42_60:                              # %for.end231
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_61:                              # %for.cond232
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB42_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_65
.LBB42_64:                              # %if.else248
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_65:                              # %if.end260
                                        #   in Loop: Header=BB42_61 Depth=2
	jmp	.LBB42_66
.LBB42_66:                              # %for.inc261
                                        #   in Loop: Header=BB42_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_61
.LBB42_67:                              # %for.end263
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_68:                              # %for.cond264
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB42_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_72
.LBB42_71:                              # %if.else280
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_72:                              # %if.end292
                                        #   in Loop: Header=BB42_68 Depth=2
	jmp	.LBB42_73
.LBB42_73:                              # %for.inc293
                                        #   in Loop: Header=BB42_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_68
.LBB42_74:                              # %for.end295
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_75:                              # %for.cond296
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_79
.LBB42_78:                              # %if.else312
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_79:                              # %if.end324
                                        #   in Loop: Header=BB42_75 Depth=2
	jmp	.LBB42_80
.LBB42_80:                              # %for.inc325
                                        #   in Loop: Header=BB42_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_75
.LBB42_81:                              # %for.end327
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_82:                              # %for.cond328
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB42_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB42_82 Depth=2
	movl	$0, -4(%rbp)
.LBB42_84:                              # %for.cond331
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB42_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_88
.LBB42_87:                              # %if.else350
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_88:                              # %if.end365
                                        #   in Loop: Header=BB42_84 Depth=3
	jmp	.LBB42_89
.LBB42_89:                              # %for.inc366
                                        #   in Loop: Header=BB42_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_84
.LBB42_90:                              # %for.end368
                                        #   in Loop: Header=BB42_82 Depth=2
	jmp	.LBB42_91
.LBB42_91:                              # %for.inc369
                                        #   in Loop: Header=BB42_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_82
.LBB42_92:                              # %for.end371
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_93:                              # %for.cond372
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	$0, -4(%rbp)
.LBB42_95:                              # %for.cond375
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB42_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_99
.LBB42_98:                              # %if.else394
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_99:                              # %if.end409
                                        #   in Loop: Header=BB42_95 Depth=3
	jmp	.LBB42_100
.LBB42_100:                             # %for.inc410
                                        #   in Loop: Header=BB42_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_95
.LBB42_101:                             # %for.end412
                                        #   in Loop: Header=BB42_93 Depth=2
	jmp	.LBB42_102
.LBB42_102:                             # %for.inc413
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_93
.LBB42_103:                             # %for.end415
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_104:                             # %for.cond416
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB42_104 Depth=2
	movl	$0, -4(%rbp)
.LBB42_106:                             # %for.cond419
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_110
.LBB42_109:                             # %if.else438
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_110:                             # %if.end453
                                        #   in Loop: Header=BB42_106 Depth=3
	jmp	.LBB42_111
.LBB42_111:                             # %for.inc454
                                        #   in Loop: Header=BB42_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_106
.LBB42_112:                             # %for.end456
                                        #   in Loop: Header=BB42_104 Depth=2
	jmp	.LBB42_113
.LBB42_113:                             # %for.inc457
                                        #   in Loop: Header=BB42_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_104
.LBB42_114:                             # %for.end459
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_115:                             # %for.cond460
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB42_115 Depth=2
	movl	$0, -4(%rbp)
.LBB42_117:                             # %for.cond463
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_121
.LBB42_120:                             # %if.else482
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_121:                             # %if.end497
                                        #   in Loop: Header=BB42_117 Depth=3
	jmp	.LBB42_122
.LBB42_122:                             # %for.inc498
                                        #   in Loop: Header=BB42_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_117
.LBB42_123:                             # %for.end500
                                        #   in Loop: Header=BB42_115 Depth=2
	jmp	.LBB42_124
.LBB42_124:                             # %for.inc501
                                        #   in Loop: Header=BB42_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_115
.LBB42_125:                             # %for.end503
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_126:                             # %for.cond504
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB42_126 Depth=2
	movl	$0, -4(%rbp)
.LBB42_128:                             # %for.cond507
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB42_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_132
.LBB42_131:                             # %if.else526
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_132:                             # %if.end541
                                        #   in Loop: Header=BB42_128 Depth=3
	jmp	.LBB42_133
.LBB42_133:                             # %for.inc542
                                        #   in Loop: Header=BB42_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_128
.LBB42_134:                             # %for.end544
                                        #   in Loop: Header=BB42_126 Depth=2
	jmp	.LBB42_135
.LBB42_135:                             # %for.inc545
                                        #   in Loop: Header=BB42_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_126
.LBB42_136:                             # %for.end547
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_137:                             # %for.cond548
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB42_137 Depth=2
	movl	$0, -4(%rbp)
.LBB42_139:                             # %for.cond551
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB42_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_143
.LBB42_142:                             # %if.else570
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_143:                             # %if.end585
                                        #   in Loop: Header=BB42_139 Depth=3
	jmp	.LBB42_144
.LBB42_144:                             # %for.inc586
                                        #   in Loop: Header=BB42_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_139
.LBB42_145:                             # %for.end588
                                        #   in Loop: Header=BB42_137 Depth=2
	jmp	.LBB42_146
.LBB42_146:                             # %for.inc589
                                        #   in Loop: Header=BB42_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_137
.LBB42_147:                             # %for.end591
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_148:                             # %for.cond592
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB42_148 Depth=2
	movl	$0, -4(%rbp)
.LBB42_150:                             # %for.cond595
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_154
.LBB42_153:                             # %if.else614
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_154:                             # %if.end629
                                        #   in Loop: Header=BB42_150 Depth=3
	jmp	.LBB42_155
.LBB42_155:                             # %for.inc630
                                        #   in Loop: Header=BB42_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_150
.LBB42_156:                             # %for.end632
                                        #   in Loop: Header=BB42_148 Depth=2
	jmp	.LBB42_157
.LBB42_157:                             # %for.inc633
                                        #   in Loop: Header=BB42_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_148
.LBB42_158:                             # %for.end635
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_159:                             # %for.cond636
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB42_159 Depth=2
	movl	$0, -4(%rbp)
.LBB42_161:                             # %for.cond639
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_165
.LBB42_164:                             # %if.else658
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_165:                             # %if.end673
                                        #   in Loop: Header=BB42_161 Depth=3
	jmp	.LBB42_166
.LBB42_166:                             # %for.inc674
                                        #   in Loop: Header=BB42_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_161
.LBB42_167:                             # %for.end676
                                        #   in Loop: Header=BB42_159 Depth=2
	jmp	.LBB42_168
.LBB42_168:                             # %for.inc677
                                        #   in Loop: Header=BB42_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_159
.LBB42_169:                             # %for.end679
                                        #   in Loop: Header=BB42_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB42_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB42_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB42_171:                             # %if.end682
                                        #   in Loop: Header=BB42_1 Depth=1
	jmp	.LBB42_172
.LBB42_172:                             # %for.inc683
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_1
.LBB42_173:                             # %for.end685
	cmpl	$1152131059, -44(%rbp)  # imm = 0x44AC1FF3
	jne	.LBB42_175
.LBB42_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_174
.Lfunc_end42:
	.size	GetCtxModelNumber.35, .Lfunc_end42-GetCtxModelNumber.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.36
.LCPI43_0:
	.quad	4607182418800017408     # double 1
.LCPI43_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI43_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI43_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.36
	.p2align	4, 0x90
	.type	XRate.36,@function
XRate.36:                               # @XRate.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$201410073, -36(%rbp)   # imm = 0xC014619
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB43_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB43_3
.LBB43_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB43_3:                               # %cond.end
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI43_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI43_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB43_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB43_6
.LBB43_5:                               # %cond.false6
	vmovsd	.LCPI43_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI43_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI43_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB43_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB43_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB43_9
.LBB43_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB43_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB43_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB43_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB43_13
.LBB43_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB43_13:                              # %cond.end26
	jmp	.LBB43_15
.LBB43_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB43_15
.LBB43_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB43_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB43_18
.LBB43_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB43_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$201410073, -36(%rbp)   # imm = 0xC014619
	jne	.LBB43_20
.LBB43_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB43_19
.Lfunc_end43:
	.size	XRate.36, .Lfunc_end43-XRate.36
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.37        # -- Begin function init_contexts.37
	.p2align	4, 0x90
	.type	init_contexts.37,@function
init_contexts.37:                       # @init_contexts.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$994160295, -28(%rbp)   # imm = 0x3B41AEA7
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB44_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_3:                               # %for.cond2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB44_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_7
.LBB44_6:                               # %if.else
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_7:                               # %if.end
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_8
.LBB44_8:                               # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_3
.LBB44_9:                               # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_10
.LBB44_10:                              # %for.inc28
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_1
.LBB44_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB44_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB44_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB44_12 Depth=1
	movl	$0, -4(%rbp)
.LBB44_14:                              # %for.cond34
                                        #   Parent Loop BB44_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB44_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB44_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB44_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_18
.LBB44_17:                              # %if.else52
                                        #   in Loop: Header=BB44_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_18:                              # %if.end66
                                        #   in Loop: Header=BB44_14 Depth=2
	jmp	.LBB44_19
.LBB44_19:                              # %for.inc67
                                        #   in Loop: Header=BB44_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_14
.LBB44_20:                              # %for.end69
                                        #   in Loop: Header=BB44_12 Depth=1
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc70
                                        #   in Loop: Header=BB44_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_12
.LBB44_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB44_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB44_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB44_23 Depth=1
	movl	$0, -4(%rbp)
.LBB44_25:                              # %for.cond76
                                        #   Parent Loop BB44_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB44_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB44_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB44_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_29
.LBB44_28:                              # %if.else94
                                        #   in Loop: Header=BB44_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_29:                              # %if.end108
                                        #   in Loop: Header=BB44_25 Depth=2
	jmp	.LBB44_30
.LBB44_30:                              # %for.inc109
                                        #   in Loop: Header=BB44_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_25
.LBB44_31:                              # %for.end111
                                        #   in Loop: Header=BB44_23 Depth=1
	jmp	.LBB44_32
.LBB44_32:                              # %for.inc112
                                        #   in Loop: Header=BB44_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_23
.LBB44_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB44_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB44_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	$0, -4(%rbp)
.LBB44_36:                              # %for.cond118
                                        #   Parent Loop BB44_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB44_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB44_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB44_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_40
.LBB44_39:                              # %if.else136
                                        #   in Loop: Header=BB44_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_40:                              # %if.end150
                                        #   in Loop: Header=BB44_36 Depth=2
	jmp	.LBB44_41
.LBB44_41:                              # %for.inc151
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_36
.LBB44_42:                              # %for.end153
                                        #   in Loop: Header=BB44_34 Depth=1
	jmp	.LBB44_43
.LBB44_43:                              # %for.inc154
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_34
.LBB44_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB44_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB44_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB44_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB44_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_49
.LBB44_48:                              # %if.else172
                                        #   in Loop: Header=BB44_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_49:                              # %if.end183
                                        #   in Loop: Header=BB44_45 Depth=1
	jmp	.LBB44_50
.LBB44_50:                              # %for.inc184
                                        #   in Loop: Header=BB44_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_45
.LBB44_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB44_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB44_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB44_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB44_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_56
.LBB44_55:                              # %if.else202
                                        #   in Loop: Header=BB44_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_56:                              # %if.end213
                                        #   in Loop: Header=BB44_52 Depth=1
	jmp	.LBB44_57
.LBB44_57:                              # %for.inc214
                                        #   in Loop: Header=BB44_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_52
.LBB44_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB44_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB44_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB44_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB44_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_63
.LBB44_62:                              # %if.else232
                                        #   in Loop: Header=BB44_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_63:                              # %if.end243
                                        #   in Loop: Header=BB44_59 Depth=1
	jmp	.LBB44_64
.LBB44_64:                              # %for.inc244
                                        #   in Loop: Header=BB44_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_59
.LBB44_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB44_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB44_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB44_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB44_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_70
.LBB44_69:                              # %if.else262
                                        #   in Loop: Header=BB44_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_70:                              # %if.end273
                                        #   in Loop: Header=BB44_66 Depth=1
	jmp	.LBB44_71
.LBB44_71:                              # %for.inc274
                                        #   in Loop: Header=BB44_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_66
.LBB44_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB44_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB44_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB44_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB44_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_77
.LBB44_76:                              # %if.else292
                                        #   in Loop: Header=BB44_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_77:                              # %if.end303
                                        #   in Loop: Header=BB44_73 Depth=1
	jmp	.LBB44_78
.LBB44_78:                              # %for.inc304
                                        #   in Loop: Header=BB44_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_73
.LBB44_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB44_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB44_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB44_80 Depth=1
	movl	$0, -4(%rbp)
.LBB44_82:                              # %for.cond310
                                        #   Parent Loop BB44_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB44_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB44_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_86
.LBB44_85:                              # %if.else328
                                        #   in Loop: Header=BB44_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_86:                              # %if.end342
                                        #   in Loop: Header=BB44_82 Depth=2
	jmp	.LBB44_87
.LBB44_87:                              # %for.inc343
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_82
.LBB44_88:                              # %for.end345
                                        #   in Loop: Header=BB44_80 Depth=1
	jmp	.LBB44_89
.LBB44_89:                              # %for.inc346
                                        #   in Loop: Header=BB44_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_80
.LBB44_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB44_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB44_91 Depth=1
	movl	$0, -4(%rbp)
.LBB44_93:                              # %for.cond352
                                        #   Parent Loop BB44_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB44_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB44_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_97
.LBB44_96:                              # %if.else370
                                        #   in Loop: Header=BB44_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_97:                              # %if.end384
                                        #   in Loop: Header=BB44_93 Depth=2
	jmp	.LBB44_98
.LBB44_98:                              # %for.inc385
                                        #   in Loop: Header=BB44_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_93
.LBB44_99:                              # %for.end387
                                        #   in Loop: Header=BB44_91 Depth=1
	jmp	.LBB44_100
.LBB44_100:                             # %for.inc388
                                        #   in Loop: Header=BB44_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_91
.LBB44_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB44_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB44_102 Depth=1
	movl	$0, -4(%rbp)
.LBB44_104:                             # %for.cond394
                                        #   Parent Loop BB44_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB44_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB44_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB44_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_108
.LBB44_107:                             # %if.else412
                                        #   in Loop: Header=BB44_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_108:                             # %if.end426
                                        #   in Loop: Header=BB44_104 Depth=2
	jmp	.LBB44_109
.LBB44_109:                             # %for.inc427
                                        #   in Loop: Header=BB44_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_104
.LBB44_110:                             # %for.end429
                                        #   in Loop: Header=BB44_102 Depth=1
	jmp	.LBB44_111
.LBB44_111:                             # %for.inc430
                                        #   in Loop: Header=BB44_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_102
.LBB44_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB44_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB44_113 Depth=1
	movl	$0, -4(%rbp)
.LBB44_115:                             # %for.cond436
                                        #   Parent Loop BB44_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB44_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB44_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB44_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_119
.LBB44_118:                             # %if.else454
                                        #   in Loop: Header=BB44_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_119:                             # %if.end468
                                        #   in Loop: Header=BB44_115 Depth=2
	jmp	.LBB44_120
.LBB44_120:                             # %for.inc469
                                        #   in Loop: Header=BB44_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_115
.LBB44_121:                             # %for.end471
                                        #   in Loop: Header=BB44_113 Depth=1
	jmp	.LBB44_122
.LBB44_122:                             # %for.inc472
                                        #   in Loop: Header=BB44_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_113
.LBB44_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB44_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB44_124 Depth=1
	movl	$0, -4(%rbp)
.LBB44_126:                             # %for.cond478
                                        #   Parent Loop BB44_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB44_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB44_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB44_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_130
.LBB44_129:                             # %if.else496
                                        #   in Loop: Header=BB44_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_130:                             # %if.end510
                                        #   in Loop: Header=BB44_126 Depth=2
	jmp	.LBB44_131
.LBB44_131:                             # %for.inc511
                                        #   in Loop: Header=BB44_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_126
.LBB44_132:                             # %for.end513
                                        #   in Loop: Header=BB44_124 Depth=1
	jmp	.LBB44_133
.LBB44_133:                             # %for.inc514
                                        #   in Loop: Header=BB44_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_124
.LBB44_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB44_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	$0, -4(%rbp)
.LBB44_137:                             # %for.cond520
                                        #   Parent Loop BB44_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB44_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB44_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB44_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_141
.LBB44_140:                             # %if.else538
                                        #   in Loop: Header=BB44_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_141:                             # %if.end552
                                        #   in Loop: Header=BB44_137 Depth=2
	jmp	.LBB44_142
.LBB44_142:                             # %for.inc553
                                        #   in Loop: Header=BB44_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_137
.LBB44_143:                             # %for.end555
                                        #   in Loop: Header=BB44_135 Depth=1
	jmp	.LBB44_144
.LBB44_144:                             # %for.inc556
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_135
.LBB44_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB44_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB44_146 Depth=1
	movl	$0, -4(%rbp)
.LBB44_148:                             # %for.cond562
                                        #   Parent Loop BB44_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB44_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB44_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB44_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_152
.LBB44_151:                             # %if.else580
                                        #   in Loop: Header=BB44_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_152:                             # %if.end594
                                        #   in Loop: Header=BB44_148 Depth=2
	jmp	.LBB44_153
.LBB44_153:                             # %for.inc595
                                        #   in Loop: Header=BB44_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_148
.LBB44_154:                             # %for.end597
                                        #   in Loop: Header=BB44_146 Depth=1
	jmp	.LBB44_155
.LBB44_155:                             # %for.inc598
                                        #   in Loop: Header=BB44_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_146
.LBB44_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB44_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB44_157 Depth=1
	movl	$0, -4(%rbp)
.LBB44_159:                             # %for.cond604
                                        #   Parent Loop BB44_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB44_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB44_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB44_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_163
.LBB44_162:                             # %if.else622
                                        #   in Loop: Header=BB44_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_163:                             # %if.end636
                                        #   in Loop: Header=BB44_159 Depth=2
	jmp	.LBB44_164
.LBB44_164:                             # %for.inc637
                                        #   in Loop: Header=BB44_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_159
.LBB44_165:                             # %for.end639
                                        #   in Loop: Header=BB44_157 Depth=1
	jmp	.LBB44_166
.LBB44_166:                             # %for.inc640
                                        #   in Loop: Header=BB44_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_157
.LBB44_167:                             # %for.end642
	cmpl	$994160295, -28(%rbp)   # imm = 0x3B41AEA7
	jne	.LBB44_169
.LBB44_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_168
.Lfunc_end44:
	.size	init_contexts.37, .Lfunc_end44-init_contexts.37
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.38    # -- Begin function SetCtxModelNumber.38
	.p2align	4, 0x90
	.type	SetCtxModelNumber.38,@function
SetCtxModelNumber.38:                   # @SetCtxModelNumber.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$498649042, -16(%rbp)   # imm = 0x1DB8C7D2
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB45_11
.LBB45_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB45_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB45_11
.LBB45_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB45_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB45_11
.LBB45_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB45_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB45_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB45_10
.LBB45_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB45_10:                              # %if.end38
	jmp	.LBB45_11
.LBB45_11:                              # %if.end39
	cmpl	$498649042, -16(%rbp)   # imm = 0x1DB8C7D2
	jne	.LBB45_13
.LBB45_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_12
.Lfunc_end45:
	.size	SetCtxModelNumber.38, .Lfunc_end45-SetCtxModelNumber.38
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.39        # -- Begin function init_contexts.39
	.p2align	4, 0x90
	.type	init_contexts.39,@function
init_contexts.39:                       # @init_contexts.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$775962497, -28(%rbp)   # imm = 0x2E403F81
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB46_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -4(%rbp)
.LBB46_3:                               # %for.cond2
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB46_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_7
.LBB46_6:                               # %if.else
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_7:                               # %if.end
                                        #   in Loop: Header=BB46_3 Depth=2
	jmp	.LBB46_8
.LBB46_8:                               # %for.inc
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_3
.LBB46_9:                               # %for.end
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_10
.LBB46_10:                              # %for.inc28
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_1
.LBB46_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB46_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB46_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB46_12 Depth=1
	movl	$0, -4(%rbp)
.LBB46_14:                              # %for.cond34
                                        #   Parent Loop BB46_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB46_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB46_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB46_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_18
.LBB46_17:                              # %if.else52
                                        #   in Loop: Header=BB46_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_18:                              # %if.end66
                                        #   in Loop: Header=BB46_14 Depth=2
	jmp	.LBB46_19
.LBB46_19:                              # %for.inc67
                                        #   in Loop: Header=BB46_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_14
.LBB46_20:                              # %for.end69
                                        #   in Loop: Header=BB46_12 Depth=1
	jmp	.LBB46_21
.LBB46_21:                              # %for.inc70
                                        #   in Loop: Header=BB46_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_12
.LBB46_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB46_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB46_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	$0, -4(%rbp)
.LBB46_25:                              # %for.cond76
                                        #   Parent Loop BB46_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB46_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB46_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB46_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_29
.LBB46_28:                              # %if.else94
                                        #   in Loop: Header=BB46_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_29:                              # %if.end108
                                        #   in Loop: Header=BB46_25 Depth=2
	jmp	.LBB46_30
.LBB46_30:                              # %for.inc109
                                        #   in Loop: Header=BB46_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_25
.LBB46_31:                              # %for.end111
                                        #   in Loop: Header=BB46_23 Depth=1
	jmp	.LBB46_32
.LBB46_32:                              # %for.inc112
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_23
.LBB46_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB46_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB46_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	$0, -4(%rbp)
.LBB46_36:                              # %for.cond118
                                        #   Parent Loop BB46_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB46_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB46_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB46_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_40
.LBB46_39:                              # %if.else136
                                        #   in Loop: Header=BB46_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_40:                              # %if.end150
                                        #   in Loop: Header=BB46_36 Depth=2
	jmp	.LBB46_41
.LBB46_41:                              # %for.inc151
                                        #   in Loop: Header=BB46_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_36
.LBB46_42:                              # %for.end153
                                        #   in Loop: Header=BB46_34 Depth=1
	jmp	.LBB46_43
.LBB46_43:                              # %for.inc154
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_34
.LBB46_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB46_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB46_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB46_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_49
.LBB46_48:                              # %if.else172
                                        #   in Loop: Header=BB46_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_49:                              # %if.end183
                                        #   in Loop: Header=BB46_45 Depth=1
	jmp	.LBB46_50
.LBB46_50:                              # %for.inc184
                                        #   in Loop: Header=BB46_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_45
.LBB46_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB46_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB46_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB46_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_56
.LBB46_55:                              # %if.else202
                                        #   in Loop: Header=BB46_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_56:                              # %if.end213
                                        #   in Loop: Header=BB46_52 Depth=1
	jmp	.LBB46_57
.LBB46_57:                              # %for.inc214
                                        #   in Loop: Header=BB46_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_52
.LBB46_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB46_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB46_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB46_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB46_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_63
.LBB46_62:                              # %if.else232
                                        #   in Loop: Header=BB46_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_63:                              # %if.end243
                                        #   in Loop: Header=BB46_59 Depth=1
	jmp	.LBB46_64
.LBB46_64:                              # %for.inc244
                                        #   in Loop: Header=BB46_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_59
.LBB46_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB46_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB46_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB46_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB46_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_70
.LBB46_69:                              # %if.else262
                                        #   in Loop: Header=BB46_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_70:                              # %if.end273
                                        #   in Loop: Header=BB46_66 Depth=1
	jmp	.LBB46_71
.LBB46_71:                              # %for.inc274
                                        #   in Loop: Header=BB46_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_66
.LBB46_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB46_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB46_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB46_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_77
.LBB46_76:                              # %if.else292
                                        #   in Loop: Header=BB46_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_77:                              # %if.end303
                                        #   in Loop: Header=BB46_73 Depth=1
	jmp	.LBB46_78
.LBB46_78:                              # %for.inc304
                                        #   in Loop: Header=BB46_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_73
.LBB46_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB46_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB46_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB46_80 Depth=1
	movl	$0, -4(%rbp)
.LBB46_82:                              # %for.cond310
                                        #   Parent Loop BB46_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB46_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB46_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_86
.LBB46_85:                              # %if.else328
                                        #   in Loop: Header=BB46_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_86:                              # %if.end342
                                        #   in Loop: Header=BB46_82 Depth=2
	jmp	.LBB46_87
.LBB46_87:                              # %for.inc343
                                        #   in Loop: Header=BB46_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_82
.LBB46_88:                              # %for.end345
                                        #   in Loop: Header=BB46_80 Depth=1
	jmp	.LBB46_89
.LBB46_89:                              # %for.inc346
                                        #   in Loop: Header=BB46_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_80
.LBB46_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB46_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB46_91 Depth=1
	movl	$0, -4(%rbp)
.LBB46_93:                              # %for.cond352
                                        #   Parent Loop BB46_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB46_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB46_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_97
.LBB46_96:                              # %if.else370
                                        #   in Loop: Header=BB46_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_97:                              # %if.end384
                                        #   in Loop: Header=BB46_93 Depth=2
	jmp	.LBB46_98
.LBB46_98:                              # %for.inc385
                                        #   in Loop: Header=BB46_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_93
.LBB46_99:                              # %for.end387
                                        #   in Loop: Header=BB46_91 Depth=1
	jmp	.LBB46_100
.LBB46_100:                             # %for.inc388
                                        #   in Loop: Header=BB46_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_91
.LBB46_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB46_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB46_102 Depth=1
	movl	$0, -4(%rbp)
.LBB46_104:                             # %for.cond394
                                        #   Parent Loop BB46_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB46_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB46_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB46_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_108
.LBB46_107:                             # %if.else412
                                        #   in Loop: Header=BB46_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_108:                             # %if.end426
                                        #   in Loop: Header=BB46_104 Depth=2
	jmp	.LBB46_109
.LBB46_109:                             # %for.inc427
                                        #   in Loop: Header=BB46_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_104
.LBB46_110:                             # %for.end429
                                        #   in Loop: Header=BB46_102 Depth=1
	jmp	.LBB46_111
.LBB46_111:                             # %for.inc430
                                        #   in Loop: Header=BB46_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_102
.LBB46_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB46_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB46_113 Depth=1
	movl	$0, -4(%rbp)
.LBB46_115:                             # %for.cond436
                                        #   Parent Loop BB46_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB46_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB46_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB46_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_119
.LBB46_118:                             # %if.else454
                                        #   in Loop: Header=BB46_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_119:                             # %if.end468
                                        #   in Loop: Header=BB46_115 Depth=2
	jmp	.LBB46_120
.LBB46_120:                             # %for.inc469
                                        #   in Loop: Header=BB46_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_115
.LBB46_121:                             # %for.end471
                                        #   in Loop: Header=BB46_113 Depth=1
	jmp	.LBB46_122
.LBB46_122:                             # %for.inc472
                                        #   in Loop: Header=BB46_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_113
.LBB46_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB46_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB46_124 Depth=1
	movl	$0, -4(%rbp)
.LBB46_126:                             # %for.cond478
                                        #   Parent Loop BB46_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB46_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB46_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB46_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_130
.LBB46_129:                             # %if.else496
                                        #   in Loop: Header=BB46_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_130:                             # %if.end510
                                        #   in Loop: Header=BB46_126 Depth=2
	jmp	.LBB46_131
.LBB46_131:                             # %for.inc511
                                        #   in Loop: Header=BB46_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_126
.LBB46_132:                             # %for.end513
                                        #   in Loop: Header=BB46_124 Depth=1
	jmp	.LBB46_133
.LBB46_133:                             # %for.inc514
                                        #   in Loop: Header=BB46_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_124
.LBB46_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB46_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB46_135 Depth=1
	movl	$0, -4(%rbp)
.LBB46_137:                             # %for.cond520
                                        #   Parent Loop BB46_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB46_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB46_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB46_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_141
.LBB46_140:                             # %if.else538
                                        #   in Loop: Header=BB46_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_141:                             # %if.end552
                                        #   in Loop: Header=BB46_137 Depth=2
	jmp	.LBB46_142
.LBB46_142:                             # %for.inc553
                                        #   in Loop: Header=BB46_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_137
.LBB46_143:                             # %for.end555
                                        #   in Loop: Header=BB46_135 Depth=1
	jmp	.LBB46_144
.LBB46_144:                             # %for.inc556
                                        #   in Loop: Header=BB46_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_135
.LBB46_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB46_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB46_146 Depth=1
	movl	$0, -4(%rbp)
.LBB46_148:                             # %for.cond562
                                        #   Parent Loop BB46_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB46_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB46_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB46_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_152
.LBB46_151:                             # %if.else580
                                        #   in Loop: Header=BB46_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_152:                             # %if.end594
                                        #   in Loop: Header=BB46_148 Depth=2
	jmp	.LBB46_153
.LBB46_153:                             # %for.inc595
                                        #   in Loop: Header=BB46_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_148
.LBB46_154:                             # %for.end597
                                        #   in Loop: Header=BB46_146 Depth=1
	jmp	.LBB46_155
.LBB46_155:                             # %for.inc598
                                        #   in Loop: Header=BB46_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_146
.LBB46_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB46_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB46_157 Depth=1
	movl	$0, -4(%rbp)
.LBB46_159:                             # %for.cond604
                                        #   Parent Loop BB46_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB46_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB46_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB46_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_163
.LBB46_162:                             # %if.else622
                                        #   in Loop: Header=BB46_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_163:                             # %if.end636
                                        #   in Loop: Header=BB46_159 Depth=2
	jmp	.LBB46_164
.LBB46_164:                             # %for.inc637
                                        #   in Loop: Header=BB46_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_159
.LBB46_165:                             # %for.end639
                                        #   in Loop: Header=BB46_157 Depth=1
	jmp	.LBB46_166
.LBB46_166:                             # %for.inc640
                                        #   in Loop: Header=BB46_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_157
.LBB46_167:                             # %for.end642
	cmpl	$775962497, -28(%rbp)   # imm = 0x2E403F81
	jne	.LBB46_169
.LBB46_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_168
.Lfunc_end46:
	.size	init_contexts.39, .Lfunc_end46-init_contexts.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.40
.LCPI47_0:
	.quad	4611686018427387904     # double 2
.LCPI47_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.40
	.p2align	4, 0x90
	.type	create_context_memory.40,@function
create_context_memory.40:               # @create_context_memory.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1116440602, -20(%rbp)  # imm = 0x428B881A
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB47_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB47_3
.LBB47_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB47_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB47_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB47_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB47_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB47_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB47_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_11:                              # %if.end10
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB47_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_13:                              # %if.end16
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$0, -8(%rbp)
.LBB47_14:                              # %for.cond17
                                        #   Parent Loop BB47_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB47_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB47_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_17:                              # %if.end28
                                        #   in Loop: Header=BB47_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB47_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_19:                              # %if.end39
                                        #   in Loop: Header=BB47_14 Depth=2
	jmp	.LBB47_20
.LBB47_20:                              # %for.inc
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_14
.LBB47_21:                              # %for.end
                                        #   in Loop: Header=BB47_8 Depth=1
	jmp	.LBB47_22
.LBB47_22:                              # %for.inc40
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_8
.LBB47_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB47_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_26 Depth 2
                                        #       Child Loop BB47_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB47_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB47_24 Depth=1
	movl	$0, -8(%rbp)
.LBB47_26:                              # %for.cond47
                                        #   Parent Loop BB47_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB47_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB47_26 Depth=2
	movl	$0, -12(%rbp)
.LBB47_28:                              # %for.cond51
                                        #   Parent Loop BB47_24 Depth=1
                                        #     Parent Loop BB47_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB47_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB47_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB47_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_28
.LBB47_31:                              # %for.end63
                                        #   in Loop: Header=BB47_26 Depth=2
	jmp	.LBB47_32
.LBB47_32:                              # %for.inc64
                                        #   in Loop: Header=BB47_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_26
.LBB47_33:                              # %for.end66
                                        #   in Loop: Header=BB47_24 Depth=1
	jmp	.LBB47_34
.LBB47_34:                              # %for.inc67
                                        #   in Loop: Header=BB47_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_24
.LBB47_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB47_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB47_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB47_36 Depth=1
	vmovsd	.LCPI47_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB47_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_36
.LBB47_39:                              # %for.end98
	cmpl	$1116440602, -20(%rbp)  # imm = 0x428B881A
	jne	.LBB47_41
.LBB47_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_40
.Lfunc_end47:
	.size	create_context_memory.40, .Lfunc_end47-create_context_memory.40
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.41        # -- Begin function init_contexts.41
	.p2align	4, 0x90
	.type	init_contexts.41,@function
init_contexts.41:                       # @init_contexts.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1913953634, -28(%rbp)  # imm = 0x72149D62
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB48_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$0, -4(%rbp)
.LBB48_3:                               # %for.cond2
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB48_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_7
.LBB48_6:                               # %if.else
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_7:                               # %if.end
                                        #   in Loop: Header=BB48_3 Depth=2
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_3
.LBB48_9:                               # %for.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_10
.LBB48_10:                              # %for.inc28
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_1
.LBB48_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB48_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB48_12 Depth=1
	movl	$0, -4(%rbp)
.LBB48_14:                              # %for.cond34
                                        #   Parent Loop BB48_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB48_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_18
.LBB48_17:                              # %if.else52
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_18:                              # %if.end66
                                        #   in Loop: Header=BB48_14 Depth=2
	jmp	.LBB48_19
.LBB48_19:                              # %for.inc67
                                        #   in Loop: Header=BB48_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_14
.LBB48_20:                              # %for.end69
                                        #   in Loop: Header=BB48_12 Depth=1
	jmp	.LBB48_21
.LBB48_21:                              # %for.inc70
                                        #   in Loop: Header=BB48_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_12
.LBB48_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB48_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	$0, -4(%rbp)
.LBB48_25:                              # %for.cond76
                                        #   Parent Loop BB48_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB48_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_29
.LBB48_28:                              # %if.else94
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_29:                              # %if.end108
                                        #   in Loop: Header=BB48_25 Depth=2
	jmp	.LBB48_30
.LBB48_30:                              # %for.inc109
                                        #   in Loop: Header=BB48_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_25
.LBB48_31:                              # %for.end111
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_32
.LBB48_32:                              # %for.inc112
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_23
.LBB48_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB48_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	$0, -4(%rbp)
.LBB48_36:                              # %for.cond118
                                        #   Parent Loop BB48_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB48_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_40
.LBB48_39:                              # %if.else136
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_40:                              # %if.end150
                                        #   in Loop: Header=BB48_36 Depth=2
	jmp	.LBB48_41
.LBB48_41:                              # %for.inc151
                                        #   in Loop: Header=BB48_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_36
.LBB48_42:                              # %for.end153
                                        #   in Loop: Header=BB48_34 Depth=1
	jmp	.LBB48_43
.LBB48_43:                              # %for.inc154
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_34
.LBB48_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB48_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_49
.LBB48_48:                              # %if.else172
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_49:                              # %if.end183
                                        #   in Loop: Header=BB48_45 Depth=1
	jmp	.LBB48_50
.LBB48_50:                              # %for.inc184
                                        #   in Loop: Header=BB48_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_45
.LBB48_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB48_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_56
.LBB48_55:                              # %if.else202
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_56:                              # %if.end213
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_57
.LBB48_57:                              # %for.inc214
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_52
.LBB48_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB48_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB48_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_63
.LBB48_62:                              # %if.else232
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_63:                              # %if.end243
                                        #   in Loop: Header=BB48_59 Depth=1
	jmp	.LBB48_64
.LBB48_64:                              # %for.inc244
                                        #   in Loop: Header=BB48_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_59
.LBB48_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB48_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB48_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_70
.LBB48_69:                              # %if.else262
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_70:                              # %if.end273
                                        #   in Loop: Header=BB48_66 Depth=1
	jmp	.LBB48_71
.LBB48_71:                              # %for.inc274
                                        #   in Loop: Header=BB48_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_66
.LBB48_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB48_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_77
.LBB48_76:                              # %if.else292
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_77:                              # %if.end303
                                        #   in Loop: Header=BB48_73 Depth=1
	jmp	.LBB48_78
.LBB48_78:                              # %for.inc304
                                        #   in Loop: Header=BB48_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_73
.LBB48_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB48_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB48_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB48_80 Depth=1
	movl	$0, -4(%rbp)
.LBB48_82:                              # %for.cond310
                                        #   Parent Loop BB48_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_86
.LBB48_85:                              # %if.else328
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_86:                              # %if.end342
                                        #   in Loop: Header=BB48_82 Depth=2
	jmp	.LBB48_87
.LBB48_87:                              # %for.inc343
                                        #   in Loop: Header=BB48_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_82
.LBB48_88:                              # %for.end345
                                        #   in Loop: Header=BB48_80 Depth=1
	jmp	.LBB48_89
.LBB48_89:                              # %for.inc346
                                        #   in Loop: Header=BB48_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_80
.LBB48_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB48_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB48_91 Depth=1
	movl	$0, -4(%rbp)
.LBB48_93:                              # %for.cond352
                                        #   Parent Loop BB48_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_97
.LBB48_96:                              # %if.else370
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_97:                              # %if.end384
                                        #   in Loop: Header=BB48_93 Depth=2
	jmp	.LBB48_98
.LBB48_98:                              # %for.inc385
                                        #   in Loop: Header=BB48_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_93
.LBB48_99:                              # %for.end387
                                        #   in Loop: Header=BB48_91 Depth=1
	jmp	.LBB48_100
.LBB48_100:                             # %for.inc388
                                        #   in Loop: Header=BB48_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_91
.LBB48_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB48_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB48_102 Depth=1
	movl	$0, -4(%rbp)
.LBB48_104:                             # %for.cond394
                                        #   Parent Loop BB48_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_108
.LBB48_107:                             # %if.else412
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_108:                             # %if.end426
                                        #   in Loop: Header=BB48_104 Depth=2
	jmp	.LBB48_109
.LBB48_109:                             # %for.inc427
                                        #   in Loop: Header=BB48_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_104
.LBB48_110:                             # %for.end429
                                        #   in Loop: Header=BB48_102 Depth=1
	jmp	.LBB48_111
.LBB48_111:                             # %for.inc430
                                        #   in Loop: Header=BB48_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_102
.LBB48_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB48_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB48_113 Depth=1
	movl	$0, -4(%rbp)
.LBB48_115:                             # %for.cond436
                                        #   Parent Loop BB48_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_119
.LBB48_118:                             # %if.else454
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_119:                             # %if.end468
                                        #   in Loop: Header=BB48_115 Depth=2
	jmp	.LBB48_120
.LBB48_120:                             # %for.inc469
                                        #   in Loop: Header=BB48_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_115
.LBB48_121:                             # %for.end471
                                        #   in Loop: Header=BB48_113 Depth=1
	jmp	.LBB48_122
.LBB48_122:                             # %for.inc472
                                        #   in Loop: Header=BB48_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_113
.LBB48_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB48_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB48_124 Depth=1
	movl	$0, -4(%rbp)
.LBB48_126:                             # %for.cond478
                                        #   Parent Loop BB48_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB48_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_130
.LBB48_129:                             # %if.else496
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_130:                             # %if.end510
                                        #   in Loop: Header=BB48_126 Depth=2
	jmp	.LBB48_131
.LBB48_131:                             # %for.inc511
                                        #   in Loop: Header=BB48_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_126
.LBB48_132:                             # %for.end513
                                        #   in Loop: Header=BB48_124 Depth=1
	jmp	.LBB48_133
.LBB48_133:                             # %for.inc514
                                        #   in Loop: Header=BB48_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_124
.LBB48_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB48_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	$0, -4(%rbp)
.LBB48_137:                             # %for.cond520
                                        #   Parent Loop BB48_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB48_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_141
.LBB48_140:                             # %if.else538
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_141:                             # %if.end552
                                        #   in Loop: Header=BB48_137 Depth=2
	jmp	.LBB48_142
.LBB48_142:                             # %for.inc553
                                        #   in Loop: Header=BB48_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_137
.LBB48_143:                             # %for.end555
                                        #   in Loop: Header=BB48_135 Depth=1
	jmp	.LBB48_144
.LBB48_144:                             # %for.inc556
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_135
.LBB48_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB48_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB48_146 Depth=1
	movl	$0, -4(%rbp)
.LBB48_148:                             # %for.cond562
                                        #   Parent Loop BB48_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_152
.LBB48_151:                             # %if.else580
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_152:                             # %if.end594
                                        #   in Loop: Header=BB48_148 Depth=2
	jmp	.LBB48_153
.LBB48_153:                             # %for.inc595
                                        #   in Loop: Header=BB48_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_148
.LBB48_154:                             # %for.end597
                                        #   in Loop: Header=BB48_146 Depth=1
	jmp	.LBB48_155
.LBB48_155:                             # %for.inc598
                                        #   in Loop: Header=BB48_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_146
.LBB48_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB48_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	$0, -4(%rbp)
.LBB48_159:                             # %for.cond604
                                        #   Parent Loop BB48_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_163
.LBB48_162:                             # %if.else622
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_163:                             # %if.end636
                                        #   in Loop: Header=BB48_159 Depth=2
	jmp	.LBB48_164
.LBB48_164:                             # %for.inc637
                                        #   in Loop: Header=BB48_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_159
.LBB48_165:                             # %for.end639
                                        #   in Loop: Header=BB48_157 Depth=1
	jmp	.LBB48_166
.LBB48_166:                             # %for.inc640
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_157
.LBB48_167:                             # %for.end642
	cmpl	$1913953634, -28(%rbp)  # imm = 0x72149D62
	jne	.LBB48_169
.LBB48_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_168
.Lfunc_end48:
	.size	init_contexts.41, .Lfunc_end48-init_contexts.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.42
.LCPI49_0:
	.quad	4611686018427387904     # double 2
.LCPI49_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.42
	.p2align	4, 0x90
	.type	create_context_memory.42,@function
create_context_memory.42:               # @create_context_memory.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1587411698, -20(%rbp)  # imm = 0x5E9DFAF2
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB49_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB49_3
.LBB49_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB49_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB49_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB49_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB49_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB49_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB49_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB49_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB49_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB49_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB49_11:                              # %if.end10
                                        #   in Loop: Header=BB49_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB49_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB49_13:                              # %if.end16
                                        #   in Loop: Header=BB49_8 Depth=1
	movl	$0, -8(%rbp)
.LBB49_14:                              # %for.cond17
                                        #   Parent Loop BB49_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB49_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB49_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB49_17:                              # %if.end28
                                        #   in Loop: Header=BB49_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB49_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB49_19:                              # %if.end39
                                        #   in Loop: Header=BB49_14 Depth=2
	jmp	.LBB49_20
.LBB49_20:                              # %for.inc
                                        #   in Loop: Header=BB49_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_14
.LBB49_21:                              # %for.end
                                        #   in Loop: Header=BB49_8 Depth=1
	jmp	.LBB49_22
.LBB49_22:                              # %for.inc40
                                        #   in Loop: Header=BB49_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_8
.LBB49_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB49_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_26 Depth 2
                                        #       Child Loop BB49_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB49_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB49_24 Depth=1
	movl	$0, -8(%rbp)
.LBB49_26:                              # %for.cond47
                                        #   Parent Loop BB49_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB49_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB49_26 Depth=2
	movl	$0, -12(%rbp)
.LBB49_28:                              # %for.cond51
                                        #   Parent Loop BB49_24 Depth=1
                                        #     Parent Loop BB49_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB49_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB49_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB49_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_28
.LBB49_31:                              # %for.end63
                                        #   in Loop: Header=BB49_26 Depth=2
	jmp	.LBB49_32
.LBB49_32:                              # %for.inc64
                                        #   in Loop: Header=BB49_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_26
.LBB49_33:                              # %for.end66
                                        #   in Loop: Header=BB49_24 Depth=1
	jmp	.LBB49_34
.LBB49_34:                              # %for.inc67
                                        #   in Loop: Header=BB49_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_24
.LBB49_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB49_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB49_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB49_36 Depth=1
	vmovsd	.LCPI49_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB49_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_36
.LBB49_39:                              # %for.end98
	cmpl	$1587411698, -20(%rbp)  # imm = 0x5E9DFAF2
	jne	.LBB49_41
.LBB49_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_40
.Lfunc_end49:
	.size	create_context_memory.42, .Lfunc_end49-create_context_memory.42
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.43
.LCPI50_0:
	.quad	4607182418800017408     # double 1
.LCPI50_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI50_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI50_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.43
	.p2align	4, 0x90
	.type	XRate.43,@function
XRate.43:                               # @XRate.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1089722979, -36(%rbp)  # imm = 0x40F3DA63
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB50_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB50_3
.LBB50_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB50_3:                               # %cond.end
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI50_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI50_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI50_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB50_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB50_6
.LBB50_5:                               # %cond.false6
	vmovsd	.LCPI50_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI50_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI50_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB50_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB50_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB50_9
.LBB50_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB50_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB50_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB50_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB50_13
.LBB50_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB50_13:                              # %cond.end26
	jmp	.LBB50_15
.LBB50_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB50_15
.LBB50_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB50_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB50_18
.LBB50_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB50_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1089722979, -36(%rbp)  # imm = 0x40F3DA63
	jne	.LBB50_20
.LBB50_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB50_19
.Lfunc_end50:
	.size	XRate.43, .Lfunc_end50-XRate.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.44
.LCPI51_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.44
	.p2align	4, 0x90
	.type	GetCtxModelNumber.44,@function
GetCtxModelNumber.44:                   # @GetCtxModelNumber.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$855420076, -44(%rbp)   # imm = 0x32FCACAC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
                                        #       Child Loop BB51_5 Depth 3
                                        #     Child Loop BB51_14 Depth 2
                                        #       Child Loop BB51_16 Depth 3
                                        #     Child Loop BB51_25 Depth 2
                                        #       Child Loop BB51_27 Depth 3
                                        #     Child Loop BB51_36 Depth 2
                                        #       Child Loop BB51_38 Depth 3
                                        #     Child Loop BB51_47 Depth 2
                                        #     Child Loop BB51_54 Depth 2
                                        #     Child Loop BB51_61 Depth 2
                                        #     Child Loop BB51_68 Depth 2
                                        #     Child Loop BB51_75 Depth 2
                                        #     Child Loop BB51_82 Depth 2
                                        #       Child Loop BB51_84 Depth 3
                                        #     Child Loop BB51_93 Depth 2
                                        #       Child Loop BB51_95 Depth 3
                                        #     Child Loop BB51_104 Depth 2
                                        #       Child Loop BB51_106 Depth 3
                                        #     Child Loop BB51_115 Depth 2
                                        #       Child Loop BB51_117 Depth 3
                                        #     Child Loop BB51_126 Depth 2
                                        #       Child Loop BB51_128 Depth 3
                                        #     Child Loop BB51_137 Depth 2
                                        #       Child Loop BB51_139 Depth 3
                                        #     Child Loop BB51_148 Depth 2
                                        #       Child Loop BB51_150 Depth 3
                                        #     Child Loop BB51_159 Depth 2
                                        #       Child Loop BB51_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB51_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB51_3:                               # %for.cond2
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB51_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$0, -4(%rbp)
.LBB51_5:                               # %for.cond5
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB51_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_9
.LBB51_8:                               # %if.else
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_9:                               # %if.end
                                        #   in Loop: Header=BB51_5 Depth=3
	jmp	.LBB51_10
.LBB51_10:                              # %for.inc
                                        #   in Loop: Header=BB51_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_5
.LBB51_11:                              # %for.end
                                        #   in Loop: Header=BB51_3 Depth=2
	jmp	.LBB51_12
.LBB51_12:                              # %for.inc33
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_3
.LBB51_13:                              # %for.end35
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_14:                              # %for.cond36
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB51_14 Depth=2
	movl	$0, -4(%rbp)
.LBB51_16:                              # %for.cond39
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB51_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_20
.LBB51_19:                              # %if.else58
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_20:                              # %if.end73
                                        #   in Loop: Header=BB51_16 Depth=3
	jmp	.LBB51_21
.LBB51_21:                              # %for.inc74
                                        #   in Loop: Header=BB51_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_16
.LBB51_22:                              # %for.end76
                                        #   in Loop: Header=BB51_14 Depth=2
	jmp	.LBB51_23
.LBB51_23:                              # %for.inc77
                                        #   in Loop: Header=BB51_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_14
.LBB51_24:                              # %for.end79
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_25:                              # %for.cond80
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB51_25 Depth=2
	movl	$0, -4(%rbp)
.LBB51_27:                              # %for.cond83
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB51_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_31
.LBB51_30:                              # %if.else102
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_31:                              # %if.end117
                                        #   in Loop: Header=BB51_27 Depth=3
	jmp	.LBB51_32
.LBB51_32:                              # %for.inc118
                                        #   in Loop: Header=BB51_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_27
.LBB51_33:                              # %for.end120
                                        #   in Loop: Header=BB51_25 Depth=2
	jmp	.LBB51_34
.LBB51_34:                              # %for.inc121
                                        #   in Loop: Header=BB51_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_25
.LBB51_35:                              # %for.end123
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_36:                              # %for.cond124
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB51_36 Depth=2
	movl	$0, -4(%rbp)
.LBB51_38:                              # %for.cond127
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB51_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_42
.LBB51_41:                              # %if.else146
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_42:                              # %if.end161
                                        #   in Loop: Header=BB51_38 Depth=3
	jmp	.LBB51_43
.LBB51_43:                              # %for.inc162
                                        #   in Loop: Header=BB51_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_38
.LBB51_44:                              # %for.end164
                                        #   in Loop: Header=BB51_36 Depth=2
	jmp	.LBB51_45
.LBB51_45:                              # %for.inc165
                                        #   in Loop: Header=BB51_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_36
.LBB51_46:                              # %for.end167
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_47:                              # %for.cond168
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_51
.LBB51_50:                              # %if.else184
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_51:                              # %if.end196
                                        #   in Loop: Header=BB51_47 Depth=2
	jmp	.LBB51_52
.LBB51_52:                              # %for.inc197
                                        #   in Loop: Header=BB51_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_47
.LBB51_53:                              # %for.end199
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_54:                              # %for.cond200
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_58
.LBB51_57:                              # %if.else216
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_58:                              # %if.end228
                                        #   in Loop: Header=BB51_54 Depth=2
	jmp	.LBB51_59
.LBB51_59:                              # %for.inc229
                                        #   in Loop: Header=BB51_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_54
.LBB51_60:                              # %for.end231
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_61:                              # %for.cond232
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB51_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_65
.LBB51_64:                              # %if.else248
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_65:                              # %if.end260
                                        #   in Loop: Header=BB51_61 Depth=2
	jmp	.LBB51_66
.LBB51_66:                              # %for.inc261
                                        #   in Loop: Header=BB51_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_61
.LBB51_67:                              # %for.end263
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_68:                              # %for.cond264
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB51_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_72
.LBB51_71:                              # %if.else280
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_72:                              # %if.end292
                                        #   in Loop: Header=BB51_68 Depth=2
	jmp	.LBB51_73
.LBB51_73:                              # %for.inc293
                                        #   in Loop: Header=BB51_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_68
.LBB51_74:                              # %for.end295
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_75:                              # %for.cond296
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_79
.LBB51_78:                              # %if.else312
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_79:                              # %if.end324
                                        #   in Loop: Header=BB51_75 Depth=2
	jmp	.LBB51_80
.LBB51_80:                              # %for.inc325
                                        #   in Loop: Header=BB51_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_75
.LBB51_81:                              # %for.end327
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_82:                              # %for.cond328
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB51_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	$0, -4(%rbp)
.LBB51_84:                              # %for.cond331
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB51_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_88
.LBB51_87:                              # %if.else350
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_88:                              # %if.end365
                                        #   in Loop: Header=BB51_84 Depth=3
	jmp	.LBB51_89
.LBB51_89:                              # %for.inc366
                                        #   in Loop: Header=BB51_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_84
.LBB51_90:                              # %for.end368
                                        #   in Loop: Header=BB51_82 Depth=2
	jmp	.LBB51_91
.LBB51_91:                              # %for.inc369
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_82
.LBB51_92:                              # %for.end371
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_93:                              # %for.cond372
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB51_93 Depth=2
	movl	$0, -4(%rbp)
.LBB51_95:                              # %for.cond375
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB51_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_99
.LBB51_98:                              # %if.else394
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_99:                              # %if.end409
                                        #   in Loop: Header=BB51_95 Depth=3
	jmp	.LBB51_100
.LBB51_100:                             # %for.inc410
                                        #   in Loop: Header=BB51_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_95
.LBB51_101:                             # %for.end412
                                        #   in Loop: Header=BB51_93 Depth=2
	jmp	.LBB51_102
.LBB51_102:                             # %for.inc413
                                        #   in Loop: Header=BB51_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_93
.LBB51_103:                             # %for.end415
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_104:                             # %for.cond416
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB51_104 Depth=2
	movl	$0, -4(%rbp)
.LBB51_106:                             # %for.cond419
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_110
.LBB51_109:                             # %if.else438
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_110:                             # %if.end453
                                        #   in Loop: Header=BB51_106 Depth=3
	jmp	.LBB51_111
.LBB51_111:                             # %for.inc454
                                        #   in Loop: Header=BB51_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_106
.LBB51_112:                             # %for.end456
                                        #   in Loop: Header=BB51_104 Depth=2
	jmp	.LBB51_113
.LBB51_113:                             # %for.inc457
                                        #   in Loop: Header=BB51_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_104
.LBB51_114:                             # %for.end459
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_115:                             # %for.cond460
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB51_115 Depth=2
	movl	$0, -4(%rbp)
.LBB51_117:                             # %for.cond463
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_121
.LBB51_120:                             # %if.else482
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_121:                             # %if.end497
                                        #   in Loop: Header=BB51_117 Depth=3
	jmp	.LBB51_122
.LBB51_122:                             # %for.inc498
                                        #   in Loop: Header=BB51_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_117
.LBB51_123:                             # %for.end500
                                        #   in Loop: Header=BB51_115 Depth=2
	jmp	.LBB51_124
.LBB51_124:                             # %for.inc501
                                        #   in Loop: Header=BB51_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_115
.LBB51_125:                             # %for.end503
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_126:                             # %for.cond504
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB51_126 Depth=2
	movl	$0, -4(%rbp)
.LBB51_128:                             # %for.cond507
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB51_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_132
.LBB51_131:                             # %if.else526
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_132:                             # %if.end541
                                        #   in Loop: Header=BB51_128 Depth=3
	jmp	.LBB51_133
.LBB51_133:                             # %for.inc542
                                        #   in Loop: Header=BB51_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_128
.LBB51_134:                             # %for.end544
                                        #   in Loop: Header=BB51_126 Depth=2
	jmp	.LBB51_135
.LBB51_135:                             # %for.inc545
                                        #   in Loop: Header=BB51_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_126
.LBB51_136:                             # %for.end547
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_137:                             # %for.cond548
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB51_137 Depth=2
	movl	$0, -4(%rbp)
.LBB51_139:                             # %for.cond551
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB51_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_143
.LBB51_142:                             # %if.else570
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_143:                             # %if.end585
                                        #   in Loop: Header=BB51_139 Depth=3
	jmp	.LBB51_144
.LBB51_144:                             # %for.inc586
                                        #   in Loop: Header=BB51_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_139
.LBB51_145:                             # %for.end588
                                        #   in Loop: Header=BB51_137 Depth=2
	jmp	.LBB51_146
.LBB51_146:                             # %for.inc589
                                        #   in Loop: Header=BB51_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_137
.LBB51_147:                             # %for.end591
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_148:                             # %for.cond592
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB51_148 Depth=2
	movl	$0, -4(%rbp)
.LBB51_150:                             # %for.cond595
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_154
.LBB51_153:                             # %if.else614
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_154:                             # %if.end629
                                        #   in Loop: Header=BB51_150 Depth=3
	jmp	.LBB51_155
.LBB51_155:                             # %for.inc630
                                        #   in Loop: Header=BB51_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_150
.LBB51_156:                             # %for.end632
                                        #   in Loop: Header=BB51_148 Depth=2
	jmp	.LBB51_157
.LBB51_157:                             # %for.inc633
                                        #   in Loop: Header=BB51_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_148
.LBB51_158:                             # %for.end635
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_159:                             # %for.cond636
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB51_159 Depth=2
	movl	$0, -4(%rbp)
.LBB51_161:                             # %for.cond639
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_165
.LBB51_164:                             # %if.else658
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_165:                             # %if.end673
                                        #   in Loop: Header=BB51_161 Depth=3
	jmp	.LBB51_166
.LBB51_166:                             # %for.inc674
                                        #   in Loop: Header=BB51_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_161
.LBB51_167:                             # %for.end676
                                        #   in Loop: Header=BB51_159 Depth=2
	jmp	.LBB51_168
.LBB51_168:                             # %for.inc677
                                        #   in Loop: Header=BB51_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_159
.LBB51_169:                             # %for.end679
                                        #   in Loop: Header=BB51_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB51_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB51_171:                             # %if.end682
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_172
.LBB51_172:                             # %for.inc683
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_173:                             # %for.end685
	cmpl	$855420076, -44(%rbp)   # imm = 0x32FCACAC
	jne	.LBB51_175
.LBB51_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_174
.Lfunc_end51:
	.size	GetCtxModelNumber.44, .Lfunc_end51-GetCtxModelNumber.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.45
.LCPI52_0:
	.quad	4607182418800017408     # double 1
.LCPI52_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI52_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI52_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.45
	.p2align	4, 0x90
	.type	XRate.45,@function
XRate.45:                               # @XRate.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1733677597, -32(%rbp)  # imm = 0x6755D21D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB52_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB52_3
.LBB52_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB52_3:                               # %cond.end
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI52_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI52_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB52_6
.LBB52_5:                               # %cond.false6
	vmovsd	.LCPI52_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI52_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI52_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB52_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB52_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB52_9
.LBB52_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB52_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB52_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB52_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB52_13
.LBB52_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB52_13:                              # %cond.end26
	jmp	.LBB52_15
.LBB52_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB52_15
.LBB52_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB52_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB52_18
.LBB52_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB52_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1733677597, -32(%rbp)  # imm = 0x6755D21D
	jne	.LBB52_20
.LBB52_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB52_19
.Lfunc_end52:
	.size	XRate.45, .Lfunc_end52-XRate.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.46
.LCPI53_0:
	.quad	4607182418800017408     # double 1
.LCPI53_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI53_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI53_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.46
	.p2align	4, 0x90
	.type	XRate.46,@function
XRate.46:                               # @XRate.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1678506371, -32(%rbp)  # imm = 0x640BF983
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB53_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB53_3
.LBB53_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB53_3:                               # %cond.end
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI53_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI53_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI53_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB53_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB53_6
.LBB53_5:                               # %cond.false6
	vmovsd	.LCPI53_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI53_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI53_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB53_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB53_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB53_9
.LBB53_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB53_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB53_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB53_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB53_13
.LBB53_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB53_13:                              # %cond.end26
	jmp	.LBB53_15
.LBB53_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB53_15
.LBB53_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB53_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB53_18
.LBB53_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB53_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1678506371, -32(%rbp)  # imm = 0x640BF983
	jne	.LBB53_20
.LBB53_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB53_19
.Lfunc_end53:
	.size	XRate.46, .Lfunc_end53-XRate.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.47
.LCPI54_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.47
	.p2align	4, 0x90
	.type	GetCtxModelNumber.47,@function
GetCtxModelNumber.47:                   # @GetCtxModelNumber.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1264722767, -44(%rbp)  # imm = 0x4B62234F
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
                                        #       Child Loop BB54_5 Depth 3
                                        #     Child Loop BB54_14 Depth 2
                                        #       Child Loop BB54_16 Depth 3
                                        #     Child Loop BB54_25 Depth 2
                                        #       Child Loop BB54_27 Depth 3
                                        #     Child Loop BB54_36 Depth 2
                                        #       Child Loop BB54_38 Depth 3
                                        #     Child Loop BB54_47 Depth 2
                                        #     Child Loop BB54_54 Depth 2
                                        #     Child Loop BB54_61 Depth 2
                                        #     Child Loop BB54_68 Depth 2
                                        #     Child Loop BB54_75 Depth 2
                                        #     Child Loop BB54_82 Depth 2
                                        #       Child Loop BB54_84 Depth 3
                                        #     Child Loop BB54_93 Depth 2
                                        #       Child Loop BB54_95 Depth 3
                                        #     Child Loop BB54_104 Depth 2
                                        #       Child Loop BB54_106 Depth 3
                                        #     Child Loop BB54_115 Depth 2
                                        #       Child Loop BB54_117 Depth 3
                                        #     Child Loop BB54_126 Depth 2
                                        #       Child Loop BB54_128 Depth 3
                                        #     Child Loop BB54_137 Depth 2
                                        #       Child Loop BB54_139 Depth 3
                                        #     Child Loop BB54_148 Depth 2
                                        #       Child Loop BB54_150 Depth 3
                                        #     Child Loop BB54_159 Depth 2
                                        #       Child Loop BB54_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB54_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB54_3:                               # %for.cond2
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB54_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	$0, -4(%rbp)
.LBB54_5:                               # %for.cond5
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB54_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB54_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB54_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_9
.LBB54_8:                               # %if.else
                                        #   in Loop: Header=BB54_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_9:                               # %if.end
                                        #   in Loop: Header=BB54_5 Depth=3
	jmp	.LBB54_10
.LBB54_10:                              # %for.inc
                                        #   in Loop: Header=BB54_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_5
.LBB54_11:                              # %for.end
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_12
.LBB54_12:                              # %for.inc33
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_3
.LBB54_13:                              # %for.end35
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_14:                              # %for.cond36
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB54_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB54_14 Depth=2
	movl	$0, -4(%rbp)
.LBB54_16:                              # %for.cond39
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB54_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB54_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB54_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_20
.LBB54_19:                              # %if.else58
                                        #   in Loop: Header=BB54_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_20:                              # %if.end73
                                        #   in Loop: Header=BB54_16 Depth=3
	jmp	.LBB54_21
.LBB54_21:                              # %for.inc74
                                        #   in Loop: Header=BB54_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_16
.LBB54_22:                              # %for.end76
                                        #   in Loop: Header=BB54_14 Depth=2
	jmp	.LBB54_23
.LBB54_23:                              # %for.inc77
                                        #   in Loop: Header=BB54_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_14
.LBB54_24:                              # %for.end79
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_25:                              # %for.cond80
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB54_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB54_25 Depth=2
	movl	$0, -4(%rbp)
.LBB54_27:                              # %for.cond83
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB54_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB54_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB54_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_31
.LBB54_30:                              # %if.else102
                                        #   in Loop: Header=BB54_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_31:                              # %if.end117
                                        #   in Loop: Header=BB54_27 Depth=3
	jmp	.LBB54_32
.LBB54_32:                              # %for.inc118
                                        #   in Loop: Header=BB54_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_27
.LBB54_33:                              # %for.end120
                                        #   in Loop: Header=BB54_25 Depth=2
	jmp	.LBB54_34
.LBB54_34:                              # %for.inc121
                                        #   in Loop: Header=BB54_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_25
.LBB54_35:                              # %for.end123
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_36:                              # %for.cond124
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB54_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB54_36 Depth=2
	movl	$0, -4(%rbp)
.LBB54_38:                              # %for.cond127
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB54_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB54_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB54_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_42
.LBB54_41:                              # %if.else146
                                        #   in Loop: Header=BB54_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_42:                              # %if.end161
                                        #   in Loop: Header=BB54_38 Depth=3
	jmp	.LBB54_43
.LBB54_43:                              # %for.inc162
                                        #   in Loop: Header=BB54_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_38
.LBB54_44:                              # %for.end164
                                        #   in Loop: Header=BB54_36 Depth=2
	jmp	.LBB54_45
.LBB54_45:                              # %for.inc165
                                        #   in Loop: Header=BB54_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_36
.LBB54_46:                              # %for.end167
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_47:                              # %for.cond168
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB54_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB54_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_51
.LBB54_50:                              # %if.else184
                                        #   in Loop: Header=BB54_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_51:                              # %if.end196
                                        #   in Loop: Header=BB54_47 Depth=2
	jmp	.LBB54_52
.LBB54_52:                              # %for.inc197
                                        #   in Loop: Header=BB54_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_47
.LBB54_53:                              # %for.end199
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_54:                              # %for.cond200
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB54_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB54_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_58
.LBB54_57:                              # %if.else216
                                        #   in Loop: Header=BB54_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_58:                              # %if.end228
                                        #   in Loop: Header=BB54_54 Depth=2
	jmp	.LBB54_59
.LBB54_59:                              # %for.inc229
                                        #   in Loop: Header=BB54_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_54
.LBB54_60:                              # %for.end231
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_61:                              # %for.cond232
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB54_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB54_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB54_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_65
.LBB54_64:                              # %if.else248
                                        #   in Loop: Header=BB54_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_65:                              # %if.end260
                                        #   in Loop: Header=BB54_61 Depth=2
	jmp	.LBB54_66
.LBB54_66:                              # %for.inc261
                                        #   in Loop: Header=BB54_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_61
.LBB54_67:                              # %for.end263
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_68:                              # %for.cond264
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB54_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB54_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB54_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_72
.LBB54_71:                              # %if.else280
                                        #   in Loop: Header=BB54_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_72:                              # %if.end292
                                        #   in Loop: Header=BB54_68 Depth=2
	jmp	.LBB54_73
.LBB54_73:                              # %for.inc293
                                        #   in Loop: Header=BB54_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_68
.LBB54_74:                              # %for.end295
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_75:                              # %for.cond296
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB54_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB54_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_79
.LBB54_78:                              # %if.else312
                                        #   in Loop: Header=BB54_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_79:                              # %if.end324
                                        #   in Loop: Header=BB54_75 Depth=2
	jmp	.LBB54_80
.LBB54_80:                              # %for.inc325
                                        #   in Loop: Header=BB54_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_75
.LBB54_81:                              # %for.end327
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_82:                              # %for.cond328
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB54_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB54_82 Depth=2
	movl	$0, -4(%rbp)
.LBB54_84:                              # %for.cond331
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB54_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB54_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB54_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_88
.LBB54_87:                              # %if.else350
                                        #   in Loop: Header=BB54_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_88:                              # %if.end365
                                        #   in Loop: Header=BB54_84 Depth=3
	jmp	.LBB54_89
.LBB54_89:                              # %for.inc366
                                        #   in Loop: Header=BB54_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_84
.LBB54_90:                              # %for.end368
                                        #   in Loop: Header=BB54_82 Depth=2
	jmp	.LBB54_91
.LBB54_91:                              # %for.inc369
                                        #   in Loop: Header=BB54_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_82
.LBB54_92:                              # %for.end371
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_93:                              # %for.cond372
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB54_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB54_93 Depth=2
	movl	$0, -4(%rbp)
.LBB54_95:                              # %for.cond375
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB54_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB54_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB54_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_99
.LBB54_98:                              # %if.else394
                                        #   in Loop: Header=BB54_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_99:                              # %if.end409
                                        #   in Loop: Header=BB54_95 Depth=3
	jmp	.LBB54_100
.LBB54_100:                             # %for.inc410
                                        #   in Loop: Header=BB54_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_95
.LBB54_101:                             # %for.end412
                                        #   in Loop: Header=BB54_93 Depth=2
	jmp	.LBB54_102
.LBB54_102:                             # %for.inc413
                                        #   in Loop: Header=BB54_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_93
.LBB54_103:                             # %for.end415
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_104:                             # %for.cond416
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB54_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB54_104 Depth=2
	movl	$0, -4(%rbp)
.LBB54_106:                             # %for.cond419
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB54_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB54_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB54_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_110
.LBB54_109:                             # %if.else438
                                        #   in Loop: Header=BB54_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_110:                             # %if.end453
                                        #   in Loop: Header=BB54_106 Depth=3
	jmp	.LBB54_111
.LBB54_111:                             # %for.inc454
                                        #   in Loop: Header=BB54_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_106
.LBB54_112:                             # %for.end456
                                        #   in Loop: Header=BB54_104 Depth=2
	jmp	.LBB54_113
.LBB54_113:                             # %for.inc457
                                        #   in Loop: Header=BB54_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_104
.LBB54_114:                             # %for.end459
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_115:                             # %for.cond460
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB54_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB54_115 Depth=2
	movl	$0, -4(%rbp)
.LBB54_117:                             # %for.cond463
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB54_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB54_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB54_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_121
.LBB54_120:                             # %if.else482
                                        #   in Loop: Header=BB54_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_121:                             # %if.end497
                                        #   in Loop: Header=BB54_117 Depth=3
	jmp	.LBB54_122
.LBB54_122:                             # %for.inc498
                                        #   in Loop: Header=BB54_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_117
.LBB54_123:                             # %for.end500
                                        #   in Loop: Header=BB54_115 Depth=2
	jmp	.LBB54_124
.LBB54_124:                             # %for.inc501
                                        #   in Loop: Header=BB54_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_115
.LBB54_125:                             # %for.end503
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_126:                             # %for.cond504
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB54_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB54_126 Depth=2
	movl	$0, -4(%rbp)
.LBB54_128:                             # %for.cond507
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB54_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB54_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB54_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_132
.LBB54_131:                             # %if.else526
                                        #   in Loop: Header=BB54_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_132:                             # %if.end541
                                        #   in Loop: Header=BB54_128 Depth=3
	jmp	.LBB54_133
.LBB54_133:                             # %for.inc542
                                        #   in Loop: Header=BB54_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_128
.LBB54_134:                             # %for.end544
                                        #   in Loop: Header=BB54_126 Depth=2
	jmp	.LBB54_135
.LBB54_135:                             # %for.inc545
                                        #   in Loop: Header=BB54_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_126
.LBB54_136:                             # %for.end547
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_137:                             # %for.cond548
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB54_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB54_137 Depth=2
	movl	$0, -4(%rbp)
.LBB54_139:                             # %for.cond551
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB54_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB54_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB54_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_143
.LBB54_142:                             # %if.else570
                                        #   in Loop: Header=BB54_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_143:                             # %if.end585
                                        #   in Loop: Header=BB54_139 Depth=3
	jmp	.LBB54_144
.LBB54_144:                             # %for.inc586
                                        #   in Loop: Header=BB54_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_139
.LBB54_145:                             # %for.end588
                                        #   in Loop: Header=BB54_137 Depth=2
	jmp	.LBB54_146
.LBB54_146:                             # %for.inc589
                                        #   in Loop: Header=BB54_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_137
.LBB54_147:                             # %for.end591
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_148:                             # %for.cond592
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB54_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB54_148 Depth=2
	movl	$0, -4(%rbp)
.LBB54_150:                             # %for.cond595
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB54_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB54_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB54_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_154
.LBB54_153:                             # %if.else614
                                        #   in Loop: Header=BB54_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_154:                             # %if.end629
                                        #   in Loop: Header=BB54_150 Depth=3
	jmp	.LBB54_155
.LBB54_155:                             # %for.inc630
                                        #   in Loop: Header=BB54_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_150
.LBB54_156:                             # %for.end632
                                        #   in Loop: Header=BB54_148 Depth=2
	jmp	.LBB54_157
.LBB54_157:                             # %for.inc633
                                        #   in Loop: Header=BB54_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_148
.LBB54_158:                             # %for.end635
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_159:                             # %for.cond636
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB54_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB54_159 Depth=2
	movl	$0, -4(%rbp)
.LBB54_161:                             # %for.cond639
                                        #   Parent Loop BB54_1 Depth=1
                                        #     Parent Loop BB54_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB54_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB54_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB54_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB54_165
.LBB54_164:                             # %if.else658
                                        #   in Loop: Header=BB54_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB54_165:                             # %if.end673
                                        #   in Loop: Header=BB54_161 Depth=3
	jmp	.LBB54_166
.LBB54_166:                             # %for.inc674
                                        #   in Loop: Header=BB54_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_161
.LBB54_167:                             # %for.end676
                                        #   in Loop: Header=BB54_159 Depth=2
	jmp	.LBB54_168
.LBB54_168:                             # %for.inc677
                                        #   in Loop: Header=BB54_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_159
.LBB54_169:                             # %for.end679
                                        #   in Loop: Header=BB54_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB54_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB54_171:                             # %if.end682
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_172
.LBB54_172:                             # %for.inc683
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_1
.LBB54_173:                             # %for.end685
	cmpl	$1264722767, -44(%rbp)  # imm = 0x4B62234F
	jne	.LBB54_175
.LBB54_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_174
.Lfunc_end54:
	.size	GetCtxModelNumber.47, .Lfunc_end54-GetCtxModelNumber.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.48
.LCPI55_0:
	.quad	4607182418800017408     # double 1
.LCPI55_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI55_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI55_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.48
	.p2align	4, 0x90
	.type	XRate.48,@function
XRate.48:                               # @XRate.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$909535242, -36(%rbp)   # imm = 0x3636680A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB55_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB55_3
.LBB55_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB55_3:                               # %cond.end
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI55_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI55_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI55_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB55_6
.LBB55_5:                               # %cond.false6
	vmovsd	.LCPI55_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI55_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI55_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB55_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB55_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB55_9
.LBB55_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB55_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB55_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB55_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB55_13
.LBB55_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB55_13:                              # %cond.end26
	jmp	.LBB55_15
.LBB55_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB55_15
.LBB55_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB55_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB55_18
.LBB55_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB55_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$909535242, -36(%rbp)   # imm = 0x3636680A
	jne	.LBB55_20
.LBB55_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB55_19
.Lfunc_end55:
	.size	XRate.48, .Lfunc_end55-XRate.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.49
.LCPI56_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.49
	.p2align	4, 0x90
	.type	GetCtxModelNumber.49,@function
GetCtxModelNumber.49:                   # @GetCtxModelNumber.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$2132946562, -44(%rbp)  # imm = 0x7F222E82
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_3 Depth 2
                                        #       Child Loop BB56_5 Depth 3
                                        #     Child Loop BB56_14 Depth 2
                                        #       Child Loop BB56_16 Depth 3
                                        #     Child Loop BB56_25 Depth 2
                                        #       Child Loop BB56_27 Depth 3
                                        #     Child Loop BB56_36 Depth 2
                                        #       Child Loop BB56_38 Depth 3
                                        #     Child Loop BB56_47 Depth 2
                                        #     Child Loop BB56_54 Depth 2
                                        #     Child Loop BB56_61 Depth 2
                                        #     Child Loop BB56_68 Depth 2
                                        #     Child Loop BB56_75 Depth 2
                                        #     Child Loop BB56_82 Depth 2
                                        #       Child Loop BB56_84 Depth 3
                                        #     Child Loop BB56_93 Depth 2
                                        #       Child Loop BB56_95 Depth 3
                                        #     Child Loop BB56_104 Depth 2
                                        #       Child Loop BB56_106 Depth 3
                                        #     Child Loop BB56_115 Depth 2
                                        #       Child Loop BB56_117 Depth 3
                                        #     Child Loop BB56_126 Depth 2
                                        #       Child Loop BB56_128 Depth 3
                                        #     Child Loop BB56_137 Depth 2
                                        #       Child Loop BB56_139 Depth 3
                                        #     Child Loop BB56_148 Depth 2
                                        #       Child Loop BB56_150 Depth 3
                                        #     Child Loop BB56_159 Depth 2
                                        #       Child Loop BB56_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB56_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB56_3:                               # %for.cond2
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB56_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	$0, -4(%rbp)
.LBB56_5:                               # %for.cond5
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB56_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB56_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB56_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_9
.LBB56_8:                               # %if.else
                                        #   in Loop: Header=BB56_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_9:                               # %if.end
                                        #   in Loop: Header=BB56_5 Depth=3
	jmp	.LBB56_10
.LBB56_10:                              # %for.inc
                                        #   in Loop: Header=BB56_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_5
.LBB56_11:                              # %for.end
                                        #   in Loop: Header=BB56_3 Depth=2
	jmp	.LBB56_12
.LBB56_12:                              # %for.inc33
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_3
.LBB56_13:                              # %for.end35
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_14:                              # %for.cond36
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB56_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB56_14 Depth=2
	movl	$0, -4(%rbp)
.LBB56_16:                              # %for.cond39
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB56_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB56_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB56_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_20
.LBB56_19:                              # %if.else58
                                        #   in Loop: Header=BB56_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_20:                              # %if.end73
                                        #   in Loop: Header=BB56_16 Depth=3
	jmp	.LBB56_21
.LBB56_21:                              # %for.inc74
                                        #   in Loop: Header=BB56_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_16
.LBB56_22:                              # %for.end76
                                        #   in Loop: Header=BB56_14 Depth=2
	jmp	.LBB56_23
.LBB56_23:                              # %for.inc77
                                        #   in Loop: Header=BB56_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_14
.LBB56_24:                              # %for.end79
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_25:                              # %for.cond80
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB56_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB56_25 Depth=2
	movl	$0, -4(%rbp)
.LBB56_27:                              # %for.cond83
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB56_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB56_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB56_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_31
.LBB56_30:                              # %if.else102
                                        #   in Loop: Header=BB56_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_31:                              # %if.end117
                                        #   in Loop: Header=BB56_27 Depth=3
	jmp	.LBB56_32
.LBB56_32:                              # %for.inc118
                                        #   in Loop: Header=BB56_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_27
.LBB56_33:                              # %for.end120
                                        #   in Loop: Header=BB56_25 Depth=2
	jmp	.LBB56_34
.LBB56_34:                              # %for.inc121
                                        #   in Loop: Header=BB56_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_25
.LBB56_35:                              # %for.end123
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_36:                              # %for.cond124
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB56_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB56_36 Depth=2
	movl	$0, -4(%rbp)
.LBB56_38:                              # %for.cond127
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB56_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB56_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB56_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_42
.LBB56_41:                              # %if.else146
                                        #   in Loop: Header=BB56_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_42:                              # %if.end161
                                        #   in Loop: Header=BB56_38 Depth=3
	jmp	.LBB56_43
.LBB56_43:                              # %for.inc162
                                        #   in Loop: Header=BB56_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_38
.LBB56_44:                              # %for.end164
                                        #   in Loop: Header=BB56_36 Depth=2
	jmp	.LBB56_45
.LBB56_45:                              # %for.inc165
                                        #   in Loop: Header=BB56_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_36
.LBB56_46:                              # %for.end167
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_47:                              # %for.cond168
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB56_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB56_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB56_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_51
.LBB56_50:                              # %if.else184
                                        #   in Loop: Header=BB56_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_51:                              # %if.end196
                                        #   in Loop: Header=BB56_47 Depth=2
	jmp	.LBB56_52
.LBB56_52:                              # %for.inc197
                                        #   in Loop: Header=BB56_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_47
.LBB56_53:                              # %for.end199
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_54:                              # %for.cond200
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB56_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB56_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB56_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_58
.LBB56_57:                              # %if.else216
                                        #   in Loop: Header=BB56_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_58:                              # %if.end228
                                        #   in Loop: Header=BB56_54 Depth=2
	jmp	.LBB56_59
.LBB56_59:                              # %for.inc229
                                        #   in Loop: Header=BB56_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_54
.LBB56_60:                              # %for.end231
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_61:                              # %for.cond232
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB56_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB56_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB56_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_65
.LBB56_64:                              # %if.else248
                                        #   in Loop: Header=BB56_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_65:                              # %if.end260
                                        #   in Loop: Header=BB56_61 Depth=2
	jmp	.LBB56_66
.LBB56_66:                              # %for.inc261
                                        #   in Loop: Header=BB56_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_61
.LBB56_67:                              # %for.end263
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_68:                              # %for.cond264
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB56_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB56_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB56_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_72
.LBB56_71:                              # %if.else280
                                        #   in Loop: Header=BB56_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_72:                              # %if.end292
                                        #   in Loop: Header=BB56_68 Depth=2
	jmp	.LBB56_73
.LBB56_73:                              # %for.inc293
                                        #   in Loop: Header=BB56_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_68
.LBB56_74:                              # %for.end295
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_75:                              # %for.cond296
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB56_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB56_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB56_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_79
.LBB56_78:                              # %if.else312
                                        #   in Loop: Header=BB56_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_79:                              # %if.end324
                                        #   in Loop: Header=BB56_75 Depth=2
	jmp	.LBB56_80
.LBB56_80:                              # %for.inc325
                                        #   in Loop: Header=BB56_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_75
.LBB56_81:                              # %for.end327
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_82:                              # %for.cond328
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB56_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB56_82 Depth=2
	movl	$0, -4(%rbp)
.LBB56_84:                              # %for.cond331
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB56_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB56_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB56_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_88
.LBB56_87:                              # %if.else350
                                        #   in Loop: Header=BB56_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_88:                              # %if.end365
                                        #   in Loop: Header=BB56_84 Depth=3
	jmp	.LBB56_89
.LBB56_89:                              # %for.inc366
                                        #   in Loop: Header=BB56_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_84
.LBB56_90:                              # %for.end368
                                        #   in Loop: Header=BB56_82 Depth=2
	jmp	.LBB56_91
.LBB56_91:                              # %for.inc369
                                        #   in Loop: Header=BB56_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_82
.LBB56_92:                              # %for.end371
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_93:                              # %for.cond372
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB56_93 Depth=2
	movl	$0, -4(%rbp)
.LBB56_95:                              # %for.cond375
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB56_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB56_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB56_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_99
.LBB56_98:                              # %if.else394
                                        #   in Loop: Header=BB56_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_99:                              # %if.end409
                                        #   in Loop: Header=BB56_95 Depth=3
	jmp	.LBB56_100
.LBB56_100:                             # %for.inc410
                                        #   in Loop: Header=BB56_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_95
.LBB56_101:                             # %for.end412
                                        #   in Loop: Header=BB56_93 Depth=2
	jmp	.LBB56_102
.LBB56_102:                             # %for.inc413
                                        #   in Loop: Header=BB56_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_93
.LBB56_103:                             # %for.end415
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_104:                             # %for.cond416
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB56_104 Depth=2
	movl	$0, -4(%rbp)
.LBB56_106:                             # %for.cond419
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB56_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB56_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB56_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_110
.LBB56_109:                             # %if.else438
                                        #   in Loop: Header=BB56_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_110:                             # %if.end453
                                        #   in Loop: Header=BB56_106 Depth=3
	jmp	.LBB56_111
.LBB56_111:                             # %for.inc454
                                        #   in Loop: Header=BB56_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_106
.LBB56_112:                             # %for.end456
                                        #   in Loop: Header=BB56_104 Depth=2
	jmp	.LBB56_113
.LBB56_113:                             # %for.inc457
                                        #   in Loop: Header=BB56_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_104
.LBB56_114:                             # %for.end459
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_115:                             # %for.cond460
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB56_115 Depth=2
	movl	$0, -4(%rbp)
.LBB56_117:                             # %for.cond463
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB56_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB56_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB56_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_121
.LBB56_120:                             # %if.else482
                                        #   in Loop: Header=BB56_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_121:                             # %if.end497
                                        #   in Loop: Header=BB56_117 Depth=3
	jmp	.LBB56_122
.LBB56_122:                             # %for.inc498
                                        #   in Loop: Header=BB56_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_117
.LBB56_123:                             # %for.end500
                                        #   in Loop: Header=BB56_115 Depth=2
	jmp	.LBB56_124
.LBB56_124:                             # %for.inc501
                                        #   in Loop: Header=BB56_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_115
.LBB56_125:                             # %for.end503
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_126:                             # %for.cond504
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB56_126 Depth=2
	movl	$0, -4(%rbp)
.LBB56_128:                             # %for.cond507
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB56_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB56_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB56_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_132
.LBB56_131:                             # %if.else526
                                        #   in Loop: Header=BB56_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_132:                             # %if.end541
                                        #   in Loop: Header=BB56_128 Depth=3
	jmp	.LBB56_133
.LBB56_133:                             # %for.inc542
                                        #   in Loop: Header=BB56_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_128
.LBB56_134:                             # %for.end544
                                        #   in Loop: Header=BB56_126 Depth=2
	jmp	.LBB56_135
.LBB56_135:                             # %for.inc545
                                        #   in Loop: Header=BB56_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_126
.LBB56_136:                             # %for.end547
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_137:                             # %for.cond548
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB56_137 Depth=2
	movl	$0, -4(%rbp)
.LBB56_139:                             # %for.cond551
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB56_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB56_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB56_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_143
.LBB56_142:                             # %if.else570
                                        #   in Loop: Header=BB56_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_143:                             # %if.end585
                                        #   in Loop: Header=BB56_139 Depth=3
	jmp	.LBB56_144
.LBB56_144:                             # %for.inc586
                                        #   in Loop: Header=BB56_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_139
.LBB56_145:                             # %for.end588
                                        #   in Loop: Header=BB56_137 Depth=2
	jmp	.LBB56_146
.LBB56_146:                             # %for.inc589
                                        #   in Loop: Header=BB56_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_137
.LBB56_147:                             # %for.end591
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_148:                             # %for.cond592
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB56_148 Depth=2
	movl	$0, -4(%rbp)
.LBB56_150:                             # %for.cond595
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB56_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB56_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB56_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_154
.LBB56_153:                             # %if.else614
                                        #   in Loop: Header=BB56_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_154:                             # %if.end629
                                        #   in Loop: Header=BB56_150 Depth=3
	jmp	.LBB56_155
.LBB56_155:                             # %for.inc630
                                        #   in Loop: Header=BB56_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_150
.LBB56_156:                             # %for.end632
                                        #   in Loop: Header=BB56_148 Depth=2
	jmp	.LBB56_157
.LBB56_157:                             # %for.inc633
                                        #   in Loop: Header=BB56_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_148
.LBB56_158:                             # %for.end635
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_159:                             # %for.cond636
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB56_159 Depth=2
	movl	$0, -4(%rbp)
.LBB56_161:                             # %for.cond639
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB56_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB56_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB56_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_165
.LBB56_164:                             # %if.else658
                                        #   in Loop: Header=BB56_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_165:                             # %if.end673
                                        #   in Loop: Header=BB56_161 Depth=3
	jmp	.LBB56_166
.LBB56_166:                             # %for.inc674
                                        #   in Loop: Header=BB56_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_161
.LBB56_167:                             # %for.end676
                                        #   in Loop: Header=BB56_159 Depth=2
	jmp	.LBB56_168
.LBB56_168:                             # %for.inc677
                                        #   in Loop: Header=BB56_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_159
.LBB56_169:                             # %for.end679
                                        #   in Loop: Header=BB56_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB56_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB56_171:                             # %if.end682
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_172
.LBB56_172:                             # %for.inc683
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_1
.LBB56_173:                             # %for.end685
	cmpl	$2132946562, -44(%rbp)  # imm = 0x7F222E82
	jne	.LBB56_175
.LBB56_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_174
.Lfunc_end56:
	.size	GetCtxModelNumber.49, .Lfunc_end56-GetCtxModelNumber.49
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.50        # -- Begin function init_contexts.50
	.p2align	4, 0x90
	.type	init_contexts.50,@function
init_contexts.50:                       # @init_contexts.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1560169091, -28(%rbp)  # imm = 0x5CFE4A83
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB57_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -4(%rbp)
.LBB57_3:                               # %for.cond2
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB57_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_7
.LBB57_6:                               # %if.else
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_7:                               # %if.end
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_8
.LBB57_8:                               # %for.inc
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_3
.LBB57_9:                               # %for.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_10
.LBB57_10:                              # %for.inc28
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_1
.LBB57_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB57_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB57_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB57_12 Depth=1
	movl	$0, -4(%rbp)
.LBB57_14:                              # %for.cond34
                                        #   Parent Loop BB57_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB57_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB57_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB57_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_18
.LBB57_17:                              # %if.else52
                                        #   in Loop: Header=BB57_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_18:                              # %if.end66
                                        #   in Loop: Header=BB57_14 Depth=2
	jmp	.LBB57_19
.LBB57_19:                              # %for.inc67
                                        #   in Loop: Header=BB57_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_14
.LBB57_20:                              # %for.end69
                                        #   in Loop: Header=BB57_12 Depth=1
	jmp	.LBB57_21
.LBB57_21:                              # %for.inc70
                                        #   in Loop: Header=BB57_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_12
.LBB57_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB57_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB57_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB57_23 Depth=1
	movl	$0, -4(%rbp)
.LBB57_25:                              # %for.cond76
                                        #   Parent Loop BB57_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB57_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB57_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB57_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_29
.LBB57_28:                              # %if.else94
                                        #   in Loop: Header=BB57_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_29:                              # %if.end108
                                        #   in Loop: Header=BB57_25 Depth=2
	jmp	.LBB57_30
.LBB57_30:                              # %for.inc109
                                        #   in Loop: Header=BB57_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_25
.LBB57_31:                              # %for.end111
                                        #   in Loop: Header=BB57_23 Depth=1
	jmp	.LBB57_32
.LBB57_32:                              # %for.inc112
                                        #   in Loop: Header=BB57_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_23
.LBB57_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB57_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB57_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB57_34 Depth=1
	movl	$0, -4(%rbp)
.LBB57_36:                              # %for.cond118
                                        #   Parent Loop BB57_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB57_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB57_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB57_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_40
.LBB57_39:                              # %if.else136
                                        #   in Loop: Header=BB57_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_40:                              # %if.end150
                                        #   in Loop: Header=BB57_36 Depth=2
	jmp	.LBB57_41
.LBB57_41:                              # %for.inc151
                                        #   in Loop: Header=BB57_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_36
.LBB57_42:                              # %for.end153
                                        #   in Loop: Header=BB57_34 Depth=1
	jmp	.LBB57_43
.LBB57_43:                              # %for.inc154
                                        #   in Loop: Header=BB57_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_34
.LBB57_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB57_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB57_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB57_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB57_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_49
.LBB57_48:                              # %if.else172
                                        #   in Loop: Header=BB57_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_49:                              # %if.end183
                                        #   in Loop: Header=BB57_45 Depth=1
	jmp	.LBB57_50
.LBB57_50:                              # %for.inc184
                                        #   in Loop: Header=BB57_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_45
.LBB57_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB57_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB57_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB57_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB57_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_56
.LBB57_55:                              # %if.else202
                                        #   in Loop: Header=BB57_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_56:                              # %if.end213
                                        #   in Loop: Header=BB57_52 Depth=1
	jmp	.LBB57_57
.LBB57_57:                              # %for.inc214
                                        #   in Loop: Header=BB57_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_52
.LBB57_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB57_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB57_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB57_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB57_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_63
.LBB57_62:                              # %if.else232
                                        #   in Loop: Header=BB57_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_63:                              # %if.end243
                                        #   in Loop: Header=BB57_59 Depth=1
	jmp	.LBB57_64
.LBB57_64:                              # %for.inc244
                                        #   in Loop: Header=BB57_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_59
.LBB57_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB57_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB57_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB57_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB57_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_70
.LBB57_69:                              # %if.else262
                                        #   in Loop: Header=BB57_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_70:                              # %if.end273
                                        #   in Loop: Header=BB57_66 Depth=1
	jmp	.LBB57_71
.LBB57_71:                              # %for.inc274
                                        #   in Loop: Header=BB57_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_66
.LBB57_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB57_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB57_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB57_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB57_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_77
.LBB57_76:                              # %if.else292
                                        #   in Loop: Header=BB57_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_77:                              # %if.end303
                                        #   in Loop: Header=BB57_73 Depth=1
	jmp	.LBB57_78
.LBB57_78:                              # %for.inc304
                                        #   in Loop: Header=BB57_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_73
.LBB57_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB57_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB57_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB57_80 Depth=1
	movl	$0, -4(%rbp)
.LBB57_82:                              # %for.cond310
                                        #   Parent Loop BB57_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB57_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB57_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_86
.LBB57_85:                              # %if.else328
                                        #   in Loop: Header=BB57_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_86:                              # %if.end342
                                        #   in Loop: Header=BB57_82 Depth=2
	jmp	.LBB57_87
.LBB57_87:                              # %for.inc343
                                        #   in Loop: Header=BB57_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_82
.LBB57_88:                              # %for.end345
                                        #   in Loop: Header=BB57_80 Depth=1
	jmp	.LBB57_89
.LBB57_89:                              # %for.inc346
                                        #   in Loop: Header=BB57_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_80
.LBB57_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB57_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB57_91 Depth=1
	movl	$0, -4(%rbp)
.LBB57_93:                              # %for.cond352
                                        #   Parent Loop BB57_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB57_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB57_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_97
.LBB57_96:                              # %if.else370
                                        #   in Loop: Header=BB57_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_97:                              # %if.end384
                                        #   in Loop: Header=BB57_93 Depth=2
	jmp	.LBB57_98
.LBB57_98:                              # %for.inc385
                                        #   in Loop: Header=BB57_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_93
.LBB57_99:                              # %for.end387
                                        #   in Loop: Header=BB57_91 Depth=1
	jmp	.LBB57_100
.LBB57_100:                             # %for.inc388
                                        #   in Loop: Header=BB57_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_91
.LBB57_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB57_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB57_102 Depth=1
	movl	$0, -4(%rbp)
.LBB57_104:                             # %for.cond394
                                        #   Parent Loop BB57_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB57_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB57_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB57_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_108
.LBB57_107:                             # %if.else412
                                        #   in Loop: Header=BB57_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_108:                             # %if.end426
                                        #   in Loop: Header=BB57_104 Depth=2
	jmp	.LBB57_109
.LBB57_109:                             # %for.inc427
                                        #   in Loop: Header=BB57_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_104
.LBB57_110:                             # %for.end429
                                        #   in Loop: Header=BB57_102 Depth=1
	jmp	.LBB57_111
.LBB57_111:                             # %for.inc430
                                        #   in Loop: Header=BB57_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_102
.LBB57_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB57_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB57_113 Depth=1
	movl	$0, -4(%rbp)
.LBB57_115:                             # %for.cond436
                                        #   Parent Loop BB57_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB57_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB57_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB57_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_119
.LBB57_118:                             # %if.else454
                                        #   in Loop: Header=BB57_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_119:                             # %if.end468
                                        #   in Loop: Header=BB57_115 Depth=2
	jmp	.LBB57_120
.LBB57_120:                             # %for.inc469
                                        #   in Loop: Header=BB57_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_115
.LBB57_121:                             # %for.end471
                                        #   in Loop: Header=BB57_113 Depth=1
	jmp	.LBB57_122
.LBB57_122:                             # %for.inc472
                                        #   in Loop: Header=BB57_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_113
.LBB57_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB57_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB57_124 Depth=1
	movl	$0, -4(%rbp)
.LBB57_126:                             # %for.cond478
                                        #   Parent Loop BB57_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB57_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB57_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB57_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_130
.LBB57_129:                             # %if.else496
                                        #   in Loop: Header=BB57_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_130:                             # %if.end510
                                        #   in Loop: Header=BB57_126 Depth=2
	jmp	.LBB57_131
.LBB57_131:                             # %for.inc511
                                        #   in Loop: Header=BB57_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_126
.LBB57_132:                             # %for.end513
                                        #   in Loop: Header=BB57_124 Depth=1
	jmp	.LBB57_133
.LBB57_133:                             # %for.inc514
                                        #   in Loop: Header=BB57_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_124
.LBB57_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB57_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB57_135 Depth=1
	movl	$0, -4(%rbp)
.LBB57_137:                             # %for.cond520
                                        #   Parent Loop BB57_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB57_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB57_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB57_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_141
.LBB57_140:                             # %if.else538
                                        #   in Loop: Header=BB57_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_141:                             # %if.end552
                                        #   in Loop: Header=BB57_137 Depth=2
	jmp	.LBB57_142
.LBB57_142:                             # %for.inc553
                                        #   in Loop: Header=BB57_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_137
.LBB57_143:                             # %for.end555
                                        #   in Loop: Header=BB57_135 Depth=1
	jmp	.LBB57_144
.LBB57_144:                             # %for.inc556
                                        #   in Loop: Header=BB57_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_135
.LBB57_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB57_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB57_146 Depth=1
	movl	$0, -4(%rbp)
.LBB57_148:                             # %for.cond562
                                        #   Parent Loop BB57_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB57_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB57_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB57_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_152
.LBB57_151:                             # %if.else580
                                        #   in Loop: Header=BB57_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_152:                             # %if.end594
                                        #   in Loop: Header=BB57_148 Depth=2
	jmp	.LBB57_153
.LBB57_153:                             # %for.inc595
                                        #   in Loop: Header=BB57_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_148
.LBB57_154:                             # %for.end597
                                        #   in Loop: Header=BB57_146 Depth=1
	jmp	.LBB57_155
.LBB57_155:                             # %for.inc598
                                        #   in Loop: Header=BB57_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_146
.LBB57_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB57_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB57_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB57_157 Depth=1
	movl	$0, -4(%rbp)
.LBB57_159:                             # %for.cond604
                                        #   Parent Loop BB57_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB57_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB57_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB57_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB57_163
.LBB57_162:                             # %if.else622
                                        #   in Loop: Header=BB57_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB57_163:                             # %if.end636
                                        #   in Loop: Header=BB57_159 Depth=2
	jmp	.LBB57_164
.LBB57_164:                             # %for.inc637
                                        #   in Loop: Header=BB57_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_159
.LBB57_165:                             # %for.end639
                                        #   in Loop: Header=BB57_157 Depth=1
	jmp	.LBB57_166
.LBB57_166:                             # %for.inc640
                                        #   in Loop: Header=BB57_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_157
.LBB57_167:                             # %for.end642
	cmpl	$1560169091, -28(%rbp)  # imm = 0x5CFE4A83
	jne	.LBB57_169
.LBB57_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_168
.Lfunc_end57:
	.size	init_contexts.50, .Lfunc_end57-init_contexts.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.51
.LCPI58_0:
	.quad	4607182418800017408     # double 1
.LCPI58_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI58_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI58_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.51
	.p2align	4, 0x90
	.type	XRate.51,@function
XRate.51:                               # @XRate.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$59860795, -36(%rbp)    # imm = 0x391673B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB58_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB58_3
.LBB58_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB58_3:                               # %cond.end
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI58_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI58_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI58_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB58_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB58_6
.LBB58_5:                               # %cond.false6
	vmovsd	.LCPI58_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI58_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI58_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB58_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB58_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB58_9
.LBB58_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB58_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB58_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB58_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB58_13
.LBB58_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB58_13:                              # %cond.end26
	jmp	.LBB58_15
.LBB58_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB58_15
.LBB58_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB58_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB58_18
.LBB58_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB58_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$59860795, -36(%rbp)    # imm = 0x391673B
	jne	.LBB58_20
.LBB58_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB58_19
.Lfunc_end58:
	.size	XRate.51, .Lfunc_end58-XRate.51
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.52        # -- Begin function init_contexts.52
	.p2align	4, 0x90
	.type	init_contexts.52,@function
init_contexts.52:                       # @init_contexts.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1352684829, -28(%rbp)  # imm = 0x50A0551D
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB59_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB59_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -4(%rbp)
.LBB59_3:                               # %for.cond2
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB59_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB59_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB59_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_7
.LBB59_6:                               # %if.else
                                        #   in Loop: Header=BB59_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_7:                               # %if.end
                                        #   in Loop: Header=BB59_3 Depth=2
	jmp	.LBB59_8
.LBB59_8:                               # %for.inc
                                        #   in Loop: Header=BB59_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_3
.LBB59_9:                               # %for.end
                                        #   in Loop: Header=BB59_1 Depth=1
	jmp	.LBB59_10
.LBB59_10:                              # %for.inc28
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_1
.LBB59_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB59_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB59_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB59_12 Depth=1
	movl	$0, -4(%rbp)
.LBB59_14:                              # %for.cond34
                                        #   Parent Loop BB59_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB59_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB59_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB59_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_18
.LBB59_17:                              # %if.else52
                                        #   in Loop: Header=BB59_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_18:                              # %if.end66
                                        #   in Loop: Header=BB59_14 Depth=2
	jmp	.LBB59_19
.LBB59_19:                              # %for.inc67
                                        #   in Loop: Header=BB59_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_14
.LBB59_20:                              # %for.end69
                                        #   in Loop: Header=BB59_12 Depth=1
	jmp	.LBB59_21
.LBB59_21:                              # %for.inc70
                                        #   in Loop: Header=BB59_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_12
.LBB59_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB59_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB59_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	$0, -4(%rbp)
.LBB59_25:                              # %for.cond76
                                        #   Parent Loop BB59_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB59_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB59_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB59_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_29
.LBB59_28:                              # %if.else94
                                        #   in Loop: Header=BB59_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_29:                              # %if.end108
                                        #   in Loop: Header=BB59_25 Depth=2
	jmp	.LBB59_30
.LBB59_30:                              # %for.inc109
                                        #   in Loop: Header=BB59_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_25
.LBB59_31:                              # %for.end111
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_32
.LBB59_32:                              # %for.inc112
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_23
.LBB59_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB59_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB59_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB59_34 Depth=1
	movl	$0, -4(%rbp)
.LBB59_36:                              # %for.cond118
                                        #   Parent Loop BB59_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB59_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB59_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB59_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_40
.LBB59_39:                              # %if.else136
                                        #   in Loop: Header=BB59_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_40:                              # %if.end150
                                        #   in Loop: Header=BB59_36 Depth=2
	jmp	.LBB59_41
.LBB59_41:                              # %for.inc151
                                        #   in Loop: Header=BB59_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_36
.LBB59_42:                              # %for.end153
                                        #   in Loop: Header=BB59_34 Depth=1
	jmp	.LBB59_43
.LBB59_43:                              # %for.inc154
                                        #   in Loop: Header=BB59_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_34
.LBB59_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB59_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB59_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB59_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB59_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_49
.LBB59_48:                              # %if.else172
                                        #   in Loop: Header=BB59_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_49:                              # %if.end183
                                        #   in Loop: Header=BB59_45 Depth=1
	jmp	.LBB59_50
.LBB59_50:                              # %for.inc184
                                        #   in Loop: Header=BB59_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_45
.LBB59_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB59_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB59_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB59_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB59_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_56
.LBB59_55:                              # %if.else202
                                        #   in Loop: Header=BB59_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_56:                              # %if.end213
                                        #   in Loop: Header=BB59_52 Depth=1
	jmp	.LBB59_57
.LBB59_57:                              # %for.inc214
                                        #   in Loop: Header=BB59_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_52
.LBB59_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB59_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB59_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB59_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB59_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_63
.LBB59_62:                              # %if.else232
                                        #   in Loop: Header=BB59_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_63:                              # %if.end243
                                        #   in Loop: Header=BB59_59 Depth=1
	jmp	.LBB59_64
.LBB59_64:                              # %for.inc244
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_59
.LBB59_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB59_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB59_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB59_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB59_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_70
.LBB59_69:                              # %if.else262
                                        #   in Loop: Header=BB59_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_70:                              # %if.end273
                                        #   in Loop: Header=BB59_66 Depth=1
	jmp	.LBB59_71
.LBB59_71:                              # %for.inc274
                                        #   in Loop: Header=BB59_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_66
.LBB59_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB59_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB59_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB59_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB59_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_77
.LBB59_76:                              # %if.else292
                                        #   in Loop: Header=BB59_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_77:                              # %if.end303
                                        #   in Loop: Header=BB59_73 Depth=1
	jmp	.LBB59_78
.LBB59_78:                              # %for.inc304
                                        #   in Loop: Header=BB59_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_73
.LBB59_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB59_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB59_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB59_80 Depth=1
	movl	$0, -4(%rbp)
.LBB59_82:                              # %for.cond310
                                        #   Parent Loop BB59_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB59_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB59_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB59_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_86
.LBB59_85:                              # %if.else328
                                        #   in Loop: Header=BB59_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_86:                              # %if.end342
                                        #   in Loop: Header=BB59_82 Depth=2
	jmp	.LBB59_87
.LBB59_87:                              # %for.inc343
                                        #   in Loop: Header=BB59_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_82
.LBB59_88:                              # %for.end345
                                        #   in Loop: Header=BB59_80 Depth=1
	jmp	.LBB59_89
.LBB59_89:                              # %for.inc346
                                        #   in Loop: Header=BB59_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_80
.LBB59_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB59_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB59_91 Depth=1
	movl	$0, -4(%rbp)
.LBB59_93:                              # %for.cond352
                                        #   Parent Loop BB59_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB59_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB59_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB59_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_97
.LBB59_96:                              # %if.else370
                                        #   in Loop: Header=BB59_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_97:                              # %if.end384
                                        #   in Loop: Header=BB59_93 Depth=2
	jmp	.LBB59_98
.LBB59_98:                              # %for.inc385
                                        #   in Loop: Header=BB59_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_93
.LBB59_99:                              # %for.end387
                                        #   in Loop: Header=BB59_91 Depth=1
	jmp	.LBB59_100
.LBB59_100:                             # %for.inc388
                                        #   in Loop: Header=BB59_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_91
.LBB59_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB59_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB59_102 Depth=1
	movl	$0, -4(%rbp)
.LBB59_104:                             # %for.cond394
                                        #   Parent Loop BB59_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB59_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB59_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB59_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_108
.LBB59_107:                             # %if.else412
                                        #   in Loop: Header=BB59_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_108:                             # %if.end426
                                        #   in Loop: Header=BB59_104 Depth=2
	jmp	.LBB59_109
.LBB59_109:                             # %for.inc427
                                        #   in Loop: Header=BB59_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_104
.LBB59_110:                             # %for.end429
                                        #   in Loop: Header=BB59_102 Depth=1
	jmp	.LBB59_111
.LBB59_111:                             # %for.inc430
                                        #   in Loop: Header=BB59_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_102
.LBB59_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB59_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB59_113 Depth=1
	movl	$0, -4(%rbp)
.LBB59_115:                             # %for.cond436
                                        #   Parent Loop BB59_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB59_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB59_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB59_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_119
.LBB59_118:                             # %if.else454
                                        #   in Loop: Header=BB59_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_119:                             # %if.end468
                                        #   in Loop: Header=BB59_115 Depth=2
	jmp	.LBB59_120
.LBB59_120:                             # %for.inc469
                                        #   in Loop: Header=BB59_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_115
.LBB59_121:                             # %for.end471
                                        #   in Loop: Header=BB59_113 Depth=1
	jmp	.LBB59_122
.LBB59_122:                             # %for.inc472
                                        #   in Loop: Header=BB59_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_113
.LBB59_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB59_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB59_124 Depth=1
	movl	$0, -4(%rbp)
.LBB59_126:                             # %for.cond478
                                        #   Parent Loop BB59_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB59_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB59_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB59_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_130
.LBB59_129:                             # %if.else496
                                        #   in Loop: Header=BB59_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_130:                             # %if.end510
                                        #   in Loop: Header=BB59_126 Depth=2
	jmp	.LBB59_131
.LBB59_131:                             # %for.inc511
                                        #   in Loop: Header=BB59_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_126
.LBB59_132:                             # %for.end513
                                        #   in Loop: Header=BB59_124 Depth=1
	jmp	.LBB59_133
.LBB59_133:                             # %for.inc514
                                        #   in Loop: Header=BB59_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_124
.LBB59_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB59_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	$0, -4(%rbp)
.LBB59_137:                             # %for.cond520
                                        #   Parent Loop BB59_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB59_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB59_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB59_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_141
.LBB59_140:                             # %if.else538
                                        #   in Loop: Header=BB59_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_141:                             # %if.end552
                                        #   in Loop: Header=BB59_137 Depth=2
	jmp	.LBB59_142
.LBB59_142:                             # %for.inc553
                                        #   in Loop: Header=BB59_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_137
.LBB59_143:                             # %for.end555
                                        #   in Loop: Header=BB59_135 Depth=1
	jmp	.LBB59_144
.LBB59_144:                             # %for.inc556
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_135
.LBB59_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB59_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB59_146 Depth=1
	movl	$0, -4(%rbp)
.LBB59_148:                             # %for.cond562
                                        #   Parent Loop BB59_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB59_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB59_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB59_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_152
.LBB59_151:                             # %if.else580
                                        #   in Loop: Header=BB59_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_152:                             # %if.end594
                                        #   in Loop: Header=BB59_148 Depth=2
	jmp	.LBB59_153
.LBB59_153:                             # %for.inc595
                                        #   in Loop: Header=BB59_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_148
.LBB59_154:                             # %for.end597
                                        #   in Loop: Header=BB59_146 Depth=1
	jmp	.LBB59_155
.LBB59_155:                             # %for.inc598
                                        #   in Loop: Header=BB59_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_146
.LBB59_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB59_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB59_157 Depth=1
	movl	$0, -4(%rbp)
.LBB59_159:                             # %for.cond604
                                        #   Parent Loop BB59_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB59_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB59_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB59_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_163
.LBB59_162:                             # %if.else622
                                        #   in Loop: Header=BB59_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_163:                             # %if.end636
                                        #   in Loop: Header=BB59_159 Depth=2
	jmp	.LBB59_164
.LBB59_164:                             # %for.inc637
                                        #   in Loop: Header=BB59_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_159
.LBB59_165:                             # %for.end639
                                        #   in Loop: Header=BB59_157 Depth=1
	jmp	.LBB59_166
.LBB59_166:                             # %for.inc640
                                        #   in Loop: Header=BB59_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_157
.LBB59_167:                             # %for.end642
	cmpl	$1352684829, -28(%rbp)  # imm = 0x50A0551D
	jne	.LBB59_169
.LBB59_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_168
.Lfunc_end59:
	.size	init_contexts.52, .Lfunc_end59-init_contexts.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.53
.LCPI60_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.53
	.p2align	4, 0x90
	.type	GetCtxModelNumber.53,@function
GetCtxModelNumber.53:                   # @GetCtxModelNumber.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1660087700, -48(%rbp)  # imm = 0x62F2ED94
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
                                        #       Child Loop BB60_5 Depth 3
                                        #     Child Loop BB60_14 Depth 2
                                        #       Child Loop BB60_16 Depth 3
                                        #     Child Loop BB60_25 Depth 2
                                        #       Child Loop BB60_27 Depth 3
                                        #     Child Loop BB60_36 Depth 2
                                        #       Child Loop BB60_38 Depth 3
                                        #     Child Loop BB60_47 Depth 2
                                        #     Child Loop BB60_54 Depth 2
                                        #     Child Loop BB60_61 Depth 2
                                        #     Child Loop BB60_68 Depth 2
                                        #     Child Loop BB60_75 Depth 2
                                        #     Child Loop BB60_82 Depth 2
                                        #       Child Loop BB60_84 Depth 3
                                        #     Child Loop BB60_93 Depth 2
                                        #       Child Loop BB60_95 Depth 3
                                        #     Child Loop BB60_104 Depth 2
                                        #       Child Loop BB60_106 Depth 3
                                        #     Child Loop BB60_115 Depth 2
                                        #       Child Loop BB60_117 Depth 3
                                        #     Child Loop BB60_126 Depth 2
                                        #       Child Loop BB60_128 Depth 3
                                        #     Child Loop BB60_137 Depth 2
                                        #       Child Loop BB60_139 Depth 3
                                        #     Child Loop BB60_148 Depth 2
                                        #       Child Loop BB60_150 Depth 3
                                        #     Child Loop BB60_159 Depth 2
                                        #       Child Loop BB60_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB60_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	$0, -4(%rbp)
.LBB60_5:                               # %for.cond5
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB60_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_9
.LBB60_8:                               # %if.else
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_9:                               # %if.end
                                        #   in Loop: Header=BB60_5 Depth=3
	jmp	.LBB60_10
.LBB60_10:                              # %for.inc
                                        #   in Loop: Header=BB60_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_5
.LBB60_11:                              # %for.end
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_12
.LBB60_12:                              # %for.inc33
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_3
.LBB60_13:                              # %for.end35
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_14:                              # %for.cond36
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	$0, -4(%rbp)
.LBB60_16:                              # %for.cond39
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB60_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_20
.LBB60_19:                              # %if.else58
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_20:                              # %if.end73
                                        #   in Loop: Header=BB60_16 Depth=3
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc74
                                        #   in Loop: Header=BB60_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_16
.LBB60_22:                              # %for.end76
                                        #   in Loop: Header=BB60_14 Depth=2
	jmp	.LBB60_23
.LBB60_23:                              # %for.inc77
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_14
.LBB60_24:                              # %for.end79
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_25:                              # %for.cond80
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	$0, -4(%rbp)
.LBB60_27:                              # %for.cond83
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB60_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_31
.LBB60_30:                              # %if.else102
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_31:                              # %if.end117
                                        #   in Loop: Header=BB60_27 Depth=3
	jmp	.LBB60_32
.LBB60_32:                              # %for.inc118
                                        #   in Loop: Header=BB60_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_27
.LBB60_33:                              # %for.end120
                                        #   in Loop: Header=BB60_25 Depth=2
	jmp	.LBB60_34
.LBB60_34:                              # %for.inc121
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_25
.LBB60_35:                              # %for.end123
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_36:                              # %for.cond124
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	$0, -4(%rbp)
.LBB60_38:                              # %for.cond127
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB60_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_42
.LBB60_41:                              # %if.else146
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_42:                              # %if.end161
                                        #   in Loop: Header=BB60_38 Depth=3
	jmp	.LBB60_43
.LBB60_43:                              # %for.inc162
                                        #   in Loop: Header=BB60_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_38
.LBB60_44:                              # %for.end164
                                        #   in Loop: Header=BB60_36 Depth=2
	jmp	.LBB60_45
.LBB60_45:                              # %for.inc165
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_36
.LBB60_46:                              # %for.end167
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_47:                              # %for.cond168
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_51
.LBB60_50:                              # %if.else184
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_51:                              # %if.end196
                                        #   in Loop: Header=BB60_47 Depth=2
	jmp	.LBB60_52
.LBB60_52:                              # %for.inc197
                                        #   in Loop: Header=BB60_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_47
.LBB60_53:                              # %for.end199
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_54:                              # %for.cond200
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_58
.LBB60_57:                              # %if.else216
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_58:                              # %if.end228
                                        #   in Loop: Header=BB60_54 Depth=2
	jmp	.LBB60_59
.LBB60_59:                              # %for.inc229
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_54
.LBB60_60:                              # %for.end231
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_61:                              # %for.cond232
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB60_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_65
.LBB60_64:                              # %if.else248
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_65:                              # %if.end260
                                        #   in Loop: Header=BB60_61 Depth=2
	jmp	.LBB60_66
.LBB60_66:                              # %for.inc261
                                        #   in Loop: Header=BB60_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_61
.LBB60_67:                              # %for.end263
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_68:                              # %for.cond264
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB60_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_72
.LBB60_71:                              # %if.else280
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_72:                              # %if.end292
                                        #   in Loop: Header=BB60_68 Depth=2
	jmp	.LBB60_73
.LBB60_73:                              # %for.inc293
                                        #   in Loop: Header=BB60_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_68
.LBB60_74:                              # %for.end295
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_75:                              # %for.cond296
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_79
.LBB60_78:                              # %if.else312
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_79:                              # %if.end324
                                        #   in Loop: Header=BB60_75 Depth=2
	jmp	.LBB60_80
.LBB60_80:                              # %for.inc325
                                        #   in Loop: Header=BB60_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_75
.LBB60_81:                              # %for.end327
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_82:                              # %for.cond328
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB60_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	$0, -4(%rbp)
.LBB60_84:                              # %for.cond331
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB60_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_88
.LBB60_87:                              # %if.else350
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_88:                              # %if.end365
                                        #   in Loop: Header=BB60_84 Depth=3
	jmp	.LBB60_89
.LBB60_89:                              # %for.inc366
                                        #   in Loop: Header=BB60_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_84
.LBB60_90:                              # %for.end368
                                        #   in Loop: Header=BB60_82 Depth=2
	jmp	.LBB60_91
.LBB60_91:                              # %for.inc369
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_82
.LBB60_92:                              # %for.end371
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_93:                              # %for.cond372
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	$0, -4(%rbp)
.LBB60_95:                              # %for.cond375
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB60_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_99
.LBB60_98:                              # %if.else394
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_99:                              # %if.end409
                                        #   in Loop: Header=BB60_95 Depth=3
	jmp	.LBB60_100
.LBB60_100:                             # %for.inc410
                                        #   in Loop: Header=BB60_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_95
.LBB60_101:                             # %for.end412
                                        #   in Loop: Header=BB60_93 Depth=2
	jmp	.LBB60_102
.LBB60_102:                             # %for.inc413
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_93
.LBB60_103:                             # %for.end415
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_104:                             # %for.cond416
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	$0, -4(%rbp)
.LBB60_106:                             # %for.cond419
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_110
.LBB60_109:                             # %if.else438
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_110:                             # %if.end453
                                        #   in Loop: Header=BB60_106 Depth=3
	jmp	.LBB60_111
.LBB60_111:                             # %for.inc454
                                        #   in Loop: Header=BB60_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_106
.LBB60_112:                             # %for.end456
                                        #   in Loop: Header=BB60_104 Depth=2
	jmp	.LBB60_113
.LBB60_113:                             # %for.inc457
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_104
.LBB60_114:                             # %for.end459
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_115:                             # %for.cond460
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	$0, -4(%rbp)
.LBB60_117:                             # %for.cond463
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_121
.LBB60_120:                             # %if.else482
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_121:                             # %if.end497
                                        #   in Loop: Header=BB60_117 Depth=3
	jmp	.LBB60_122
.LBB60_122:                             # %for.inc498
                                        #   in Loop: Header=BB60_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_117
.LBB60_123:                             # %for.end500
                                        #   in Loop: Header=BB60_115 Depth=2
	jmp	.LBB60_124
.LBB60_124:                             # %for.inc501
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_115
.LBB60_125:                             # %for.end503
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_126:                             # %for.cond504
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	$0, -4(%rbp)
.LBB60_128:                             # %for.cond507
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB60_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_132
.LBB60_131:                             # %if.else526
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_132:                             # %if.end541
                                        #   in Loop: Header=BB60_128 Depth=3
	jmp	.LBB60_133
.LBB60_133:                             # %for.inc542
                                        #   in Loop: Header=BB60_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_128
.LBB60_134:                             # %for.end544
                                        #   in Loop: Header=BB60_126 Depth=2
	jmp	.LBB60_135
.LBB60_135:                             # %for.inc545
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_126
.LBB60_136:                             # %for.end547
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_137:                             # %for.cond548
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	$0, -4(%rbp)
.LBB60_139:                             # %for.cond551
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB60_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_143
.LBB60_142:                             # %if.else570
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_143:                             # %if.end585
                                        #   in Loop: Header=BB60_139 Depth=3
	jmp	.LBB60_144
.LBB60_144:                             # %for.inc586
                                        #   in Loop: Header=BB60_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_139
.LBB60_145:                             # %for.end588
                                        #   in Loop: Header=BB60_137 Depth=2
	jmp	.LBB60_146
.LBB60_146:                             # %for.inc589
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_137
.LBB60_147:                             # %for.end591
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_148:                             # %for.cond592
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	$0, -4(%rbp)
.LBB60_150:                             # %for.cond595
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_154
.LBB60_153:                             # %if.else614
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_154:                             # %if.end629
                                        #   in Loop: Header=BB60_150 Depth=3
	jmp	.LBB60_155
.LBB60_155:                             # %for.inc630
                                        #   in Loop: Header=BB60_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_150
.LBB60_156:                             # %for.end632
                                        #   in Loop: Header=BB60_148 Depth=2
	jmp	.LBB60_157
.LBB60_157:                             # %for.inc633
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_148
.LBB60_158:                             # %for.end635
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_159:                             # %for.cond636
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	$0, -4(%rbp)
.LBB60_161:                             # %for.cond639
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_165
.LBB60_164:                             # %if.else658
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_165:                             # %if.end673
                                        #   in Loop: Header=BB60_161 Depth=3
	jmp	.LBB60_166
.LBB60_166:                             # %for.inc674
                                        #   in Loop: Header=BB60_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_161
.LBB60_167:                             # %for.end676
                                        #   in Loop: Header=BB60_159 Depth=2
	jmp	.LBB60_168
.LBB60_168:                             # %for.inc677
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_159
.LBB60_169:                             # %for.end679
                                        #   in Loop: Header=BB60_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB60_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB60_171:                             # %if.end682
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_172
.LBB60_172:                             # %for.inc683
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_1
.LBB60_173:                             # %for.end685
	cmpl	$1660087700, -48(%rbp)  # imm = 0x62F2ED94
	jne	.LBB60_175
.LBB60_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_174
.Lfunc_end60:
	.size	GetCtxModelNumber.53, .Lfunc_end60-GetCtxModelNumber.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.54
.LCPI61_0:
	.quad	4607182418800017408     # double 1
.LCPI61_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI61_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI61_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.54
	.p2align	4, 0x90
	.type	XRate.54,@function
XRate.54:                               # @XRate.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$741195032, -36(%rbp)   # imm = 0x2C2DBD18
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB61_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB61_3
.LBB61_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB61_3:                               # %cond.end
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI61_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI61_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB61_6
.LBB61_5:                               # %cond.false6
	vmovsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI61_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI61_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB61_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB61_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB61_9
.LBB61_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB61_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB61_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB61_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB61_13
.LBB61_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB61_13:                              # %cond.end26
	jmp	.LBB61_15
.LBB61_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB61_15
.LBB61_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB61_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB61_18
.LBB61_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB61_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$741195032, -36(%rbp)   # imm = 0x2C2DBD18
	jne	.LBB61_20
.LBB61_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB61_19
.Lfunc_end61:
	.size	XRate.54, .Lfunc_end61-XRate.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.55
.LCPI62_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.55
	.p2align	4, 0x90
	.type	GetCtxModelNumber.55,@function
GetCtxModelNumber.55:                   # @GetCtxModelNumber.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1833525017, -48(%rbp)  # imm = 0x6D495F19
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
                                        #       Child Loop BB62_5 Depth 3
                                        #     Child Loop BB62_14 Depth 2
                                        #       Child Loop BB62_16 Depth 3
                                        #     Child Loop BB62_25 Depth 2
                                        #       Child Loop BB62_27 Depth 3
                                        #     Child Loop BB62_36 Depth 2
                                        #       Child Loop BB62_38 Depth 3
                                        #     Child Loop BB62_47 Depth 2
                                        #     Child Loop BB62_54 Depth 2
                                        #     Child Loop BB62_61 Depth 2
                                        #     Child Loop BB62_68 Depth 2
                                        #     Child Loop BB62_75 Depth 2
                                        #     Child Loop BB62_82 Depth 2
                                        #       Child Loop BB62_84 Depth 3
                                        #     Child Loop BB62_93 Depth 2
                                        #       Child Loop BB62_95 Depth 3
                                        #     Child Loop BB62_104 Depth 2
                                        #       Child Loop BB62_106 Depth 3
                                        #     Child Loop BB62_115 Depth 2
                                        #       Child Loop BB62_117 Depth 3
                                        #     Child Loop BB62_126 Depth 2
                                        #       Child Loop BB62_128 Depth 3
                                        #     Child Loop BB62_137 Depth 2
                                        #       Child Loop BB62_139 Depth 3
                                        #     Child Loop BB62_148 Depth 2
                                        #       Child Loop BB62_150 Depth 3
                                        #     Child Loop BB62_159 Depth 2
                                        #       Child Loop BB62_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB62_3:                               # %for.cond2
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB62_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	$0, -4(%rbp)
.LBB62_5:                               # %for.cond5
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB62_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB62_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB62_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_9
.LBB62_8:                               # %if.else
                                        #   in Loop: Header=BB62_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_9:                               # %if.end
                                        #   in Loop: Header=BB62_5 Depth=3
	jmp	.LBB62_10
.LBB62_10:                              # %for.inc
                                        #   in Loop: Header=BB62_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_5
.LBB62_11:                              # %for.end
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_12
.LBB62_12:                              # %for.inc33
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_3
.LBB62_13:                              # %for.end35
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_14:                              # %for.cond36
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB62_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	$0, -4(%rbp)
.LBB62_16:                              # %for.cond39
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB62_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB62_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB62_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_20
.LBB62_19:                              # %if.else58
                                        #   in Loop: Header=BB62_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_20:                              # %if.end73
                                        #   in Loop: Header=BB62_16 Depth=3
	jmp	.LBB62_21
.LBB62_21:                              # %for.inc74
                                        #   in Loop: Header=BB62_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_16
.LBB62_22:                              # %for.end76
                                        #   in Loop: Header=BB62_14 Depth=2
	jmp	.LBB62_23
.LBB62_23:                              # %for.inc77
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_14
.LBB62_24:                              # %for.end79
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_25:                              # %for.cond80
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB62_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB62_25 Depth=2
	movl	$0, -4(%rbp)
.LBB62_27:                              # %for.cond83
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB62_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB62_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB62_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_31
.LBB62_30:                              # %if.else102
                                        #   in Loop: Header=BB62_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_31:                              # %if.end117
                                        #   in Loop: Header=BB62_27 Depth=3
	jmp	.LBB62_32
.LBB62_32:                              # %for.inc118
                                        #   in Loop: Header=BB62_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_27
.LBB62_33:                              # %for.end120
                                        #   in Loop: Header=BB62_25 Depth=2
	jmp	.LBB62_34
.LBB62_34:                              # %for.inc121
                                        #   in Loop: Header=BB62_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_25
.LBB62_35:                              # %for.end123
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_36:                              # %for.cond124
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB62_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB62_36 Depth=2
	movl	$0, -4(%rbp)
.LBB62_38:                              # %for.cond127
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB62_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB62_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB62_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_42
.LBB62_41:                              # %if.else146
                                        #   in Loop: Header=BB62_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_42:                              # %if.end161
                                        #   in Loop: Header=BB62_38 Depth=3
	jmp	.LBB62_43
.LBB62_43:                              # %for.inc162
                                        #   in Loop: Header=BB62_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_38
.LBB62_44:                              # %for.end164
                                        #   in Loop: Header=BB62_36 Depth=2
	jmp	.LBB62_45
.LBB62_45:                              # %for.inc165
                                        #   in Loop: Header=BB62_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_36
.LBB62_46:                              # %for.end167
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -4(%rbp)
.LBB62_47:                              # %for.cond168
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB62_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB62_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_51
.LBB62_50:                              # %if.else184
                                        #   in Loop: Header=BB62_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_51:                              # %if.end196
                                        #   in Loop: Header=BB62_47 Depth=2
	jmp	.LBB62_52
.LBB62_52:                              # %for.inc197
                                        #   in Loop: Header=BB62_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_47
.LBB62_53:                              # %for.end199
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -4(%rbp)
.LBB62_54:                              # %for.cond200
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB62_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB62_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_58
.LBB62_57:                              # %if.else216
                                        #   in Loop: Header=BB62_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_58:                              # %if.end228
                                        #   in Loop: Header=BB62_54 Depth=2
	jmp	.LBB62_59
.LBB62_59:                              # %for.inc229
                                        #   in Loop: Header=BB62_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_54
.LBB62_60:                              # %for.end231
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -4(%rbp)
.LBB62_61:                              # %for.cond232
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB62_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB62_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB62_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_65
.LBB62_64:                              # %if.else248
                                        #   in Loop: Header=BB62_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_65:                              # %if.end260
                                        #   in Loop: Header=BB62_61 Depth=2
	jmp	.LBB62_66
.LBB62_66:                              # %for.inc261
                                        #   in Loop: Header=BB62_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_61
.LBB62_67:                              # %for.end263
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -4(%rbp)
.LBB62_68:                              # %for.cond264
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB62_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB62_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB62_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_72
.LBB62_71:                              # %if.else280
                                        #   in Loop: Header=BB62_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_72:                              # %if.end292
                                        #   in Loop: Header=BB62_68 Depth=2
	jmp	.LBB62_73
.LBB62_73:                              # %for.inc293
                                        #   in Loop: Header=BB62_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_68
.LBB62_74:                              # %for.end295
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -4(%rbp)
.LBB62_75:                              # %for.cond296
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB62_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB62_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_79
.LBB62_78:                              # %if.else312
                                        #   in Loop: Header=BB62_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_79:                              # %if.end324
                                        #   in Loop: Header=BB62_75 Depth=2
	jmp	.LBB62_80
.LBB62_80:                              # %for.inc325
                                        #   in Loop: Header=BB62_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_75
.LBB62_81:                              # %for.end327
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_82:                              # %for.cond328
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB62_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB62_82 Depth=2
	movl	$0, -4(%rbp)
.LBB62_84:                              # %for.cond331
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB62_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB62_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB62_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_88
.LBB62_87:                              # %if.else350
                                        #   in Loop: Header=BB62_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_88:                              # %if.end365
                                        #   in Loop: Header=BB62_84 Depth=3
	jmp	.LBB62_89
.LBB62_89:                              # %for.inc366
                                        #   in Loop: Header=BB62_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_84
.LBB62_90:                              # %for.end368
                                        #   in Loop: Header=BB62_82 Depth=2
	jmp	.LBB62_91
.LBB62_91:                              # %for.inc369
                                        #   in Loop: Header=BB62_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_82
.LBB62_92:                              # %for.end371
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_93:                              # %for.cond372
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB62_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB62_93 Depth=2
	movl	$0, -4(%rbp)
.LBB62_95:                              # %for.cond375
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB62_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB62_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB62_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_99
.LBB62_98:                              # %if.else394
                                        #   in Loop: Header=BB62_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_99:                              # %if.end409
                                        #   in Loop: Header=BB62_95 Depth=3
	jmp	.LBB62_100
.LBB62_100:                             # %for.inc410
                                        #   in Loop: Header=BB62_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_95
.LBB62_101:                             # %for.end412
                                        #   in Loop: Header=BB62_93 Depth=2
	jmp	.LBB62_102
.LBB62_102:                             # %for.inc413
                                        #   in Loop: Header=BB62_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_93
.LBB62_103:                             # %for.end415
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_104:                             # %for.cond416
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB62_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB62_104 Depth=2
	movl	$0, -4(%rbp)
.LBB62_106:                             # %for.cond419
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB62_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB62_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB62_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_110
.LBB62_109:                             # %if.else438
                                        #   in Loop: Header=BB62_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_110:                             # %if.end453
                                        #   in Loop: Header=BB62_106 Depth=3
	jmp	.LBB62_111
.LBB62_111:                             # %for.inc454
                                        #   in Loop: Header=BB62_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_106
.LBB62_112:                             # %for.end456
                                        #   in Loop: Header=BB62_104 Depth=2
	jmp	.LBB62_113
.LBB62_113:                             # %for.inc457
                                        #   in Loop: Header=BB62_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_104
.LBB62_114:                             # %for.end459
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_115:                             # %for.cond460
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB62_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB62_115 Depth=2
	movl	$0, -4(%rbp)
.LBB62_117:                             # %for.cond463
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB62_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB62_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB62_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_121
.LBB62_120:                             # %if.else482
                                        #   in Loop: Header=BB62_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_121:                             # %if.end497
                                        #   in Loop: Header=BB62_117 Depth=3
	jmp	.LBB62_122
.LBB62_122:                             # %for.inc498
                                        #   in Loop: Header=BB62_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_117
.LBB62_123:                             # %for.end500
                                        #   in Loop: Header=BB62_115 Depth=2
	jmp	.LBB62_124
.LBB62_124:                             # %for.inc501
                                        #   in Loop: Header=BB62_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_115
.LBB62_125:                             # %for.end503
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_126:                             # %for.cond504
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB62_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB62_126 Depth=2
	movl	$0, -4(%rbp)
.LBB62_128:                             # %for.cond507
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB62_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB62_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB62_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_132
.LBB62_131:                             # %if.else526
                                        #   in Loop: Header=BB62_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_132:                             # %if.end541
                                        #   in Loop: Header=BB62_128 Depth=3
	jmp	.LBB62_133
.LBB62_133:                             # %for.inc542
                                        #   in Loop: Header=BB62_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_128
.LBB62_134:                             # %for.end544
                                        #   in Loop: Header=BB62_126 Depth=2
	jmp	.LBB62_135
.LBB62_135:                             # %for.inc545
                                        #   in Loop: Header=BB62_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_126
.LBB62_136:                             # %for.end547
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_137:                             # %for.cond548
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB62_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB62_137 Depth=2
	movl	$0, -4(%rbp)
.LBB62_139:                             # %for.cond551
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB62_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB62_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB62_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_143
.LBB62_142:                             # %if.else570
                                        #   in Loop: Header=BB62_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_143:                             # %if.end585
                                        #   in Loop: Header=BB62_139 Depth=3
	jmp	.LBB62_144
.LBB62_144:                             # %for.inc586
                                        #   in Loop: Header=BB62_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_139
.LBB62_145:                             # %for.end588
                                        #   in Loop: Header=BB62_137 Depth=2
	jmp	.LBB62_146
.LBB62_146:                             # %for.inc589
                                        #   in Loop: Header=BB62_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_137
.LBB62_147:                             # %for.end591
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_148:                             # %for.cond592
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB62_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB62_148 Depth=2
	movl	$0, -4(%rbp)
.LBB62_150:                             # %for.cond595
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB62_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB62_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB62_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_154
.LBB62_153:                             # %if.else614
                                        #   in Loop: Header=BB62_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_154:                             # %if.end629
                                        #   in Loop: Header=BB62_150 Depth=3
	jmp	.LBB62_155
.LBB62_155:                             # %for.inc630
                                        #   in Loop: Header=BB62_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_150
.LBB62_156:                             # %for.end632
                                        #   in Loop: Header=BB62_148 Depth=2
	jmp	.LBB62_157
.LBB62_157:                             # %for.inc633
                                        #   in Loop: Header=BB62_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_148
.LBB62_158:                             # %for.end635
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_159:                             # %for.cond636
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB62_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB62_159 Depth=2
	movl	$0, -4(%rbp)
.LBB62_161:                             # %for.cond639
                                        #   Parent Loop BB62_1 Depth=1
                                        #     Parent Loop BB62_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB62_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB62_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB62_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB62_165
.LBB62_164:                             # %if.else658
                                        #   in Loop: Header=BB62_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB62_165:                             # %if.end673
                                        #   in Loop: Header=BB62_161 Depth=3
	jmp	.LBB62_166
.LBB62_166:                             # %for.inc674
                                        #   in Loop: Header=BB62_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_161
.LBB62_167:                             # %for.end676
                                        #   in Loop: Header=BB62_159 Depth=2
	jmp	.LBB62_168
.LBB62_168:                             # %for.inc677
                                        #   in Loop: Header=BB62_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_159
.LBB62_169:                             # %for.end679
                                        #   in Loop: Header=BB62_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB62_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB62_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB62_171:                             # %if.end682
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_172
.LBB62_172:                             # %for.inc683
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_1
.LBB62_173:                             # %for.end685
	cmpl	$1833525017, -48(%rbp)  # imm = 0x6D495F19
	jne	.LBB62_175
.LBB62_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_174
.Lfunc_end62:
	.size	GetCtxModelNumber.55, .Lfunc_end62-GetCtxModelNumber.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.56
.LCPI63_0:
	.quad	4607182418800017408     # double 1
.LCPI63_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI63_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI63_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.56
	.p2align	4, 0x90
	.type	XRate.56,@function
XRate.56:                               # @XRate.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1529010102, -36(%rbp)  # imm = 0x5B22D7B6
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB63_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB63_3
.LBB63_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB63_3:                               # %cond.end
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI63_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI63_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI63_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB63_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB63_6
.LBB63_5:                               # %cond.false6
	vmovsd	.LCPI63_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI63_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI63_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB63_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB63_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB63_9
.LBB63_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB63_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB63_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB63_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB63_13
.LBB63_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB63_13:                              # %cond.end26
	jmp	.LBB63_15
.LBB63_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB63_15
.LBB63_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB63_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB63_18
.LBB63_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB63_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1529010102, -36(%rbp)  # imm = 0x5B22D7B6
	jne	.LBB63_20
.LBB63_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB63_19
.Lfunc_end63:
	.size	XRate.56, .Lfunc_end63-XRate.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.57
.LCPI64_0:
	.quad	4607182418800017408     # double 1
.LCPI64_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI64_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI64_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.57
	.p2align	4, 0x90
	.type	XRate.57,@function
XRate.57:                               # @XRate.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1041524946, -32(%rbp)  # imm = 0x3E1468D2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB64_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB64_3
.LBB64_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB64_3:                               # %cond.end
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI64_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI64_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI64_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB64_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB64_6
.LBB64_5:                               # %cond.false6
	vmovsd	.LCPI64_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI64_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI64_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB64_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB64_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB64_9
.LBB64_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB64_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB64_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB64_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB64_13
.LBB64_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB64_13:                              # %cond.end26
	jmp	.LBB64_15
.LBB64_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB64_15
.LBB64_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB64_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB64_18
.LBB64_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB64_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1041524946, -32(%rbp)  # imm = 0x3E1468D2
	jne	.LBB64_20
.LBB64_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB64_19
.Lfunc_end64:
	.size	XRate.57, .Lfunc_end64-XRate.57
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.58        # -- Begin function init_contexts.58
	.p2align	4, 0x90
	.type	init_contexts.58,@function
init_contexts.58:                       # @init_contexts.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$365659902, -28(%rbp)   # imm = 0x15CB86FE
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB65_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB65_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_7
.LBB65_6:                               # %if.else
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_7:                               # %if.end
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_8
.LBB65_8:                               # %for.inc
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_3
.LBB65_9:                               # %for.end
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_10
.LBB65_10:                              # %for.inc28
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_1
.LBB65_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB65_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB65_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB65_12 Depth=1
	movl	$0, -4(%rbp)
.LBB65_14:                              # %for.cond34
                                        #   Parent Loop BB65_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB65_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_18
.LBB65_17:                              # %if.else52
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_18:                              # %if.end66
                                        #   in Loop: Header=BB65_14 Depth=2
	jmp	.LBB65_19
.LBB65_19:                              # %for.inc67
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_14
.LBB65_20:                              # %for.end69
                                        #   in Loop: Header=BB65_12 Depth=1
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc70
                                        #   in Loop: Header=BB65_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_12
.LBB65_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB65_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB65_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	$0, -4(%rbp)
.LBB65_25:                              # %for.cond76
                                        #   Parent Loop BB65_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB65_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB65_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB65_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_29
.LBB65_28:                              # %if.else94
                                        #   in Loop: Header=BB65_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_29:                              # %if.end108
                                        #   in Loop: Header=BB65_25 Depth=2
	jmp	.LBB65_30
.LBB65_30:                              # %for.inc109
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_25
.LBB65_31:                              # %for.end111
                                        #   in Loop: Header=BB65_23 Depth=1
	jmp	.LBB65_32
.LBB65_32:                              # %for.inc112
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_23
.LBB65_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB65_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB65_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	$0, -4(%rbp)
.LBB65_36:                              # %for.cond118
                                        #   Parent Loop BB65_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB65_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB65_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB65_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_40
.LBB65_39:                              # %if.else136
                                        #   in Loop: Header=BB65_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_40:                              # %if.end150
                                        #   in Loop: Header=BB65_36 Depth=2
	jmp	.LBB65_41
.LBB65_41:                              # %for.inc151
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_36
.LBB65_42:                              # %for.end153
                                        #   in Loop: Header=BB65_34 Depth=1
	jmp	.LBB65_43
.LBB65_43:                              # %for.inc154
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_34
.LBB65_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB65_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB65_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB65_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_49
.LBB65_48:                              # %if.else172
                                        #   in Loop: Header=BB65_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_49:                              # %if.end183
                                        #   in Loop: Header=BB65_45 Depth=1
	jmp	.LBB65_50
.LBB65_50:                              # %for.inc184
                                        #   in Loop: Header=BB65_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_45
.LBB65_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB65_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB65_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB65_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_56
.LBB65_55:                              # %if.else202
                                        #   in Loop: Header=BB65_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_56:                              # %if.end213
                                        #   in Loop: Header=BB65_52 Depth=1
	jmp	.LBB65_57
.LBB65_57:                              # %for.inc214
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_52
.LBB65_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB65_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB65_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB65_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB65_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_63
.LBB65_62:                              # %if.else232
                                        #   in Loop: Header=BB65_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_63:                              # %if.end243
                                        #   in Loop: Header=BB65_59 Depth=1
	jmp	.LBB65_64
.LBB65_64:                              # %for.inc244
                                        #   in Loop: Header=BB65_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_59
.LBB65_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB65_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB65_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_70
.LBB65_69:                              # %if.else262
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_70:                              # %if.end273
                                        #   in Loop: Header=BB65_66 Depth=1
	jmp	.LBB65_71
.LBB65_71:                              # %for.inc274
                                        #   in Loop: Header=BB65_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_66
.LBB65_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB65_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB65_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB65_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB65_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_77
.LBB65_76:                              # %if.else292
                                        #   in Loop: Header=BB65_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_77:                              # %if.end303
                                        #   in Loop: Header=BB65_73 Depth=1
	jmp	.LBB65_78
.LBB65_78:                              # %for.inc304
                                        #   in Loop: Header=BB65_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_73
.LBB65_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB65_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB65_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB65_80 Depth=1
	movl	$0, -4(%rbp)
.LBB65_82:                              # %for.cond310
                                        #   Parent Loop BB65_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB65_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB65_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_86
.LBB65_85:                              # %if.else328
                                        #   in Loop: Header=BB65_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_86:                              # %if.end342
                                        #   in Loop: Header=BB65_82 Depth=2
	jmp	.LBB65_87
.LBB65_87:                              # %for.inc343
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_82
.LBB65_88:                              # %for.end345
                                        #   in Loop: Header=BB65_80 Depth=1
	jmp	.LBB65_89
.LBB65_89:                              # %for.inc346
                                        #   in Loop: Header=BB65_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_80
.LBB65_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB65_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB65_91 Depth=1
	movl	$0, -4(%rbp)
.LBB65_93:                              # %for.cond352
                                        #   Parent Loop BB65_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB65_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB65_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_97
.LBB65_96:                              # %if.else370
                                        #   in Loop: Header=BB65_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_97:                              # %if.end384
                                        #   in Loop: Header=BB65_93 Depth=2
	jmp	.LBB65_98
.LBB65_98:                              # %for.inc385
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_93
.LBB65_99:                              # %for.end387
                                        #   in Loop: Header=BB65_91 Depth=1
	jmp	.LBB65_100
.LBB65_100:                             # %for.inc388
                                        #   in Loop: Header=BB65_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_91
.LBB65_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB65_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB65_102 Depth=1
	movl	$0, -4(%rbp)
.LBB65_104:                             # %for.cond394
                                        #   Parent Loop BB65_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB65_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB65_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB65_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_108
.LBB65_107:                             # %if.else412
                                        #   in Loop: Header=BB65_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_108:                             # %if.end426
                                        #   in Loop: Header=BB65_104 Depth=2
	jmp	.LBB65_109
.LBB65_109:                             # %for.inc427
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_104
.LBB65_110:                             # %for.end429
                                        #   in Loop: Header=BB65_102 Depth=1
	jmp	.LBB65_111
.LBB65_111:                             # %for.inc430
                                        #   in Loop: Header=BB65_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_102
.LBB65_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB65_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB65_113 Depth=1
	movl	$0, -4(%rbp)
.LBB65_115:                             # %for.cond436
                                        #   Parent Loop BB65_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB65_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB65_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB65_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_119
.LBB65_118:                             # %if.else454
                                        #   in Loop: Header=BB65_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_119:                             # %if.end468
                                        #   in Loop: Header=BB65_115 Depth=2
	jmp	.LBB65_120
.LBB65_120:                             # %for.inc469
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_115
.LBB65_121:                             # %for.end471
                                        #   in Loop: Header=BB65_113 Depth=1
	jmp	.LBB65_122
.LBB65_122:                             # %for.inc472
                                        #   in Loop: Header=BB65_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_113
.LBB65_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB65_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB65_124 Depth=1
	movl	$0, -4(%rbp)
.LBB65_126:                             # %for.cond478
                                        #   Parent Loop BB65_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB65_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB65_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB65_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_130
.LBB65_129:                             # %if.else496
                                        #   in Loop: Header=BB65_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_130:                             # %if.end510
                                        #   in Loop: Header=BB65_126 Depth=2
	jmp	.LBB65_131
.LBB65_131:                             # %for.inc511
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_126
.LBB65_132:                             # %for.end513
                                        #   in Loop: Header=BB65_124 Depth=1
	jmp	.LBB65_133
.LBB65_133:                             # %for.inc514
                                        #   in Loop: Header=BB65_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_124
.LBB65_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB65_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	$0, -4(%rbp)
.LBB65_137:                             # %for.cond520
                                        #   Parent Loop BB65_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB65_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB65_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB65_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_141
.LBB65_140:                             # %if.else538
                                        #   in Loop: Header=BB65_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_141:                             # %if.end552
                                        #   in Loop: Header=BB65_137 Depth=2
	jmp	.LBB65_142
.LBB65_142:                             # %for.inc553
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_137
.LBB65_143:                             # %for.end555
                                        #   in Loop: Header=BB65_135 Depth=1
	jmp	.LBB65_144
.LBB65_144:                             # %for.inc556
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_135
.LBB65_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB65_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB65_146 Depth=1
	movl	$0, -4(%rbp)
.LBB65_148:                             # %for.cond562
                                        #   Parent Loop BB65_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB65_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB65_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB65_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_152
.LBB65_151:                             # %if.else580
                                        #   in Loop: Header=BB65_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_152:                             # %if.end594
                                        #   in Loop: Header=BB65_148 Depth=2
	jmp	.LBB65_153
.LBB65_153:                             # %for.inc595
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_148
.LBB65_154:                             # %for.end597
                                        #   in Loop: Header=BB65_146 Depth=1
	jmp	.LBB65_155
.LBB65_155:                             # %for.inc598
                                        #   in Loop: Header=BB65_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_146
.LBB65_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB65_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB65_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB65_157 Depth=1
	movl	$0, -4(%rbp)
.LBB65_159:                             # %for.cond604
                                        #   Parent Loop BB65_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB65_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB65_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB65_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB65_163
.LBB65_162:                             # %if.else622
                                        #   in Loop: Header=BB65_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB65_163:                             # %if.end636
                                        #   in Loop: Header=BB65_159 Depth=2
	jmp	.LBB65_164
.LBB65_164:                             # %for.inc637
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_159
.LBB65_165:                             # %for.end639
                                        #   in Loop: Header=BB65_157 Depth=1
	jmp	.LBB65_166
.LBB65_166:                             # %for.inc640
                                        #   in Loop: Header=BB65_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_157
.LBB65_167:                             # %for.end642
	cmpl	$365659902, -28(%rbp)   # imm = 0x15CB86FE
	jne	.LBB65_169
.LBB65_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_168
.Lfunc_end65:
	.size	init_contexts.58, .Lfunc_end65-init_contexts.58
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.59        # -- Begin function init_contexts.59
	.p2align	4, 0x90
	.type	init_contexts.59,@function
init_contexts.59:                       # @init_contexts.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2136793095, -28(%rbp)  # imm = 0x7F5CE007
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB66_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_3:                               # %for.cond2
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB66_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_7
.LBB66_6:                               # %if.else
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_7:                               # %if.end
                                        #   in Loop: Header=BB66_3 Depth=2
	jmp	.LBB66_8
.LBB66_8:                               # %for.inc
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_3
.LBB66_9:                               # %for.end
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_10
.LBB66_10:                              # %for.inc28
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_1
.LBB66_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB66_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB66_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB66_12 Depth=1
	movl	$0, -4(%rbp)
.LBB66_14:                              # %for.cond34
                                        #   Parent Loop BB66_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB66_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB66_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB66_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_18
.LBB66_17:                              # %if.else52
                                        #   in Loop: Header=BB66_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_18:                              # %if.end66
                                        #   in Loop: Header=BB66_14 Depth=2
	jmp	.LBB66_19
.LBB66_19:                              # %for.inc67
                                        #   in Loop: Header=BB66_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_14
.LBB66_20:                              # %for.end69
                                        #   in Loop: Header=BB66_12 Depth=1
	jmp	.LBB66_21
.LBB66_21:                              # %for.inc70
                                        #   in Loop: Header=BB66_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_12
.LBB66_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB66_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB66_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	$0, -4(%rbp)
.LBB66_25:                              # %for.cond76
                                        #   Parent Loop BB66_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB66_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB66_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB66_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_29
.LBB66_28:                              # %if.else94
                                        #   in Loop: Header=BB66_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_29:                              # %if.end108
                                        #   in Loop: Header=BB66_25 Depth=2
	jmp	.LBB66_30
.LBB66_30:                              # %for.inc109
                                        #   in Loop: Header=BB66_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_25
.LBB66_31:                              # %for.end111
                                        #   in Loop: Header=BB66_23 Depth=1
	jmp	.LBB66_32
.LBB66_32:                              # %for.inc112
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_23
.LBB66_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB66_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB66_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB66_34 Depth=1
	movl	$0, -4(%rbp)
.LBB66_36:                              # %for.cond118
                                        #   Parent Loop BB66_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB66_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB66_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB66_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_40
.LBB66_39:                              # %if.else136
                                        #   in Loop: Header=BB66_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_40:                              # %if.end150
                                        #   in Loop: Header=BB66_36 Depth=2
	jmp	.LBB66_41
.LBB66_41:                              # %for.inc151
                                        #   in Loop: Header=BB66_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_36
.LBB66_42:                              # %for.end153
                                        #   in Loop: Header=BB66_34 Depth=1
	jmp	.LBB66_43
.LBB66_43:                              # %for.inc154
                                        #   in Loop: Header=BB66_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_34
.LBB66_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB66_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB66_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB66_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_49
.LBB66_48:                              # %if.else172
                                        #   in Loop: Header=BB66_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_49:                              # %if.end183
                                        #   in Loop: Header=BB66_45 Depth=1
	jmp	.LBB66_50
.LBB66_50:                              # %for.inc184
                                        #   in Loop: Header=BB66_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_45
.LBB66_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB66_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB66_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB66_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_56
.LBB66_55:                              # %if.else202
                                        #   in Loop: Header=BB66_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_56:                              # %if.end213
                                        #   in Loop: Header=BB66_52 Depth=1
	jmp	.LBB66_57
.LBB66_57:                              # %for.inc214
                                        #   in Loop: Header=BB66_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_52
.LBB66_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB66_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB66_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB66_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB66_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_63
.LBB66_62:                              # %if.else232
                                        #   in Loop: Header=BB66_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_63:                              # %if.end243
                                        #   in Loop: Header=BB66_59 Depth=1
	jmp	.LBB66_64
.LBB66_64:                              # %for.inc244
                                        #   in Loop: Header=BB66_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_59
.LBB66_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB66_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB66_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB66_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB66_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_70
.LBB66_69:                              # %if.else262
                                        #   in Loop: Header=BB66_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_70:                              # %if.end273
                                        #   in Loop: Header=BB66_66 Depth=1
	jmp	.LBB66_71
.LBB66_71:                              # %for.inc274
                                        #   in Loop: Header=BB66_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_66
.LBB66_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB66_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB66_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB66_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_77
.LBB66_76:                              # %if.else292
                                        #   in Loop: Header=BB66_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_77:                              # %if.end303
                                        #   in Loop: Header=BB66_73 Depth=1
	jmp	.LBB66_78
.LBB66_78:                              # %for.inc304
                                        #   in Loop: Header=BB66_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_73
.LBB66_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB66_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB66_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB66_80 Depth=1
	movl	$0, -4(%rbp)
.LBB66_82:                              # %for.cond310
                                        #   Parent Loop BB66_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB66_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB66_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_86
.LBB66_85:                              # %if.else328
                                        #   in Loop: Header=BB66_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_86:                              # %if.end342
                                        #   in Loop: Header=BB66_82 Depth=2
	jmp	.LBB66_87
.LBB66_87:                              # %for.inc343
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_82
.LBB66_88:                              # %for.end345
                                        #   in Loop: Header=BB66_80 Depth=1
	jmp	.LBB66_89
.LBB66_89:                              # %for.inc346
                                        #   in Loop: Header=BB66_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_80
.LBB66_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB66_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB66_91 Depth=1
	movl	$0, -4(%rbp)
.LBB66_93:                              # %for.cond352
                                        #   Parent Loop BB66_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB66_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB66_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_97
.LBB66_96:                              # %if.else370
                                        #   in Loop: Header=BB66_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_97:                              # %if.end384
                                        #   in Loop: Header=BB66_93 Depth=2
	jmp	.LBB66_98
.LBB66_98:                              # %for.inc385
                                        #   in Loop: Header=BB66_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_93
.LBB66_99:                              # %for.end387
                                        #   in Loop: Header=BB66_91 Depth=1
	jmp	.LBB66_100
.LBB66_100:                             # %for.inc388
                                        #   in Loop: Header=BB66_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_91
.LBB66_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB66_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB66_102 Depth=1
	movl	$0, -4(%rbp)
.LBB66_104:                             # %for.cond394
                                        #   Parent Loop BB66_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB66_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB66_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB66_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_108
.LBB66_107:                             # %if.else412
                                        #   in Loop: Header=BB66_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_108:                             # %if.end426
                                        #   in Loop: Header=BB66_104 Depth=2
	jmp	.LBB66_109
.LBB66_109:                             # %for.inc427
                                        #   in Loop: Header=BB66_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_104
.LBB66_110:                             # %for.end429
                                        #   in Loop: Header=BB66_102 Depth=1
	jmp	.LBB66_111
.LBB66_111:                             # %for.inc430
                                        #   in Loop: Header=BB66_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_102
.LBB66_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB66_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB66_113 Depth=1
	movl	$0, -4(%rbp)
.LBB66_115:                             # %for.cond436
                                        #   Parent Loop BB66_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB66_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB66_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB66_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_119
.LBB66_118:                             # %if.else454
                                        #   in Loop: Header=BB66_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_119:                             # %if.end468
                                        #   in Loop: Header=BB66_115 Depth=2
	jmp	.LBB66_120
.LBB66_120:                             # %for.inc469
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_115
.LBB66_121:                             # %for.end471
                                        #   in Loop: Header=BB66_113 Depth=1
	jmp	.LBB66_122
.LBB66_122:                             # %for.inc472
                                        #   in Loop: Header=BB66_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_113
.LBB66_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB66_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB66_124 Depth=1
	movl	$0, -4(%rbp)
.LBB66_126:                             # %for.cond478
                                        #   Parent Loop BB66_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB66_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB66_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB66_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_130
.LBB66_129:                             # %if.else496
                                        #   in Loop: Header=BB66_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_130:                             # %if.end510
                                        #   in Loop: Header=BB66_126 Depth=2
	jmp	.LBB66_131
.LBB66_131:                             # %for.inc511
                                        #   in Loop: Header=BB66_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_126
.LBB66_132:                             # %for.end513
                                        #   in Loop: Header=BB66_124 Depth=1
	jmp	.LBB66_133
.LBB66_133:                             # %for.inc514
                                        #   in Loop: Header=BB66_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_124
.LBB66_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB66_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	$0, -4(%rbp)
.LBB66_137:                             # %for.cond520
                                        #   Parent Loop BB66_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB66_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB66_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB66_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_141
.LBB66_140:                             # %if.else538
                                        #   in Loop: Header=BB66_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_141:                             # %if.end552
                                        #   in Loop: Header=BB66_137 Depth=2
	jmp	.LBB66_142
.LBB66_142:                             # %for.inc553
                                        #   in Loop: Header=BB66_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_137
.LBB66_143:                             # %for.end555
                                        #   in Loop: Header=BB66_135 Depth=1
	jmp	.LBB66_144
.LBB66_144:                             # %for.inc556
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_135
.LBB66_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB66_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB66_146 Depth=1
	movl	$0, -4(%rbp)
.LBB66_148:                             # %for.cond562
                                        #   Parent Loop BB66_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB66_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB66_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB66_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_152
.LBB66_151:                             # %if.else580
                                        #   in Loop: Header=BB66_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_152:                             # %if.end594
                                        #   in Loop: Header=BB66_148 Depth=2
	jmp	.LBB66_153
.LBB66_153:                             # %for.inc595
                                        #   in Loop: Header=BB66_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_148
.LBB66_154:                             # %for.end597
                                        #   in Loop: Header=BB66_146 Depth=1
	jmp	.LBB66_155
.LBB66_155:                             # %for.inc598
                                        #   in Loop: Header=BB66_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_146
.LBB66_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB66_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB66_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB66_157 Depth=1
	movl	$0, -4(%rbp)
.LBB66_159:                             # %for.cond604
                                        #   Parent Loop BB66_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB66_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB66_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB66_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB66_163
.LBB66_162:                             # %if.else622
                                        #   in Loop: Header=BB66_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB66_163:                             # %if.end636
                                        #   in Loop: Header=BB66_159 Depth=2
	jmp	.LBB66_164
.LBB66_164:                             # %for.inc637
                                        #   in Loop: Header=BB66_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_159
.LBB66_165:                             # %for.end639
                                        #   in Loop: Header=BB66_157 Depth=1
	jmp	.LBB66_166
.LBB66_166:                             # %for.inc640
                                        #   in Loop: Header=BB66_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_157
.LBB66_167:                             # %for.end642
	cmpl	$2136793095, -28(%rbp)  # imm = 0x7F5CE007
	jne	.LBB66_169
.LBB66_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_168
.Lfunc_end66:
	.size	init_contexts.59, .Lfunc_end66-init_contexts.59
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.60        # -- Begin function init_contexts.60
	.p2align	4, 0x90
	.type	init_contexts.60,@function
init_contexts.60:                       # @init_contexts.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2104525392, -28(%rbp)  # imm = 0x7D708250
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB67_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_3:                               # %for.cond2
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB67_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_7
.LBB67_6:                               # %if.else
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_7:                               # %if.end
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_8
.LBB67_8:                               # %for.inc
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_3
.LBB67_9:                               # %for.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_10
.LBB67_10:                              # %for.inc28
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_1
.LBB67_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB67_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	$0, -4(%rbp)
.LBB67_14:                              # %for.cond34
                                        #   Parent Loop BB67_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB67_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_18
.LBB67_17:                              # %if.else52
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_18:                              # %if.end66
                                        #   in Loop: Header=BB67_14 Depth=2
	jmp	.LBB67_19
.LBB67_19:                              # %for.inc67
                                        #   in Loop: Header=BB67_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_14
.LBB67_20:                              # %for.end69
                                        #   in Loop: Header=BB67_12 Depth=1
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc70
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_12
.LBB67_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB67_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	$0, -4(%rbp)
.LBB67_25:                              # %for.cond76
                                        #   Parent Loop BB67_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB67_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_29
.LBB67_28:                              # %if.else94
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_29:                              # %if.end108
                                        #   in Loop: Header=BB67_25 Depth=2
	jmp	.LBB67_30
.LBB67_30:                              # %for.inc109
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_25
.LBB67_31:                              # %for.end111
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_32
.LBB67_32:                              # %for.inc112
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_23
.LBB67_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB67_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	$0, -4(%rbp)
.LBB67_36:                              # %for.cond118
                                        #   Parent Loop BB67_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB67_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_40
.LBB67_39:                              # %if.else136
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_40:                              # %if.end150
                                        #   in Loop: Header=BB67_36 Depth=2
	jmp	.LBB67_41
.LBB67_41:                              # %for.inc151
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_36
.LBB67_42:                              # %for.end153
                                        #   in Loop: Header=BB67_34 Depth=1
	jmp	.LBB67_43
.LBB67_43:                              # %for.inc154
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_34
.LBB67_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB67_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_49
.LBB67_48:                              # %if.else172
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_49:                              # %if.end183
                                        #   in Loop: Header=BB67_45 Depth=1
	jmp	.LBB67_50
.LBB67_50:                              # %for.inc184
                                        #   in Loop: Header=BB67_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_45
.LBB67_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB67_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_56
.LBB67_55:                              # %if.else202
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_56:                              # %if.end213
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_57
.LBB67_57:                              # %for.inc214
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_52
.LBB67_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB67_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB67_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_63
.LBB67_62:                              # %if.else232
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_63:                              # %if.end243
                                        #   in Loop: Header=BB67_59 Depth=1
	jmp	.LBB67_64
.LBB67_64:                              # %for.inc244
                                        #   in Loop: Header=BB67_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_59
.LBB67_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB67_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB67_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_70
.LBB67_69:                              # %if.else262
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_70:                              # %if.end273
                                        #   in Loop: Header=BB67_66 Depth=1
	jmp	.LBB67_71
.LBB67_71:                              # %for.inc274
                                        #   in Loop: Header=BB67_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_66
.LBB67_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB67_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_77
.LBB67_76:                              # %if.else292
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_77:                              # %if.end303
                                        #   in Loop: Header=BB67_73 Depth=1
	jmp	.LBB67_78
.LBB67_78:                              # %for.inc304
                                        #   in Loop: Header=BB67_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_73
.LBB67_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB67_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB67_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB67_80 Depth=1
	movl	$0, -4(%rbp)
.LBB67_82:                              # %for.cond310
                                        #   Parent Loop BB67_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_86
.LBB67_85:                              # %if.else328
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_86:                              # %if.end342
                                        #   in Loop: Header=BB67_82 Depth=2
	jmp	.LBB67_87
.LBB67_87:                              # %for.inc343
                                        #   in Loop: Header=BB67_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_82
.LBB67_88:                              # %for.end345
                                        #   in Loop: Header=BB67_80 Depth=1
	jmp	.LBB67_89
.LBB67_89:                              # %for.inc346
                                        #   in Loop: Header=BB67_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_80
.LBB67_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB67_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB67_91 Depth=1
	movl	$0, -4(%rbp)
.LBB67_93:                              # %for.cond352
                                        #   Parent Loop BB67_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_97
.LBB67_96:                              # %if.else370
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_97:                              # %if.end384
                                        #   in Loop: Header=BB67_93 Depth=2
	jmp	.LBB67_98
.LBB67_98:                              # %for.inc385
                                        #   in Loop: Header=BB67_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_93
.LBB67_99:                              # %for.end387
                                        #   in Loop: Header=BB67_91 Depth=1
	jmp	.LBB67_100
.LBB67_100:                             # %for.inc388
                                        #   in Loop: Header=BB67_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_91
.LBB67_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB67_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB67_102 Depth=1
	movl	$0, -4(%rbp)
.LBB67_104:                             # %for.cond394
                                        #   Parent Loop BB67_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_108
.LBB67_107:                             # %if.else412
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_108:                             # %if.end426
                                        #   in Loop: Header=BB67_104 Depth=2
	jmp	.LBB67_109
.LBB67_109:                             # %for.inc427
                                        #   in Loop: Header=BB67_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_104
.LBB67_110:                             # %for.end429
                                        #   in Loop: Header=BB67_102 Depth=1
	jmp	.LBB67_111
.LBB67_111:                             # %for.inc430
                                        #   in Loop: Header=BB67_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_102
.LBB67_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB67_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB67_113 Depth=1
	movl	$0, -4(%rbp)
.LBB67_115:                             # %for.cond436
                                        #   Parent Loop BB67_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_119
.LBB67_118:                             # %if.else454
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_119:                             # %if.end468
                                        #   in Loop: Header=BB67_115 Depth=2
	jmp	.LBB67_120
.LBB67_120:                             # %for.inc469
                                        #   in Loop: Header=BB67_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_115
.LBB67_121:                             # %for.end471
                                        #   in Loop: Header=BB67_113 Depth=1
	jmp	.LBB67_122
.LBB67_122:                             # %for.inc472
                                        #   in Loop: Header=BB67_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_113
.LBB67_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB67_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB67_124 Depth=1
	movl	$0, -4(%rbp)
.LBB67_126:                             # %for.cond478
                                        #   Parent Loop BB67_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB67_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_130
.LBB67_129:                             # %if.else496
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_130:                             # %if.end510
                                        #   in Loop: Header=BB67_126 Depth=2
	jmp	.LBB67_131
.LBB67_131:                             # %for.inc511
                                        #   in Loop: Header=BB67_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_126
.LBB67_132:                             # %for.end513
                                        #   in Loop: Header=BB67_124 Depth=1
	jmp	.LBB67_133
.LBB67_133:                             # %for.inc514
                                        #   in Loop: Header=BB67_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_124
.LBB67_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB67_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	$0, -4(%rbp)
.LBB67_137:                             # %for.cond520
                                        #   Parent Loop BB67_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB67_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_141
.LBB67_140:                             # %if.else538
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_141:                             # %if.end552
                                        #   in Loop: Header=BB67_137 Depth=2
	jmp	.LBB67_142
.LBB67_142:                             # %for.inc553
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_137
.LBB67_143:                             # %for.end555
                                        #   in Loop: Header=BB67_135 Depth=1
	jmp	.LBB67_144
.LBB67_144:                             # %for.inc556
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_135
.LBB67_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB67_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB67_146 Depth=1
	movl	$0, -4(%rbp)
.LBB67_148:                             # %for.cond562
                                        #   Parent Loop BB67_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_152
.LBB67_151:                             # %if.else580
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_152:                             # %if.end594
                                        #   in Loop: Header=BB67_148 Depth=2
	jmp	.LBB67_153
.LBB67_153:                             # %for.inc595
                                        #   in Loop: Header=BB67_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_148
.LBB67_154:                             # %for.end597
                                        #   in Loop: Header=BB67_146 Depth=1
	jmp	.LBB67_155
.LBB67_155:                             # %for.inc598
                                        #   in Loop: Header=BB67_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_146
.LBB67_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB67_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB67_157 Depth=1
	movl	$0, -4(%rbp)
.LBB67_159:                             # %for.cond604
                                        #   Parent Loop BB67_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_163
.LBB67_162:                             # %if.else622
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_163:                             # %if.end636
                                        #   in Loop: Header=BB67_159 Depth=2
	jmp	.LBB67_164
.LBB67_164:                             # %for.inc637
                                        #   in Loop: Header=BB67_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_159
.LBB67_165:                             # %for.end639
                                        #   in Loop: Header=BB67_157 Depth=1
	jmp	.LBB67_166
.LBB67_166:                             # %for.inc640
                                        #   in Loop: Header=BB67_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_157
.LBB67_167:                             # %for.end642
	cmpl	$2104525392, -28(%rbp)  # imm = 0x7D708250
	jne	.LBB67_169
.LBB67_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_168
.Lfunc_end67:
	.size	init_contexts.60, .Lfunc_end67-init_contexts.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.61
.LCPI68_0:
	.quad	4611686018427387904     # double 2
.LCPI68_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.61
	.p2align	4, 0x90
	.type	create_context_memory.61,@function
create_context_memory.61:               # @create_context_memory.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$927449387, -20(%rbp)   # imm = 0x3747C12B
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB68_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB68_3
.LBB68_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB68_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB68_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB68_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB68_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB68_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB68_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB68_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB68_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB68_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB68_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB68_11:                              # %if.end10
                                        #   in Loop: Header=BB68_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB68_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB68_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB68_13:                              # %if.end16
                                        #   in Loop: Header=BB68_8 Depth=1
	movl	$0, -8(%rbp)
.LBB68_14:                              # %for.cond17
                                        #   Parent Loop BB68_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB68_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB68_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB68_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB68_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB68_17:                              # %if.end28
                                        #   in Loop: Header=BB68_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB68_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB68_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB68_19:                              # %if.end39
                                        #   in Loop: Header=BB68_14 Depth=2
	jmp	.LBB68_20
.LBB68_20:                              # %for.inc
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_14
.LBB68_21:                              # %for.end
                                        #   in Loop: Header=BB68_8 Depth=1
	jmp	.LBB68_22
.LBB68_22:                              # %for.inc40
                                        #   in Loop: Header=BB68_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_8
.LBB68_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB68_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_26 Depth 2
                                        #       Child Loop BB68_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB68_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB68_24 Depth=1
	movl	$0, -8(%rbp)
.LBB68_26:                              # %for.cond47
                                        #   Parent Loop BB68_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB68_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB68_26 Depth=2
	movl	$0, -12(%rbp)
.LBB68_28:                              # %for.cond51
                                        #   Parent Loop BB68_24 Depth=1
                                        #     Parent Loop BB68_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB68_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB68_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB68_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_28
.LBB68_31:                              # %for.end63
                                        #   in Loop: Header=BB68_26 Depth=2
	jmp	.LBB68_32
.LBB68_32:                              # %for.inc64
                                        #   in Loop: Header=BB68_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_26
.LBB68_33:                              # %for.end66
                                        #   in Loop: Header=BB68_24 Depth=1
	jmp	.LBB68_34
.LBB68_34:                              # %for.inc67
                                        #   in Loop: Header=BB68_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_24
.LBB68_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB68_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB68_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB68_36 Depth=1
	vmovsd	.LCPI68_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI68_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI68_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB68_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_36
.LBB68_39:                              # %for.end98
	cmpl	$927449387, -20(%rbp)   # imm = 0x3747C12B
	jne	.LBB68_41
.LBB68_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_40
.Lfunc_end68:
	.size	create_context_memory.61, .Lfunc_end68-create_context_memory.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.62
.LCPI69_0:
	.quad	4607182418800017408     # double 1
.LCPI69_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI69_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI69_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.62
	.p2align	4, 0x90
	.type	XRate.62,@function
XRate.62:                               # @XRate.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$136558028, -36(%rbp)   # imm = 0x823B5CC
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB69_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB69_3
.LBB69_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB69_3:                               # %cond.end
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI69_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI69_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB69_6
.LBB69_5:                               # %cond.false6
	vmovsd	.LCPI69_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI69_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI69_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB69_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB69_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB69_9
.LBB69_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB69_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB69_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB69_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB69_13
.LBB69_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB69_13:                              # %cond.end26
	jmp	.LBB69_15
.LBB69_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB69_15
.LBB69_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB69_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB69_18
.LBB69_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB69_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$136558028, -36(%rbp)   # imm = 0x823B5CC
	jne	.LBB69_20
.LBB69_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB69_19
.Lfunc_end69:
	.size	XRate.62, .Lfunc_end69-XRate.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.63
.LCPI70_0:
	.quad	4611686018427387904     # double 2
.LCPI70_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.63
	.p2align	4, 0x90
	.type	create_context_memory.63,@function
create_context_memory.63:               # @create_context_memory.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1283857081, -20(%rbp)  # imm = 0x4C861AB9
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB70_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB70_3
.LBB70_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB70_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB70_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB70_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB70_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB70_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB70_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_11:                              # %if.end10
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB70_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_13:                              # %if.end16
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$0, -8(%rbp)
.LBB70_14:                              # %for.cond17
                                        #   Parent Loop BB70_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB70_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB70_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_17:                              # %if.end28
                                        #   in Loop: Header=BB70_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB70_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_19:                              # %if.end39
                                        #   in Loop: Header=BB70_14 Depth=2
	jmp	.LBB70_20
.LBB70_20:                              # %for.inc
                                        #   in Loop: Header=BB70_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_14
.LBB70_21:                              # %for.end
                                        #   in Loop: Header=BB70_8 Depth=1
	jmp	.LBB70_22
.LBB70_22:                              # %for.inc40
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_8
.LBB70_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB70_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_26 Depth 2
                                        #       Child Loop BB70_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB70_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	$0, -8(%rbp)
.LBB70_26:                              # %for.cond47
                                        #   Parent Loop BB70_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB70_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	$0, -12(%rbp)
.LBB70_28:                              # %for.cond51
                                        #   Parent Loop BB70_24 Depth=1
                                        #     Parent Loop BB70_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB70_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB70_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB70_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_28
.LBB70_31:                              # %for.end63
                                        #   in Loop: Header=BB70_26 Depth=2
	jmp	.LBB70_32
.LBB70_32:                              # %for.inc64
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_26
.LBB70_33:                              # %for.end66
                                        #   in Loop: Header=BB70_24 Depth=1
	jmp	.LBB70_34
.LBB70_34:                              # %for.inc67
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_24
.LBB70_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB70_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB70_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB70_36 Depth=1
	vmovsd	.LCPI70_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB70_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_36
.LBB70_39:                              # %for.end98
	cmpl	$1283857081, -20(%rbp)  # imm = 0x4C861AB9
	jne	.LBB70_41
.LBB70_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_40
.Lfunc_end70:
	.size	create_context_memory.63, .Lfunc_end70-create_context_memory.63
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.64        # -- Begin function init_contexts.64
	.p2align	4, 0x90
	.type	init_contexts.64,@function
init_contexts.64:                       # @init_contexts.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$248206975, -28(%rbp)   # imm = 0xECB567F
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB71_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_3:                               # %for.cond2
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB71_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_7
.LBB71_6:                               # %if.else
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_7:                               # %if.end
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_8
.LBB71_8:                               # %for.inc
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_3
.LBB71_9:                               # %for.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_10
.LBB71_10:                              # %for.inc28
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_1
.LBB71_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB71_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB71_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB71_12 Depth=1
	movl	$0, -4(%rbp)
.LBB71_14:                              # %for.cond34
                                        #   Parent Loop BB71_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB71_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB71_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB71_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_18
.LBB71_17:                              # %if.else52
                                        #   in Loop: Header=BB71_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_18:                              # %if.end66
                                        #   in Loop: Header=BB71_14 Depth=2
	jmp	.LBB71_19
.LBB71_19:                              # %for.inc67
                                        #   in Loop: Header=BB71_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_14
.LBB71_20:                              # %for.end69
                                        #   in Loop: Header=BB71_12 Depth=1
	jmp	.LBB71_21
.LBB71_21:                              # %for.inc70
                                        #   in Loop: Header=BB71_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_12
.LBB71_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB71_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB71_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB71_23 Depth=1
	movl	$0, -4(%rbp)
.LBB71_25:                              # %for.cond76
                                        #   Parent Loop BB71_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB71_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB71_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB71_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_29
.LBB71_28:                              # %if.else94
                                        #   in Loop: Header=BB71_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_29:                              # %if.end108
                                        #   in Loop: Header=BB71_25 Depth=2
	jmp	.LBB71_30
.LBB71_30:                              # %for.inc109
                                        #   in Loop: Header=BB71_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_25
.LBB71_31:                              # %for.end111
                                        #   in Loop: Header=BB71_23 Depth=1
	jmp	.LBB71_32
.LBB71_32:                              # %for.inc112
                                        #   in Loop: Header=BB71_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_23
.LBB71_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB71_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB71_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB71_34 Depth=1
	movl	$0, -4(%rbp)
.LBB71_36:                              # %for.cond118
                                        #   Parent Loop BB71_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB71_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB71_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB71_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_40
.LBB71_39:                              # %if.else136
                                        #   in Loop: Header=BB71_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_40:                              # %if.end150
                                        #   in Loop: Header=BB71_36 Depth=2
	jmp	.LBB71_41
.LBB71_41:                              # %for.inc151
                                        #   in Loop: Header=BB71_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_36
.LBB71_42:                              # %for.end153
                                        #   in Loop: Header=BB71_34 Depth=1
	jmp	.LBB71_43
.LBB71_43:                              # %for.inc154
                                        #   in Loop: Header=BB71_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_34
.LBB71_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB71_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB71_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB71_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB71_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_49
.LBB71_48:                              # %if.else172
                                        #   in Loop: Header=BB71_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_49:                              # %if.end183
                                        #   in Loop: Header=BB71_45 Depth=1
	jmp	.LBB71_50
.LBB71_50:                              # %for.inc184
                                        #   in Loop: Header=BB71_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_45
.LBB71_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB71_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB71_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB71_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB71_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_56
.LBB71_55:                              # %if.else202
                                        #   in Loop: Header=BB71_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_56:                              # %if.end213
                                        #   in Loop: Header=BB71_52 Depth=1
	jmp	.LBB71_57
.LBB71_57:                              # %for.inc214
                                        #   in Loop: Header=BB71_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_52
.LBB71_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB71_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB71_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB71_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB71_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_63
.LBB71_62:                              # %if.else232
                                        #   in Loop: Header=BB71_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_63:                              # %if.end243
                                        #   in Loop: Header=BB71_59 Depth=1
	jmp	.LBB71_64
.LBB71_64:                              # %for.inc244
                                        #   in Loop: Header=BB71_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_59
.LBB71_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB71_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB71_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB71_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB71_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_70
.LBB71_69:                              # %if.else262
                                        #   in Loop: Header=BB71_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_70:                              # %if.end273
                                        #   in Loop: Header=BB71_66 Depth=1
	jmp	.LBB71_71
.LBB71_71:                              # %for.inc274
                                        #   in Loop: Header=BB71_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_66
.LBB71_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB71_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB71_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB71_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB71_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_77
.LBB71_76:                              # %if.else292
                                        #   in Loop: Header=BB71_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_77:                              # %if.end303
                                        #   in Loop: Header=BB71_73 Depth=1
	jmp	.LBB71_78
.LBB71_78:                              # %for.inc304
                                        #   in Loop: Header=BB71_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_73
.LBB71_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB71_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB71_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB71_80 Depth=1
	movl	$0, -4(%rbp)
.LBB71_82:                              # %for.cond310
                                        #   Parent Loop BB71_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB71_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB71_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_86
.LBB71_85:                              # %if.else328
                                        #   in Loop: Header=BB71_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_86:                              # %if.end342
                                        #   in Loop: Header=BB71_82 Depth=2
	jmp	.LBB71_87
.LBB71_87:                              # %for.inc343
                                        #   in Loop: Header=BB71_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_82
.LBB71_88:                              # %for.end345
                                        #   in Loop: Header=BB71_80 Depth=1
	jmp	.LBB71_89
.LBB71_89:                              # %for.inc346
                                        #   in Loop: Header=BB71_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_80
.LBB71_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB71_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB71_91 Depth=1
	movl	$0, -4(%rbp)
.LBB71_93:                              # %for.cond352
                                        #   Parent Loop BB71_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB71_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB71_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_97
.LBB71_96:                              # %if.else370
                                        #   in Loop: Header=BB71_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_97:                              # %if.end384
                                        #   in Loop: Header=BB71_93 Depth=2
	jmp	.LBB71_98
.LBB71_98:                              # %for.inc385
                                        #   in Loop: Header=BB71_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_93
.LBB71_99:                              # %for.end387
                                        #   in Loop: Header=BB71_91 Depth=1
	jmp	.LBB71_100
.LBB71_100:                             # %for.inc388
                                        #   in Loop: Header=BB71_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_91
.LBB71_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB71_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB71_102 Depth=1
	movl	$0, -4(%rbp)
.LBB71_104:                             # %for.cond394
                                        #   Parent Loop BB71_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB71_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB71_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB71_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_108
.LBB71_107:                             # %if.else412
                                        #   in Loop: Header=BB71_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_108:                             # %if.end426
                                        #   in Loop: Header=BB71_104 Depth=2
	jmp	.LBB71_109
.LBB71_109:                             # %for.inc427
                                        #   in Loop: Header=BB71_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_104
.LBB71_110:                             # %for.end429
                                        #   in Loop: Header=BB71_102 Depth=1
	jmp	.LBB71_111
.LBB71_111:                             # %for.inc430
                                        #   in Loop: Header=BB71_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_102
.LBB71_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB71_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB71_113 Depth=1
	movl	$0, -4(%rbp)
.LBB71_115:                             # %for.cond436
                                        #   Parent Loop BB71_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB71_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB71_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB71_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_119
.LBB71_118:                             # %if.else454
                                        #   in Loop: Header=BB71_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_119:                             # %if.end468
                                        #   in Loop: Header=BB71_115 Depth=2
	jmp	.LBB71_120
.LBB71_120:                             # %for.inc469
                                        #   in Loop: Header=BB71_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_115
.LBB71_121:                             # %for.end471
                                        #   in Loop: Header=BB71_113 Depth=1
	jmp	.LBB71_122
.LBB71_122:                             # %for.inc472
                                        #   in Loop: Header=BB71_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_113
.LBB71_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB71_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB71_124 Depth=1
	movl	$0, -4(%rbp)
.LBB71_126:                             # %for.cond478
                                        #   Parent Loop BB71_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB71_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB71_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB71_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_130
.LBB71_129:                             # %if.else496
                                        #   in Loop: Header=BB71_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_130:                             # %if.end510
                                        #   in Loop: Header=BB71_126 Depth=2
	jmp	.LBB71_131
.LBB71_131:                             # %for.inc511
                                        #   in Loop: Header=BB71_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_126
.LBB71_132:                             # %for.end513
                                        #   in Loop: Header=BB71_124 Depth=1
	jmp	.LBB71_133
.LBB71_133:                             # %for.inc514
                                        #   in Loop: Header=BB71_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_124
.LBB71_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB71_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	$0, -4(%rbp)
.LBB71_137:                             # %for.cond520
                                        #   Parent Loop BB71_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB71_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB71_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB71_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_141
.LBB71_140:                             # %if.else538
                                        #   in Loop: Header=BB71_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_141:                             # %if.end552
                                        #   in Loop: Header=BB71_137 Depth=2
	jmp	.LBB71_142
.LBB71_142:                             # %for.inc553
                                        #   in Loop: Header=BB71_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_137
.LBB71_143:                             # %for.end555
                                        #   in Loop: Header=BB71_135 Depth=1
	jmp	.LBB71_144
.LBB71_144:                             # %for.inc556
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_135
.LBB71_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB71_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB71_146 Depth=1
	movl	$0, -4(%rbp)
.LBB71_148:                             # %for.cond562
                                        #   Parent Loop BB71_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB71_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB71_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB71_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_152
.LBB71_151:                             # %if.else580
                                        #   in Loop: Header=BB71_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_152:                             # %if.end594
                                        #   in Loop: Header=BB71_148 Depth=2
	jmp	.LBB71_153
.LBB71_153:                             # %for.inc595
                                        #   in Loop: Header=BB71_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_148
.LBB71_154:                             # %for.end597
                                        #   in Loop: Header=BB71_146 Depth=1
	jmp	.LBB71_155
.LBB71_155:                             # %for.inc598
                                        #   in Loop: Header=BB71_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_146
.LBB71_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB71_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB71_157 Depth=1
	movl	$0, -4(%rbp)
.LBB71_159:                             # %for.cond604
                                        #   Parent Loop BB71_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB71_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB71_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB71_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_163
.LBB71_162:                             # %if.else622
                                        #   in Loop: Header=BB71_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_163:                             # %if.end636
                                        #   in Loop: Header=BB71_159 Depth=2
	jmp	.LBB71_164
.LBB71_164:                             # %for.inc637
                                        #   in Loop: Header=BB71_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_159
.LBB71_165:                             # %for.end639
                                        #   in Loop: Header=BB71_157 Depth=1
	jmp	.LBB71_166
.LBB71_166:                             # %for.inc640
                                        #   in Loop: Header=BB71_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_157
.LBB71_167:                             # %for.end642
	cmpl	$248206975, -28(%rbp)   # imm = 0xECB567F
	jne	.LBB71_169
.LBB71_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_168
.Lfunc_end71:
	.size	init_contexts.64, .Lfunc_end71-init_contexts.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.65
.LCPI72_0:
	.quad	4611686018427387904     # double 2
.LCPI72_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.65
	.p2align	4, 0x90
	.type	create_context_memory.65,@function
create_context_memory.65:               # @create_context_memory.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1225012549, -20(%rbp)  # imm = 0x49043545
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB72_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB72_3
.LBB72_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB72_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB72_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB72_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB72_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB72_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB72_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_11:                              # %if.end10
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB72_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_13:                              # %if.end16
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$0, -8(%rbp)
.LBB72_14:                              # %for.cond17
                                        #   Parent Loop BB72_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB72_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB72_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB72_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_17:                              # %if.end28
                                        #   in Loop: Header=BB72_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB72_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_19:                              # %if.end39
                                        #   in Loop: Header=BB72_14 Depth=2
	jmp	.LBB72_20
.LBB72_20:                              # %for.inc
                                        #   in Loop: Header=BB72_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_14
.LBB72_21:                              # %for.end
                                        #   in Loop: Header=BB72_8 Depth=1
	jmp	.LBB72_22
.LBB72_22:                              # %for.inc40
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_8
.LBB72_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB72_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_26 Depth 2
                                        #       Child Loop BB72_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB72_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB72_24 Depth=1
	movl	$0, -8(%rbp)
.LBB72_26:                              # %for.cond47
                                        #   Parent Loop BB72_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB72_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB72_26 Depth=2
	movl	$0, -12(%rbp)
.LBB72_28:                              # %for.cond51
                                        #   Parent Loop BB72_24 Depth=1
                                        #     Parent Loop BB72_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB72_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB72_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB72_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_28
.LBB72_31:                              # %for.end63
                                        #   in Loop: Header=BB72_26 Depth=2
	jmp	.LBB72_32
.LBB72_32:                              # %for.inc64
                                        #   in Loop: Header=BB72_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_26
.LBB72_33:                              # %for.end66
                                        #   in Loop: Header=BB72_24 Depth=1
	jmp	.LBB72_34
.LBB72_34:                              # %for.inc67
                                        #   in Loop: Header=BB72_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_24
.LBB72_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB72_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB72_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB72_36 Depth=1
	vmovsd	.LCPI72_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB72_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_36
.LBB72_39:                              # %for.end98
	cmpl	$1225012549, -20(%rbp)  # imm = 0x49043545
	jne	.LBB72_41
.LBB72_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_40
.Lfunc_end72:
	.size	create_context_memory.65, .Lfunc_end72-create_context_memory.65
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.66        # -- Begin function init_contexts.66
	.p2align	4, 0x90
	.type	init_contexts.66,@function
init_contexts.66:                       # @init_contexts.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$616863272, -28(%rbp)   # imm = 0x24C49628
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB73_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_3:                               # %for.cond2
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB73_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_7
.LBB73_6:                               # %if.else
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_7:                               # %if.end
                                        #   in Loop: Header=BB73_3 Depth=2
	jmp	.LBB73_8
.LBB73_8:                               # %for.inc
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_3
.LBB73_9:                               # %for.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_10
.LBB73_10:                              # %for.inc28
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_1
.LBB73_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB73_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB73_12 Depth=1
	movl	$0, -4(%rbp)
.LBB73_14:                              # %for.cond34
                                        #   Parent Loop BB73_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB73_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_18
.LBB73_17:                              # %if.else52
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_18:                              # %if.end66
                                        #   in Loop: Header=BB73_14 Depth=2
	jmp	.LBB73_19
.LBB73_19:                              # %for.inc67
                                        #   in Loop: Header=BB73_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_14
.LBB73_20:                              # %for.end69
                                        #   in Loop: Header=BB73_12 Depth=1
	jmp	.LBB73_21
.LBB73_21:                              # %for.inc70
                                        #   in Loop: Header=BB73_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_12
.LBB73_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB73_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB73_23 Depth=1
	movl	$0, -4(%rbp)
.LBB73_25:                              # %for.cond76
                                        #   Parent Loop BB73_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB73_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_29
.LBB73_28:                              # %if.else94
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_29:                              # %if.end108
                                        #   in Loop: Header=BB73_25 Depth=2
	jmp	.LBB73_30
.LBB73_30:                              # %for.inc109
                                        #   in Loop: Header=BB73_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_25
.LBB73_31:                              # %for.end111
                                        #   in Loop: Header=BB73_23 Depth=1
	jmp	.LBB73_32
.LBB73_32:                              # %for.inc112
                                        #   in Loop: Header=BB73_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_23
.LBB73_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB73_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB73_34 Depth=1
	movl	$0, -4(%rbp)
.LBB73_36:                              # %for.cond118
                                        #   Parent Loop BB73_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB73_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_40
.LBB73_39:                              # %if.else136
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_40:                              # %if.end150
                                        #   in Loop: Header=BB73_36 Depth=2
	jmp	.LBB73_41
.LBB73_41:                              # %for.inc151
                                        #   in Loop: Header=BB73_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_36
.LBB73_42:                              # %for.end153
                                        #   in Loop: Header=BB73_34 Depth=1
	jmp	.LBB73_43
.LBB73_43:                              # %for.inc154
                                        #   in Loop: Header=BB73_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_34
.LBB73_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB73_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_49
.LBB73_48:                              # %if.else172
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_49:                              # %if.end183
                                        #   in Loop: Header=BB73_45 Depth=1
	jmp	.LBB73_50
.LBB73_50:                              # %for.inc184
                                        #   in Loop: Header=BB73_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_45
.LBB73_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB73_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_56
.LBB73_55:                              # %if.else202
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_56:                              # %if.end213
                                        #   in Loop: Header=BB73_52 Depth=1
	jmp	.LBB73_57
.LBB73_57:                              # %for.inc214
                                        #   in Loop: Header=BB73_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_52
.LBB73_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB73_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB73_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_63
.LBB73_62:                              # %if.else232
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_63:                              # %if.end243
                                        #   in Loop: Header=BB73_59 Depth=1
	jmp	.LBB73_64
.LBB73_64:                              # %for.inc244
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_59
.LBB73_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB73_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB73_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_70
.LBB73_69:                              # %if.else262
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_70:                              # %if.end273
                                        #   in Loop: Header=BB73_66 Depth=1
	jmp	.LBB73_71
.LBB73_71:                              # %for.inc274
                                        #   in Loop: Header=BB73_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_66
.LBB73_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB73_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_77
.LBB73_76:                              # %if.else292
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_77:                              # %if.end303
                                        #   in Loop: Header=BB73_73 Depth=1
	jmp	.LBB73_78
.LBB73_78:                              # %for.inc304
                                        #   in Loop: Header=BB73_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_73
.LBB73_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB73_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB73_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB73_80 Depth=1
	movl	$0, -4(%rbp)
.LBB73_82:                              # %for.cond310
                                        #   Parent Loop BB73_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_86
.LBB73_85:                              # %if.else328
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_86:                              # %if.end342
                                        #   in Loop: Header=BB73_82 Depth=2
	jmp	.LBB73_87
.LBB73_87:                              # %for.inc343
                                        #   in Loop: Header=BB73_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_82
.LBB73_88:                              # %for.end345
                                        #   in Loop: Header=BB73_80 Depth=1
	jmp	.LBB73_89
.LBB73_89:                              # %for.inc346
                                        #   in Loop: Header=BB73_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_80
.LBB73_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB73_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	$0, -4(%rbp)
.LBB73_93:                              # %for.cond352
                                        #   Parent Loop BB73_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_97
.LBB73_96:                              # %if.else370
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_97:                              # %if.end384
                                        #   in Loop: Header=BB73_93 Depth=2
	jmp	.LBB73_98
.LBB73_98:                              # %for.inc385
                                        #   in Loop: Header=BB73_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_93
.LBB73_99:                              # %for.end387
                                        #   in Loop: Header=BB73_91 Depth=1
	jmp	.LBB73_100
.LBB73_100:                             # %for.inc388
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_91
.LBB73_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB73_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB73_102 Depth=1
	movl	$0, -4(%rbp)
.LBB73_104:                             # %for.cond394
                                        #   Parent Loop BB73_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_108
.LBB73_107:                             # %if.else412
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_108:                             # %if.end426
                                        #   in Loop: Header=BB73_104 Depth=2
	jmp	.LBB73_109
.LBB73_109:                             # %for.inc427
                                        #   in Loop: Header=BB73_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_104
.LBB73_110:                             # %for.end429
                                        #   in Loop: Header=BB73_102 Depth=1
	jmp	.LBB73_111
.LBB73_111:                             # %for.inc430
                                        #   in Loop: Header=BB73_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_102
.LBB73_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB73_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB73_113 Depth=1
	movl	$0, -4(%rbp)
.LBB73_115:                             # %for.cond436
                                        #   Parent Loop BB73_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_119
.LBB73_118:                             # %if.else454
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_119:                             # %if.end468
                                        #   in Loop: Header=BB73_115 Depth=2
	jmp	.LBB73_120
.LBB73_120:                             # %for.inc469
                                        #   in Loop: Header=BB73_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_115
.LBB73_121:                             # %for.end471
                                        #   in Loop: Header=BB73_113 Depth=1
	jmp	.LBB73_122
.LBB73_122:                             # %for.inc472
                                        #   in Loop: Header=BB73_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_113
.LBB73_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB73_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB73_124 Depth=1
	movl	$0, -4(%rbp)
.LBB73_126:                             # %for.cond478
                                        #   Parent Loop BB73_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB73_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_130
.LBB73_129:                             # %if.else496
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_130:                             # %if.end510
                                        #   in Loop: Header=BB73_126 Depth=2
	jmp	.LBB73_131
.LBB73_131:                             # %for.inc511
                                        #   in Loop: Header=BB73_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_126
.LBB73_132:                             # %for.end513
                                        #   in Loop: Header=BB73_124 Depth=1
	jmp	.LBB73_133
.LBB73_133:                             # %for.inc514
                                        #   in Loop: Header=BB73_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_124
.LBB73_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB73_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	$0, -4(%rbp)
.LBB73_137:                             # %for.cond520
                                        #   Parent Loop BB73_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB73_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_141
.LBB73_140:                             # %if.else538
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_141:                             # %if.end552
                                        #   in Loop: Header=BB73_137 Depth=2
	jmp	.LBB73_142
.LBB73_142:                             # %for.inc553
                                        #   in Loop: Header=BB73_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_137
.LBB73_143:                             # %for.end555
                                        #   in Loop: Header=BB73_135 Depth=1
	jmp	.LBB73_144
.LBB73_144:                             # %for.inc556
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_135
.LBB73_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB73_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB73_146 Depth=1
	movl	$0, -4(%rbp)
.LBB73_148:                             # %for.cond562
                                        #   Parent Loop BB73_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_152
.LBB73_151:                             # %if.else580
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_152:                             # %if.end594
                                        #   in Loop: Header=BB73_148 Depth=2
	jmp	.LBB73_153
.LBB73_153:                             # %for.inc595
                                        #   in Loop: Header=BB73_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_148
.LBB73_154:                             # %for.end597
                                        #   in Loop: Header=BB73_146 Depth=1
	jmp	.LBB73_155
.LBB73_155:                             # %for.inc598
                                        #   in Loop: Header=BB73_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_146
.LBB73_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB73_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB73_157 Depth=1
	movl	$0, -4(%rbp)
.LBB73_159:                             # %for.cond604
                                        #   Parent Loop BB73_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_163
.LBB73_162:                             # %if.else622
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_163:                             # %if.end636
                                        #   in Loop: Header=BB73_159 Depth=2
	jmp	.LBB73_164
.LBB73_164:                             # %for.inc637
                                        #   in Loop: Header=BB73_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_159
.LBB73_165:                             # %for.end639
                                        #   in Loop: Header=BB73_157 Depth=1
	jmp	.LBB73_166
.LBB73_166:                             # %for.inc640
                                        #   in Loop: Header=BB73_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_157
.LBB73_167:                             # %for.end642
	cmpl	$616863272, -28(%rbp)   # imm = 0x24C49628
	jne	.LBB73_169
.LBB73_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_168
.Lfunc_end73:
	.size	init_contexts.66, .Lfunc_end73-init_contexts.66
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.67        # -- Begin function init_contexts.67
	.p2align	4, 0x90
	.type	init_contexts.67,@function
init_contexts.67:                       # @init_contexts.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$590179611, -28(%rbp)   # imm = 0x232D6D1B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB74_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_3:                               # %for.cond2
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB74_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_7
.LBB74_6:                               # %if.else
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_7:                               # %if.end
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_8
.LBB74_8:                               # %for.inc
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_3
.LBB74_9:                               # %for.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_10
.LBB74_10:                              # %for.inc28
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_1
.LBB74_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB74_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB74_12 Depth=1
	movl	$0, -4(%rbp)
.LBB74_14:                              # %for.cond34
                                        #   Parent Loop BB74_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB74_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_18
.LBB74_17:                              # %if.else52
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_18:                              # %if.end66
                                        #   in Loop: Header=BB74_14 Depth=2
	jmp	.LBB74_19
.LBB74_19:                              # %for.inc67
                                        #   in Loop: Header=BB74_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_14
.LBB74_20:                              # %for.end69
                                        #   in Loop: Header=BB74_12 Depth=1
	jmp	.LBB74_21
.LBB74_21:                              # %for.inc70
                                        #   in Loop: Header=BB74_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_12
.LBB74_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB74_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	$0, -4(%rbp)
.LBB74_25:                              # %for.cond76
                                        #   Parent Loop BB74_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB74_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_29
.LBB74_28:                              # %if.else94
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_29:                              # %if.end108
                                        #   in Loop: Header=BB74_25 Depth=2
	jmp	.LBB74_30
.LBB74_30:                              # %for.inc109
                                        #   in Loop: Header=BB74_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_25
.LBB74_31:                              # %for.end111
                                        #   in Loop: Header=BB74_23 Depth=1
	jmp	.LBB74_32
.LBB74_32:                              # %for.inc112
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_23
.LBB74_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB74_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB74_34 Depth=1
	movl	$0, -4(%rbp)
.LBB74_36:                              # %for.cond118
                                        #   Parent Loop BB74_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB74_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_40
.LBB74_39:                              # %if.else136
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_40:                              # %if.end150
                                        #   in Loop: Header=BB74_36 Depth=2
	jmp	.LBB74_41
.LBB74_41:                              # %for.inc151
                                        #   in Loop: Header=BB74_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_36
.LBB74_42:                              # %for.end153
                                        #   in Loop: Header=BB74_34 Depth=1
	jmp	.LBB74_43
.LBB74_43:                              # %for.inc154
                                        #   in Loop: Header=BB74_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_34
.LBB74_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB74_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_49
.LBB74_48:                              # %if.else172
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_49:                              # %if.end183
                                        #   in Loop: Header=BB74_45 Depth=1
	jmp	.LBB74_50
.LBB74_50:                              # %for.inc184
                                        #   in Loop: Header=BB74_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_45
.LBB74_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB74_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_56
.LBB74_55:                              # %if.else202
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_56:                              # %if.end213
                                        #   in Loop: Header=BB74_52 Depth=1
	jmp	.LBB74_57
.LBB74_57:                              # %for.inc214
                                        #   in Loop: Header=BB74_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_52
.LBB74_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB74_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB74_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_63
.LBB74_62:                              # %if.else232
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_63:                              # %if.end243
                                        #   in Loop: Header=BB74_59 Depth=1
	jmp	.LBB74_64
.LBB74_64:                              # %for.inc244
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_59
.LBB74_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB74_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB74_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_70
.LBB74_69:                              # %if.else262
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_70:                              # %if.end273
                                        #   in Loop: Header=BB74_66 Depth=1
	jmp	.LBB74_71
.LBB74_71:                              # %for.inc274
                                        #   in Loop: Header=BB74_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_66
.LBB74_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB74_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_77
.LBB74_76:                              # %if.else292
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_77:                              # %if.end303
                                        #   in Loop: Header=BB74_73 Depth=1
	jmp	.LBB74_78
.LBB74_78:                              # %for.inc304
                                        #   in Loop: Header=BB74_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_73
.LBB74_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB74_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB74_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB74_80 Depth=1
	movl	$0, -4(%rbp)
.LBB74_82:                              # %for.cond310
                                        #   Parent Loop BB74_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_86
.LBB74_85:                              # %if.else328
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_86:                              # %if.end342
                                        #   in Loop: Header=BB74_82 Depth=2
	jmp	.LBB74_87
.LBB74_87:                              # %for.inc343
                                        #   in Loop: Header=BB74_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_82
.LBB74_88:                              # %for.end345
                                        #   in Loop: Header=BB74_80 Depth=1
	jmp	.LBB74_89
.LBB74_89:                              # %for.inc346
                                        #   in Loop: Header=BB74_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_80
.LBB74_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB74_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB74_91 Depth=1
	movl	$0, -4(%rbp)
.LBB74_93:                              # %for.cond352
                                        #   Parent Loop BB74_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_97
.LBB74_96:                              # %if.else370
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_97:                              # %if.end384
                                        #   in Loop: Header=BB74_93 Depth=2
	jmp	.LBB74_98
.LBB74_98:                              # %for.inc385
                                        #   in Loop: Header=BB74_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_93
.LBB74_99:                              # %for.end387
                                        #   in Loop: Header=BB74_91 Depth=1
	jmp	.LBB74_100
.LBB74_100:                             # %for.inc388
                                        #   in Loop: Header=BB74_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_91
.LBB74_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB74_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB74_102 Depth=1
	movl	$0, -4(%rbp)
.LBB74_104:                             # %for.cond394
                                        #   Parent Loop BB74_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_108
.LBB74_107:                             # %if.else412
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_108:                             # %if.end426
                                        #   in Loop: Header=BB74_104 Depth=2
	jmp	.LBB74_109
.LBB74_109:                             # %for.inc427
                                        #   in Loop: Header=BB74_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_104
.LBB74_110:                             # %for.end429
                                        #   in Loop: Header=BB74_102 Depth=1
	jmp	.LBB74_111
.LBB74_111:                             # %for.inc430
                                        #   in Loop: Header=BB74_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_102
.LBB74_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB74_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB74_113 Depth=1
	movl	$0, -4(%rbp)
.LBB74_115:                             # %for.cond436
                                        #   Parent Loop BB74_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_119
.LBB74_118:                             # %if.else454
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_119:                             # %if.end468
                                        #   in Loop: Header=BB74_115 Depth=2
	jmp	.LBB74_120
.LBB74_120:                             # %for.inc469
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_115
.LBB74_121:                             # %for.end471
                                        #   in Loop: Header=BB74_113 Depth=1
	jmp	.LBB74_122
.LBB74_122:                             # %for.inc472
                                        #   in Loop: Header=BB74_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_113
.LBB74_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB74_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB74_124 Depth=1
	movl	$0, -4(%rbp)
.LBB74_126:                             # %for.cond478
                                        #   Parent Loop BB74_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB74_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_130
.LBB74_129:                             # %if.else496
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_130:                             # %if.end510
                                        #   in Loop: Header=BB74_126 Depth=2
	jmp	.LBB74_131
.LBB74_131:                             # %for.inc511
                                        #   in Loop: Header=BB74_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_126
.LBB74_132:                             # %for.end513
                                        #   in Loop: Header=BB74_124 Depth=1
	jmp	.LBB74_133
.LBB74_133:                             # %for.inc514
                                        #   in Loop: Header=BB74_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_124
.LBB74_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB74_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	$0, -4(%rbp)
.LBB74_137:                             # %for.cond520
                                        #   Parent Loop BB74_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB74_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_141
.LBB74_140:                             # %if.else538
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_141:                             # %if.end552
                                        #   in Loop: Header=BB74_137 Depth=2
	jmp	.LBB74_142
.LBB74_142:                             # %for.inc553
                                        #   in Loop: Header=BB74_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_137
.LBB74_143:                             # %for.end555
                                        #   in Loop: Header=BB74_135 Depth=1
	jmp	.LBB74_144
.LBB74_144:                             # %for.inc556
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_135
.LBB74_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB74_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB74_146 Depth=1
	movl	$0, -4(%rbp)
.LBB74_148:                             # %for.cond562
                                        #   Parent Loop BB74_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_152
.LBB74_151:                             # %if.else580
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_152:                             # %if.end594
                                        #   in Loop: Header=BB74_148 Depth=2
	jmp	.LBB74_153
.LBB74_153:                             # %for.inc595
                                        #   in Loop: Header=BB74_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_148
.LBB74_154:                             # %for.end597
                                        #   in Loop: Header=BB74_146 Depth=1
	jmp	.LBB74_155
.LBB74_155:                             # %for.inc598
                                        #   in Loop: Header=BB74_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_146
.LBB74_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB74_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB74_157 Depth=1
	movl	$0, -4(%rbp)
.LBB74_159:                             # %for.cond604
                                        #   Parent Loop BB74_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_163
.LBB74_162:                             # %if.else622
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_163:                             # %if.end636
                                        #   in Loop: Header=BB74_159 Depth=2
	jmp	.LBB74_164
.LBB74_164:                             # %for.inc637
                                        #   in Loop: Header=BB74_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_159
.LBB74_165:                             # %for.end639
                                        #   in Loop: Header=BB74_157 Depth=1
	jmp	.LBB74_166
.LBB74_166:                             # %for.inc640
                                        #   in Loop: Header=BB74_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_157
.LBB74_167:                             # %for.end642
	cmpl	$590179611, -28(%rbp)   # imm = 0x232D6D1B
	jne	.LBB74_169
.LBB74_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_168
.Lfunc_end74:
	.size	init_contexts.67, .Lfunc_end74-init_contexts.67
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.68
.LCPI75_0:
	.quad	4611686018427387904     # double 2
.LCPI75_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.68
	.p2align	4, 0x90
	.type	create_context_memory.68,@function
create_context_memory.68:               # @create_context_memory.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1765016520, -20(%rbp)  # imm = 0x693403C8
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB75_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB75_3
.LBB75_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB75_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB75_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB75_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB75_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB75_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB75_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_11:                              # %if.end10
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB75_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_13:                              # %if.end16
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$0, -8(%rbp)
.LBB75_14:                              # %for.cond17
                                        #   Parent Loop BB75_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB75_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB75_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_17:                              # %if.end28
                                        #   in Loop: Header=BB75_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB75_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_19:                              # %if.end39
                                        #   in Loop: Header=BB75_14 Depth=2
	jmp	.LBB75_20
.LBB75_20:                              # %for.inc
                                        #   in Loop: Header=BB75_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_14
.LBB75_21:                              # %for.end
                                        #   in Loop: Header=BB75_8 Depth=1
	jmp	.LBB75_22
.LBB75_22:                              # %for.inc40
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_8
.LBB75_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB75_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_26 Depth 2
                                        #       Child Loop BB75_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB75_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	$0, -8(%rbp)
.LBB75_26:                              # %for.cond47
                                        #   Parent Loop BB75_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB75_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	$0, -12(%rbp)
.LBB75_28:                              # %for.cond51
                                        #   Parent Loop BB75_24 Depth=1
                                        #     Parent Loop BB75_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB75_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB75_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB75_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_28
.LBB75_31:                              # %for.end63
                                        #   in Loop: Header=BB75_26 Depth=2
	jmp	.LBB75_32
.LBB75_32:                              # %for.inc64
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_26
.LBB75_33:                              # %for.end66
                                        #   in Loop: Header=BB75_24 Depth=1
	jmp	.LBB75_34
.LBB75_34:                              # %for.inc67
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_24
.LBB75_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB75_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB75_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB75_36 Depth=1
	vmovsd	.LCPI75_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB75_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_36
.LBB75_39:                              # %for.end98
	cmpl	$1765016520, -20(%rbp)  # imm = 0x693403C8
	jne	.LBB75_41
.LBB75_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_40
.Lfunc_end75:
	.size	create_context_memory.68, .Lfunc_end75-create_context_memory.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.69
.LCPI76_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.69
	.p2align	4, 0x90
	.type	GetCtxModelNumber.69,@function
GetCtxModelNumber.69:                   # @GetCtxModelNumber.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1127060679, -48(%rbp)  # imm = 0x432D94C7
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
                                        #       Child Loop BB76_5 Depth 3
                                        #     Child Loop BB76_14 Depth 2
                                        #       Child Loop BB76_16 Depth 3
                                        #     Child Loop BB76_25 Depth 2
                                        #       Child Loop BB76_27 Depth 3
                                        #     Child Loop BB76_36 Depth 2
                                        #       Child Loop BB76_38 Depth 3
                                        #     Child Loop BB76_47 Depth 2
                                        #     Child Loop BB76_54 Depth 2
                                        #     Child Loop BB76_61 Depth 2
                                        #     Child Loop BB76_68 Depth 2
                                        #     Child Loop BB76_75 Depth 2
                                        #     Child Loop BB76_82 Depth 2
                                        #       Child Loop BB76_84 Depth 3
                                        #     Child Loop BB76_93 Depth 2
                                        #       Child Loop BB76_95 Depth 3
                                        #     Child Loop BB76_104 Depth 2
                                        #       Child Loop BB76_106 Depth 3
                                        #     Child Loop BB76_115 Depth 2
                                        #       Child Loop BB76_117 Depth 3
                                        #     Child Loop BB76_126 Depth 2
                                        #       Child Loop BB76_128 Depth 3
                                        #     Child Loop BB76_137 Depth 2
                                        #       Child Loop BB76_139 Depth 3
                                        #     Child Loop BB76_148 Depth 2
                                        #       Child Loop BB76_150 Depth 3
                                        #     Child Loop BB76_159 Depth 2
                                        #       Child Loop BB76_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB76_3:                               # %for.cond2
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB76_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	$0, -4(%rbp)
.LBB76_5:                               # %for.cond5
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB76_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_9
.LBB76_8:                               # %if.else
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_9:                               # %if.end
                                        #   in Loop: Header=BB76_5 Depth=3
	jmp	.LBB76_10
.LBB76_10:                              # %for.inc
                                        #   in Loop: Header=BB76_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_5
.LBB76_11:                              # %for.end
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_12
.LBB76_12:                              # %for.inc33
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_3
.LBB76_13:                              # %for.end35
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_14:                              # %for.cond36
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	$0, -4(%rbp)
.LBB76_16:                              # %for.cond39
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB76_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_20
.LBB76_19:                              # %if.else58
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_20:                              # %if.end73
                                        #   in Loop: Header=BB76_16 Depth=3
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc74
                                        #   in Loop: Header=BB76_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_16
.LBB76_22:                              # %for.end76
                                        #   in Loop: Header=BB76_14 Depth=2
	jmp	.LBB76_23
.LBB76_23:                              # %for.inc77
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_14
.LBB76_24:                              # %for.end79
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_25:                              # %for.cond80
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	$0, -4(%rbp)
.LBB76_27:                              # %for.cond83
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB76_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_31
.LBB76_30:                              # %if.else102
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_31:                              # %if.end117
                                        #   in Loop: Header=BB76_27 Depth=3
	jmp	.LBB76_32
.LBB76_32:                              # %for.inc118
                                        #   in Loop: Header=BB76_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_27
.LBB76_33:                              # %for.end120
                                        #   in Loop: Header=BB76_25 Depth=2
	jmp	.LBB76_34
.LBB76_34:                              # %for.inc121
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_25
.LBB76_35:                              # %for.end123
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_36:                              # %for.cond124
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	$0, -4(%rbp)
.LBB76_38:                              # %for.cond127
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB76_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_42
.LBB76_41:                              # %if.else146
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_42:                              # %if.end161
                                        #   in Loop: Header=BB76_38 Depth=3
	jmp	.LBB76_43
.LBB76_43:                              # %for.inc162
                                        #   in Loop: Header=BB76_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_38
.LBB76_44:                              # %for.end164
                                        #   in Loop: Header=BB76_36 Depth=2
	jmp	.LBB76_45
.LBB76_45:                              # %for.inc165
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_36
.LBB76_46:                              # %for.end167
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_47:                              # %for.cond168
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_51
.LBB76_50:                              # %if.else184
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_51:                              # %if.end196
                                        #   in Loop: Header=BB76_47 Depth=2
	jmp	.LBB76_52
.LBB76_52:                              # %for.inc197
                                        #   in Loop: Header=BB76_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_47
.LBB76_53:                              # %for.end199
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_54:                              # %for.cond200
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_58
.LBB76_57:                              # %if.else216
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_58:                              # %if.end228
                                        #   in Loop: Header=BB76_54 Depth=2
	jmp	.LBB76_59
.LBB76_59:                              # %for.inc229
                                        #   in Loop: Header=BB76_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_54
.LBB76_60:                              # %for.end231
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_61:                              # %for.cond232
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB76_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_65
.LBB76_64:                              # %if.else248
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_65:                              # %if.end260
                                        #   in Loop: Header=BB76_61 Depth=2
	jmp	.LBB76_66
.LBB76_66:                              # %for.inc261
                                        #   in Loop: Header=BB76_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_61
.LBB76_67:                              # %for.end263
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_68:                              # %for.cond264
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB76_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_72
.LBB76_71:                              # %if.else280
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_72:                              # %if.end292
                                        #   in Loop: Header=BB76_68 Depth=2
	jmp	.LBB76_73
.LBB76_73:                              # %for.inc293
                                        #   in Loop: Header=BB76_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_68
.LBB76_74:                              # %for.end295
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_75:                              # %for.cond296
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_79
.LBB76_78:                              # %if.else312
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_79:                              # %if.end324
                                        #   in Loop: Header=BB76_75 Depth=2
	jmp	.LBB76_80
.LBB76_80:                              # %for.inc325
                                        #   in Loop: Header=BB76_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_75
.LBB76_81:                              # %for.end327
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_82:                              # %for.cond328
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB76_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	$0, -4(%rbp)
.LBB76_84:                              # %for.cond331
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB76_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_88
.LBB76_87:                              # %if.else350
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_88:                              # %if.end365
                                        #   in Loop: Header=BB76_84 Depth=3
	jmp	.LBB76_89
.LBB76_89:                              # %for.inc366
                                        #   in Loop: Header=BB76_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_84
.LBB76_90:                              # %for.end368
                                        #   in Loop: Header=BB76_82 Depth=2
	jmp	.LBB76_91
.LBB76_91:                              # %for.inc369
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_82
.LBB76_92:                              # %for.end371
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_93:                              # %for.cond372
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	$0, -4(%rbp)
.LBB76_95:                              # %for.cond375
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB76_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_99
.LBB76_98:                              # %if.else394
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_99:                              # %if.end409
                                        #   in Loop: Header=BB76_95 Depth=3
	jmp	.LBB76_100
.LBB76_100:                             # %for.inc410
                                        #   in Loop: Header=BB76_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_95
.LBB76_101:                             # %for.end412
                                        #   in Loop: Header=BB76_93 Depth=2
	jmp	.LBB76_102
.LBB76_102:                             # %for.inc413
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_93
.LBB76_103:                             # %for.end415
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_104:                             # %for.cond416
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	$0, -4(%rbp)
.LBB76_106:                             # %for.cond419
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_110
.LBB76_109:                             # %if.else438
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_110:                             # %if.end453
                                        #   in Loop: Header=BB76_106 Depth=3
	jmp	.LBB76_111
.LBB76_111:                             # %for.inc454
                                        #   in Loop: Header=BB76_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_106
.LBB76_112:                             # %for.end456
                                        #   in Loop: Header=BB76_104 Depth=2
	jmp	.LBB76_113
.LBB76_113:                             # %for.inc457
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_104
.LBB76_114:                             # %for.end459
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_115:                             # %for.cond460
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	$0, -4(%rbp)
.LBB76_117:                             # %for.cond463
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_121
.LBB76_120:                             # %if.else482
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_121:                             # %if.end497
                                        #   in Loop: Header=BB76_117 Depth=3
	jmp	.LBB76_122
.LBB76_122:                             # %for.inc498
                                        #   in Loop: Header=BB76_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_117
.LBB76_123:                             # %for.end500
                                        #   in Loop: Header=BB76_115 Depth=2
	jmp	.LBB76_124
.LBB76_124:                             # %for.inc501
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_115
.LBB76_125:                             # %for.end503
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_126:                             # %for.cond504
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	$0, -4(%rbp)
.LBB76_128:                             # %for.cond507
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB76_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_132
.LBB76_131:                             # %if.else526
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_132:                             # %if.end541
                                        #   in Loop: Header=BB76_128 Depth=3
	jmp	.LBB76_133
.LBB76_133:                             # %for.inc542
                                        #   in Loop: Header=BB76_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_128
.LBB76_134:                             # %for.end544
                                        #   in Loop: Header=BB76_126 Depth=2
	jmp	.LBB76_135
.LBB76_135:                             # %for.inc545
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_126
.LBB76_136:                             # %for.end547
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_137:                             # %for.cond548
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	$0, -4(%rbp)
.LBB76_139:                             # %for.cond551
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB76_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_143
.LBB76_142:                             # %if.else570
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_143:                             # %if.end585
                                        #   in Loop: Header=BB76_139 Depth=3
	jmp	.LBB76_144
.LBB76_144:                             # %for.inc586
                                        #   in Loop: Header=BB76_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_139
.LBB76_145:                             # %for.end588
                                        #   in Loop: Header=BB76_137 Depth=2
	jmp	.LBB76_146
.LBB76_146:                             # %for.inc589
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_137
.LBB76_147:                             # %for.end591
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_148:                             # %for.cond592
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	$0, -4(%rbp)
.LBB76_150:                             # %for.cond595
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_154
.LBB76_153:                             # %if.else614
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_154:                             # %if.end629
                                        #   in Loop: Header=BB76_150 Depth=3
	jmp	.LBB76_155
.LBB76_155:                             # %for.inc630
                                        #   in Loop: Header=BB76_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_150
.LBB76_156:                             # %for.end632
                                        #   in Loop: Header=BB76_148 Depth=2
	jmp	.LBB76_157
.LBB76_157:                             # %for.inc633
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_148
.LBB76_158:                             # %for.end635
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_159:                             # %for.cond636
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	$0, -4(%rbp)
.LBB76_161:                             # %for.cond639
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_165
.LBB76_164:                             # %if.else658
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_165:                             # %if.end673
                                        #   in Loop: Header=BB76_161 Depth=3
	jmp	.LBB76_166
.LBB76_166:                             # %for.inc674
                                        #   in Loop: Header=BB76_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_161
.LBB76_167:                             # %for.end676
                                        #   in Loop: Header=BB76_159 Depth=2
	jmp	.LBB76_168
.LBB76_168:                             # %for.inc677
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_159
.LBB76_169:                             # %for.end679
                                        #   in Loop: Header=BB76_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB76_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB76_171:                             # %if.end682
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_172
.LBB76_172:                             # %for.inc683
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_1
.LBB76_173:                             # %for.end685
	cmpl	$1127060679, -48(%rbp)  # imm = 0x432D94C7
	jne	.LBB76_175
.LBB76_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_174
.Lfunc_end76:
	.size	GetCtxModelNumber.69, .Lfunc_end76-GetCtxModelNumber.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.70
.LCPI77_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.70
	.p2align	4, 0x90
	.type	GetCtxModelNumber.70,@function
GetCtxModelNumber.70:                   # @GetCtxModelNumber.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$966887606, -44(%rbp)   # imm = 0x39A188B6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
                                        #       Child Loop BB77_5 Depth 3
                                        #     Child Loop BB77_14 Depth 2
                                        #       Child Loop BB77_16 Depth 3
                                        #     Child Loop BB77_25 Depth 2
                                        #       Child Loop BB77_27 Depth 3
                                        #     Child Loop BB77_36 Depth 2
                                        #       Child Loop BB77_38 Depth 3
                                        #     Child Loop BB77_47 Depth 2
                                        #     Child Loop BB77_54 Depth 2
                                        #     Child Loop BB77_61 Depth 2
                                        #     Child Loop BB77_68 Depth 2
                                        #     Child Loop BB77_75 Depth 2
                                        #     Child Loop BB77_82 Depth 2
                                        #       Child Loop BB77_84 Depth 3
                                        #     Child Loop BB77_93 Depth 2
                                        #       Child Loop BB77_95 Depth 3
                                        #     Child Loop BB77_104 Depth 2
                                        #       Child Loop BB77_106 Depth 3
                                        #     Child Loop BB77_115 Depth 2
                                        #       Child Loop BB77_117 Depth 3
                                        #     Child Loop BB77_126 Depth 2
                                        #       Child Loop BB77_128 Depth 3
                                        #     Child Loop BB77_137 Depth 2
                                        #       Child Loop BB77_139 Depth 3
                                        #     Child Loop BB77_148 Depth 2
                                        #       Child Loop BB77_150 Depth 3
                                        #     Child Loop BB77_159 Depth 2
                                        #       Child Loop BB77_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond2
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB77_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$0, -4(%rbp)
.LBB77_5:                               # %for.cond5
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB77_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_9
.LBB77_8:                               # %if.else
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_9:                               # %if.end
                                        #   in Loop: Header=BB77_5 Depth=3
	jmp	.LBB77_10
.LBB77_10:                              # %for.inc
                                        #   in Loop: Header=BB77_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_5
.LBB77_11:                              # %for.end
                                        #   in Loop: Header=BB77_3 Depth=2
	jmp	.LBB77_12
.LBB77_12:                              # %for.inc33
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_13:                              # %for.end35
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_14:                              # %for.cond36
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	$0, -4(%rbp)
.LBB77_16:                              # %for.cond39
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB77_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_20
.LBB77_19:                              # %if.else58
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_20:                              # %if.end73
                                        #   in Loop: Header=BB77_16 Depth=3
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc74
                                        #   in Loop: Header=BB77_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_16
.LBB77_22:                              # %for.end76
                                        #   in Loop: Header=BB77_14 Depth=2
	jmp	.LBB77_23
.LBB77_23:                              # %for.inc77
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_14
.LBB77_24:                              # %for.end79
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_25:                              # %for.cond80
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	$0, -4(%rbp)
.LBB77_27:                              # %for.cond83
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB77_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_31
.LBB77_30:                              # %if.else102
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_31:                              # %if.end117
                                        #   in Loop: Header=BB77_27 Depth=3
	jmp	.LBB77_32
.LBB77_32:                              # %for.inc118
                                        #   in Loop: Header=BB77_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_27
.LBB77_33:                              # %for.end120
                                        #   in Loop: Header=BB77_25 Depth=2
	jmp	.LBB77_34
.LBB77_34:                              # %for.inc121
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_25
.LBB77_35:                              # %for.end123
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_36:                              # %for.cond124
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	$0, -4(%rbp)
.LBB77_38:                              # %for.cond127
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB77_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_42
.LBB77_41:                              # %if.else146
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_42:                              # %if.end161
                                        #   in Loop: Header=BB77_38 Depth=3
	jmp	.LBB77_43
.LBB77_43:                              # %for.inc162
                                        #   in Loop: Header=BB77_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_38
.LBB77_44:                              # %for.end164
                                        #   in Loop: Header=BB77_36 Depth=2
	jmp	.LBB77_45
.LBB77_45:                              # %for.inc165
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_36
.LBB77_46:                              # %for.end167
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_47:                              # %for.cond168
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_51
.LBB77_50:                              # %if.else184
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_51:                              # %if.end196
                                        #   in Loop: Header=BB77_47 Depth=2
	jmp	.LBB77_52
.LBB77_52:                              # %for.inc197
                                        #   in Loop: Header=BB77_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_47
.LBB77_53:                              # %for.end199
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_54:                              # %for.cond200
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_58
.LBB77_57:                              # %if.else216
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_58:                              # %if.end228
                                        #   in Loop: Header=BB77_54 Depth=2
	jmp	.LBB77_59
.LBB77_59:                              # %for.inc229
                                        #   in Loop: Header=BB77_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_54
.LBB77_60:                              # %for.end231
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_61:                              # %for.cond232
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB77_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_65
.LBB77_64:                              # %if.else248
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_65:                              # %if.end260
                                        #   in Loop: Header=BB77_61 Depth=2
	jmp	.LBB77_66
.LBB77_66:                              # %for.inc261
                                        #   in Loop: Header=BB77_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_61
.LBB77_67:                              # %for.end263
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_68:                              # %for.cond264
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB77_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_72
.LBB77_71:                              # %if.else280
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_72:                              # %if.end292
                                        #   in Loop: Header=BB77_68 Depth=2
	jmp	.LBB77_73
.LBB77_73:                              # %for.inc293
                                        #   in Loop: Header=BB77_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_68
.LBB77_74:                              # %for.end295
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_75:                              # %for.cond296
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_79
.LBB77_78:                              # %if.else312
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_79:                              # %if.end324
                                        #   in Loop: Header=BB77_75 Depth=2
	jmp	.LBB77_80
.LBB77_80:                              # %for.inc325
                                        #   in Loop: Header=BB77_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_75
.LBB77_81:                              # %for.end327
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_82:                              # %for.cond328
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB77_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	$0, -4(%rbp)
.LBB77_84:                              # %for.cond331
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB77_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_88
.LBB77_87:                              # %if.else350
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_88:                              # %if.end365
                                        #   in Loop: Header=BB77_84 Depth=3
	jmp	.LBB77_89
.LBB77_89:                              # %for.inc366
                                        #   in Loop: Header=BB77_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_84
.LBB77_90:                              # %for.end368
                                        #   in Loop: Header=BB77_82 Depth=2
	jmp	.LBB77_91
.LBB77_91:                              # %for.inc369
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_82
.LBB77_92:                              # %for.end371
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_93:                              # %for.cond372
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	$0, -4(%rbp)
.LBB77_95:                              # %for.cond375
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB77_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_99
.LBB77_98:                              # %if.else394
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_99:                              # %if.end409
                                        #   in Loop: Header=BB77_95 Depth=3
	jmp	.LBB77_100
.LBB77_100:                             # %for.inc410
                                        #   in Loop: Header=BB77_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_95
.LBB77_101:                             # %for.end412
                                        #   in Loop: Header=BB77_93 Depth=2
	jmp	.LBB77_102
.LBB77_102:                             # %for.inc413
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_93
.LBB77_103:                             # %for.end415
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_104:                             # %for.cond416
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	$0, -4(%rbp)
.LBB77_106:                             # %for.cond419
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_110
.LBB77_109:                             # %if.else438
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_110:                             # %if.end453
                                        #   in Loop: Header=BB77_106 Depth=3
	jmp	.LBB77_111
.LBB77_111:                             # %for.inc454
                                        #   in Loop: Header=BB77_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_106
.LBB77_112:                             # %for.end456
                                        #   in Loop: Header=BB77_104 Depth=2
	jmp	.LBB77_113
.LBB77_113:                             # %for.inc457
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_104
.LBB77_114:                             # %for.end459
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_115:                             # %for.cond460
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	$0, -4(%rbp)
.LBB77_117:                             # %for.cond463
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_121
.LBB77_120:                             # %if.else482
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_121:                             # %if.end497
                                        #   in Loop: Header=BB77_117 Depth=3
	jmp	.LBB77_122
.LBB77_122:                             # %for.inc498
                                        #   in Loop: Header=BB77_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_117
.LBB77_123:                             # %for.end500
                                        #   in Loop: Header=BB77_115 Depth=2
	jmp	.LBB77_124
.LBB77_124:                             # %for.inc501
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_115
.LBB77_125:                             # %for.end503
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_126:                             # %for.cond504
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	$0, -4(%rbp)
.LBB77_128:                             # %for.cond507
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB77_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_132
.LBB77_131:                             # %if.else526
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_132:                             # %if.end541
                                        #   in Loop: Header=BB77_128 Depth=3
	jmp	.LBB77_133
.LBB77_133:                             # %for.inc542
                                        #   in Loop: Header=BB77_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_128
.LBB77_134:                             # %for.end544
                                        #   in Loop: Header=BB77_126 Depth=2
	jmp	.LBB77_135
.LBB77_135:                             # %for.inc545
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_126
.LBB77_136:                             # %for.end547
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_137:                             # %for.cond548
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	$0, -4(%rbp)
.LBB77_139:                             # %for.cond551
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB77_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_143
.LBB77_142:                             # %if.else570
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_143:                             # %if.end585
                                        #   in Loop: Header=BB77_139 Depth=3
	jmp	.LBB77_144
.LBB77_144:                             # %for.inc586
                                        #   in Loop: Header=BB77_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_139
.LBB77_145:                             # %for.end588
                                        #   in Loop: Header=BB77_137 Depth=2
	jmp	.LBB77_146
.LBB77_146:                             # %for.inc589
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_137
.LBB77_147:                             # %for.end591
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_148:                             # %for.cond592
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	$0, -4(%rbp)
.LBB77_150:                             # %for.cond595
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_154
.LBB77_153:                             # %if.else614
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_154:                             # %if.end629
                                        #   in Loop: Header=BB77_150 Depth=3
	jmp	.LBB77_155
.LBB77_155:                             # %for.inc630
                                        #   in Loop: Header=BB77_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_150
.LBB77_156:                             # %for.end632
                                        #   in Loop: Header=BB77_148 Depth=2
	jmp	.LBB77_157
.LBB77_157:                             # %for.inc633
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_148
.LBB77_158:                             # %for.end635
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_159:                             # %for.cond636
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	$0, -4(%rbp)
.LBB77_161:                             # %for.cond639
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_165
.LBB77_164:                             # %if.else658
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_165:                             # %if.end673
                                        #   in Loop: Header=BB77_161 Depth=3
	jmp	.LBB77_166
.LBB77_166:                             # %for.inc674
                                        #   in Loop: Header=BB77_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_161
.LBB77_167:                             # %for.end676
                                        #   in Loop: Header=BB77_159 Depth=2
	jmp	.LBB77_168
.LBB77_168:                             # %for.inc677
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_159
.LBB77_169:                             # %for.end679
                                        #   in Loop: Header=BB77_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB77_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB77_171:                             # %if.end682
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_172
.LBB77_172:                             # %for.inc683
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_1
.LBB77_173:                             # %for.end685
	cmpl	$966887606, -44(%rbp)   # imm = 0x39A188B6
	jne	.LBB77_175
.LBB77_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_174
.Lfunc_end77:
	.size	GetCtxModelNumber.70, .Lfunc_end77-GetCtxModelNumber.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.71
.LCPI78_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.71
	.p2align	4, 0x90
	.type	GetCtxModelNumber.71,@function
GetCtxModelNumber.71:                   # @GetCtxModelNumber.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1271479130, -44(%rbp)  # imm = 0x4BC93B5A
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
                                        #       Child Loop BB78_5 Depth 3
                                        #     Child Loop BB78_14 Depth 2
                                        #       Child Loop BB78_16 Depth 3
                                        #     Child Loop BB78_25 Depth 2
                                        #       Child Loop BB78_27 Depth 3
                                        #     Child Loop BB78_36 Depth 2
                                        #       Child Loop BB78_38 Depth 3
                                        #     Child Loop BB78_47 Depth 2
                                        #     Child Loop BB78_54 Depth 2
                                        #     Child Loop BB78_61 Depth 2
                                        #     Child Loop BB78_68 Depth 2
                                        #     Child Loop BB78_75 Depth 2
                                        #     Child Loop BB78_82 Depth 2
                                        #       Child Loop BB78_84 Depth 3
                                        #     Child Loop BB78_93 Depth 2
                                        #       Child Loop BB78_95 Depth 3
                                        #     Child Loop BB78_104 Depth 2
                                        #       Child Loop BB78_106 Depth 3
                                        #     Child Loop BB78_115 Depth 2
                                        #       Child Loop BB78_117 Depth 3
                                        #     Child Loop BB78_126 Depth 2
                                        #       Child Loop BB78_128 Depth 3
                                        #     Child Loop BB78_137 Depth 2
                                        #       Child Loop BB78_139 Depth 3
                                        #     Child Loop BB78_148 Depth 2
                                        #       Child Loop BB78_150 Depth 3
                                        #     Child Loop BB78_159 Depth 2
                                        #       Child Loop BB78_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB78_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB78_3:                               # %for.cond2
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB78_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	$0, -4(%rbp)
.LBB78_5:                               # %for.cond5
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB78_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB78_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB78_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_9
.LBB78_8:                               # %if.else
                                        #   in Loop: Header=BB78_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_9:                               # %if.end
                                        #   in Loop: Header=BB78_5 Depth=3
	jmp	.LBB78_10
.LBB78_10:                              # %for.inc
                                        #   in Loop: Header=BB78_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_5
.LBB78_11:                              # %for.end
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_12
.LBB78_12:                              # %for.inc33
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_3
.LBB78_13:                              # %for.end35
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_14:                              # %for.cond36
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB78_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB78_14 Depth=2
	movl	$0, -4(%rbp)
.LBB78_16:                              # %for.cond39
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB78_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB78_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB78_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_20
.LBB78_19:                              # %if.else58
                                        #   in Loop: Header=BB78_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_20:                              # %if.end73
                                        #   in Loop: Header=BB78_16 Depth=3
	jmp	.LBB78_21
.LBB78_21:                              # %for.inc74
                                        #   in Loop: Header=BB78_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_16
.LBB78_22:                              # %for.end76
                                        #   in Loop: Header=BB78_14 Depth=2
	jmp	.LBB78_23
.LBB78_23:                              # %for.inc77
                                        #   in Loop: Header=BB78_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_14
.LBB78_24:                              # %for.end79
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_25:                              # %for.cond80
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB78_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB78_25 Depth=2
	movl	$0, -4(%rbp)
.LBB78_27:                              # %for.cond83
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB78_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB78_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB78_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_31
.LBB78_30:                              # %if.else102
                                        #   in Loop: Header=BB78_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_31:                              # %if.end117
                                        #   in Loop: Header=BB78_27 Depth=3
	jmp	.LBB78_32
.LBB78_32:                              # %for.inc118
                                        #   in Loop: Header=BB78_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_27
.LBB78_33:                              # %for.end120
                                        #   in Loop: Header=BB78_25 Depth=2
	jmp	.LBB78_34
.LBB78_34:                              # %for.inc121
                                        #   in Loop: Header=BB78_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_25
.LBB78_35:                              # %for.end123
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_36:                              # %for.cond124
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB78_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB78_36 Depth=2
	movl	$0, -4(%rbp)
.LBB78_38:                              # %for.cond127
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB78_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB78_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB78_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_42
.LBB78_41:                              # %if.else146
                                        #   in Loop: Header=BB78_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_42:                              # %if.end161
                                        #   in Loop: Header=BB78_38 Depth=3
	jmp	.LBB78_43
.LBB78_43:                              # %for.inc162
                                        #   in Loop: Header=BB78_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_38
.LBB78_44:                              # %for.end164
                                        #   in Loop: Header=BB78_36 Depth=2
	jmp	.LBB78_45
.LBB78_45:                              # %for.inc165
                                        #   in Loop: Header=BB78_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_36
.LBB78_46:                              # %for.end167
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_47:                              # %for.cond168
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB78_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB78_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_51
.LBB78_50:                              # %if.else184
                                        #   in Loop: Header=BB78_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_51:                              # %if.end196
                                        #   in Loop: Header=BB78_47 Depth=2
	jmp	.LBB78_52
.LBB78_52:                              # %for.inc197
                                        #   in Loop: Header=BB78_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_47
.LBB78_53:                              # %for.end199
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_54:                              # %for.cond200
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB78_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB78_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_58
.LBB78_57:                              # %if.else216
                                        #   in Loop: Header=BB78_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_58:                              # %if.end228
                                        #   in Loop: Header=BB78_54 Depth=2
	jmp	.LBB78_59
.LBB78_59:                              # %for.inc229
                                        #   in Loop: Header=BB78_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_54
.LBB78_60:                              # %for.end231
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_61:                              # %for.cond232
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB78_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB78_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB78_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_65
.LBB78_64:                              # %if.else248
                                        #   in Loop: Header=BB78_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_65:                              # %if.end260
                                        #   in Loop: Header=BB78_61 Depth=2
	jmp	.LBB78_66
.LBB78_66:                              # %for.inc261
                                        #   in Loop: Header=BB78_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_61
.LBB78_67:                              # %for.end263
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_68:                              # %for.cond264
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB78_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB78_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB78_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_72
.LBB78_71:                              # %if.else280
                                        #   in Loop: Header=BB78_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_72:                              # %if.end292
                                        #   in Loop: Header=BB78_68 Depth=2
	jmp	.LBB78_73
.LBB78_73:                              # %for.inc293
                                        #   in Loop: Header=BB78_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_68
.LBB78_74:                              # %for.end295
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_75:                              # %for.cond296
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB78_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB78_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_79
.LBB78_78:                              # %if.else312
                                        #   in Loop: Header=BB78_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_79:                              # %if.end324
                                        #   in Loop: Header=BB78_75 Depth=2
	jmp	.LBB78_80
.LBB78_80:                              # %for.inc325
                                        #   in Loop: Header=BB78_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_75
.LBB78_81:                              # %for.end327
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_82:                              # %for.cond328
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB78_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB78_82 Depth=2
	movl	$0, -4(%rbp)
.LBB78_84:                              # %for.cond331
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB78_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB78_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB78_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_88
.LBB78_87:                              # %if.else350
                                        #   in Loop: Header=BB78_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_88:                              # %if.end365
                                        #   in Loop: Header=BB78_84 Depth=3
	jmp	.LBB78_89
.LBB78_89:                              # %for.inc366
                                        #   in Loop: Header=BB78_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_84
.LBB78_90:                              # %for.end368
                                        #   in Loop: Header=BB78_82 Depth=2
	jmp	.LBB78_91
.LBB78_91:                              # %for.inc369
                                        #   in Loop: Header=BB78_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_82
.LBB78_92:                              # %for.end371
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_93:                              # %for.cond372
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB78_93 Depth=2
	movl	$0, -4(%rbp)
.LBB78_95:                              # %for.cond375
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB78_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB78_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB78_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_99
.LBB78_98:                              # %if.else394
                                        #   in Loop: Header=BB78_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_99:                              # %if.end409
                                        #   in Loop: Header=BB78_95 Depth=3
	jmp	.LBB78_100
.LBB78_100:                             # %for.inc410
                                        #   in Loop: Header=BB78_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_95
.LBB78_101:                             # %for.end412
                                        #   in Loop: Header=BB78_93 Depth=2
	jmp	.LBB78_102
.LBB78_102:                             # %for.inc413
                                        #   in Loop: Header=BB78_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_93
.LBB78_103:                             # %for.end415
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_104:                             # %for.cond416
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB78_104 Depth=2
	movl	$0, -4(%rbp)
.LBB78_106:                             # %for.cond419
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB78_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB78_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB78_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_110
.LBB78_109:                             # %if.else438
                                        #   in Loop: Header=BB78_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_110:                             # %if.end453
                                        #   in Loop: Header=BB78_106 Depth=3
	jmp	.LBB78_111
.LBB78_111:                             # %for.inc454
                                        #   in Loop: Header=BB78_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_106
.LBB78_112:                             # %for.end456
                                        #   in Loop: Header=BB78_104 Depth=2
	jmp	.LBB78_113
.LBB78_113:                             # %for.inc457
                                        #   in Loop: Header=BB78_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_104
.LBB78_114:                             # %for.end459
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_115:                             # %for.cond460
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB78_115 Depth=2
	movl	$0, -4(%rbp)
.LBB78_117:                             # %for.cond463
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB78_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB78_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB78_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_121
.LBB78_120:                             # %if.else482
                                        #   in Loop: Header=BB78_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_121:                             # %if.end497
                                        #   in Loop: Header=BB78_117 Depth=3
	jmp	.LBB78_122
.LBB78_122:                             # %for.inc498
                                        #   in Loop: Header=BB78_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_117
.LBB78_123:                             # %for.end500
                                        #   in Loop: Header=BB78_115 Depth=2
	jmp	.LBB78_124
.LBB78_124:                             # %for.inc501
                                        #   in Loop: Header=BB78_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_115
.LBB78_125:                             # %for.end503
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_126:                             # %for.cond504
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB78_126 Depth=2
	movl	$0, -4(%rbp)
.LBB78_128:                             # %for.cond507
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB78_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB78_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB78_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_132
.LBB78_131:                             # %if.else526
                                        #   in Loop: Header=BB78_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_132:                             # %if.end541
                                        #   in Loop: Header=BB78_128 Depth=3
	jmp	.LBB78_133
.LBB78_133:                             # %for.inc542
                                        #   in Loop: Header=BB78_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_128
.LBB78_134:                             # %for.end544
                                        #   in Loop: Header=BB78_126 Depth=2
	jmp	.LBB78_135
.LBB78_135:                             # %for.inc545
                                        #   in Loop: Header=BB78_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_126
.LBB78_136:                             # %for.end547
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_137:                             # %for.cond548
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB78_137 Depth=2
	movl	$0, -4(%rbp)
.LBB78_139:                             # %for.cond551
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB78_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB78_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB78_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_143
.LBB78_142:                             # %if.else570
                                        #   in Loop: Header=BB78_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_143:                             # %if.end585
                                        #   in Loop: Header=BB78_139 Depth=3
	jmp	.LBB78_144
.LBB78_144:                             # %for.inc586
                                        #   in Loop: Header=BB78_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_139
.LBB78_145:                             # %for.end588
                                        #   in Loop: Header=BB78_137 Depth=2
	jmp	.LBB78_146
.LBB78_146:                             # %for.inc589
                                        #   in Loop: Header=BB78_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_137
.LBB78_147:                             # %for.end591
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_148:                             # %for.cond592
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB78_148 Depth=2
	movl	$0, -4(%rbp)
.LBB78_150:                             # %for.cond595
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB78_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB78_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB78_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_154
.LBB78_153:                             # %if.else614
                                        #   in Loop: Header=BB78_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_154:                             # %if.end629
                                        #   in Loop: Header=BB78_150 Depth=3
	jmp	.LBB78_155
.LBB78_155:                             # %for.inc630
                                        #   in Loop: Header=BB78_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_150
.LBB78_156:                             # %for.end632
                                        #   in Loop: Header=BB78_148 Depth=2
	jmp	.LBB78_157
.LBB78_157:                             # %for.inc633
                                        #   in Loop: Header=BB78_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_148
.LBB78_158:                             # %for.end635
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_159:                             # %for.cond636
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB78_159 Depth=2
	movl	$0, -4(%rbp)
.LBB78_161:                             # %for.cond639
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB78_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB78_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB78_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_165
.LBB78_164:                             # %if.else658
                                        #   in Loop: Header=BB78_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_165:                             # %if.end673
                                        #   in Loop: Header=BB78_161 Depth=3
	jmp	.LBB78_166
.LBB78_166:                             # %for.inc674
                                        #   in Loop: Header=BB78_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_161
.LBB78_167:                             # %for.end676
                                        #   in Loop: Header=BB78_159 Depth=2
	jmp	.LBB78_168
.LBB78_168:                             # %for.inc677
                                        #   in Loop: Header=BB78_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_159
.LBB78_169:                             # %for.end679
                                        #   in Loop: Header=BB78_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB78_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB78_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB78_171:                             # %if.end682
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_172
.LBB78_172:                             # %for.inc683
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_1
.LBB78_173:                             # %for.end685
	cmpl	$1271479130, -44(%rbp)  # imm = 0x4BC93B5A
	jne	.LBB78_175
.LBB78_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_174
.Lfunc_end78:
	.size	GetCtxModelNumber.71, .Lfunc_end78-GetCtxModelNumber.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.72
.LCPI79_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.72
	.p2align	4, 0x90
	.type	GetCtxModelNumber.72,@function
GetCtxModelNumber.72:                   # @GetCtxModelNumber.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1504622053, -44(%rbp)  # imm = 0x59AEB5E5
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB79_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_3 Depth 2
                                        #       Child Loop BB79_5 Depth 3
                                        #     Child Loop BB79_14 Depth 2
                                        #       Child Loop BB79_16 Depth 3
                                        #     Child Loop BB79_25 Depth 2
                                        #       Child Loop BB79_27 Depth 3
                                        #     Child Loop BB79_36 Depth 2
                                        #       Child Loop BB79_38 Depth 3
                                        #     Child Loop BB79_47 Depth 2
                                        #     Child Loop BB79_54 Depth 2
                                        #     Child Loop BB79_61 Depth 2
                                        #     Child Loop BB79_68 Depth 2
                                        #     Child Loop BB79_75 Depth 2
                                        #     Child Loop BB79_82 Depth 2
                                        #       Child Loop BB79_84 Depth 3
                                        #     Child Loop BB79_93 Depth 2
                                        #       Child Loop BB79_95 Depth 3
                                        #     Child Loop BB79_104 Depth 2
                                        #       Child Loop BB79_106 Depth 3
                                        #     Child Loop BB79_115 Depth 2
                                        #       Child Loop BB79_117 Depth 3
                                        #     Child Loop BB79_126 Depth 2
                                        #       Child Loop BB79_128 Depth 3
                                        #     Child Loop BB79_137 Depth 2
                                        #       Child Loop BB79_139 Depth 3
                                        #     Child Loop BB79_148 Depth 2
                                        #       Child Loop BB79_150 Depth 3
                                        #     Child Loop BB79_159 Depth 2
                                        #       Child Loop BB79_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB79_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB79_3:                               # %for.cond2
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB79_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	$0, -4(%rbp)
.LBB79_5:                               # %for.cond5
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB79_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB79_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB79_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_9
.LBB79_8:                               # %if.else
                                        #   in Loop: Header=BB79_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_9:                               # %if.end
                                        #   in Loop: Header=BB79_5 Depth=3
	jmp	.LBB79_10
.LBB79_10:                              # %for.inc
                                        #   in Loop: Header=BB79_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_5
.LBB79_11:                              # %for.end
                                        #   in Loop: Header=BB79_3 Depth=2
	jmp	.LBB79_12
.LBB79_12:                              # %for.inc33
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_3
.LBB79_13:                              # %for.end35
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_14:                              # %for.cond36
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB79_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB79_14 Depth=2
	movl	$0, -4(%rbp)
.LBB79_16:                              # %for.cond39
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB79_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB79_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB79_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_20
.LBB79_19:                              # %if.else58
                                        #   in Loop: Header=BB79_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_20:                              # %if.end73
                                        #   in Loop: Header=BB79_16 Depth=3
	jmp	.LBB79_21
.LBB79_21:                              # %for.inc74
                                        #   in Loop: Header=BB79_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_16
.LBB79_22:                              # %for.end76
                                        #   in Loop: Header=BB79_14 Depth=2
	jmp	.LBB79_23
.LBB79_23:                              # %for.inc77
                                        #   in Loop: Header=BB79_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_14
.LBB79_24:                              # %for.end79
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_25:                              # %for.cond80
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB79_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB79_25 Depth=2
	movl	$0, -4(%rbp)
.LBB79_27:                              # %for.cond83
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB79_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB79_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB79_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_31
.LBB79_30:                              # %if.else102
                                        #   in Loop: Header=BB79_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_31:                              # %if.end117
                                        #   in Loop: Header=BB79_27 Depth=3
	jmp	.LBB79_32
.LBB79_32:                              # %for.inc118
                                        #   in Loop: Header=BB79_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_27
.LBB79_33:                              # %for.end120
                                        #   in Loop: Header=BB79_25 Depth=2
	jmp	.LBB79_34
.LBB79_34:                              # %for.inc121
                                        #   in Loop: Header=BB79_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_25
.LBB79_35:                              # %for.end123
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_36:                              # %for.cond124
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB79_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB79_36 Depth=2
	movl	$0, -4(%rbp)
.LBB79_38:                              # %for.cond127
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB79_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB79_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB79_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_42
.LBB79_41:                              # %if.else146
                                        #   in Loop: Header=BB79_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_42:                              # %if.end161
                                        #   in Loop: Header=BB79_38 Depth=3
	jmp	.LBB79_43
.LBB79_43:                              # %for.inc162
                                        #   in Loop: Header=BB79_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_38
.LBB79_44:                              # %for.end164
                                        #   in Loop: Header=BB79_36 Depth=2
	jmp	.LBB79_45
.LBB79_45:                              # %for.inc165
                                        #   in Loop: Header=BB79_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_36
.LBB79_46:                              # %for.end167
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -4(%rbp)
.LBB79_47:                              # %for.cond168
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB79_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB79_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_51
.LBB79_50:                              # %if.else184
                                        #   in Loop: Header=BB79_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_51:                              # %if.end196
                                        #   in Loop: Header=BB79_47 Depth=2
	jmp	.LBB79_52
.LBB79_52:                              # %for.inc197
                                        #   in Loop: Header=BB79_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_47
.LBB79_53:                              # %for.end199
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -4(%rbp)
.LBB79_54:                              # %for.cond200
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB79_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB79_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_58
.LBB79_57:                              # %if.else216
                                        #   in Loop: Header=BB79_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_58:                              # %if.end228
                                        #   in Loop: Header=BB79_54 Depth=2
	jmp	.LBB79_59
.LBB79_59:                              # %for.inc229
                                        #   in Loop: Header=BB79_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_54
.LBB79_60:                              # %for.end231
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -4(%rbp)
.LBB79_61:                              # %for.cond232
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB79_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB79_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB79_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_65
.LBB79_64:                              # %if.else248
                                        #   in Loop: Header=BB79_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_65:                              # %if.end260
                                        #   in Loop: Header=BB79_61 Depth=2
	jmp	.LBB79_66
.LBB79_66:                              # %for.inc261
                                        #   in Loop: Header=BB79_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_61
.LBB79_67:                              # %for.end263
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -4(%rbp)
.LBB79_68:                              # %for.cond264
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB79_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB79_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB79_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_72
.LBB79_71:                              # %if.else280
                                        #   in Loop: Header=BB79_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_72:                              # %if.end292
                                        #   in Loop: Header=BB79_68 Depth=2
	jmp	.LBB79_73
.LBB79_73:                              # %for.inc293
                                        #   in Loop: Header=BB79_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_68
.LBB79_74:                              # %for.end295
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -4(%rbp)
.LBB79_75:                              # %for.cond296
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB79_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB79_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_79
.LBB79_78:                              # %if.else312
                                        #   in Loop: Header=BB79_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_79:                              # %if.end324
                                        #   in Loop: Header=BB79_75 Depth=2
	jmp	.LBB79_80
.LBB79_80:                              # %for.inc325
                                        #   in Loop: Header=BB79_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_75
.LBB79_81:                              # %for.end327
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_82:                              # %for.cond328
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB79_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB79_82 Depth=2
	movl	$0, -4(%rbp)
.LBB79_84:                              # %for.cond331
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB79_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB79_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB79_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_88
.LBB79_87:                              # %if.else350
                                        #   in Loop: Header=BB79_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_88:                              # %if.end365
                                        #   in Loop: Header=BB79_84 Depth=3
	jmp	.LBB79_89
.LBB79_89:                              # %for.inc366
                                        #   in Loop: Header=BB79_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_84
.LBB79_90:                              # %for.end368
                                        #   in Loop: Header=BB79_82 Depth=2
	jmp	.LBB79_91
.LBB79_91:                              # %for.inc369
                                        #   in Loop: Header=BB79_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_82
.LBB79_92:                              # %for.end371
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_93:                              # %for.cond372
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB79_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB79_93 Depth=2
	movl	$0, -4(%rbp)
.LBB79_95:                              # %for.cond375
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB79_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB79_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB79_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_99
.LBB79_98:                              # %if.else394
                                        #   in Loop: Header=BB79_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_99:                              # %if.end409
                                        #   in Loop: Header=BB79_95 Depth=3
	jmp	.LBB79_100
.LBB79_100:                             # %for.inc410
                                        #   in Loop: Header=BB79_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_95
.LBB79_101:                             # %for.end412
                                        #   in Loop: Header=BB79_93 Depth=2
	jmp	.LBB79_102
.LBB79_102:                             # %for.inc413
                                        #   in Loop: Header=BB79_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_93
.LBB79_103:                             # %for.end415
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_104:                             # %for.cond416
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB79_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB79_104 Depth=2
	movl	$0, -4(%rbp)
.LBB79_106:                             # %for.cond419
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB79_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB79_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB79_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_110
.LBB79_109:                             # %if.else438
                                        #   in Loop: Header=BB79_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_110:                             # %if.end453
                                        #   in Loop: Header=BB79_106 Depth=3
	jmp	.LBB79_111
.LBB79_111:                             # %for.inc454
                                        #   in Loop: Header=BB79_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_106
.LBB79_112:                             # %for.end456
                                        #   in Loop: Header=BB79_104 Depth=2
	jmp	.LBB79_113
.LBB79_113:                             # %for.inc457
                                        #   in Loop: Header=BB79_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_104
.LBB79_114:                             # %for.end459
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_115:                             # %for.cond460
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB79_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB79_115 Depth=2
	movl	$0, -4(%rbp)
.LBB79_117:                             # %for.cond463
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB79_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB79_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB79_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_121
.LBB79_120:                             # %if.else482
                                        #   in Loop: Header=BB79_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_121:                             # %if.end497
                                        #   in Loop: Header=BB79_117 Depth=3
	jmp	.LBB79_122
.LBB79_122:                             # %for.inc498
                                        #   in Loop: Header=BB79_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_117
.LBB79_123:                             # %for.end500
                                        #   in Loop: Header=BB79_115 Depth=2
	jmp	.LBB79_124
.LBB79_124:                             # %for.inc501
                                        #   in Loop: Header=BB79_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_115
.LBB79_125:                             # %for.end503
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_126:                             # %for.cond504
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB79_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB79_126 Depth=2
	movl	$0, -4(%rbp)
.LBB79_128:                             # %for.cond507
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB79_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB79_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB79_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_132
.LBB79_131:                             # %if.else526
                                        #   in Loop: Header=BB79_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_132:                             # %if.end541
                                        #   in Loop: Header=BB79_128 Depth=3
	jmp	.LBB79_133
.LBB79_133:                             # %for.inc542
                                        #   in Loop: Header=BB79_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_128
.LBB79_134:                             # %for.end544
                                        #   in Loop: Header=BB79_126 Depth=2
	jmp	.LBB79_135
.LBB79_135:                             # %for.inc545
                                        #   in Loop: Header=BB79_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_126
.LBB79_136:                             # %for.end547
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_137:                             # %for.cond548
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB79_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB79_137 Depth=2
	movl	$0, -4(%rbp)
.LBB79_139:                             # %for.cond551
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB79_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB79_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB79_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_143
.LBB79_142:                             # %if.else570
                                        #   in Loop: Header=BB79_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_143:                             # %if.end585
                                        #   in Loop: Header=BB79_139 Depth=3
	jmp	.LBB79_144
.LBB79_144:                             # %for.inc586
                                        #   in Loop: Header=BB79_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_139
.LBB79_145:                             # %for.end588
                                        #   in Loop: Header=BB79_137 Depth=2
	jmp	.LBB79_146
.LBB79_146:                             # %for.inc589
                                        #   in Loop: Header=BB79_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_137
.LBB79_147:                             # %for.end591
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_148:                             # %for.cond592
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB79_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB79_148 Depth=2
	movl	$0, -4(%rbp)
.LBB79_150:                             # %for.cond595
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB79_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB79_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB79_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_154
.LBB79_153:                             # %if.else614
                                        #   in Loop: Header=BB79_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_154:                             # %if.end629
                                        #   in Loop: Header=BB79_150 Depth=3
	jmp	.LBB79_155
.LBB79_155:                             # %for.inc630
                                        #   in Loop: Header=BB79_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_150
.LBB79_156:                             # %for.end632
                                        #   in Loop: Header=BB79_148 Depth=2
	jmp	.LBB79_157
.LBB79_157:                             # %for.inc633
                                        #   in Loop: Header=BB79_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_148
.LBB79_158:                             # %for.end635
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_159:                             # %for.cond636
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB79_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB79_159 Depth=2
	movl	$0, -4(%rbp)
.LBB79_161:                             # %for.cond639
                                        #   Parent Loop BB79_1 Depth=1
                                        #     Parent Loop BB79_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB79_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB79_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB79_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB79_165
.LBB79_164:                             # %if.else658
                                        #   in Loop: Header=BB79_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB79_165:                             # %if.end673
                                        #   in Loop: Header=BB79_161 Depth=3
	jmp	.LBB79_166
.LBB79_166:                             # %for.inc674
                                        #   in Loop: Header=BB79_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_161
.LBB79_167:                             # %for.end676
                                        #   in Loop: Header=BB79_159 Depth=2
	jmp	.LBB79_168
.LBB79_168:                             # %for.inc677
                                        #   in Loop: Header=BB79_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_159
.LBB79_169:                             # %for.end679
                                        #   in Loop: Header=BB79_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB79_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB79_171:                             # %if.end682
                                        #   in Loop: Header=BB79_1 Depth=1
	jmp	.LBB79_172
.LBB79_172:                             # %for.inc683
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_1
.LBB79_173:                             # %for.end685
	cmpl	$1504622053, -44(%rbp)  # imm = 0x59AEB5E5
	jne	.LBB79_175
.LBB79_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_174
.Lfunc_end79:
	.size	GetCtxModelNumber.72, .Lfunc_end79-GetCtxModelNumber.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.73
.LCPI80_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.73
	.p2align	4, 0x90
	.type	GetCtxModelNumber.73,@function
GetCtxModelNumber.73:                   # @GetCtxModelNumber.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$2008313429, -44(%rbp)  # imm = 0x77B46E55
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_3 Depth 2
                                        #       Child Loop BB80_5 Depth 3
                                        #     Child Loop BB80_14 Depth 2
                                        #       Child Loop BB80_16 Depth 3
                                        #     Child Loop BB80_25 Depth 2
                                        #       Child Loop BB80_27 Depth 3
                                        #     Child Loop BB80_36 Depth 2
                                        #       Child Loop BB80_38 Depth 3
                                        #     Child Loop BB80_47 Depth 2
                                        #     Child Loop BB80_54 Depth 2
                                        #     Child Loop BB80_61 Depth 2
                                        #     Child Loop BB80_68 Depth 2
                                        #     Child Loop BB80_75 Depth 2
                                        #     Child Loop BB80_82 Depth 2
                                        #       Child Loop BB80_84 Depth 3
                                        #     Child Loop BB80_93 Depth 2
                                        #       Child Loop BB80_95 Depth 3
                                        #     Child Loop BB80_104 Depth 2
                                        #       Child Loop BB80_106 Depth 3
                                        #     Child Loop BB80_115 Depth 2
                                        #       Child Loop BB80_117 Depth 3
                                        #     Child Loop BB80_126 Depth 2
                                        #       Child Loop BB80_128 Depth 3
                                        #     Child Loop BB80_137 Depth 2
                                        #       Child Loop BB80_139 Depth 3
                                        #     Child Loop BB80_148 Depth 2
                                        #       Child Loop BB80_150 Depth 3
                                        #     Child Loop BB80_159 Depth 2
                                        #       Child Loop BB80_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB80_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB80_3:                               # %for.cond2
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB80_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	$0, -4(%rbp)
.LBB80_5:                               # %for.cond5
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB80_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB80_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB80_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_9
.LBB80_8:                               # %if.else
                                        #   in Loop: Header=BB80_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_9:                               # %if.end
                                        #   in Loop: Header=BB80_5 Depth=3
	jmp	.LBB80_10
.LBB80_10:                              # %for.inc
                                        #   in Loop: Header=BB80_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_5
.LBB80_11:                              # %for.end
                                        #   in Loop: Header=BB80_3 Depth=2
	jmp	.LBB80_12
.LBB80_12:                              # %for.inc33
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_3
.LBB80_13:                              # %for.end35
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_14:                              # %for.cond36
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB80_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	$0, -4(%rbp)
.LBB80_16:                              # %for.cond39
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB80_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB80_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB80_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_20
.LBB80_19:                              # %if.else58
                                        #   in Loop: Header=BB80_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_20:                              # %if.end73
                                        #   in Loop: Header=BB80_16 Depth=3
	jmp	.LBB80_21
.LBB80_21:                              # %for.inc74
                                        #   in Loop: Header=BB80_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_16
.LBB80_22:                              # %for.end76
                                        #   in Loop: Header=BB80_14 Depth=2
	jmp	.LBB80_23
.LBB80_23:                              # %for.inc77
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_14
.LBB80_24:                              # %for.end79
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_25:                              # %for.cond80
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB80_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB80_25 Depth=2
	movl	$0, -4(%rbp)
.LBB80_27:                              # %for.cond83
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB80_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB80_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB80_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_31
.LBB80_30:                              # %if.else102
                                        #   in Loop: Header=BB80_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_31:                              # %if.end117
                                        #   in Loop: Header=BB80_27 Depth=3
	jmp	.LBB80_32
.LBB80_32:                              # %for.inc118
                                        #   in Loop: Header=BB80_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_27
.LBB80_33:                              # %for.end120
                                        #   in Loop: Header=BB80_25 Depth=2
	jmp	.LBB80_34
.LBB80_34:                              # %for.inc121
                                        #   in Loop: Header=BB80_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_25
.LBB80_35:                              # %for.end123
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_36:                              # %for.cond124
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB80_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB80_36 Depth=2
	movl	$0, -4(%rbp)
.LBB80_38:                              # %for.cond127
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB80_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB80_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB80_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_42
.LBB80_41:                              # %if.else146
                                        #   in Loop: Header=BB80_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_42:                              # %if.end161
                                        #   in Loop: Header=BB80_38 Depth=3
	jmp	.LBB80_43
.LBB80_43:                              # %for.inc162
                                        #   in Loop: Header=BB80_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_38
.LBB80_44:                              # %for.end164
                                        #   in Loop: Header=BB80_36 Depth=2
	jmp	.LBB80_45
.LBB80_45:                              # %for.inc165
                                        #   in Loop: Header=BB80_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_36
.LBB80_46:                              # %for.end167
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_47:                              # %for.cond168
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB80_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB80_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_51
.LBB80_50:                              # %if.else184
                                        #   in Loop: Header=BB80_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_51:                              # %if.end196
                                        #   in Loop: Header=BB80_47 Depth=2
	jmp	.LBB80_52
.LBB80_52:                              # %for.inc197
                                        #   in Loop: Header=BB80_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_47
.LBB80_53:                              # %for.end199
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_54:                              # %for.cond200
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB80_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB80_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_58
.LBB80_57:                              # %if.else216
                                        #   in Loop: Header=BB80_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_58:                              # %if.end228
                                        #   in Loop: Header=BB80_54 Depth=2
	jmp	.LBB80_59
.LBB80_59:                              # %for.inc229
                                        #   in Loop: Header=BB80_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_54
.LBB80_60:                              # %for.end231
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_61:                              # %for.cond232
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB80_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB80_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB80_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_65
.LBB80_64:                              # %if.else248
                                        #   in Loop: Header=BB80_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_65:                              # %if.end260
                                        #   in Loop: Header=BB80_61 Depth=2
	jmp	.LBB80_66
.LBB80_66:                              # %for.inc261
                                        #   in Loop: Header=BB80_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_61
.LBB80_67:                              # %for.end263
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_68:                              # %for.cond264
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB80_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB80_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB80_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_72
.LBB80_71:                              # %if.else280
                                        #   in Loop: Header=BB80_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_72:                              # %if.end292
                                        #   in Loop: Header=BB80_68 Depth=2
	jmp	.LBB80_73
.LBB80_73:                              # %for.inc293
                                        #   in Loop: Header=BB80_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_68
.LBB80_74:                              # %for.end295
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_75:                              # %for.cond296
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB80_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB80_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_79
.LBB80_78:                              # %if.else312
                                        #   in Loop: Header=BB80_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_79:                              # %if.end324
                                        #   in Loop: Header=BB80_75 Depth=2
	jmp	.LBB80_80
.LBB80_80:                              # %for.inc325
                                        #   in Loop: Header=BB80_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_75
.LBB80_81:                              # %for.end327
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_82:                              # %for.cond328
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB80_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB80_82 Depth=2
	movl	$0, -4(%rbp)
.LBB80_84:                              # %for.cond331
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB80_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB80_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB80_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_88
.LBB80_87:                              # %if.else350
                                        #   in Loop: Header=BB80_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_88:                              # %if.end365
                                        #   in Loop: Header=BB80_84 Depth=3
	jmp	.LBB80_89
.LBB80_89:                              # %for.inc366
                                        #   in Loop: Header=BB80_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_84
.LBB80_90:                              # %for.end368
                                        #   in Loop: Header=BB80_82 Depth=2
	jmp	.LBB80_91
.LBB80_91:                              # %for.inc369
                                        #   in Loop: Header=BB80_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_82
.LBB80_92:                              # %for.end371
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_93:                              # %for.cond372
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB80_93 Depth=2
	movl	$0, -4(%rbp)
.LBB80_95:                              # %for.cond375
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB80_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB80_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB80_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_99
.LBB80_98:                              # %if.else394
                                        #   in Loop: Header=BB80_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_99:                              # %if.end409
                                        #   in Loop: Header=BB80_95 Depth=3
	jmp	.LBB80_100
.LBB80_100:                             # %for.inc410
                                        #   in Loop: Header=BB80_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_95
.LBB80_101:                             # %for.end412
                                        #   in Loop: Header=BB80_93 Depth=2
	jmp	.LBB80_102
.LBB80_102:                             # %for.inc413
                                        #   in Loop: Header=BB80_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_93
.LBB80_103:                             # %for.end415
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_104:                             # %for.cond416
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB80_104 Depth=2
	movl	$0, -4(%rbp)
.LBB80_106:                             # %for.cond419
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB80_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB80_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB80_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_110
.LBB80_109:                             # %if.else438
                                        #   in Loop: Header=BB80_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_110:                             # %if.end453
                                        #   in Loop: Header=BB80_106 Depth=3
	jmp	.LBB80_111
.LBB80_111:                             # %for.inc454
                                        #   in Loop: Header=BB80_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_106
.LBB80_112:                             # %for.end456
                                        #   in Loop: Header=BB80_104 Depth=2
	jmp	.LBB80_113
.LBB80_113:                             # %for.inc457
                                        #   in Loop: Header=BB80_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_104
.LBB80_114:                             # %for.end459
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_115:                             # %for.cond460
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB80_115 Depth=2
	movl	$0, -4(%rbp)
.LBB80_117:                             # %for.cond463
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB80_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB80_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB80_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_121
.LBB80_120:                             # %if.else482
                                        #   in Loop: Header=BB80_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_121:                             # %if.end497
                                        #   in Loop: Header=BB80_117 Depth=3
	jmp	.LBB80_122
.LBB80_122:                             # %for.inc498
                                        #   in Loop: Header=BB80_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_117
.LBB80_123:                             # %for.end500
                                        #   in Loop: Header=BB80_115 Depth=2
	jmp	.LBB80_124
.LBB80_124:                             # %for.inc501
                                        #   in Loop: Header=BB80_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_115
.LBB80_125:                             # %for.end503
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_126:                             # %for.cond504
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB80_126 Depth=2
	movl	$0, -4(%rbp)
.LBB80_128:                             # %for.cond507
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB80_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB80_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB80_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_132
.LBB80_131:                             # %if.else526
                                        #   in Loop: Header=BB80_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_132:                             # %if.end541
                                        #   in Loop: Header=BB80_128 Depth=3
	jmp	.LBB80_133
.LBB80_133:                             # %for.inc542
                                        #   in Loop: Header=BB80_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_128
.LBB80_134:                             # %for.end544
                                        #   in Loop: Header=BB80_126 Depth=2
	jmp	.LBB80_135
.LBB80_135:                             # %for.inc545
                                        #   in Loop: Header=BB80_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_126
.LBB80_136:                             # %for.end547
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_137:                             # %for.cond548
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB80_137 Depth=2
	movl	$0, -4(%rbp)
.LBB80_139:                             # %for.cond551
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB80_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB80_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB80_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_143
.LBB80_142:                             # %if.else570
                                        #   in Loop: Header=BB80_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_143:                             # %if.end585
                                        #   in Loop: Header=BB80_139 Depth=3
	jmp	.LBB80_144
.LBB80_144:                             # %for.inc586
                                        #   in Loop: Header=BB80_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_139
.LBB80_145:                             # %for.end588
                                        #   in Loop: Header=BB80_137 Depth=2
	jmp	.LBB80_146
.LBB80_146:                             # %for.inc589
                                        #   in Loop: Header=BB80_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_137
.LBB80_147:                             # %for.end591
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_148:                             # %for.cond592
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB80_148 Depth=2
	movl	$0, -4(%rbp)
.LBB80_150:                             # %for.cond595
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB80_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB80_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB80_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_154
.LBB80_153:                             # %if.else614
                                        #   in Loop: Header=BB80_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_154:                             # %if.end629
                                        #   in Loop: Header=BB80_150 Depth=3
	jmp	.LBB80_155
.LBB80_155:                             # %for.inc630
                                        #   in Loop: Header=BB80_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_150
.LBB80_156:                             # %for.end632
                                        #   in Loop: Header=BB80_148 Depth=2
	jmp	.LBB80_157
.LBB80_157:                             # %for.inc633
                                        #   in Loop: Header=BB80_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_148
.LBB80_158:                             # %for.end635
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_159:                             # %for.cond636
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB80_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB80_159 Depth=2
	movl	$0, -4(%rbp)
.LBB80_161:                             # %for.cond639
                                        #   Parent Loop BB80_1 Depth=1
                                        #     Parent Loop BB80_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB80_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB80_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB80_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB80_165
.LBB80_164:                             # %if.else658
                                        #   in Loop: Header=BB80_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB80_165:                             # %if.end673
                                        #   in Loop: Header=BB80_161 Depth=3
	jmp	.LBB80_166
.LBB80_166:                             # %for.inc674
                                        #   in Loop: Header=BB80_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_161
.LBB80_167:                             # %for.end676
                                        #   in Loop: Header=BB80_159 Depth=2
	jmp	.LBB80_168
.LBB80_168:                             # %for.inc677
                                        #   in Loop: Header=BB80_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_159
.LBB80_169:                             # %for.end679
                                        #   in Loop: Header=BB80_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB80_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB80_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB80_171:                             # %if.end682
                                        #   in Loop: Header=BB80_1 Depth=1
	jmp	.LBB80_172
.LBB80_172:                             # %for.inc683
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_1
.LBB80_173:                             # %for.end685
	cmpl	$2008313429, -44(%rbp)  # imm = 0x77B46E55
	jne	.LBB80_175
.LBB80_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_174
.Lfunc_end80:
	.size	GetCtxModelNumber.73, .Lfunc_end80-GetCtxModelNumber.73
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.74
.LCPI81_0:
	.quad	4611686018427387904     # double 2
.LCPI81_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.74
	.p2align	4, 0x90
	.type	create_context_memory.74,@function
create_context_memory.74:               # @create_context_memory.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$127008614, -20(%rbp)   # imm = 0x791FF66
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB81_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB81_3
.LBB81_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB81_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB81_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB81_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB81_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB81_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB81_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_11:                              # %if.end10
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB81_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_13:                              # %if.end16
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$0, -8(%rbp)
.LBB81_14:                              # %for.cond17
                                        #   Parent Loop BB81_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB81_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB81_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_17:                              # %if.end28
                                        #   in Loop: Header=BB81_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB81_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_19:                              # %if.end39
                                        #   in Loop: Header=BB81_14 Depth=2
	jmp	.LBB81_20
.LBB81_20:                              # %for.inc
                                        #   in Loop: Header=BB81_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_14
.LBB81_21:                              # %for.end
                                        #   in Loop: Header=BB81_8 Depth=1
	jmp	.LBB81_22
.LBB81_22:                              # %for.inc40
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_8
.LBB81_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB81_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_26 Depth 2
                                        #       Child Loop BB81_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB81_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	$0, -8(%rbp)
.LBB81_26:                              # %for.cond47
                                        #   Parent Loop BB81_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB81_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB81_26 Depth=2
	movl	$0, -12(%rbp)
.LBB81_28:                              # %for.cond51
                                        #   Parent Loop BB81_24 Depth=1
                                        #     Parent Loop BB81_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB81_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB81_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB81_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_28
.LBB81_31:                              # %for.end63
                                        #   in Loop: Header=BB81_26 Depth=2
	jmp	.LBB81_32
.LBB81_32:                              # %for.inc64
                                        #   in Loop: Header=BB81_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_26
.LBB81_33:                              # %for.end66
                                        #   in Loop: Header=BB81_24 Depth=1
	jmp	.LBB81_34
.LBB81_34:                              # %for.inc67
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_24
.LBB81_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB81_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB81_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB81_36 Depth=1
	vmovsd	.LCPI81_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB81_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_36
.LBB81_39:                              # %for.end98
	cmpl	$127008614, -20(%rbp)   # imm = 0x791FF66
	jne	.LBB81_41
.LBB81_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_40
.Lfunc_end81:
	.size	create_context_memory.74, .Lfunc_end81-create_context_memory.74
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.75
.LCPI82_0:
	.quad	4611686018427387904     # double 2
.LCPI82_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.75
	.p2align	4, 0x90
	.type	create_context_memory.75,@function
create_context_memory.75:               # @create_context_memory.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1216024574, -20(%rbp)  # imm = 0x487B0FFE
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB82_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB82_3
.LBB82_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB82_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB82_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB82_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB82_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB82_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB82_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_11:                              # %if.end10
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB82_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_13:                              # %if.end16
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$0, -8(%rbp)
.LBB82_14:                              # %for.cond17
                                        #   Parent Loop BB82_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB82_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB82_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB82_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_17:                              # %if.end28
                                        #   in Loop: Header=BB82_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB82_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_19:                              # %if.end39
                                        #   in Loop: Header=BB82_14 Depth=2
	jmp	.LBB82_20
.LBB82_20:                              # %for.inc
                                        #   in Loop: Header=BB82_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_14
.LBB82_21:                              # %for.end
                                        #   in Loop: Header=BB82_8 Depth=1
	jmp	.LBB82_22
.LBB82_22:                              # %for.inc40
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_8
.LBB82_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB82_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_26 Depth 2
                                        #       Child Loop BB82_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB82_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	$0, -8(%rbp)
.LBB82_26:                              # %for.cond47
                                        #   Parent Loop BB82_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB82_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	$0, -12(%rbp)
.LBB82_28:                              # %for.cond51
                                        #   Parent Loop BB82_24 Depth=1
                                        #     Parent Loop BB82_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB82_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB82_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB82_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_28
.LBB82_31:                              # %for.end63
                                        #   in Loop: Header=BB82_26 Depth=2
	jmp	.LBB82_32
.LBB82_32:                              # %for.inc64
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_26
.LBB82_33:                              # %for.end66
                                        #   in Loop: Header=BB82_24 Depth=1
	jmp	.LBB82_34
.LBB82_34:                              # %for.inc67
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_24
.LBB82_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB82_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB82_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB82_36 Depth=1
	vmovsd	.LCPI82_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB82_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_36
.LBB82_39:                              # %for.end98
	cmpl	$1216024574, -20(%rbp)  # imm = 0x487B0FFE
	jne	.LBB82_41
.LBB82_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_40
.Lfunc_end82:
	.size	create_context_memory.75, .Lfunc_end82-create_context_memory.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.76
.LCPI83_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.76
	.p2align	4, 0x90
	.type	GetCtxModelNumber.76,@function
GetCtxModelNumber.76:                   # @GetCtxModelNumber.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1215824372, -44(%rbp)  # imm = 0x487801F4
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
                                        #       Child Loop BB83_5 Depth 3
                                        #     Child Loop BB83_14 Depth 2
                                        #       Child Loop BB83_16 Depth 3
                                        #     Child Loop BB83_25 Depth 2
                                        #       Child Loop BB83_27 Depth 3
                                        #     Child Loop BB83_36 Depth 2
                                        #       Child Loop BB83_38 Depth 3
                                        #     Child Loop BB83_47 Depth 2
                                        #     Child Loop BB83_54 Depth 2
                                        #     Child Loop BB83_61 Depth 2
                                        #     Child Loop BB83_68 Depth 2
                                        #     Child Loop BB83_75 Depth 2
                                        #     Child Loop BB83_82 Depth 2
                                        #       Child Loop BB83_84 Depth 3
                                        #     Child Loop BB83_93 Depth 2
                                        #       Child Loop BB83_95 Depth 3
                                        #     Child Loop BB83_104 Depth 2
                                        #       Child Loop BB83_106 Depth 3
                                        #     Child Loop BB83_115 Depth 2
                                        #       Child Loop BB83_117 Depth 3
                                        #     Child Loop BB83_126 Depth 2
                                        #       Child Loop BB83_128 Depth 3
                                        #     Child Loop BB83_137 Depth 2
                                        #       Child Loop BB83_139 Depth 3
                                        #     Child Loop BB83_148 Depth 2
                                        #       Child Loop BB83_150 Depth 3
                                        #     Child Loop BB83_159 Depth 2
                                        #       Child Loop BB83_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB83_3:                               # %for.cond2
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB83_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	$0, -4(%rbp)
.LBB83_5:                               # %for.cond5
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB83_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_9
.LBB83_8:                               # %if.else
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_9:                               # %if.end
                                        #   in Loop: Header=BB83_5 Depth=3
	jmp	.LBB83_10
.LBB83_10:                              # %for.inc
                                        #   in Loop: Header=BB83_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_5
.LBB83_11:                              # %for.end
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_12
.LBB83_12:                              # %for.inc33
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_3
.LBB83_13:                              # %for.end35
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_14:                              # %for.cond36
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	$0, -4(%rbp)
.LBB83_16:                              # %for.cond39
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB83_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_20
.LBB83_19:                              # %if.else58
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_20:                              # %if.end73
                                        #   in Loop: Header=BB83_16 Depth=3
	jmp	.LBB83_21
.LBB83_21:                              # %for.inc74
                                        #   in Loop: Header=BB83_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_16
.LBB83_22:                              # %for.end76
                                        #   in Loop: Header=BB83_14 Depth=2
	jmp	.LBB83_23
.LBB83_23:                              # %for.inc77
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_14
.LBB83_24:                              # %for.end79
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_25:                              # %for.cond80
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	$0, -4(%rbp)
.LBB83_27:                              # %for.cond83
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB83_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_31
.LBB83_30:                              # %if.else102
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_31:                              # %if.end117
                                        #   in Loop: Header=BB83_27 Depth=3
	jmp	.LBB83_32
.LBB83_32:                              # %for.inc118
                                        #   in Loop: Header=BB83_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_27
.LBB83_33:                              # %for.end120
                                        #   in Loop: Header=BB83_25 Depth=2
	jmp	.LBB83_34
.LBB83_34:                              # %for.inc121
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_25
.LBB83_35:                              # %for.end123
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_36:                              # %for.cond124
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	$0, -4(%rbp)
.LBB83_38:                              # %for.cond127
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB83_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_42
.LBB83_41:                              # %if.else146
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_42:                              # %if.end161
                                        #   in Loop: Header=BB83_38 Depth=3
	jmp	.LBB83_43
.LBB83_43:                              # %for.inc162
                                        #   in Loop: Header=BB83_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_38
.LBB83_44:                              # %for.end164
                                        #   in Loop: Header=BB83_36 Depth=2
	jmp	.LBB83_45
.LBB83_45:                              # %for.inc165
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_36
.LBB83_46:                              # %for.end167
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_47:                              # %for.cond168
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_51
.LBB83_50:                              # %if.else184
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_51:                              # %if.end196
                                        #   in Loop: Header=BB83_47 Depth=2
	jmp	.LBB83_52
.LBB83_52:                              # %for.inc197
                                        #   in Loop: Header=BB83_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_47
.LBB83_53:                              # %for.end199
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_54:                              # %for.cond200
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_58
.LBB83_57:                              # %if.else216
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_58:                              # %if.end228
                                        #   in Loop: Header=BB83_54 Depth=2
	jmp	.LBB83_59
.LBB83_59:                              # %for.inc229
                                        #   in Loop: Header=BB83_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_54
.LBB83_60:                              # %for.end231
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_61:                              # %for.cond232
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB83_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_65
.LBB83_64:                              # %if.else248
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_65:                              # %if.end260
                                        #   in Loop: Header=BB83_61 Depth=2
	jmp	.LBB83_66
.LBB83_66:                              # %for.inc261
                                        #   in Loop: Header=BB83_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_61
.LBB83_67:                              # %for.end263
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_68:                              # %for.cond264
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB83_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_72
.LBB83_71:                              # %if.else280
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_72:                              # %if.end292
                                        #   in Loop: Header=BB83_68 Depth=2
	jmp	.LBB83_73
.LBB83_73:                              # %for.inc293
                                        #   in Loop: Header=BB83_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_68
.LBB83_74:                              # %for.end295
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_75:                              # %for.cond296
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_79
.LBB83_78:                              # %if.else312
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_79:                              # %if.end324
                                        #   in Loop: Header=BB83_75 Depth=2
	jmp	.LBB83_80
.LBB83_80:                              # %for.inc325
                                        #   in Loop: Header=BB83_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_75
.LBB83_81:                              # %for.end327
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_82:                              # %for.cond328
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB83_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	$0, -4(%rbp)
.LBB83_84:                              # %for.cond331
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB83_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_88
.LBB83_87:                              # %if.else350
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_88:                              # %if.end365
                                        #   in Loop: Header=BB83_84 Depth=3
	jmp	.LBB83_89
.LBB83_89:                              # %for.inc366
                                        #   in Loop: Header=BB83_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_84
.LBB83_90:                              # %for.end368
                                        #   in Loop: Header=BB83_82 Depth=2
	jmp	.LBB83_91
.LBB83_91:                              # %for.inc369
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_82
.LBB83_92:                              # %for.end371
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_93:                              # %for.cond372
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	$0, -4(%rbp)
.LBB83_95:                              # %for.cond375
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB83_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_99
.LBB83_98:                              # %if.else394
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_99:                              # %if.end409
                                        #   in Loop: Header=BB83_95 Depth=3
	jmp	.LBB83_100
.LBB83_100:                             # %for.inc410
                                        #   in Loop: Header=BB83_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_95
.LBB83_101:                             # %for.end412
                                        #   in Loop: Header=BB83_93 Depth=2
	jmp	.LBB83_102
.LBB83_102:                             # %for.inc413
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_93
.LBB83_103:                             # %for.end415
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_104:                             # %for.cond416
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	$0, -4(%rbp)
.LBB83_106:                             # %for.cond419
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_110
.LBB83_109:                             # %if.else438
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_110:                             # %if.end453
                                        #   in Loop: Header=BB83_106 Depth=3
	jmp	.LBB83_111
.LBB83_111:                             # %for.inc454
                                        #   in Loop: Header=BB83_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_106
.LBB83_112:                             # %for.end456
                                        #   in Loop: Header=BB83_104 Depth=2
	jmp	.LBB83_113
.LBB83_113:                             # %for.inc457
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_104
.LBB83_114:                             # %for.end459
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_115:                             # %for.cond460
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	$0, -4(%rbp)
.LBB83_117:                             # %for.cond463
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_121
.LBB83_120:                             # %if.else482
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_121:                             # %if.end497
                                        #   in Loop: Header=BB83_117 Depth=3
	jmp	.LBB83_122
.LBB83_122:                             # %for.inc498
                                        #   in Loop: Header=BB83_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_117
.LBB83_123:                             # %for.end500
                                        #   in Loop: Header=BB83_115 Depth=2
	jmp	.LBB83_124
.LBB83_124:                             # %for.inc501
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_115
.LBB83_125:                             # %for.end503
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_126:                             # %for.cond504
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	$0, -4(%rbp)
.LBB83_128:                             # %for.cond507
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB83_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_132
.LBB83_131:                             # %if.else526
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_132:                             # %if.end541
                                        #   in Loop: Header=BB83_128 Depth=3
	jmp	.LBB83_133
.LBB83_133:                             # %for.inc542
                                        #   in Loop: Header=BB83_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_128
.LBB83_134:                             # %for.end544
                                        #   in Loop: Header=BB83_126 Depth=2
	jmp	.LBB83_135
.LBB83_135:                             # %for.inc545
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_126
.LBB83_136:                             # %for.end547
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_137:                             # %for.cond548
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	$0, -4(%rbp)
.LBB83_139:                             # %for.cond551
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB83_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_143
.LBB83_142:                             # %if.else570
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_143:                             # %if.end585
                                        #   in Loop: Header=BB83_139 Depth=3
	jmp	.LBB83_144
.LBB83_144:                             # %for.inc586
                                        #   in Loop: Header=BB83_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_139
.LBB83_145:                             # %for.end588
                                        #   in Loop: Header=BB83_137 Depth=2
	jmp	.LBB83_146
.LBB83_146:                             # %for.inc589
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_137
.LBB83_147:                             # %for.end591
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_148:                             # %for.cond592
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	$0, -4(%rbp)
.LBB83_150:                             # %for.cond595
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_154
.LBB83_153:                             # %if.else614
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_154:                             # %if.end629
                                        #   in Loop: Header=BB83_150 Depth=3
	jmp	.LBB83_155
.LBB83_155:                             # %for.inc630
                                        #   in Loop: Header=BB83_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_150
.LBB83_156:                             # %for.end632
                                        #   in Loop: Header=BB83_148 Depth=2
	jmp	.LBB83_157
.LBB83_157:                             # %for.inc633
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_148
.LBB83_158:                             # %for.end635
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_159:                             # %for.cond636
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	$0, -4(%rbp)
.LBB83_161:                             # %for.cond639
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_165
.LBB83_164:                             # %if.else658
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_165:                             # %if.end673
                                        #   in Loop: Header=BB83_161 Depth=3
	jmp	.LBB83_166
.LBB83_166:                             # %for.inc674
                                        #   in Loop: Header=BB83_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_161
.LBB83_167:                             # %for.end676
                                        #   in Loop: Header=BB83_159 Depth=2
	jmp	.LBB83_168
.LBB83_168:                             # %for.inc677
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_159
.LBB83_169:                             # %for.end679
                                        #   in Loop: Header=BB83_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB83_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB83_171:                             # %if.end682
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_172
.LBB83_172:                             # %for.inc683
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_1
.LBB83_173:                             # %for.end685
	cmpl	$1215824372, -44(%rbp)  # imm = 0x487801F4
	jne	.LBB83_175
.LBB83_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_174
.Lfunc_end83:
	.size	GetCtxModelNumber.76, .Lfunc_end83-GetCtxModelNumber.76
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.77        # -- Begin function init_contexts.77
	.p2align	4, 0x90
	.type	init_contexts.77,@function
init_contexts.77:                       # @init_contexts.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1643086412, -28(%rbp)  # imm = 0x61EF824C
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB84_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -4(%rbp)
.LBB84_3:                               # %for.cond2
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB84_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_7
.LBB84_6:                               # %if.else
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_7:                               # %if.end
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_8
.LBB84_8:                               # %for.inc
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_3
.LBB84_9:                               # %for.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_10
.LBB84_10:                              # %for.inc28
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_1
.LBB84_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB84_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB84_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB84_12 Depth=1
	movl	$0, -4(%rbp)
.LBB84_14:                              # %for.cond34
                                        #   Parent Loop BB84_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB84_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB84_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB84_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_18
.LBB84_17:                              # %if.else52
                                        #   in Loop: Header=BB84_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_18:                              # %if.end66
                                        #   in Loop: Header=BB84_14 Depth=2
	jmp	.LBB84_19
.LBB84_19:                              # %for.inc67
                                        #   in Loop: Header=BB84_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_14
.LBB84_20:                              # %for.end69
                                        #   in Loop: Header=BB84_12 Depth=1
	jmp	.LBB84_21
.LBB84_21:                              # %for.inc70
                                        #   in Loop: Header=BB84_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_12
.LBB84_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB84_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB84_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	$0, -4(%rbp)
.LBB84_25:                              # %for.cond76
                                        #   Parent Loop BB84_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB84_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB84_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB84_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_29
.LBB84_28:                              # %if.else94
                                        #   in Loop: Header=BB84_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_29:                              # %if.end108
                                        #   in Loop: Header=BB84_25 Depth=2
	jmp	.LBB84_30
.LBB84_30:                              # %for.inc109
                                        #   in Loop: Header=BB84_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_25
.LBB84_31:                              # %for.end111
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_32
.LBB84_32:                              # %for.inc112
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_23
.LBB84_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB84_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB84_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	$0, -4(%rbp)
.LBB84_36:                              # %for.cond118
                                        #   Parent Loop BB84_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB84_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB84_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB84_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_40
.LBB84_39:                              # %if.else136
                                        #   in Loop: Header=BB84_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_40:                              # %if.end150
                                        #   in Loop: Header=BB84_36 Depth=2
	jmp	.LBB84_41
.LBB84_41:                              # %for.inc151
                                        #   in Loop: Header=BB84_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_36
.LBB84_42:                              # %for.end153
                                        #   in Loop: Header=BB84_34 Depth=1
	jmp	.LBB84_43
.LBB84_43:                              # %for.inc154
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_34
.LBB84_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB84_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB84_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB84_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB84_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_49
.LBB84_48:                              # %if.else172
                                        #   in Loop: Header=BB84_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_49:                              # %if.end183
                                        #   in Loop: Header=BB84_45 Depth=1
	jmp	.LBB84_50
.LBB84_50:                              # %for.inc184
                                        #   in Loop: Header=BB84_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_45
.LBB84_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB84_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB84_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB84_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB84_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_56
.LBB84_55:                              # %if.else202
                                        #   in Loop: Header=BB84_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_56:                              # %if.end213
                                        #   in Loop: Header=BB84_52 Depth=1
	jmp	.LBB84_57
.LBB84_57:                              # %for.inc214
                                        #   in Loop: Header=BB84_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_52
.LBB84_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB84_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB84_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_63
.LBB84_62:                              # %if.else232
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_63:                              # %if.end243
                                        #   in Loop: Header=BB84_59 Depth=1
	jmp	.LBB84_64
.LBB84_64:                              # %for.inc244
                                        #   in Loop: Header=BB84_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_59
.LBB84_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB84_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB84_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB84_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB84_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_70
.LBB84_69:                              # %if.else262
                                        #   in Loop: Header=BB84_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_70:                              # %if.end273
                                        #   in Loop: Header=BB84_66 Depth=1
	jmp	.LBB84_71
.LBB84_71:                              # %for.inc274
                                        #   in Loop: Header=BB84_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_66
.LBB84_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB84_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB84_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB84_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB84_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_77
.LBB84_76:                              # %if.else292
                                        #   in Loop: Header=BB84_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_77:                              # %if.end303
                                        #   in Loop: Header=BB84_73 Depth=1
	jmp	.LBB84_78
.LBB84_78:                              # %for.inc304
                                        #   in Loop: Header=BB84_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_73
.LBB84_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB84_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB84_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB84_80 Depth=1
	movl	$0, -4(%rbp)
.LBB84_82:                              # %for.cond310
                                        #   Parent Loop BB84_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB84_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB84_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_86
.LBB84_85:                              # %if.else328
                                        #   in Loop: Header=BB84_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_86:                              # %if.end342
                                        #   in Loop: Header=BB84_82 Depth=2
	jmp	.LBB84_87
.LBB84_87:                              # %for.inc343
                                        #   in Loop: Header=BB84_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_82
.LBB84_88:                              # %for.end345
                                        #   in Loop: Header=BB84_80 Depth=1
	jmp	.LBB84_89
.LBB84_89:                              # %for.inc346
                                        #   in Loop: Header=BB84_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_80
.LBB84_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB84_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB84_91 Depth=1
	movl	$0, -4(%rbp)
.LBB84_93:                              # %for.cond352
                                        #   Parent Loop BB84_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB84_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB84_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_97
.LBB84_96:                              # %if.else370
                                        #   in Loop: Header=BB84_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_97:                              # %if.end384
                                        #   in Loop: Header=BB84_93 Depth=2
	jmp	.LBB84_98
.LBB84_98:                              # %for.inc385
                                        #   in Loop: Header=BB84_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_93
.LBB84_99:                              # %for.end387
                                        #   in Loop: Header=BB84_91 Depth=1
	jmp	.LBB84_100
.LBB84_100:                             # %for.inc388
                                        #   in Loop: Header=BB84_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_91
.LBB84_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB84_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB84_102 Depth=1
	movl	$0, -4(%rbp)
.LBB84_104:                             # %for.cond394
                                        #   Parent Loop BB84_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB84_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB84_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB84_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_108
.LBB84_107:                             # %if.else412
                                        #   in Loop: Header=BB84_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_108:                             # %if.end426
                                        #   in Loop: Header=BB84_104 Depth=2
	jmp	.LBB84_109
.LBB84_109:                             # %for.inc427
                                        #   in Loop: Header=BB84_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_104
.LBB84_110:                             # %for.end429
                                        #   in Loop: Header=BB84_102 Depth=1
	jmp	.LBB84_111
.LBB84_111:                             # %for.inc430
                                        #   in Loop: Header=BB84_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_102
.LBB84_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB84_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB84_113 Depth=1
	movl	$0, -4(%rbp)
.LBB84_115:                             # %for.cond436
                                        #   Parent Loop BB84_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB84_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB84_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB84_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_119
.LBB84_118:                             # %if.else454
                                        #   in Loop: Header=BB84_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_119:                             # %if.end468
                                        #   in Loop: Header=BB84_115 Depth=2
	jmp	.LBB84_120
.LBB84_120:                             # %for.inc469
                                        #   in Loop: Header=BB84_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_115
.LBB84_121:                             # %for.end471
                                        #   in Loop: Header=BB84_113 Depth=1
	jmp	.LBB84_122
.LBB84_122:                             # %for.inc472
                                        #   in Loop: Header=BB84_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_113
.LBB84_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB84_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB84_124 Depth=1
	movl	$0, -4(%rbp)
.LBB84_126:                             # %for.cond478
                                        #   Parent Loop BB84_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB84_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB84_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB84_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_130
.LBB84_129:                             # %if.else496
                                        #   in Loop: Header=BB84_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_130:                             # %if.end510
                                        #   in Loop: Header=BB84_126 Depth=2
	jmp	.LBB84_131
.LBB84_131:                             # %for.inc511
                                        #   in Loop: Header=BB84_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_126
.LBB84_132:                             # %for.end513
                                        #   in Loop: Header=BB84_124 Depth=1
	jmp	.LBB84_133
.LBB84_133:                             # %for.inc514
                                        #   in Loop: Header=BB84_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_124
.LBB84_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB84_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB84_135 Depth=1
	movl	$0, -4(%rbp)
.LBB84_137:                             # %for.cond520
                                        #   Parent Loop BB84_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB84_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB84_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB84_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_141
.LBB84_140:                             # %if.else538
                                        #   in Loop: Header=BB84_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_141:                             # %if.end552
                                        #   in Loop: Header=BB84_137 Depth=2
	jmp	.LBB84_142
.LBB84_142:                             # %for.inc553
                                        #   in Loop: Header=BB84_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_137
.LBB84_143:                             # %for.end555
                                        #   in Loop: Header=BB84_135 Depth=1
	jmp	.LBB84_144
.LBB84_144:                             # %for.inc556
                                        #   in Loop: Header=BB84_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_135
.LBB84_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB84_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB84_146 Depth=1
	movl	$0, -4(%rbp)
.LBB84_148:                             # %for.cond562
                                        #   Parent Loop BB84_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB84_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB84_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB84_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_152
.LBB84_151:                             # %if.else580
                                        #   in Loop: Header=BB84_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_152:                             # %if.end594
                                        #   in Loop: Header=BB84_148 Depth=2
	jmp	.LBB84_153
.LBB84_153:                             # %for.inc595
                                        #   in Loop: Header=BB84_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_148
.LBB84_154:                             # %for.end597
                                        #   in Loop: Header=BB84_146 Depth=1
	jmp	.LBB84_155
.LBB84_155:                             # %for.inc598
                                        #   in Loop: Header=BB84_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_146
.LBB84_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB84_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	$0, -4(%rbp)
.LBB84_159:                             # %for.cond604
                                        #   Parent Loop BB84_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB84_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB84_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB84_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_163
.LBB84_162:                             # %if.else622
                                        #   in Loop: Header=BB84_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_163:                             # %if.end636
                                        #   in Loop: Header=BB84_159 Depth=2
	jmp	.LBB84_164
.LBB84_164:                             # %for.inc637
                                        #   in Loop: Header=BB84_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_159
.LBB84_165:                             # %for.end639
                                        #   in Loop: Header=BB84_157 Depth=1
	jmp	.LBB84_166
.LBB84_166:                             # %for.inc640
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_157
.LBB84_167:                             # %for.end642
	cmpl	$1643086412, -28(%rbp)  # imm = 0x61EF824C
	jne	.LBB84_169
.LBB84_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_168
.Lfunc_end84:
	.size	init_contexts.77, .Lfunc_end84-init_contexts.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.78
.LCPI85_0:
	.quad	4611686018427387904     # double 2
.LCPI85_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.78
	.p2align	4, 0x90
	.type	create_context_memory.78,@function
create_context_memory.78:               # @create_context_memory.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$963033146, -20(%rbp)   # imm = 0x3966B83A
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB85_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB85_3
.LBB85_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB85_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB85_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB85_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB85_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB85_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB85_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_11:                              # %if.end10
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB85_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_13:                              # %if.end16
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$0, -8(%rbp)
.LBB85_14:                              # %for.cond17
                                        #   Parent Loop BB85_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB85_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB85_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_17:                              # %if.end28
                                        #   in Loop: Header=BB85_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB85_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_19:                              # %if.end39
                                        #   in Loop: Header=BB85_14 Depth=2
	jmp	.LBB85_20
.LBB85_20:                              # %for.inc
                                        #   in Loop: Header=BB85_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_14
.LBB85_21:                              # %for.end
                                        #   in Loop: Header=BB85_8 Depth=1
	jmp	.LBB85_22
.LBB85_22:                              # %for.inc40
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_8
.LBB85_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB85_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_26 Depth 2
                                        #       Child Loop BB85_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB85_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB85_24 Depth=1
	movl	$0, -8(%rbp)
.LBB85_26:                              # %for.cond47
                                        #   Parent Loop BB85_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB85_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB85_26 Depth=2
	movl	$0, -12(%rbp)
.LBB85_28:                              # %for.cond51
                                        #   Parent Loop BB85_24 Depth=1
                                        #     Parent Loop BB85_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB85_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB85_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB85_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_28
.LBB85_31:                              # %for.end63
                                        #   in Loop: Header=BB85_26 Depth=2
	jmp	.LBB85_32
.LBB85_32:                              # %for.inc64
                                        #   in Loop: Header=BB85_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_26
.LBB85_33:                              # %for.end66
                                        #   in Loop: Header=BB85_24 Depth=1
	jmp	.LBB85_34
.LBB85_34:                              # %for.inc67
                                        #   in Loop: Header=BB85_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_24
.LBB85_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB85_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB85_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB85_36 Depth=1
	vmovsd	.LCPI85_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB85_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_36
.LBB85_39:                              # %for.end98
	cmpl	$963033146, -20(%rbp)   # imm = 0x3966B83A
	jne	.LBB85_41
.LBB85_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_40
.Lfunc_end85:
	.size	create_context_memory.78, .Lfunc_end85-create_context_memory.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.79
.LCPI86_0:
	.quad	4611686018427387904     # double 2
.LCPI86_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.79
	.p2align	4, 0x90
	.type	create_context_memory.79,@function
create_context_memory.79:               # @create_context_memory.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$615447573, -20(%rbp)   # imm = 0x24AEFC15
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB86_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB86_3
.LBB86_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB86_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB86_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB86_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB86_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB86_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB86_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_11:                              # %if.end10
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB86_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_13:                              # %if.end16
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$0, -8(%rbp)
.LBB86_14:                              # %for.cond17
                                        #   Parent Loop BB86_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB86_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB86_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB86_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_17:                              # %if.end28
                                        #   in Loop: Header=BB86_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB86_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_19:                              # %if.end39
                                        #   in Loop: Header=BB86_14 Depth=2
	jmp	.LBB86_20
.LBB86_20:                              # %for.inc
                                        #   in Loop: Header=BB86_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_14
.LBB86_21:                              # %for.end
                                        #   in Loop: Header=BB86_8 Depth=1
	jmp	.LBB86_22
.LBB86_22:                              # %for.inc40
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_8
.LBB86_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB86_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_26 Depth 2
                                        #       Child Loop BB86_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB86_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$0, -8(%rbp)
.LBB86_26:                              # %for.cond47
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB86_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	$0, -12(%rbp)
.LBB86_28:                              # %for.cond51
                                        #   Parent Loop BB86_24 Depth=1
                                        #     Parent Loop BB86_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB86_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB86_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB86_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_28
.LBB86_31:                              # %for.end63
                                        #   in Loop: Header=BB86_26 Depth=2
	jmp	.LBB86_32
.LBB86_32:                              # %for.inc64
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_26
.LBB86_33:                              # %for.end66
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_34
.LBB86_34:                              # %for.inc67
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_24
.LBB86_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB86_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB86_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB86_36 Depth=1
	vmovsd	.LCPI86_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB86_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_36
.LBB86_39:                              # %for.end98
	cmpl	$615447573, -20(%rbp)   # imm = 0x24AEFC15
	jne	.LBB86_41
.LBB86_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_40
.Lfunc_end86:
	.size	create_context_memory.79, .Lfunc_end86-create_context_memory.79
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.80        # -- Begin function init_contexts.80
	.p2align	4, 0x90
	.type	init_contexts.80,@function
init_contexts.80:                       # @init_contexts.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1380639238, -28(%rbp)  # imm = 0x524AE206
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB87_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_3:                               # %for.cond2
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB87_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_7
.LBB87_6:                               # %if.else
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_7:                               # %if.end
                                        #   in Loop: Header=BB87_3 Depth=2
	jmp	.LBB87_8
.LBB87_8:                               # %for.inc
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_3
.LBB87_9:                               # %for.end
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_10
.LBB87_10:                              # %for.inc28
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_1
.LBB87_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB87_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB87_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB87_12 Depth=1
	movl	$0, -4(%rbp)
.LBB87_14:                              # %for.cond34
                                        #   Parent Loop BB87_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB87_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB87_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB87_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_18
.LBB87_17:                              # %if.else52
                                        #   in Loop: Header=BB87_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_18:                              # %if.end66
                                        #   in Loop: Header=BB87_14 Depth=2
	jmp	.LBB87_19
.LBB87_19:                              # %for.inc67
                                        #   in Loop: Header=BB87_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_14
.LBB87_20:                              # %for.end69
                                        #   in Loop: Header=BB87_12 Depth=1
	jmp	.LBB87_21
.LBB87_21:                              # %for.inc70
                                        #   in Loop: Header=BB87_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_12
.LBB87_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB87_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB87_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	$0, -4(%rbp)
.LBB87_25:                              # %for.cond76
                                        #   Parent Loop BB87_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB87_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB87_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB87_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_29
.LBB87_28:                              # %if.else94
                                        #   in Loop: Header=BB87_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_29:                              # %if.end108
                                        #   in Loop: Header=BB87_25 Depth=2
	jmp	.LBB87_30
.LBB87_30:                              # %for.inc109
                                        #   in Loop: Header=BB87_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_25
.LBB87_31:                              # %for.end111
                                        #   in Loop: Header=BB87_23 Depth=1
	jmp	.LBB87_32
.LBB87_32:                              # %for.inc112
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_23
.LBB87_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB87_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB87_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB87_34 Depth=1
	movl	$0, -4(%rbp)
.LBB87_36:                              # %for.cond118
                                        #   Parent Loop BB87_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB87_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB87_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB87_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_40
.LBB87_39:                              # %if.else136
                                        #   in Loop: Header=BB87_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_40:                              # %if.end150
                                        #   in Loop: Header=BB87_36 Depth=2
	jmp	.LBB87_41
.LBB87_41:                              # %for.inc151
                                        #   in Loop: Header=BB87_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_36
.LBB87_42:                              # %for.end153
                                        #   in Loop: Header=BB87_34 Depth=1
	jmp	.LBB87_43
.LBB87_43:                              # %for.inc154
                                        #   in Loop: Header=BB87_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_34
.LBB87_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB87_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB87_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB87_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB87_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_49
.LBB87_48:                              # %if.else172
                                        #   in Loop: Header=BB87_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_49:                              # %if.end183
                                        #   in Loop: Header=BB87_45 Depth=1
	jmp	.LBB87_50
.LBB87_50:                              # %for.inc184
                                        #   in Loop: Header=BB87_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_45
.LBB87_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB87_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB87_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB87_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB87_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_56
.LBB87_55:                              # %if.else202
                                        #   in Loop: Header=BB87_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_56:                              # %if.end213
                                        #   in Loop: Header=BB87_52 Depth=1
	jmp	.LBB87_57
.LBB87_57:                              # %for.inc214
                                        #   in Loop: Header=BB87_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_52
.LBB87_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB87_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB87_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB87_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB87_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_63
.LBB87_62:                              # %if.else232
                                        #   in Loop: Header=BB87_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_63:                              # %if.end243
                                        #   in Loop: Header=BB87_59 Depth=1
	jmp	.LBB87_64
.LBB87_64:                              # %for.inc244
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_59
.LBB87_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB87_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB87_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB87_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB87_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_70
.LBB87_69:                              # %if.else262
                                        #   in Loop: Header=BB87_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_70:                              # %if.end273
                                        #   in Loop: Header=BB87_66 Depth=1
	jmp	.LBB87_71
.LBB87_71:                              # %for.inc274
                                        #   in Loop: Header=BB87_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_66
.LBB87_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB87_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB87_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB87_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB87_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_77
.LBB87_76:                              # %if.else292
                                        #   in Loop: Header=BB87_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_77:                              # %if.end303
                                        #   in Loop: Header=BB87_73 Depth=1
	jmp	.LBB87_78
.LBB87_78:                              # %for.inc304
                                        #   in Loop: Header=BB87_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_73
.LBB87_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB87_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB87_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB87_80 Depth=1
	movl	$0, -4(%rbp)
.LBB87_82:                              # %for.cond310
                                        #   Parent Loop BB87_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB87_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB87_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_86
.LBB87_85:                              # %if.else328
                                        #   in Loop: Header=BB87_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_86:                              # %if.end342
                                        #   in Loop: Header=BB87_82 Depth=2
	jmp	.LBB87_87
.LBB87_87:                              # %for.inc343
                                        #   in Loop: Header=BB87_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_82
.LBB87_88:                              # %for.end345
                                        #   in Loop: Header=BB87_80 Depth=1
	jmp	.LBB87_89
.LBB87_89:                              # %for.inc346
                                        #   in Loop: Header=BB87_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_80
.LBB87_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB87_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB87_91 Depth=1
	movl	$0, -4(%rbp)
.LBB87_93:                              # %for.cond352
                                        #   Parent Loop BB87_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB87_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB87_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_97
.LBB87_96:                              # %if.else370
                                        #   in Loop: Header=BB87_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_97:                              # %if.end384
                                        #   in Loop: Header=BB87_93 Depth=2
	jmp	.LBB87_98
.LBB87_98:                              # %for.inc385
                                        #   in Loop: Header=BB87_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_93
.LBB87_99:                              # %for.end387
                                        #   in Loop: Header=BB87_91 Depth=1
	jmp	.LBB87_100
.LBB87_100:                             # %for.inc388
                                        #   in Loop: Header=BB87_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_91
.LBB87_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB87_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB87_102 Depth=1
	movl	$0, -4(%rbp)
.LBB87_104:                             # %for.cond394
                                        #   Parent Loop BB87_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB87_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB87_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB87_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_108
.LBB87_107:                             # %if.else412
                                        #   in Loop: Header=BB87_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_108:                             # %if.end426
                                        #   in Loop: Header=BB87_104 Depth=2
	jmp	.LBB87_109
.LBB87_109:                             # %for.inc427
                                        #   in Loop: Header=BB87_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_104
.LBB87_110:                             # %for.end429
                                        #   in Loop: Header=BB87_102 Depth=1
	jmp	.LBB87_111
.LBB87_111:                             # %for.inc430
                                        #   in Loop: Header=BB87_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_102
.LBB87_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB87_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB87_113 Depth=1
	movl	$0, -4(%rbp)
.LBB87_115:                             # %for.cond436
                                        #   Parent Loop BB87_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB87_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB87_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB87_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_119
.LBB87_118:                             # %if.else454
                                        #   in Loop: Header=BB87_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_119:                             # %if.end468
                                        #   in Loop: Header=BB87_115 Depth=2
	jmp	.LBB87_120
.LBB87_120:                             # %for.inc469
                                        #   in Loop: Header=BB87_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_115
.LBB87_121:                             # %for.end471
                                        #   in Loop: Header=BB87_113 Depth=1
	jmp	.LBB87_122
.LBB87_122:                             # %for.inc472
                                        #   in Loop: Header=BB87_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_113
.LBB87_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB87_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB87_124 Depth=1
	movl	$0, -4(%rbp)
.LBB87_126:                             # %for.cond478
                                        #   Parent Loop BB87_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB87_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB87_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB87_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_130
.LBB87_129:                             # %if.else496
                                        #   in Loop: Header=BB87_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_130:                             # %if.end510
                                        #   in Loop: Header=BB87_126 Depth=2
	jmp	.LBB87_131
.LBB87_131:                             # %for.inc511
                                        #   in Loop: Header=BB87_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_126
.LBB87_132:                             # %for.end513
                                        #   in Loop: Header=BB87_124 Depth=1
	jmp	.LBB87_133
.LBB87_133:                             # %for.inc514
                                        #   in Loop: Header=BB87_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_124
.LBB87_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB87_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	$0, -4(%rbp)
.LBB87_137:                             # %for.cond520
                                        #   Parent Loop BB87_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB87_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB87_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB87_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_141
.LBB87_140:                             # %if.else538
                                        #   in Loop: Header=BB87_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_141:                             # %if.end552
                                        #   in Loop: Header=BB87_137 Depth=2
	jmp	.LBB87_142
.LBB87_142:                             # %for.inc553
                                        #   in Loop: Header=BB87_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_137
.LBB87_143:                             # %for.end555
                                        #   in Loop: Header=BB87_135 Depth=1
	jmp	.LBB87_144
.LBB87_144:                             # %for.inc556
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_135
.LBB87_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB87_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB87_146 Depth=1
	movl	$0, -4(%rbp)
.LBB87_148:                             # %for.cond562
                                        #   Parent Loop BB87_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB87_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB87_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB87_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_152
.LBB87_151:                             # %if.else580
                                        #   in Loop: Header=BB87_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_152:                             # %if.end594
                                        #   in Loop: Header=BB87_148 Depth=2
	jmp	.LBB87_153
.LBB87_153:                             # %for.inc595
                                        #   in Loop: Header=BB87_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_148
.LBB87_154:                             # %for.end597
                                        #   in Loop: Header=BB87_146 Depth=1
	jmp	.LBB87_155
.LBB87_155:                             # %for.inc598
                                        #   in Loop: Header=BB87_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_146
.LBB87_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB87_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB87_157 Depth=1
	movl	$0, -4(%rbp)
.LBB87_159:                             # %for.cond604
                                        #   Parent Loop BB87_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB87_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB87_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB87_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_163
.LBB87_162:                             # %if.else622
                                        #   in Loop: Header=BB87_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_163:                             # %if.end636
                                        #   in Loop: Header=BB87_159 Depth=2
	jmp	.LBB87_164
.LBB87_164:                             # %for.inc637
                                        #   in Loop: Header=BB87_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_159
.LBB87_165:                             # %for.end639
                                        #   in Loop: Header=BB87_157 Depth=1
	jmp	.LBB87_166
.LBB87_166:                             # %for.inc640
                                        #   in Loop: Header=BB87_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_157
.LBB87_167:                             # %for.end642
	cmpl	$1380639238, -28(%rbp)  # imm = 0x524AE206
	jne	.LBB87_169
.LBB87_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_168
.Lfunc_end87:
	.size	init_contexts.80, .Lfunc_end87-init_contexts.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.81
.LCPI88_0:
	.quad	4611686018427387904     # double 2
.LCPI88_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.81
	.p2align	4, 0x90
	.type	create_context_memory.81,@function
create_context_memory.81:               # @create_context_memory.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$753767203, -20(%rbp)   # imm = 0x2CED9323
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB88_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB88_3
.LBB88_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB88_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB88_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB88_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB88_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB88_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB88_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_11:                              # %if.end10
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB88_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_13:                              # %if.end16
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$0, -8(%rbp)
.LBB88_14:                              # %for.cond17
                                        #   Parent Loop BB88_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB88_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_17:                              # %if.end28
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB88_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_19:                              # %if.end39
                                        #   in Loop: Header=BB88_14 Depth=2
	jmp	.LBB88_20
.LBB88_20:                              # %for.inc
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_14
.LBB88_21:                              # %for.end
                                        #   in Loop: Header=BB88_8 Depth=1
	jmp	.LBB88_22
.LBB88_22:                              # %for.inc40
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_8
.LBB88_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB88_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_26 Depth 2
                                        #       Child Loop BB88_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB88_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB88_24 Depth=1
	movl	$0, -8(%rbp)
.LBB88_26:                              # %for.cond47
                                        #   Parent Loop BB88_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB88_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB88_26 Depth=2
	movl	$0, -12(%rbp)
.LBB88_28:                              # %for.cond51
                                        #   Parent Loop BB88_24 Depth=1
                                        #     Parent Loop BB88_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB88_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB88_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB88_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_28
.LBB88_31:                              # %for.end63
                                        #   in Loop: Header=BB88_26 Depth=2
	jmp	.LBB88_32
.LBB88_32:                              # %for.inc64
                                        #   in Loop: Header=BB88_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_26
.LBB88_33:                              # %for.end66
                                        #   in Loop: Header=BB88_24 Depth=1
	jmp	.LBB88_34
.LBB88_34:                              # %for.inc67
                                        #   in Loop: Header=BB88_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_24
.LBB88_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB88_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB88_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB88_36 Depth=1
	vmovsd	.LCPI88_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB88_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_36
.LBB88_39:                              # %for.end98
	cmpl	$753767203, -20(%rbp)   # imm = 0x2CED9323
	jne	.LBB88_41
.LBB88_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_40
.Lfunc_end88:
	.size	create_context_memory.81, .Lfunc_end88-create_context_memory.81
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.82
.LCPI89_0:
	.quad	4611686018427387904     # double 2
.LCPI89_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.82
	.p2align	4, 0x90
	.type	create_context_memory.82,@function
create_context_memory.82:               # @create_context_memory.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$428331344, -20(%rbp)   # imm = 0x1987D150
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB89_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB89_3
.LBB89_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB89_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB89_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB89_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB89_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB89_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_11:                              # %if.end10
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_13:                              # %if.end16
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$0, -8(%rbp)
.LBB89_14:                              # %for.cond17
                                        #   Parent Loop BB89_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_17:                              # %if.end28
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_19:                              # %if.end39
                                        #   in Loop: Header=BB89_14 Depth=2
	jmp	.LBB89_20
.LBB89_20:                              # %for.inc
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_14
.LBB89_21:                              # %for.end
                                        #   in Loop: Header=BB89_8 Depth=1
	jmp	.LBB89_22
.LBB89_22:                              # %for.inc40
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_8
.LBB89_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB89_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_26 Depth 2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB89_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	$0, -8(%rbp)
.LBB89_26:                              # %for.cond47
                                        #   Parent Loop BB89_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB89_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	$0, -12(%rbp)
.LBB89_28:                              # %for.cond51
                                        #   Parent Loop BB89_24 Depth=1
                                        #     Parent Loop BB89_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB89_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB89_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB89_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_28
.LBB89_31:                              # %for.end63
                                        #   in Loop: Header=BB89_26 Depth=2
	jmp	.LBB89_32
.LBB89_32:                              # %for.inc64
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_26
.LBB89_33:                              # %for.end66
                                        #   in Loop: Header=BB89_24 Depth=1
	jmp	.LBB89_34
.LBB89_34:                              # %for.inc67
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_24
.LBB89_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB89_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB89_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB89_36 Depth=1
	vmovsd	.LCPI89_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB89_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_36
.LBB89_39:                              # %for.end98
	cmpl	$428331344, -20(%rbp)   # imm = 0x1987D150
	jne	.LBB89_41
.LBB89_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_40
.Lfunc_end89:
	.size	create_context_memory.82, .Lfunc_end89-create_context_memory.82
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.83
.LCPI90_0:
	.quad	4611686018427387904     # double 2
.LCPI90_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.83
	.p2align	4, 0x90
	.type	create_context_memory.83,@function
create_context_memory.83:               # @create_context_memory.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$548992367, -20(%rbp)   # imm = 0x20B8F56F
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB90_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB90_3
.LBB90_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB90_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB90_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB90_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB90_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB90_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB90_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_11:                              # %if.end10
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB90_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_13:                              # %if.end16
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$0, -8(%rbp)
.LBB90_14:                              # %for.cond17
                                        #   Parent Loop BB90_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB90_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB90_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_17:                              # %if.end28
                                        #   in Loop: Header=BB90_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB90_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_19:                              # %if.end39
                                        #   in Loop: Header=BB90_14 Depth=2
	jmp	.LBB90_20
.LBB90_20:                              # %for.inc
                                        #   in Loop: Header=BB90_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_14
.LBB90_21:                              # %for.end
                                        #   in Loop: Header=BB90_8 Depth=1
	jmp	.LBB90_22
.LBB90_22:                              # %for.inc40
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_8
.LBB90_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB90_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_26 Depth 2
                                        #       Child Loop BB90_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB90_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	$0, -8(%rbp)
.LBB90_26:                              # %for.cond47
                                        #   Parent Loop BB90_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB90_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	$0, -12(%rbp)
.LBB90_28:                              # %for.cond51
                                        #   Parent Loop BB90_24 Depth=1
                                        #     Parent Loop BB90_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB90_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB90_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB90_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_28
.LBB90_31:                              # %for.end63
                                        #   in Loop: Header=BB90_26 Depth=2
	jmp	.LBB90_32
.LBB90_32:                              # %for.inc64
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_26
.LBB90_33:                              # %for.end66
                                        #   in Loop: Header=BB90_24 Depth=1
	jmp	.LBB90_34
.LBB90_34:                              # %for.inc67
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_24
.LBB90_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB90_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB90_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB90_36 Depth=1
	vmovsd	.LCPI90_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB90_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_36
.LBB90_39:                              # %for.end98
	cmpl	$548992367, -20(%rbp)   # imm = 0x20B8F56F
	jne	.LBB90_41
.LBB90_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_40
.Lfunc_end90:
	.size	create_context_memory.83, .Lfunc_end90-create_context_memory.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.84
.LCPI91_0:
	.quad	4611686018427387904     # double 2
.LCPI91_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.84
	.p2align	4, 0x90
	.type	create_context_memory.84,@function
create_context_memory.84:               # @create_context_memory.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$738557718, -20(%rbp)   # imm = 0x2C057F16
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB91_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB91_3
.LBB91_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB91_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB91_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB91_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB91_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB91_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_11:                              # %if.end10
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_13:                              # %if.end16
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$0, -8(%rbp)
.LBB91_14:                              # %for.cond17
                                        #   Parent Loop BB91_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB91_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_17:                              # %if.end28
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_19:                              # %if.end39
                                        #   in Loop: Header=BB91_14 Depth=2
	jmp	.LBB91_20
.LBB91_20:                              # %for.inc
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_14
.LBB91_21:                              # %for.end
                                        #   in Loop: Header=BB91_8 Depth=1
	jmp	.LBB91_22
.LBB91_22:                              # %for.inc40
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_8
.LBB91_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB91_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_26 Depth 2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB91_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	$0, -8(%rbp)
.LBB91_26:                              # %for.cond47
                                        #   Parent Loop BB91_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB91_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	$0, -12(%rbp)
.LBB91_28:                              # %for.cond51
                                        #   Parent Loop BB91_24 Depth=1
                                        #     Parent Loop BB91_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB91_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB91_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB91_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_28
.LBB91_31:                              # %for.end63
                                        #   in Loop: Header=BB91_26 Depth=2
	jmp	.LBB91_32
.LBB91_32:                              # %for.inc64
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_26
.LBB91_33:                              # %for.end66
                                        #   in Loop: Header=BB91_24 Depth=1
	jmp	.LBB91_34
.LBB91_34:                              # %for.inc67
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_24
.LBB91_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB91_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB91_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB91_36 Depth=1
	vmovsd	.LCPI91_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB91_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_36
.LBB91_39:                              # %for.end98
	cmpl	$738557718, -20(%rbp)   # imm = 0x2C057F16
	jne	.LBB91_41
.LBB91_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_40
.Lfunc_end91:
	.size	create_context_memory.84, .Lfunc_end91-create_context_memory.84
	.cfi_endproc
                                        # -- End function
	.type	num_mb_per_slice,@object # @num_mb_per_slice
	.comm	num_mb_per_slice,4,4
	.type	number_of_slices,@object # @number_of_slices
	.comm	number_of_slices,4,4
	.type	initialized,@object     # @initialized
	.comm	initialized,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"create_context_memory: initialized"
	.size	.L.str, 35

	.type	model_number,@object    # @model_number
	.comm	model_number,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"create_context_memory: model_number"
	.size	.L.str.1, 36

	.type	probability,@object     # @probability
	.data
	.globl	probability
	.p2align	4
probability:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4602678819172646912     # double 0.5
	.quad	4602221415580092655     # double 0.474609
	.quad	4601787232547217120     # double 0.45050699999999999
	.quad	4601375099138117191     # double 0.42762899999999998
	.quad	4600983880445686771     # double 0.405912
	.quad	4600612549649210819     # double 0.385299
	.quad	4600260061913575785     # double 0.365732
	.quad	4599925480490059176     # double 0.347159
	.quad	4599607904658735518     # double 0.32952999999999999
	.quad	4599306433699679337     # double 0.31279499999999999
	.quad	4599020292993754725     # double 0.29691099999999998
	.quad	4598748671893028756     # double 0.281833
	.quad	4598490831807162540     # double 0.26751999999999998
	.quad	4598246106203411228     # double 0.25393500000000002
	.quad	4597852365495189480     # double 0.241039
	.quad	4597411373019677361     # double 0.228799
	.quad	4596992754427114019     # double 0.21718000000000001
	.quad	4596595392824791865     # double 0.206151
	.quad	4596218207348800331     # double 0.19568199999999999
	.quad	4595860153164025867     # double 0.18574399999999999
	.quad	4595520329550542999     # double 0.176312
	.quad	4595197727702035196     # double 0.16735800000000001
	.quad	4594891518956171021     # double 0.158859
	.quad	4594600874650619039     # double 0.15079200000000001
	.quad	4594324966123047813     # double 0.14313400000000001
	.quad	4594063108826313982     # double 0.13586599999999999
	.quad	4593814510126883131     # double 0.128966
	.quad	4593485495152505952     # double 0.122417
	.quad	4593037513090372154     # double 0.1162
	.quad	4592612301227954341     # double 0.11029899999999999
	.quad	4592208706643747907     # double 0.104698
	.quad	4591825576416248244     # double 0.099380999999999997
	.quad	4591461901739138822     # double 0.094334000000000001
	.quad	4591116673806103109     # double 0.089542999999999998
	.quad	4590789027926012651     # double 0.084996000000000002
	.quad	4590478027350144954     # double 0.080680000000000001
	.quad	4590182807387371563     # double 0.076582999999999998
	.quad	4589902575404158061     # double 0.072693999999999995
	.quad	4589636538766970031     # double 0.069001999999999994
	.quad	4589384048957461132     # double 0.065498000000000001
	.quad	4589120750508846543     # double 0.062171999999999998
	.quad	4588665634744902990     # double 0.059013999999999997
	.quad	4588233865641427726     # double 0.056017999999999998
	.quad	4587823857931351916     # double 0.053172999999999998
	.quad	4587434746923547105     # double 0.050472999999999997
	.quad	4587065235581320611     # double 0.047909
	.quad	4586714603328732054     # double 0.045476000000000003
	.quad	4586381841359464902     # double 0.043166999999999997
	.quad	4586065940867202626     # double 0.040974999999999998
	.quad	4585766037160816770     # double 0.038893999999999998
	.quad	4585481409664366955     # double 0.036919
	.quad	4585211193686724725     # double 0.035043999999999999
	.quad	4584954668651949702     # double 0.033264000000000002
	.quad	4584711258099289581     # double 0.031574999999999999
	.quad	4584296062242443040     # double 0.029971999999999999
	.quad	4583857375609940135     # double 0.02845
	.quad	4583440882716400912     # double 0.027005000000000001
	.quad	4583045430640320763     # double 0.025633
	.quad	4582670442920947386     # double 0.024331999999999999
	.quad	4582314190176023870     # double 0.023095999999999998
	.quad	4581976095944797913     # double 0.021923000000000002
	.quad	4581655295536141057     # double 0.020809999999999999
	.quad	4581350636028548698     # double 0.019753
	.quad	4581061540961268531     # double 0.018749999999999999
	.size	probability, 1024

	.type	entropy,@object         # @entropy
	.comm	entropy,1024,16
	.type	INIT_MB_TYPE_I,@object  # @INIT_MB_TYPE_I
	.section	.rodata,"a",@progbits
	.p2align	4
INIT_MB_TYPE_I:
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_I, 264

	.type	INIT_MB_TYPE_P,@object  # @INIT_MB_TYPE_P
	.p2align	4
INIT_MB_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	23                      # 0x17
	.long	33                      # 0x21
	.long	23                      # 0x17
	.long	2                       # 0x2
	.long	21                      # 0x15
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	4294967259              # 0xffffffdb
	.long	118                     # 0x76
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	65                      # 0x41
	.long	1                       # 0x1
	.long	62                      # 0x3e
	.long	26                      # 0x1a
	.long	67                      # 0x43
	.long	16                      # 0x10
	.long	90                      # 0x5a
	.long	9                       # 0x9
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	4294967276              # 0xffffffec
	.long	104                     # 0x68
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	18                      # 0x12
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	43                      # 0x2b
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	41                      # 0x29
	.long	4294967267              # 0xffffffe3
	.long	118                     # 0x76
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	79                      # 0x4f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	57                      # 0x39
	.long	2                       # 0x2
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	26                      # 0x1a
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967251              # 0xffffffd3
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	101                     # 0x65
	.long	4294967292              # 0xfffffffc
	.long	76                      # 0x4c
	.long	26                      # 0x1a
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	29                      # 0x1d
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	51                      # 0x33
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967269              # 0xffffffe5
	.long	99                      # 0x63
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	4294967292              # 0xfffffffc
	.long	85                      # 0x55
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	37                      # 0x25
	.long	42                      # 0x2a
	.long	12                      # 0xc
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967264              # 0xffffffe0
	.long	127                     # 0x7f
	.long	4294967274              # 0xffffffea
	.long	117                     # 0x75
	.long	4294967294              # 0xfffffffe
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_P, 792

	.type	INIT_B8_TYPE_I,@object  # @INIT_B8_TYPE_I
	.p2align	4
INIT_B8_TYPE_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_I, 144

	.type	INIT_B8_TYPE_P,@object  # @INIT_B8_TYPE_P
	.p2align	4
INIT_B8_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	73                      # 0x49
	.long	17                      # 0x11
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	86                      # 0x56
	.long	4294967279              # 0xffffffef
	.long	95                      # 0x5f
	.long	4294967290              # 0xfffffffa
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	10                      # 0xa
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	8                       # 0x8
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	73                      # 0x49
	.long	14                      # 0xe
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967282              # 0xfffffff2
	.long	88                      # 0x58
	.long	4294967290              # 0xfffffffa
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_P, 432

	.type	INIT_MV_RES_I,@object   # @INIT_MV_RES_I
	.p2align	4
INIT_MV_RES_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_I, 160

	.type	INIT_MV_RES_P,@object   # @INIT_MV_RES_P
	.p2align	4
INIT_MV_RES_P:
	.long	4294967293              # 0xfffffffd
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	2                       # 0x2
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	4                       # 0x4
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967289              # 0xfffffff9
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967281              # 0xfffffff1
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	20                      # 0x14
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	84                      # 0x54
	.long	6                       # 0x6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	90                      # 0x5a
	.long	4294967295              # 0xffffffff
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_P, 480

	.type	INIT_REF_NO_I,@object   # @INIT_REF_NO_I
	.p2align	4
INIT_REF_NO_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_I, 96

	.type	INIT_REF_NO_P,@object   # @INIT_REF_NO_P
	.p2align	4
INIT_REF_NO_P:
	.long	4294967289              # 0xfffffff9
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	80                      # 0x50
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	77                      # 0x4d
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	72                      # 0x48
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	50                      # 0x32
	.long	1                       # 0x1
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_P, 288

	.type	INIT_DELTA_QP_I,@object # @INIT_DELTA_QP_I
	.p2align	4
INIT_DELTA_QP_I:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_I, 32

	.type	INIT_DELTA_QP_P,@object # @INIT_DELTA_QP_P
	.p2align	4
INIT_DELTA_QP_P:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_P, 96

	.type	INIT_MB_AFF_I,@object   # @INIT_MB_AFF_I
	.p2align	4
INIT_MB_AFF_I:
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_I, 32

	.type	INIT_MB_AFF_P,@object   # @INIT_MB_AFF_P
	.p2align	4
INIT_MB_AFF_P:
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	4294967293              # 0xfffffffd
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_P, 96

	.type	INIT_TRANSFORM_SIZE_I,@object # @INIT_TRANSFORM_SIZE_I
	.p2align	4
INIT_TRANSFORM_SIZE_I:
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	31                      # 0x1f
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	50                      # 0x32
	.size	INIT_TRANSFORM_SIZE_I, 24

	.type	INIT_TRANSFORM_SIZE_P,@object # @INIT_TRANSFORM_SIZE_P
	.p2align	4
INIT_TRANSFORM_SIZE_P:
	.long	12                      # 0xc
	.long	40                      # 0x28
	.long	11                      # 0xb
	.long	51                      # 0x33
	.long	14                      # 0xe
	.long	59                      # 0x3b
	.long	25                      # 0x19
	.long	32                      # 0x20
	.long	21                      # 0x15
	.long	49                      # 0x31
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	50                      # 0x32
	.long	17                      # 0x11
	.long	61                      # 0x3d
	.size	INIT_TRANSFORM_SIZE_P, 72

	.type	INIT_IPR_I,@object      # @INIT_IPR_I
	.p2align	4
INIT_IPR_I:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_I, 16

	.type	INIT_IPR_P,@object      # @INIT_IPR_P
	.p2align	4
INIT_IPR_P:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_P, 48

	.type	INIT_CIPR_I,@object     # @INIT_CIPR_I
	.p2align	4
INIT_CIPR_I:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_I, 32

	.type	INIT_CIPR_P,@object     # @INIT_CIPR_P
	.p2align	4
INIT_CIPR_P:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_P, 96

	.type	INIT_CBP_I,@object      # @INIT_CBP_I
	.p2align	4
INIT_CBP_I:
	.long	4294967279              # 0xffffffef
	.long	127                     # 0x7f
	.long	4294967283              # 0xfffffff3
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	95                      # 0x5f
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.size	INIT_CBP_I, 96

	.type	INIT_CBP_P,@object      # @INIT_CBP_P
	.p2align	4
INIT_CBP_P:
	.long	4294967269              # 0xffffffe5
	.long	126                     # 0x7e
	.long	4294967268              # 0xffffffe4
	.long	98                      # 0x62
	.long	4294967271              # 0xffffffe7
	.long	101                     # 0x65
	.long	4294967273              # 0xffffffe9
	.long	67                      # 0x43
	.long	4294967268              # 0xffffffe4
	.long	82                      # 0x52
	.long	4294967276              # 0xffffffec
	.long	94                      # 0x5e
	.long	4294967280              # 0xfffffff0
	.long	83                      # 0x53
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	91                      # 0x5b
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967283              # 0xfffffff3
	.long	93                      # 0x5d
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967257              # 0xffffffd9
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	91                      # 0x5b
	.long	4294967279              # 0xffffffef
	.long	96                      # 0x60
	.long	4294967270              # 0xffffffe6
	.long	81                      # 0x51
	.long	4294967261              # 0xffffffdd
	.long	98                      # 0x62
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	4294967273              # 0xffffffe9
	.long	97                      # 0x61
	.long	4294967269              # 0xffffffe5
	.long	119                     # 0x77
	.long	4294967272              # 0xffffffe8
	.long	99                      # 0x63
	.long	4294967275              # 0xffffffeb
	.long	110                     # 0x6e
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967271              # 0xffffffe7
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	89                      # 0x59
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967282              # 0xfffffff2
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.size	INIT_CBP_P, 288

	.type	INIT_BCBP_I,@object     # @INIT_BCBP_I
	.p2align	4
INIT_BCBP_I:
	.long	4294967279              # 0xffffffef
	.long	123                     # 0x7b
	.long	4294967284              # 0xfffffff4
	.long	115                     # 0x73
	.long	4294967280              # 0xfffffff0
	.long	122                     # 0x7a
	.long	4294967285              # 0xfffffff5
	.long	115                     # 0x73
	.long	4294967284              # 0xfffffff4
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	68                      # 0x44
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967283              # 0xfffffff3
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	93                      # 0x5d
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	91                      # 0x5b
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	4294967292              # 0xfffffffc
	.long	56                      # 0x38
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	76                      # 0x4c
	.long	4294967274              # 0xffffffea
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_I, 256

	.type	INIT_BCBP_P,@object     # @INIT_BCBP_P
	.p2align	4
INIT_BCBP_P:
	.long	4294967289              # 0xfffffff9
	.long	92                      # 0x5c
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	96                      # 0x60
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	65                      # 0x41
	.long	4294967295              # 0xffffffff
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	126                     # 0x7e
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967288              # 0xfffffff8
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	94                      # 0x5e
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967261              # 0xffffffdd
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	56                      # 0x38
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	4294967293              # 0xfffffffd
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	80                      # 0x50
	.long	5                       # 0x5
	.long	76                      # 0x4c
	.long	2                       # 0x2
	.long	84                      # 0x54
	.long	5                       # 0x5
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	4                       # 0x4
	.long	61                      # 0x3d
	.long	4294967282              # 0xfffffff2
	.long	83                      # 0x53
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	79                      # 0x4f
	.long	4294967285              # 0xfffffff5
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	91                      # 0x5b
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967294              # 0xfffffffe
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	4294967290              # 0xfffffffa
	.long	56                      # 0x38
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	4294967288              # 0xfffffff8
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_P, 768

	.type	INIT_MAP_I,@object      # @INIT_MAP_I
	.p2align	4
INIT_MAP_I:
	.long	4294967289              # 0xfffffff9
	.long	93                      # 0x5d
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	4294967292              # 0xfffffffc
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	68                      # 0x44
	.long	4294967284              # 0xfffffff4
	.long	84                      # 0x54
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	65                      # 0x41
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	4294967294              # 0xfffffffe
	.long	66                      # 0x42
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967294              # 0xfffffffe
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	7                       # 0x7
	.long	52                      # 0x34
	.long	10                      # 0xa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	28                      # 0x1c
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	33                      # 0x21
	.long	14                      # 0xe
	.long	62                      # 0x3e
	.long	4294967279              # 0xffffffef
	.long	120                     # 0x78
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967278              # 0xffffffee
	.long	114                     # 0x72
	.long	4294967285              # 0xfffffff5
	.long	85                      # 0x55
	.long	4294967281              # 0xfffffff1
	.long	92                      # 0x5c
	.long	4294967282              # 0xfffffff2
	.long	89                      # 0x59
	.long	4294967270              # 0xffffffe6
	.long	71                      # 0x47
	.long	4294967281              # 0xfffffff1
	.long	81                      # 0x51
	.long	4294967282              # 0xfffffff2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967282              # 0xfffffff2
	.long	70                      # 0x46
	.long	4294967272              # 0xffffffe8
	.long	56                      # 0x38
	.long	4294967273              # 0xffffffe9
	.long	68                      # 0x44
	.long	4294967272              # 0xffffffe8
	.long	50                      # 0x32
	.long	4294967285              # 0xfffffff5
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	4294967283              # 0xfffffff3
	.long	101                     # 0x65
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967284              # 0xfffffff4
	.long	94                      # 0x5e
	.long	4294967286              # 0xfffffff6
	.long	88                      # 0x58
	.long	4294967280              # 0xfffffff0
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967289              # 0xfffffff9
	.long	83                      # 0x53
	.long	4294967283              # 0xfffffff3
	.long	87                      # 0x57
	.long	4294967277              # 0xffffffed
	.long	94                      # 0x5e
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	18                      # 0x12
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	102                     # 0x66
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	4294967283              # 0xfffffff3
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	21                      # 0x15
	.long	37                      # 0x25
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	9                       # 0x9
	.long	57                      # 0x39
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	12                      # 0xc
	.long	72                      # 0x48
	.size	INIT_MAP_I, 960

	.type	INIT_MAP_P,@object      # @INIT_MAP_P
	.p2align	4
INIT_MAP_P:
	.long	4294967294              # 0xfffffffe
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967295              # 0xffffffff
	.long	75                      # 0x4b
	.long	4294967289              # 0xfffffff9
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	6                       # 0x6
	.long	42                      # 0x2a
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	13                      # 0xd
	.long	29                      # 0x1d
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4294967286              # 0xfffffff6
	.long	93                      # 0x5d
	.long	4294967289              # 0xfffffff9
	.long	73                      # 0x49
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	13                      # 0xd
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	4294967289              # 0xfffffff9
	.long	100                     # 0x64
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967291              # 0xfffffffb
	.long	69                      # 0x45
	.long	4294967287              # 0xfffffff7
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967286              # 0xfffffff6
	.long	68                      # 0x44
	.long	4294967277              # 0xffffffed
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	70                      # 0x46
	.long	4294967281              # 0xfffffff1
	.long	67                      # 0x43
	.long	4294967276              # 0xffffffec
	.long	62                      # 0x3e
	.long	4294967277              # 0xffffffed
	.long	70                      # 0x46
	.long	4294967280              # 0xfffffff0
	.long	66                      # 0x42
	.long	4294967274              # 0xffffffea
	.long	65                      # 0x41
	.long	4294967276              # 0xffffffec
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	53                      # 0x35
	.long	2                       # 0x2
	.long	53                      # 0x35
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	4294967294              # 0xfffffffe
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	4294967283              # 0xfffffff3
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	69                      # 0x45
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	14                      # 0xe
	.long	39                      # 0x27
	.long	4                       # 0x4
	.long	51                      # 0x33
	.long	13                      # 0xd
	.long	68                      # 0x44
	.long	3                       # 0x3
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	11                      # 0xb
	.long	48                      # 0x30
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	43                      # 0x2b
	.long	4294967295              # 0xffffffff
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967287              # 0xfffffff7
	.long	89                      # 0x59
	.long	4294967282              # 0xfffffff2
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967284              # 0xfffffff4
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	110                     # 0x6e
	.long	4294967272              # 0xffffffe8
	.long	105                     # 0x69
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967279              # 0xffffffef
	.long	99                      # 0x63
	.long	4294967218              # 0xffffffb2
	.long	127                     # 0x7f
	.long	4294967226              # 0xffffffba
	.long	127                     # 0x7f
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	4294967295              # 0xffffffff
	.long	55                      # 0x37
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	4294967262              # 0xffffffde
	.long	119                     # 0x77
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	32                      # 0x20
	.long	20                      # 0x14
	.long	30                      # 0x1e
	.long	22                      # 0x16
	.long	4294967252              # 0xffffffd4
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	60                      # 0x3c
	.long	4294967293              # 0xfffffffd
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	67                      # 0x43
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967282              # 0xfffffff2
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	65                      # 0x41
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967285              # 0xfffffff5
	.long	70                      # 0x46
	.long	18                      # 0x12
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	9                       # 0x9
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	43                      # 0x2b
	.long	9                       # 0x9
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	46                      # 0x2e
	.long	19                      # 0x13
	.long	38                      # 0x26
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	15                      # 0xf
	.long	38                      # 0x26
	.long	12                      # 0xc
	.long	42                      # 0x2a
	.long	9                       # 0x9
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	4294967292              # 0xfffffffc
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	88                      # 0x58
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	5                       # 0x5
	.long	66                      # 0x42
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	44                      # 0x2c
	.long	4294967295              # 0xffffffff
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	51                      # 0x33
	.long	4294967292              # 0xfffffffc
	.long	47                      # 0x2f
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967293              # 0xfffffffd
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	8                       # 0x8
	.long	76                      # 0x4c
	.long	4294967287              # 0xfffffff7
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	83                      # 0x53
	.long	9                       # 0x9
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	90                      # 0x5a
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	80                      # 0x50
	.long	4294967275              # 0xffffffeb
	.long	83                      # 0x53
	.long	4294967275              # 0xffffffeb
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	31                      # 0x1f
	.long	4294967271              # 0xffffffe7
	.long	64                      # 0x40
	.long	4294967267              # 0xffffffe3
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	75                      # 0x4b
	.long	17                      # 0x11
	.long	63                      # 0x3f
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	27                      # 0x1b
	.long	13                      # 0xd
	.long	91                      # 0x5b
	.long	3                       # 0x3
	.long	65                      # 0x41
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	66                      # 0x42
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	4294967276              # 0xffffffec
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	4294967293              # 0xfffffffd
	.long	23                      # 0x17
	.long	4294967275              # 0xffffffeb
	.long	74                      # 0x4a
	.long	16                      # 0x10
	.long	66                      # 0x42
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	17                      # 0x11
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	4294967278              # 0xffffffee
	.long	50                      # 0x32
	.long	4294967262              # 0xffffffde
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.size	INIT_MAP_P, 2880

	.type	INIT_LAST_I,@object     # @INIT_LAST_I
	.p2align	4
INIT_LAST_I:
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	8                       # 0x8
	.long	25                      # 0x19
	.long	13                      # 0xd
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	19                      # 0x13
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	6                       # 0x6
	.long	29                      # 0x1d
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	38                      # 0x26
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	42                      # 0x2a
	.long	13                      # 0xd
	.long	44                      # 0x2c
	.long	16                      # 0x10
	.long	45                      # 0x2d
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	49                      # 0x31
	.long	30                      # 0x1e
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	10                      # 0xa
	.long	55                      # 0x37
	.long	17                      # 0x11
	.long	51                      # 0x33
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	23                      # 0x17
	.long	4294967283              # 0xfffffff3
	.long	26                      # 0x1a
	.long	4294967283              # 0xfffffff3
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	49                      # 0x31
	.long	4294967282              # 0xfffffff2
	.long	44                      # 0x2c
	.long	3                       # 0x3
	.long	45                      # 0x2d
	.long	6                       # 0x6
	.long	44                      # 0x2c
	.long	34                      # 0x22
	.long	33                      # 0x21
	.long	54                      # 0x36
	.long	19                      # 0x13
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	26                      # 0x1a
	.long	4294967277              # 0xffffffed
	.long	22                      # 0x16
	.long	4294967279              # 0xffffffef
	.long	26                      # 0x1a
	.long	4294967279              # 0xffffffef
	.long	30                      # 0x1e
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967276              # 0xffffffec
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	37                      # 0x25
	.long	4294967269              # 0xffffffe5
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	40                      # 0x28
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967279              # 0xffffffef
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	41                      # 0x29
	.long	17                      # 0x11
	.long	30                      # 0x1e
	.long	4294967290              # 0xfffffffa
	.long	27                      # 0x1b
	.long	3                       # 0x3
	.long	26                      # 0x1a
	.long	22                      # 0x16
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967280              # 0xfffffff0
	.long	35                      # 0x23
	.long	4294967292              # 0xfffffffc
	.long	38                      # 0x26
	.long	4294967288              # 0xfffffff8
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	37                      # 0x25
	.long	3                       # 0x3
	.long	38                      # 0x26
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	22                      # 0x16
	.long	14                      # 0xe
	.long	48                      # 0x30
	.long	27                      # 0x1b
	.long	37                      # 0x25
	.long	21                      # 0x15
	.long	60                      # 0x3c
	.long	12                      # 0xc
	.long	68                      # 0x44
	.long	2                       # 0x2
	.long	97                      # 0x61
	.size	INIT_LAST_I, 960

	.type	INIT_LAST_P,@object     # @INIT_LAST_P
	.p2align	4
INIT_LAST_P:
	.long	11                      # 0xb
	.long	28                      # 0x1c
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	2                       # 0x2
	.long	44                      # 0x2c
	.long	2                       # 0x2
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	2                       # 0x2
	.long	62                      # 0x3e
	.long	6                       # 0x6
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	51                      # 0x33
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	53                      # 0x35
	.long	6                       # 0x6
	.long	52                      # 0x34
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	14                      # 0xe
	.long	36                      # 0x24
	.long	8                       # 0x8
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	82                      # 0x52
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	4294967295              # 0xffffffff
	.long	84                      # 0x54
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	26                      # 0x1a
	.long	4294967287              # 0xfffffff7
	.long	33                      # 0x21
	.long	4294967287              # 0xfffffff7
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	41                      # 0x29
	.long	4294967294              # 0xfffffffe
	.long	45                      # 0x2d
	.long	3                       # 0x3
	.long	49                      # 0x31
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	25                      # 0x19
	.long	7                       # 0x7
	.long	30                      # 0x1e
	.long	4294967289              # 0xfffffff9
	.long	28                      # 0x1c
	.long	3                       # 0x3
	.long	28                      # 0x1c
	.long	4                       # 0x4
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	20                      # 0x14
	.long	28                      # 0x1c
	.long	34                      # 0x22
	.long	17                      # 0x11
	.long	70                      # 0x46
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	30                      # 0x1e
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	31                      # 0x1f
	.long	23                      # 0x17
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	43                      # 0x2b
	.long	20                      # 0x14
	.long	41                      # 0x29
	.long	11                      # 0xb
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	94                      # 0x5e
	.long	4294967294              # 0xfffffffe
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	108                     # 0x6c
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	10                      # 0xa
	.long	31                      # 0x1f
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	52                      # 0x34
	.long	4294967253              # 0xffffffd5
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	4294967274              # 0xffffffea
	.long	38                      # 0x26
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	4294967278              # 0xffffffee
	.long	32                      # 0x20
	.long	4294967284              # 0xfffffff4
	.long	102                     # 0x66
	.long	4294967202              # 0xffffffa2
	.zero	8
	.long	56                      # 0x38
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	4294967291              # 0xfffffffb
	.long	51                      # 0x33
	.long	4294967267              # 0xffffffe3
	.long	39                      # 0x27
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967262              # 0xffffffde
	.long	69                      # 0x45
	.long	4294967238              # 0xffffffc6
	.long	67                      # 0x43
	.long	4294967233              # 0xffffffc1
	.long	44                      # 0x2c
	.long	4294967291              # 0xfffffffb
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967267              # 0xffffffe3
	.long	32                      # 0x20
	.long	1                       # 0x1
	.zero	8
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	4294967266              # 0xffffffe2
	.long	36                      # 0x24
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967269              # 0xffffffe5
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	35                      # 0x23
	.long	4294967280              # 0xfffffff0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	32                      # 0x20
	.long	4294967288              # 0xfffffff8
	.long	37                      # 0x25
	.long	4294967290              # 0xfffffffa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	14                      # 0xe
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	35                      # 0x23
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	45                      # 0x2d
	.long	20                      # 0x14
	.long	42                      # 0x2a
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	66                      # 0x42
	.long	16                      # 0x10
	.long	56                      # 0x38
	.long	11                      # 0xb
	.long	73                      # 0x49
	.long	10                      # 0xa
	.long	67                      # 0x43
	.long	4294967286              # 0xfffffff6
	.long	116                     # 0x74
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	11                      # 0xb
	.long	29                      # 0x1d
	.long	8                       # 0x8
	.long	31                      # 0x1f
	.long	6                       # 0x6
	.long	37                      # 0x25
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	3                       # 0x3
	.long	40                      # 0x28
	.long	8                       # 0x8
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	43                      # 0x2b
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4                       # 0x4
	.long	47                      # 0x2f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	8                       # 0x8
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	48                      # 0x30
	.long	4                       # 0x4
	.long	56                      # 0x38
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	37                      # 0x25
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	19                      # 0x13
	.long	58                      # 0x3a
	.long	10                      # 0xa
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	8                       # 0x8
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	35                      # 0x23
	.long	4294967278              # 0xffffffee
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967293              # 0xfffffffd
	.long	24                      # 0x18
	.long	10                      # 0xa
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	52                      # 0x34
	.long	4294967252              # 0xffffffd4
	.long	39                      # 0x27
	.long	4294967272              # 0xffffffe8
	.long	19                      # 0x13
	.long	17                      # 0x11
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	73                      # 0x49
	.long	20                      # 0x14
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	25                      # 0x19
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	93                      # 0x5d
	.long	14                      # 0xe
	.long	56                      # 0x38
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	38                      # 0x26
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.size	INIT_LAST_P, 2880

	.type	INIT_ONE_I,@object      # @INIT_ONE_I
	.p2align	4
INIT_ONE_I:
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967291              # 0xfffffffb
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	54                      # 0x36
	.long	4294967294              # 0xfffffffe
	.long	62                      # 0x3e
	.long	4294967291              # 0xfffffffb
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	27                      # 0x1b
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	23                      # 0x17
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967281              # 0xfffffff1
	.long	55                      # 0x37
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	4294967290              # 0xfffffffa
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967276              # 0xffffffec
	.long	84                      # 0x54
	.long	4294967285              # 0xfffffff5
	.long	79                      # 0x4f
	.long	4294967290              # 0xfffffffa
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967288              # 0xfffffff8
	.long	78                      # 0x4e
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	48                      # 0x30
	.long	4294967294              # 0xfffffffe
	.long	53                      # 0x35
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_I, 320

	.type	INIT_ONE_P,@object      # @INIT_ONE_P
	.p2align	4
INIT_ONE_P:
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	77                      # 0x4d
	.long	3                       # 0x3
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	55                      # 0x37
	.long	4294967290              # 0xfffffffa
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967289              # 0xfffffff9
	.long	42                      # 0x2a
	.long	4294967288              # 0xfffffff8
	.long	45                      # 0x2d
	.long	4294967291              # 0xfffffffb
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	29                      # 0x1d
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	1                       # 0x1
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	5                       # 0x5
	.long	31                      # 0x1f
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967273              # 0xffffffe9
	.long	112                     # 0x70
	.long	4294967281              # 0xfffffff1
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967275              # 0xffffffeb
	.long	101                     # 0x65
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	4294967294              # 0xfffffffe
	.long	42                      # 0x2a
	.long	4294967294              # 0xfffffffe
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	44                      # 0x2c
	.long	4294967286              # 0xfffffff6
	.long	52                      # 0x34
	.long	4294967286              # 0xfffffff6
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	31                      # 0x1f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	3                       # 0x3
	.long	52                      # 0x34
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	10                      # 0xa
	.long	8                       # 0x8
	.long	17                      # 0x11
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	19                      # 0x13
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967272              # 0xffffffe8
	.long	115                     # 0x73
	.long	4294967274              # 0xffffffea
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967275              # 0xffffffeb
	.long	100                     # 0x64
	.long	4294967282              # 0xfffffff2
	.long	57                      # 0x39
	.long	4294967284              # 0xfffffff4
	.long	67                      # 0x43
	.long	4294967285              # 0xfffffff5
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	37                      # 0x25
	.long	4294967288              # 0xfffffff8
	.long	44                      # 0x2c
	.long	4294967285              # 0xfffffff5
	.long	49                      # 0x31
	.long	4294967286              # 0xfffffff6
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	82                      # 0x52
	.long	4294967288              # 0xfffffff8
	.long	48                      # 0x30
	.long	4294967288              # 0xfffffff8
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967274              # 0xffffffea
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	75                      # 0x4b
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967283              # 0xfffffff3
	.long	81                      # 0x51
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	4294967283              # 0xfffffff3
	.long	62                      # 0x3e
	.long	4294967290              # 0xfffffffa
	.long	58                      # 0x3a
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_P, 960

	.type	INIT_ABS_I,@object      # @INIT_ABS_I
	.p2align	4
INIT_ABS_I:
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	72                      # 0x48
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967280              # 0xfffffff0
	.long	64                      # 0x40
	.long	4294967288              # 0xfffffff8
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	77                      # 0x4d
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967279              # 0xffffffef
	.long	110                     # 0x6e
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	96                      # 0x60
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967277              # 0xffffffed
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967284              # 0xfffffff4
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967282              # 0xfffffff2
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_I, 320

	.type	INIT_ABS_P,@object      # @INIT_ABS_P
	.p2align	4
INIT_ABS_P:
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	82                      # 0x52
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967290              # 0xfffffffa
	.long	59                      # 0x3b
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967284              # 0xfffffff4
	.long	83                      # 0x53
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967266              # 0xffffffe2
	.long	119                     # 0x77
	.long	4294967284              # 0xfffffff4
	.long	56                      # 0x38
	.long	4294967290              # 0xfffffffa
	.long	60                      # 0x3c
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	79                      # 0x4f
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967262              # 0xffffffde
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	77                      # 0x4d
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967271              # 0xffffffe7
	.long	107                     # 0x6b
	.long	4294967271              # 0xffffffe7
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	122                     # 0x7a
	.long	4294967287              # 0xfffffff7
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967289              # 0xfffffff9
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	72                      # 0x48
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	4294967294              # 0xfffffffe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	37                      # 0x25
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967291              # 0xfffffffb
	.long	73                      # 0x49
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	89                      # 0x59
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967285              # 0xfffffff5
	.long	92                      # 0x5c
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	85                      # 0x55
	.long	4294967280              # 0xfffffff0
	.long	88                      # 0x58
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967281              # 0xfffffff1
	.long	98                      # 0x62
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	4294967284              # 0xfffffff4
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	63                      # 0x3f
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967290              # 0xfffffffa
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	75                      # 0x4b
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967278              # 0xffffffee
	.long	108                     # 0x6c
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	4294967283              # 0xfffffff3
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	76                      # 0x4c
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_P, 960

	.type	INIT_FLD_MAP_I,@object  # @INIT_FLD_MAP_I
	.p2align	4
INIT_FLD_MAP_I:
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967290              # 0xfffffffa
	.long	84                      # 0x54
	.long	4294967288              # 0xfffffff8
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967294              # 0xfffffffe
	.long	60                      # 0x3c
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	58                      # 0x3a
	.long	4294967287              # 0xfffffff7
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	40                      # 0x28
	.long	16                      # 0x10
	.long	27                      # 0x1b
	.long	12                      # 0xc
	.long	29                      # 0x1d
	.long	1                       # 0x1
	.long	44                      # 0x2c
	.long	20                      # 0x14
	.long	36                      # 0x24
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	48                      # 0x30
	.long	10                      # 0xa
	.long	62                      # 0x3e
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	106                     # 0x6a
	.long	4294967283              # 0xfffffff3
	.long	97                      # 0x61
	.long	4294967281              # 0xfffffff1
	.long	90                      # 0x5a
	.long	4294967284              # 0xfffffff4
	.long	90                      # 0x5a
	.long	4294967278              # 0xffffffee
	.long	88                      # 0x58
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967287              # 0xfffffff7
	.long	79                      # 0x4f
	.long	4294967282              # 0xfffffff2
	.long	86                      # 0x56
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	70                      # 0x46
	.long	4294967286              # 0xfffffff6
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967280              # 0xfffffff0
	.long	96                      # 0x60
	.long	4294967289              # 0xfffffff9
	.long	88                      # 0x58
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	4294967289              # 0xfffffff9
	.long	85                      # 0x55
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	88                      # 0x58
	.long	4                       # 0x4
	.long	66                      # 0x42
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	10                      # 0xa
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	76                      # 0x4c
	.long	4294967295              # 0xffffffff
	.long	83                      # 0x53
	.long	4294967289              # 0xfffffff9
	.long	99                      # 0x63
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	2                       # 0x2
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967282              # 0xfffffff2
	.long	73                      # 0x49
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	62                      # 0x3e
	.long	4294967295              # 0xffffffff
	.long	68                      # 0x44
	.long	4294967283              # 0xfffffff3
	.long	75                      # 0x4b
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	70                      # 0x46
	.size	INIT_FLD_MAP_I, 960

	.type	INIT_FLD_MAP_P,@object  # @INIT_FLD_MAP_P
	.p2align	4
INIT_FLD_MAP_P:
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967280              # 0xfffffff0
	.long	106                     # 0x6a
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967278              # 0xffffffee
	.long	110                     # 0x6e
	.long	4294967282              # 0xfffffff2
	.long	98                      # 0x62
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	106                     # 0x6a
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967273              # 0xffffffe9
	.long	108                     # 0x6c
	.long	4294967270              # 0xffffffe6
	.long	112                     # 0x70
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	4294967284              # 0xfffffff4
	.long	95                      # 0x5f
	.long	4294967291              # 0xfffffffb
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	4294967274              # 0xffffffea
	.long	94                      # 0x5e
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	4294967292              # 0xfffffffc
	.long	80                      # 0x50
	.long	4294967286              # 0xfffffff6
	.long	85                      # 0x55
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	7                       # 0x7
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	58                      # 0x3a
	.long	5                       # 0x5
	.long	61                      # 0x3d
	.long	12                      # 0xc
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	18                      # 0x12
	.long	49                      # 0x31
	.long	17                      # 0x11
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	7                       # 0x7
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	49                      # 0x31
	.long	8                       # 0x8
	.long	52                      # 0x34
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	6                       # 0x6
	.long	47                      # 0x2f
	.long	2                       # 0x2
	.long	55                      # 0x37
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	6                       # 0x6
	.long	50                      # 0x32
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	13                      # 0xd
	.long	49                      # 0x31
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	43                      # 0x2b
	.long	3                       # 0x3
	.long	53                      # 0x35
	.long	14                      # 0xe
	.long	34                      # 0x22
	.long	10                      # 0xa
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	44                      # 0x2c
	.long	7                       # 0x7
	.long	38                      # 0x26
	.long	13                      # 0xd
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	43                      # 0x2b
	.long	4294967275              # 0xffffffeb
	.long	126                     # 0x7e
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	4294967276              # 0xffffffec
	.long	110                     # 0x6e
	.long	4294967270              # 0xffffffe6
	.long	126                     # 0x7e
	.long	4294967271              # 0xffffffe7
	.long	124                     # 0x7c
	.long	4294967279              # 0xffffffef
	.long	105                     # 0x69
	.long	4294967269              # 0xffffffe5
	.long	121                     # 0x79
	.long	4294967269              # 0xffffffe5
	.long	117                     # 0x75
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967269              # 0xffffffe5
	.long	116                     # 0x74
	.long	4294967263              # 0xffffffdf
	.long	122                     # 0x7a
	.long	4294967286              # 0xfffffff6
	.long	95                      # 0x5f
	.long	4294967282              # 0xfffffff2
	.long	100                     # 0x64
	.long	4294967288              # 0xfffffff8
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	114                     # 0x72
	.long	4294967290              # 0xfffffffa
	.long	89                      # 0x59
	.long	4294967294              # 0xfffffffe
	.long	80                      # 0x50
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967288              # 0xfffffff8
	.long	81                      # 0x51
	.long	4294967295              # 0xffffffff
	.long	72                      # 0x48
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	9                       # 0x9
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	1                       # 0x1
	.long	69                      # 0x45
	.long	7                       # 0x7
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967284              # 0xfffffff4
	.long	72                      # 0x48
	.long	4294967282              # 0xfffffff2
	.long	68                      # 0x44
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	60                      # 0x3c
	.long	1                       # 0x1
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967280              # 0xfffffff0
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	61                      # 0x3d
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	65                      # 0x41
	.long	4294967293              # 0xfffffffd
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	9                       # 0x9
	.long	51                      # 0x33
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	37                      # 0x25
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	11                      # 0xb
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	2                       # 0x2
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	3                       # 0x3
	.long	50                      # 0x32
	.long	19                      # 0x13
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	66                      # 0x42
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	120                     # 0x78
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967277              # 0xffffffed
	.long	114                     # 0x72
	.long	4294967273              # 0xffffffe9
	.long	117                     # 0x75
	.long	4294967271              # 0xffffffe7
	.long	118                     # 0x76
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967272              # 0xffffffe8
	.long	113                     # 0x71
	.long	4294967268              # 0xffffffe4
	.long	118                     # 0x76
	.long	4294967265              # 0xffffffe1
	.long	120                     # 0x78
	.long	4294967259              # 0xffffffdb
	.long	124                     # 0x7c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	4294967281              # 0xfffffff1
	.long	102                     # 0x66
	.long	4294967286              # 0xfffffff6
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	92                      # 0x5c
	.long	17                      # 0x11
	.long	57                      # 0x39
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967284              # 0xfffffff4
	.long	91                      # 0x5b
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	4294967295              # 0xffffffff
	.long	73                      # 0x49
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	67                      # 0x43
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	54                      # 0x36
	.long	15                      # 0xf
	.long	44                      # 0x2c
	.long	5                       # 0x5
	.long	60                      # 0x3c
	.long	2                       # 0x2
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	86                      # 0x56
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	70                      # 0x46
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	74                      # 0x4a
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	54                      # 0x36
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967285              # 0xfffffff5
	.long	82                      # 0x52
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	25                      # 0x19
	.long	42                      # 0x2a
	.size	INIT_FLD_MAP_P, 2880

	.type	INIT_FLD_LAST_I,@object # @INIT_FLD_LAST_I
	.p2align	4
INIT_FLD_LAST_I:
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	19                      # 0x13
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	23                      # 0x17
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	26                      # 0x1a
	.long	14                      # 0xe
	.long	44                      # 0x2c
	.long	17                      # 0x11
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	17                      # 0x11
	.long	21                      # 0x15
	.long	21                      # 0x15
	.long	25                      # 0x19
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	19                      # 0x13
	.long	35                      # 0x23
	.long	14                      # 0xe
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967284              # 0xfffffff4
	.long	109                     # 0x6d
	.long	21                      # 0x15
	.long	4294967286              # 0xfffffff6
	.long	24                      # 0x18
	.long	4294967285              # 0xfffffff5
	.long	28                      # 0x1c
	.long	4294967288              # 0xfffffff8
	.long	28                      # 0x1c
	.long	4294967295              # 0xffffffff
	.long	29                      # 0x1d
	.long	3                       # 0x3
	.long	29                      # 0x1d
	.long	9                       # 0x9
	.long	35                      # 0x23
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967261              # 0xffffffdd
	.long	36                      # 0x24
	.long	4294967262              # 0xffffffde
	.long	32                      # 0x20
	.long	4294967270              # 0xffffffe6
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	44                      # 0x2c
	.long	4294967264              # 0xffffffe0
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	34                      # 0x22
	.long	4294967281              # 0xfffffff1
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	33                      # 0x21
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	0                       # 0x0
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	35                      # 0x23
	.long	13                      # 0xd
	.long	58                      # 0x3a
	.long	29                      # 0x1d
	.long	4294967293              # 0xfffffffd
	.long	26                      # 0x1a
	.long	0                       # 0x0
	.long	22                      # 0x16
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	31                      # 0x1f
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967293              # 0xfffffffd
	.long	34                      # 0x22
	.long	3                       # 0x3
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	34                      # 0x22
	.long	5                       # 0x5
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	34                      # 0x22
	.long	12                      # 0xc
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	30                      # 0x1e
	.long	29                      # 0x1d
	.long	34                      # 0x22
	.long	26                      # 0x1a
	.long	29                      # 0x1d
	.long	39                      # 0x27
	.long	19                      # 0x13
	.long	66                      # 0x42
	.size	INIT_FLD_LAST_I, 960

	.type	INIT_FLD_LAST_P,@object # @INIT_FLD_LAST_P
	.p2align	4
INIT_FLD_LAST_P:
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	21                      # 0x15
	.long	9                       # 0x9
	.long	23                      # 0x17
	.long	4294967294              # 0xfffffffe
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967275              # 0xffffffeb
	.long	39                      # 0x27
	.long	4294967273              # 0xffffffe9
	.long	42                      # 0x2a
	.long	4294967263              # 0xffffffdf
	.long	41                      # 0x29
	.long	4294967265              # 0xffffffe1
	.long	46                      # 0x2e
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	21                      # 0x15
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	45                      # 0x2d
	.long	4294967272              # 0xffffffe8
	.long	53                      # 0x35
	.long	4294967251              # 0xffffffd3
	.long	48                      # 0x30
	.long	4294967270              # 0xffffffe6
	.long	65                      # 0x41
	.long	4294967253              # 0xffffffd5
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	39                      # 0x27
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	9                       # 0x9
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	20                      # 0x14
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967282              # 0xfffffff2
	.long	82                      # 0x52
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967277              # 0xffffffed
	.long	97                      # 0x61
	.long	4294967261              # 0xffffffdd
	.long	125                     # 0x7d
	.long	21                      # 0x15
	.long	4294967283              # 0xfffffff3
	.long	33                      # 0x21
	.long	4294967282              # 0xfffffff2
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	46                      # 0x2e
	.long	4294967294              # 0xfffffffe
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	61                      # 0x3d
	.long	17                      # 0x11
	.long	55                      # 0x37
	.long	34                      # 0x22
	.long	42                      # 0x2a
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	27                      # 0x1b
	.long	6                       # 0x6
	.long	34                      # 0x22
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	32                      # 0x20
	.long	26                      # 0x1a
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	41                      # 0x29
	.long	26                      # 0x1a
	.long	44                      # 0x2c
	.long	23                      # 0x17
	.long	47                      # 0x2f
	.long	16                      # 0x10
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	8                       # 0x8
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	63                      # 0x3f
	.long	17                      # 0x11
	.long	65                      # 0x41
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	21                      # 0x15
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	23                      # 0x17
	.long	28                      # 0x1c
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	40                      # 0x28
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	42                      # 0x2a
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	22                      # 0x16
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	86                      # 0x56
	.long	19                      # 0x13
	.long	4294967290              # 0xfffffffa
	.long	18                      # 0x12
	.long	4294967290              # 0xfffffffa
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	26                      # 0x1a
	.long	4294967284              # 0xfffffff4
	.long	31                      # 0x1f
	.long	4294967280              # 0xfffffff0
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	33                      # 0x21
	.long	4294967274              # 0xffffffea
	.long	37                      # 0x25
	.long	4294967268              # 0xffffffe4
	.long	39                      # 0x27
	.long	4294967266              # 0xffffffe2
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	47                      # 0x2f
	.long	4294967254              # 0xffffffd6
	.long	45                      # 0x2d
	.long	4294967260              # 0xffffffdc
	.long	49                      # 0x31
	.long	4294967262              # 0xffffffde
	.long	41                      # 0x29
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	69                      # 0x45
	.long	4294967225              # 0xffffffb9
	.long	63                      # 0x3f
	.long	4294967233              # 0xffffffc1
	.long	66                      # 0x42
	.long	4294967232              # 0xffffffc0
	.long	77                      # 0x4d
	.long	4294967222              # 0xffffffb6
	.long	54                      # 0x36
	.long	4294967257              # 0xffffffd9
	.long	52                      # 0x34
	.long	4294967261              # 0xffffffdd
	.long	41                      # 0x29
	.long	4294967286              # 0xfffffff6
	.long	36                      # 0x24
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	14                      # 0xe
	.long	28                      # 0x1c
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	65                      # 0x41
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967263              # 0xffffffdf
	.long	39                      # 0x27
	.long	4294967260              # 0xffffffdc
	.long	40                      # 0x28
	.long	4294967259              # 0xffffffdb
	.long	38                      # 0x26
	.long	4294967266              # 0xffffffe2
	.long	46                      # 0x2e
	.long	4294967263              # 0xffffffdf
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	40                      # 0x28
	.long	4294967272              # 0xffffffe8
	.long	49                      # 0x31
	.long	4294967267              # 0xffffffe3
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	40                      # 0x28
	.long	4294967286              # 0xfffffff6
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967291              # 0xfffffffb
	.long	31                      # 0x1f
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	44                      # 0x2c
	.long	12                      # 0xc
	.long	48                      # 0x30
	.long	11                      # 0xb
	.long	49                      # 0x31
	.long	26                      # 0x1a
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	22                      # 0x16
	.long	27                      # 0x1b
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
	.long	24                      # 0x18
	.long	27                      # 0x1b
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	25                      # 0x19
	.long	39                      # 0x27
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	11                      # 0xb
	.long	83                      # 0x53
	.long	17                      # 0x11
	.long	4294967283              # 0xfffffff3
	.long	16                      # 0x10
	.long	4294967287              # 0xfffffff7
	.long	17                      # 0x11
	.long	4294967284              # 0xfffffff4
	.long	27                      # 0x1b
	.long	4294967275              # 0xffffffeb
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	41                      # 0x29
	.long	4294967256              # 0xffffffd8
	.long	42                      # 0x2a
	.long	4294967255              # 0xffffffd7
	.long	48                      # 0x30
	.long	4294967249              # 0xffffffd1
	.long	39                      # 0x27
	.long	4294967264              # 0xffffffe0
	.long	46                      # 0x2e
	.long	4294967256              # 0xffffffd8
	.long	52                      # 0x34
	.long	4294967245              # 0xffffffcd
	.long	46                      # 0x2e
	.long	4294967255              # 0xffffffd7
	.long	52                      # 0x34
	.long	4294967257              # 0xffffffd9
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	61                      # 0x3d
	.long	4294967241              # 0xffffffc9
	.long	56                      # 0x38
	.long	4294967250              # 0xffffffd2
	.long	62                      # 0x3e
	.long	4294967246              # 0xffffffce
	.long	81                      # 0x51
	.long	4294967229              # 0xffffffbd
	.long	45                      # 0x2d
	.long	4294967276              # 0xffffffec
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	28                      # 0x1c
	.long	15                      # 0xf
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	39                      # 0x27
	.long	1                       # 0x1
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	20                      # 0x14
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	79                      # 0x4f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967280              # 0xfffffff0
	.long	37                      # 0x25
	.long	4294967282              # 0xfffffff2
	.long	37                      # 0x25
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	29                      # 0x1d
	.long	15                      # 0xf
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	16                      # 0x10
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	28                      # 0x1c
	.long	33                      # 0x21
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	28                      # 0x1c
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	21                      # 0x15
	.long	62                      # 0x3e
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	36                      # 0x24
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	41                      # 0x29
	.long	22                      # 0x16
	.long	42                      # 0x2a
	.long	16                      # 0x10
	.long	60                      # 0x3c
	.long	15                      # 0xf
	.long	52                      # 0x34
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	3                       # 0x3
	.long	78                      # 0x4e
	.long	4294967280              # 0xfffffff0
	.long	123                     # 0x7b
	.long	21                      # 0x15
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	56                      # 0x38
	.long	25                      # 0x19
	.long	61                      # 0x3d
	.size	INIT_FLD_LAST_P, 2880

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
